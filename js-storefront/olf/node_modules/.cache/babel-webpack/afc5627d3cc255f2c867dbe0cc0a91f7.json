{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule, InjectionToken } from '@angular/core';\nimport * as i1 from '@spartacus/core';\nimport { PageMetaResolver, PageType, StateUtils, normalizeHttpError, B2BUserRole, AuthActions, SiteContextActions, GlobalMessageType, HttpErrorHandler, HttpResponseStatus } from '@spartacus/core';\nimport { defer, of, combineLatest, from, queueScheduler, using } from 'rxjs';\nimport { map, distinctUntilChanged, switchMap, shareReplay, catchError, groupBy, mergeMap, take, tap, withLatestFrom, filter, pluck, observeOn, pairwise, auditTime } from 'rxjs/operators';\nimport * as i1$1 from '@ngrx/effects';\nimport { ofType, Effect, EffectsModule } from '@ngrx/effects';\nimport * as i1$2 from '@ngrx/store';\nimport { combineReducers, StoreModule, createFeatureSelector, createSelector } from '@ngrx/store';\nimport { __decorate } from 'tslib';\nclass B2BUserAdapter {}\nlet B2BUserConnector = /*#__PURE__*/(() => {\n  class B2BUserConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    get(userId, orgUnitCustomerId) {\n      return this.adapter.load(userId, orgUnitCustomerId);\n    }\n    create(userId, orgCustomer) {\n      return this.adapter.create(userId, orgCustomer);\n    }\n    update(userId, orgCustomerId, orgCustomer) {\n      return this.adapter.update(userId, orgCustomerId, orgCustomer);\n    }\n    getList(userId, params) {\n      return this.adapter.loadList(userId, params);\n    }\n    getApprovers(userId, orgUnitCustomerId, params) {\n      return this.adapter.loadApprovers(userId, orgUnitCustomerId, params);\n    }\n    assignApprover(userId, orgCustomerId, approverId) {\n      return this.adapter.assignApprover(userId, orgCustomerId, approverId);\n    }\n    unassignApprover(userId, orgCustomerId, approverId) {\n      return this.adapter.unassignApprover(userId, orgCustomerId, approverId);\n    }\n    getPermissions(userId, orgUnitCustomerId, params) {\n      return this.adapter.loadPermissions(userId, orgUnitCustomerId, params);\n    }\n    assignPermission(userId, orgCustomerId, permissionId) {\n      return this.adapter.assignPermission(userId, orgCustomerId, permissionId);\n    }\n    unassignPermission(userId, orgCustomerId, permissionId) {\n      return this.adapter.unassignPermission(userId, orgCustomerId, permissionId);\n    }\n    getUserGroups(userId, orgUnitCustomerId, params) {\n      return this.adapter.loadUserGroups(userId, orgUnitCustomerId, params);\n    }\n    assignUserGroup(userId, orgCustomerId, userGroupId) {\n      return this.adapter.assignUserGroup(userId, orgCustomerId, userGroupId);\n    }\n    unassignUserGroup(userId, orgCustomerId, userGroupId) {\n      return this.adapter.unassignUserGroup(userId, orgCustomerId, userGroupId);\n    }\n  }\n  B2BUserConnector.ɵfac = function B2BUserConnector_Factory(t) {\n    return new (t || B2BUserConnector)(i0.ɵɵinject(B2BUserAdapter));\n  };\n  B2BUserConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: B2BUserConnector,\n    factory: B2BUserConnector.ɵfac,\n    providedIn: 'root'\n  });\n  return B2BUserConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass BudgetAdapter {}\nlet BudgetConnector = /*#__PURE__*/(() => {\n  class BudgetConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    get(userId, budgetCode) {\n      return this.adapter.load(userId, budgetCode);\n    }\n    getList(userId, params) {\n      return this.adapter.loadList(userId, params);\n    }\n    create(userId, budget) {\n      return this.adapter.create(userId, budget);\n    }\n    update(userId, budgetCode, budget) {\n      return this.adapter.update(userId, budgetCode, budget);\n    }\n  }\n  BudgetConnector.ɵfac = function BudgetConnector_Factory(t) {\n    return new (t || BudgetConnector)(i0.ɵɵinject(BudgetAdapter));\n  };\n  BudgetConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BudgetConnector,\n    factory: BudgetConnector.ɵfac,\n    providedIn: 'root'\n  });\n  return BudgetConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass CostCenterAdapter {}\nlet CostCenterConnector = /*#__PURE__*/(() => {\n  class CostCenterConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    get(userId, costCenterCode) {\n      return this.adapter.load(userId, costCenterCode);\n    }\n    getList(userId, params) {\n      return this.adapter.loadList(userId, params);\n    }\n    create(userId, costCenter) {\n      return this.adapter.create(userId, costCenter);\n    }\n    update(userId, costCenterCode, costCenter) {\n      return this.adapter.update(userId, costCenterCode, costCenter);\n    }\n    getBudgets(userId, costCenterCode, params) {\n      return this.adapter.loadBudgets(userId, costCenterCode, params);\n    }\n    assignBudget(userId, costCenterCode, budgetCode) {\n      return this.adapter.assignBudget(userId, costCenterCode, budgetCode);\n    }\n    unassignBudget(userId, costCenterCode, budgetCode) {\n      return this.adapter.unassignBudget(userId, costCenterCode, budgetCode);\n    }\n  }\n  CostCenterConnector.ɵfac = function CostCenterConnector_Factory(t) {\n    return new (t || CostCenterConnector)(i0.ɵɵinject(CostCenterAdapter));\n  };\n  CostCenterConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CostCenterConnector,\n    factory: CostCenterConnector.ɵfac,\n    providedIn: 'root'\n  });\n  return CostCenterConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass OrgUnitAdapter {}\nlet OrgUnitConnector = /*#__PURE__*/(() => {\n  class OrgUnitConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    get(userId, orgUnitId) {\n      return this.adapter.load(userId, orgUnitId);\n    }\n    create(userId, orgUnit) {\n      return this.adapter.create(userId, orgUnit);\n    }\n    update(userId, orgUnitId, orgUnit) {\n      return this.adapter.update(userId, orgUnitId, orgUnit);\n    }\n    getList(userId) {\n      return this.adapter.loadList(userId);\n    }\n    getApprovalProcesses(userId) {\n      return this.adapter.loadApprovalProcesses(userId);\n    }\n    getTree(userId) {\n      return this.adapter.loadTree(userId);\n    }\n    getUsers(userId, orgUnitId, roleId, params) {\n      return this.adapter.loadUsers(userId, orgUnitId, roleId, params);\n    }\n    assignRole(userId, orgCustomerId, roleId) {\n      return this.adapter.assignRole(userId, orgCustomerId, roleId);\n    }\n    unassignRole(userId, orgCustomerId, roleId) {\n      return this.adapter.unassignRole(userId, orgCustomerId, roleId);\n    }\n    assignApprover(userId, orgUnitId, orgCustomerId, roleId) {\n      return this.adapter.assignApprover(userId, orgUnitId, orgCustomerId, roleId);\n    }\n    unassignApprover(userId, orgUnitId, orgCustomerId, roleId) {\n      return this.adapter.unassignApprover(userId, orgUnitId, orgCustomerId, roleId);\n    }\n    getAddresses(userId, orgUnitId) {\n      return this.adapter.loadAddresses(userId, orgUnitId);\n    }\n    createAddress(userId, orgUnitId, address) {\n      return this.adapter.createAddress(userId, orgUnitId, address);\n    }\n    updateAddress(userId, orgUnitId, addressId, address) {\n      return this.adapter.updateAddress(userId, orgUnitId, addressId, address);\n    }\n    deleteAddress(userId, orgUnitId, addressId) {\n      return this.adapter.deleteAddress(userId, orgUnitId, addressId);\n    }\n  }\n  OrgUnitConnector.ɵfac = function OrgUnitConnector_Factory(t) {\n    return new (t || OrgUnitConnector)(i0.ɵɵinject(OrgUnitAdapter));\n  };\n  OrgUnitConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrgUnitConnector,\n    factory: OrgUnitConnector.ɵfac,\n    providedIn: 'root'\n  });\n  return OrgUnitConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass PermissionAdapter {}\nlet PermissionConnector = /*#__PURE__*/(() => {\n  class PermissionConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    get(userId, permissionCode) {\n      return this.adapter.load(userId, permissionCode);\n    }\n    getList(userId, params) {\n      return this.adapter.loadList(userId, params);\n    }\n    create(userId, permission) {\n      return this.adapter.create(userId, permission);\n    }\n    update(userId, permissionCode, permission) {\n      return this.adapter.update(userId, permissionCode, permission);\n    }\n    getTypes() {\n      return this.adapter.loadTypes();\n    }\n  }\n  PermissionConnector.ɵfac = function PermissionConnector_Factory(t) {\n    return new (t || PermissionConnector)(i0.ɵɵinject(PermissionAdapter));\n  };\n  PermissionConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PermissionConnector,\n    factory: PermissionConnector.ɵfac,\n    providedIn: 'root'\n  });\n  return PermissionConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass UserGroupAdapter {}\nlet UserGroupConnector = /*#__PURE__*/(() => {\n  class UserGroupConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    get(userId, userGroupId) {\n      return this.adapter.load(userId, userGroupId);\n    }\n    getList(userId, params) {\n      return this.adapter.loadList(userId, params);\n    }\n    getAvailableOrderApprovalPermissions(userId, userGroupId, params) {\n      return this.adapter.loadAvailableOrderApprovalPermissions(userId, userGroupId, params);\n    }\n    getAvailableOrgCustomers(userId, userGroupId, params) {\n      return this.adapter.loadAvailableOrgCustomers(userId, userGroupId, params);\n    }\n    create(userId, userGroup) {\n      return this.adapter.create(userId, userGroup);\n    }\n    delete(userId, userGroupId) {\n      return this.adapter.delete(userId, userGroupId);\n    }\n    update(userId, userGroupId, userGroup) {\n      return this.adapter.update(userId, userGroupId, userGroup);\n    }\n    assignMember(userId, userGroupId, orgCustomerId) {\n      return this.adapter.assignMember(userId, userGroupId, orgCustomerId);\n    }\n    assignOrderApprovalPermission(userId, userGroupId, orderApprovalPermissionCode) {\n      return this.adapter.assignOrderApprovalPermission(userId, userGroupId, orderApprovalPermissionCode);\n    }\n    unassignMember(userId, userGroupId, orgCustomerId) {\n      return this.adapter.unassignMember(userId, userGroupId, orgCustomerId);\n    }\n    unassignAllMembers(userId, userGroupId) {\n      return this.adapter.unassignAllMembers(userId, userGroupId);\n    }\n    unassignOrderApprovalPermission(userId, userGroupId, orderApprovalPermissionCode) {\n      return this.adapter.unassignOrderApprovalPermission(userId, userGroupId, orderApprovalPermissionCode);\n    }\n  }\n  UserGroupConnector.ɵfac = function UserGroupConnector_Factory(t) {\n    return new (t || UserGroupConnector)(i0.ɵɵinject(UserGroupAdapter));\n  };\n  UserGroupConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserGroupConnector,\n    factory: UserGroupConnector.ɵfac,\n    providedIn: 'root'\n  });\n  return UserGroupConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Resolves the page data for Organization Pages.\n *\n * Breadcrumbs are built in this implementation only.\n *\n * @property {string} ORGANIZATION_SEMANTIC_ROUTE the default root path for organization pages.\n * @property {string} ORGANIZATION_TRANSLATION_KEY the default i18n key for the organization breadcrumb label.\n */\nlet OrganizationPageMetaResolver = /*#__PURE__*/(() => {\n  class OrganizationPageMetaResolver extends PageMetaResolver {\n    constructor(contentPageMetaResolver, translation, semanticPath, routingService) {\n      super();\n      this.contentPageMetaResolver = contentPageMetaResolver;\n      this.translation = translation;\n      this.semanticPath = semanticPath;\n      this.routingService = routingService;\n      this.pageTemplate = 'CompanyPageTemplate';\n      this.pageType = PageType.CONTENT_PAGE;\n      /**\n       * Translation key for the breadcrumb of Organization home page\n       */\n      this.ORGANIZATION_TRANSLATION_KEY = 'organization.breadcrumb';\n      /**\n       * The semantic route of the organization landing page. It's used to recognize whether\n       * we are on this page. In such a case we avoid showing the breadcrumb for this page.\n       */\n      this.ORGANIZATION_SEMANTIC_ROUTE = 'organization';\n      /**\n       * Breadcrumb of the Organization page.\n       * It's empty when the current page is the Organization page.\n       */\n      this.organizationPageBreadcrumb$ = defer(() => this.routingService.getRouterState()).pipe(map(routerState => {\n        var _a;\n        return (_a = routerState === null || routerState === void 0 ? void 0 : routerState.state) === null || _a === void 0 ? void 0 : _a.semanticRoute;\n      }), distinctUntilChanged(), switchMap(semanticRoute => semanticRoute === this.ORGANIZATION_SEMANTIC_ROUTE ? of([]) : this.translation.translate(this.ORGANIZATION_TRANSLATION_KEY).pipe(map(label => [{\n        label,\n        link: this.semanticPath.get(this.ORGANIZATION_SEMANTIC_ROUTE)\n      }]))));\n      /**\n       * Breadcrumbs returned in the method #resolveBreadcrumbs.\n       */\n      this.breadcrumbs$ = combineLatest([this.organizationPageBreadcrumb$, defer(() => this.contentPageMetaResolver.resolveBreadcrumbs())]).pipe(map(([organizationPageBreadcrumb, breadcrumbs = []]) => {\n        const [home, ...restBreadcrumbs] = breadcrumbs;\n        return [home, ...organizationPageBreadcrumb, ...restBreadcrumbs];\n      }), shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n    }\n    resolveTitle() {\n      return this.contentPageMetaResolver.resolveTitle();\n    }\n    resolveDescription() {\n      return this.contentPageMetaResolver.resolveDescription();\n    }\n    resolveRobots() {\n      return this.contentPageMetaResolver.resolveRobots();\n    }\n    /**\n     * Returns list of breadcrumbs for:\n     * - the home page\n     * - the organization home page\n     * - the organization's child pages (i.e. cost center list)\n     * - sub-routes of the organization's child pages (i.e. cost center details, edit cost center, ...)\n     */\n    resolveBreadcrumbs() {\n      return this.breadcrumbs$;\n    }\n  }\n  OrganizationPageMetaResolver.ɵfac = function OrganizationPageMetaResolver_Factory(t) {\n    return new (t || OrganizationPageMetaResolver)(i0.ɵɵinject(i1.ContentPageMetaResolver), i0.ɵɵinject(i1.TranslationService), i0.ɵɵinject(i1.SemanticPathService), i0.ɵɵinject(i1.RoutingService));\n  };\n  OrganizationPageMetaResolver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrganizationPageMetaResolver,\n    factory: OrganizationPageMetaResolver.ɵfac,\n    providedIn: 'root'\n  });\n  return OrganizationPageMetaResolver;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrganizationPageMetaModule = /*#__PURE__*/(() => {\n  class OrganizationPageMetaModule {}\n  OrganizationPageMetaModule.ɵfac = function OrganizationPageMetaModule_Factory(t) {\n    return new (t || OrganizationPageMetaModule)();\n  };\n  OrganizationPageMetaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: OrganizationPageMetaModule\n  });\n  OrganizationPageMetaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: PageMetaResolver,\n      useExisting: OrganizationPageMetaResolver,\n      multi: true\n    }]\n  });\n  return OrganizationPageMetaModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst ORGANIZATION_FEATURE = 'organization';\nconst BUDGET_FEATURE = 'budget';\nconst BUDGET_ENTITIES = 'budget-entities';\nconst BUDGET_LIST = 'budget-list';\nconst COST_CENTER_FEATURE = 'costCenter';\nconst COST_CENTER_ENTITIES = 'costCenter-entities';\nconst COST_CENTER_LIST = 'costCenter-list';\nconst COST_CENTER_ASSIGNED_BUDGETS = 'costCenter-assigned-budgets';\nconst PERMISSION_FEATURE = 'permission';\nconst PERMISSION_ENTITIES = 'permission-entities';\nconst PERMISSION_LIST = 'permission-list';\nconst PERMISSION_TYPES = 'permission-types';\nconst PERMISSION_TYPES_LIST = 'permission-types-list';\nconst ORG_UNIT_FEATURE = 'orgUnit';\nconst ORG_UNIT_NODE_ENTITIES = 'orgUnitNode-entities';\nconst ORG_UNIT_NODE_LIST = 'orgUnitNode-list';\nconst ORG_UNIT_ENTITIES = 'orgUnit-entities';\nconst ORG_UNIT_TREE_ENTITY = 'orgUnit-tree';\nconst ORG_UNIT_APPROVAL_PROCESSES_ENTITIES = 'orgUnit-approval-processes';\nconst ORG_UNIT_ASSIGNED_USERS = 'orgUnit-assigned-users';\nconst ORG_UNIT_TREE = 'tree';\nconst ORG_UNIT_APPROVAL_PROCESSES = 'approvalProcesses';\nconst ORG_UNIT_NODES = 'availableOrgUnitNodes';\nconst B2B_USER_FEATURE = 'b2bUser';\nconst B2B_USER_ENTITIES = 'b2bUser-entities';\nconst USER_LIST = 'b2bUser-list';\nconst B2B_USER_APPROVERS = 'b2bUser-approvers';\nconst B2B_USER_PERMISSIONS = 'b2bUser-permissions';\nconst B2B_USER_USER_GROUPS = 'b2bUser-user-groups';\nconst USER_GROUP_FEATURE = 'userGroup';\nconst USER_GROUP_ENTITIES = 'userGroup-entities';\nconst USER_GROUP_LIST = 'userGroup-list';\nconst USER_GROUP_PERMISSIONS = 'userGroup-available-order-approval-permissions';\nconst USER_GROUP_AVAILABLE_CUSTOMERS = 'userGroup-available-org-customers';\nconst ADDRESS_ENTITIES = 'addresses-entities';\nconst ADDRESS_LIST = 'addresses-list';\nconst LOAD_BUDGET = '[Budget] Load Budget Data';\nconst LOAD_BUDGET_FAIL = '[Budget] Load Budget Data Fail';\nconst LOAD_BUDGET_SUCCESS = '[Budget] Load Budget Data Success';\nconst LOAD_BUDGETS = '[Budget] Load Budgets';\nconst LOAD_BUDGETS_FAIL = '[Budget] Load Budgets Fail';\nconst LOAD_BUDGETS_SUCCESS = '[Budget] Load Budgets Success';\nconst CREATE_BUDGET = '[Budget] Create Budget';\nconst CREATE_BUDGET_FAIL = '[Budget] Create Budget Fail';\nconst CREATE_BUDGET_SUCCESS = '[Budget] Create Budget Success';\nconst UPDATE_BUDGET = '[Budget] Update Budget';\nconst UPDATE_BUDGET_FAIL = '[Budget] Update Budget Fail';\nconst UPDATE_BUDGET_SUCCESS = '[Budget] Update Budget Success';\nclass LoadBudget extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.budgetCode);\n    this.payload = payload;\n    this.type = LOAD_BUDGET;\n  }\n}\nclass LoadBudgetFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.budgetCode, payload.error);\n    this.payload = payload;\n    this.type = LOAD_BUDGET_FAIL;\n  }\n}\nclass LoadBudgetSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, Array.isArray(payload) ? payload.map(budget => budget === null || budget === void 0 ? void 0 : budget.code) : payload === null || payload === void 0 ? void 0 : payload.code);\n    this.payload = payload;\n    this.type = LOAD_BUDGET_SUCCESS;\n  }\n}\nclass LoadBudgets extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(BUDGET_LIST, StateUtils.serializeSearchConfig(payload.params));\n    this.payload = payload;\n    this.type = LOAD_BUDGETS;\n  }\n}\nclass LoadBudgetsFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(BUDGET_LIST, StateUtils.serializeSearchConfig(payload.params), payload.error);\n    this.payload = payload;\n    this.type = LOAD_BUDGETS_FAIL;\n  }\n}\nclass LoadBudgetsSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(BUDGET_LIST, StateUtils.serializeSearchConfig(payload.params));\n    this.payload = payload;\n    this.type = LOAD_BUDGETS_SUCCESS;\n  }\n}\nclass CreateBudget extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.budget.code);\n    this.payload = payload;\n    this.type = CREATE_BUDGET;\n  }\n}\nclass CreateBudgetFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.budgetCode, payload.error);\n    this.payload = payload;\n    this.type = CREATE_BUDGET_FAIL;\n  }\n}\nclass CreateBudgetSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.code, payload);\n    this.payload = payload;\n    this.type = CREATE_BUDGET_SUCCESS;\n  }\n}\nclass UpdateBudget extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.budget.code);\n    this.payload = payload;\n    this.type = UPDATE_BUDGET;\n  }\n}\nclass UpdateBudgetFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.budgetCode, payload.error);\n    this.payload = payload;\n    this.type = UPDATE_BUDGET_FAIL;\n  }\n}\nclass UpdateBudgetSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.code, payload);\n    this.payload = payload;\n    this.type = UPDATE_BUDGET_SUCCESS;\n  }\n}\nvar budget_action = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LOAD_BUDGET: LOAD_BUDGET,\n  LOAD_BUDGET_FAIL: LOAD_BUDGET_FAIL,\n  LOAD_BUDGET_SUCCESS: LOAD_BUDGET_SUCCESS,\n  LOAD_BUDGETS: LOAD_BUDGETS,\n  LOAD_BUDGETS_FAIL: LOAD_BUDGETS_FAIL,\n  LOAD_BUDGETS_SUCCESS: LOAD_BUDGETS_SUCCESS,\n  CREATE_BUDGET: CREATE_BUDGET,\n  CREATE_BUDGET_FAIL: CREATE_BUDGET_FAIL,\n  CREATE_BUDGET_SUCCESS: CREATE_BUDGET_SUCCESS,\n  UPDATE_BUDGET: UPDATE_BUDGET,\n  UPDATE_BUDGET_FAIL: UPDATE_BUDGET_FAIL,\n  UPDATE_BUDGET_SUCCESS: UPDATE_BUDGET_SUCCESS,\n  LoadBudget: LoadBudget,\n  LoadBudgetFail: LoadBudgetFail,\n  LoadBudgetSuccess: LoadBudgetSuccess,\n  LoadBudgets: LoadBudgets,\n  LoadBudgetsFail: LoadBudgetsFail,\n  LoadBudgetsSuccess: LoadBudgetsSuccess,\n  CreateBudget: CreateBudget,\n  CreateBudgetFail: CreateBudgetFail,\n  CreateBudgetSuccess: CreateBudgetSuccess,\n  UpdateBudget: UpdateBudget,\n  UpdateBudgetFail: UpdateBudgetFail,\n  UpdateBudgetSuccess: UpdateBudgetSuccess\n});\nconst LOAD_ORG_UNIT = '[B2BUnit] Load B2BUnit Data';\nconst LOAD_ORG_UNIT_FAIL = '[B2BUnit] Load B2BUnit Data Fail';\nconst LOAD_ORG_UNIT_SUCCESS = '[B2BUnit] Load B2BUnit Data Success';\nconst LOAD_UNIT_NODE = '[B2BUnitNode] Load B2BUnitNode Data';\nconst LOAD_UNIT_NODE_FAIL = '[B2BUnitNode] Load B2BUnitNode Data Fail';\nconst LOAD_UNIT_NODE_SUCCESS = '[B2BUnitNode] Load B2BUnitNode Data Success';\nconst LOAD_UNIT_NODES = '[B2BUnitNode] Load B2BUnitNodes';\nconst LOAD_UNIT_NODES_FAIL = '[B2BUnitNode] Load B2BUnitNodes Fail';\nconst LOAD_UNIT_NODES_SUCCESS = '[B2BUnitNode] Load B2BUnitNodes Success';\nconst CREATE_ORG_UNIT = '[B2BUnit] Create B2BUnitNode';\nconst CREATE_ORG_UNIT_FAIL = '[B2BUnit] Create B2BUnitNode Fail';\nconst CREATE_ORG_UNIT_SUCCESS = '[B2BUnit] Create B2BUnitNode Success';\nconst UPDATE_ORG_UNIT = '[B2BUnit] Update B2BUnitNode';\nconst UPDATE_ORG_UNIT_FAIL = '[B2BUnit] Update B2BUnitNode Fail';\nconst UPDATE_ORG_UNIT_SUCCESS = '[B2BUnit] Update B2BUnitNode Success';\nconst LOAD_UNIT_TREE = '[B2BUnitNode] Load Tree';\nconst LOAD_UNIT_TREE_FAIL = '[B2BUnitNode] Load Tree Fail';\nconst LOAD_UNIT_TREE_SUCCESS = '[B2BUnitNode] Load Tree Success';\nconst LOAD_APPROVAL_PROCESSES = '[B2BApprovalProcess] Load Approval Processes';\nconst LOAD_APPROVAL_PROCESSES_FAIL = '[B2BApprovalProcess] Load Approval Processes Fail';\nconst LOAD_APPROVAL_PROCESSES_SUCCESS = '[B2BApprovalProcess] Load Approval Processes Success';\nconst LOAD_ASSIGNED_USERS = '[B2BUnit] Load Users';\nconst LOAD_ASSIGNED_USERS_SUCCESS = '[B2BUnit] Load Users success';\nconst LOAD_ASSIGNED_USERS_FAIL = '[B2BUnit] Load Users fail';\nconst ASSIGN_ROLE = '[B2BUnit] Assign Role';\nconst ASSIGN_ROLE_SUCCESS = '[B2BUnit] Assign Role success';\nconst ASSIGN_ROLE_FAIL = '[B2BUnit] Assign Role fail';\nconst UNASSIGN_ROLE = '[B2BUnit] Unassign Role';\nconst UNASSIGN_ROLE_SUCCESS = '[B2BUnit] Unassign Role success';\nconst UNASSIGN_ROLE_FAIL = '[B2BUnit] Unassign Role fail';\nconst ASSIGN_APPROVER = '[B2BUnit] Assign Approver';\nconst ASSIGN_APPROVER_SUCCESS = '[B2BUnit] Assign Approver success';\nconst ASSIGN_APPROVER_FAIL = '[B2BUnit] Assign Approver fail';\nconst UNASSIGN_APPROVER = '[B2BUnit] Unassign Approver';\nconst UNASSIGN_APPROVER_SUCCESS = '[B2BUnit] Unassign Approver success';\nconst UNASSIGN_APPROVER_FAIL = '[B2BUnit] Unassign Approver fail';\nconst CREATE_ADDRESS = '[B2BUnit] Create address';\nconst CREATE_ADDRESS_SUCCESS = '[B2BUnit] Create address success';\nconst CREATE_ADDRESS_FAIL = '[B2BUnit] Create address fail';\nconst UPDATE_ADDRESS = '[B2BUnit] Update address';\nconst UPDATE_ADDRESS_SUCCESS = '[B2BUnit] Update address success';\nconst UPDATE_ADDRESS_FAIL = '[B2BUnit] Update address fail';\nconst DELETE_ADDRESS = '[B2BUnit] Delete address';\nconst DELETE_ADDRESS_SUCCESS = '[B2BUnit] Delete address success';\nconst DELETE_ADDRESS_FAIL = '[B2BUnit] Delete address fail';\nconst LOAD_ADDRESS_SUCCESS = '[B2BUnit] Load address success';\nconst LOAD_ADDRESSES = '[B2BUnit] Load addresses';\nconst LOAD_ADDRESSES_SUCCESS = '[B2BUnit] Load addresses success';\nconst LOAD_ADDRESSES_FAIL = '[B2BUnit] Load addresses fail';\nconst CLEAR_ASSIGNED_USERS = '[B2BUnit] Clear Assigned Users';\nclass LoadOrgUnit extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(ORG_UNIT_ENTITIES, payload.orgUnitId);\n    this.payload = payload;\n    this.type = LOAD_ORG_UNIT;\n  }\n}\nclass LoadOrgUnitFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(ORG_UNIT_ENTITIES, payload.orgUnitId, payload.error);\n    this.payload = payload;\n    this.type = LOAD_ORG_UNIT_FAIL;\n  }\n}\nclass LoadOrgUnitSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(ORG_UNIT_ENTITIES, Array.isArray(payload) ? payload.map(orgUnit => orgUnit === null || orgUnit === void 0 ? void 0 : orgUnit.uid) : payload === null || payload === void 0 ? void 0 : payload.uid);\n    this.payload = payload;\n    this.type = LOAD_ORG_UNIT_SUCCESS;\n  }\n}\nclass LoadOrgUnitNodes extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(ORG_UNIT_NODE_LIST, ORG_UNIT_NODES);\n    this.payload = payload;\n    this.type = LOAD_UNIT_NODES;\n  }\n}\nclass LoadOrgUnitNodesFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(ORG_UNIT_NODE_LIST, ORG_UNIT_NODES, payload.error);\n    this.payload = payload;\n    this.type = LOAD_UNIT_NODES_FAIL;\n  }\n}\nclass LoadOrgUnitNodesSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(ORG_UNIT_NODE_LIST, ORG_UNIT_NODES);\n    this.payload = payload;\n    this.type = LOAD_UNIT_NODES_SUCCESS;\n  }\n}\nclass CreateUnit extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(ORG_UNIT_ENTITIES, payload.unit.uid);\n    this.payload = payload;\n    this.type = CREATE_ORG_UNIT;\n  }\n}\nclass CreateUnitFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(ORG_UNIT_ENTITIES, payload.unitCode, payload.error);\n    this.payload = payload;\n    this.type = CREATE_ORG_UNIT_FAIL;\n  }\n}\nclass CreateUnitSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(ORG_UNIT_ENTITIES, payload.uid, payload);\n    this.payload = payload;\n    this.type = CREATE_ORG_UNIT_SUCCESS;\n  }\n}\nclass UpdateUnit extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(ORG_UNIT_ENTITIES, payload.unit.uid);\n    this.payload = payload;\n    this.type = UPDATE_ORG_UNIT;\n  }\n}\nclass UpdateUnitFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(ORG_UNIT_ENTITIES, payload.unitCode, payload.error);\n    this.payload = payload;\n    this.type = UPDATE_ORG_UNIT_FAIL;\n  }\n}\nclass UpdateUnitSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(ORG_UNIT_ENTITIES, payload.uid, payload);\n    this.payload = payload;\n    this.type = UPDATE_ORG_UNIT_SUCCESS;\n  }\n}\nclass LoadTree extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE);\n    this.payload = payload;\n    this.type = LOAD_UNIT_TREE;\n  }\n}\nclass LoadTreeFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE, payload.error);\n    this.payload = payload;\n    this.type = LOAD_UNIT_TREE_FAIL;\n  }\n}\nclass LoadTreeSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE);\n    this.payload = payload;\n    this.type = LOAD_UNIT_TREE_SUCCESS;\n  }\n}\nclass LoadApprovalProcesses extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES);\n    this.payload = payload;\n    this.type = LOAD_APPROVAL_PROCESSES;\n  }\n}\nclass LoadApprovalProcessesFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES, payload.error);\n    this.payload = payload;\n    this.type = LOAD_APPROVAL_PROCESSES_FAIL;\n  }\n}\nclass LoadApprovalProcessesSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES);\n    this.payload = payload;\n    this.type = LOAD_APPROVAL_PROCESSES_SUCCESS;\n  }\n}\nclass LoadAssignedUsers extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(ORG_UNIT_ASSIGNED_USERS, StateUtils.serializeSearchConfig(payload.params, `${payload.orgUnitId},${payload.roleId}`));\n    this.payload = payload;\n    this.type = LOAD_ASSIGNED_USERS;\n  }\n}\nclass ClearAssignedUsers extends StateUtils.EntityRemoveAction {\n  constructor(payload) {\n    super(ORG_UNIT_ASSIGNED_USERS, StateUtils.serializeSearchConfig(payload.params, `${payload.orgUnitId},${payload.roleId}`));\n    this.payload = payload;\n    this.type = CLEAR_ASSIGNED_USERS;\n  }\n}\nclass LoadAssignedUsersFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(ORG_UNIT_ASSIGNED_USERS, StateUtils.serializeSearchConfig(payload.params, `${payload.orgUnitId},${payload.roleId}`), payload.error);\n    this.payload = payload;\n    this.type = LOAD_ASSIGNED_USERS_FAIL;\n  }\n}\nclass LoadAssignedUsersSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(ORG_UNIT_ASSIGNED_USERS, StateUtils.serializeSearchConfig(payload.params, `${payload.orgUnitId},${payload.roleId}`));\n    this.payload = payload;\n    this.type = LOAD_ASSIGNED_USERS_SUCCESS;\n  }\n}\nclass AssignRole extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId);\n    this.payload = payload;\n    this.type = ASSIGN_ROLE;\n  }\n}\nclass AssignRoleFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n    this.payload = payload;\n    this.type = ASSIGN_ROLE_FAIL;\n  }\n}\nclass AssignRoleSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.uid, payload);\n    this.payload = payload;\n    this.type = ASSIGN_ROLE_SUCCESS;\n  }\n}\nclass UnassignRole extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId);\n    this.payload = payload;\n    this.type = UNASSIGN_ROLE;\n  }\n}\nclass UnassignRoleFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n    this.payload = payload;\n    this.type = UNASSIGN_ROLE_FAIL;\n  }\n}\nclass UnassignRoleSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.uid, payload);\n    this.payload = payload;\n    this.type = UNASSIGN_ROLE_SUCCESS;\n  }\n}\nclass AssignApprover extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId);\n    this.payload = payload;\n    this.type = ASSIGN_APPROVER;\n  }\n}\nclass AssignApproverFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n    this.payload = payload;\n    this.type = ASSIGN_APPROVER_FAIL;\n  }\n}\nclass AssignApproverSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.uid, payload);\n    this.payload = payload;\n    this.type = ASSIGN_APPROVER_SUCCESS;\n  }\n}\nclass UnassignApprover extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId);\n    this.payload = payload;\n    this.type = UNASSIGN_APPROVER;\n  }\n}\nclass UnassignApproverFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n    this.payload = payload;\n    this.type = UNASSIGN_APPROVER_FAIL;\n  }\n}\nclass UnassignApproverSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.uid, payload);\n    this.payload = payload;\n    this.type = UNASSIGN_APPROVER_SUCCESS;\n  }\n}\nclass CreateAddress extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(ADDRESS_ENTITIES, payload.address.id);\n    this.payload = payload;\n    this.type = CREATE_ADDRESS;\n  }\n}\nclass CreateAddressFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(ADDRESS_ENTITIES, payload.addressId, payload.error);\n    this.payload = payload;\n    this.type = CREATE_ADDRESS_FAIL;\n  }\n}\nclass CreateAddressSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(ADDRESS_ENTITIES, payload.id, payload);\n    this.payload = payload;\n    this.type = CREATE_ADDRESS_SUCCESS;\n  }\n}\nclass UpdateAddress extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(ADDRESS_ENTITIES, payload.address.id);\n    this.payload = payload;\n    this.type = UPDATE_ADDRESS;\n  }\n}\nclass UpdateAddressFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(ADDRESS_ENTITIES, payload.addressId, payload.error);\n    this.payload = payload;\n    this.type = UPDATE_ADDRESS_FAIL;\n  }\n}\nclass UpdateAddressSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(ADDRESS_ENTITIES, payload.id, payload);\n    this.payload = payload;\n    this.type = UPDATE_ADDRESS_SUCCESS;\n  }\n}\nclass DeleteAddress extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(ADDRESS_ENTITIES, payload.addressId);\n    this.payload = payload;\n    this.type = DELETE_ADDRESS;\n  }\n}\nclass DeleteAddressFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(ADDRESS_ENTITIES, payload.addressId, payload.error);\n    this.payload = payload;\n    this.type = DELETE_ADDRESS_FAIL;\n  }\n}\nclass DeleteAddressSuccess extends StateUtils.EntityRemoveAction {\n  constructor(payload) {\n    super(ADDRESS_ENTITIES, payload.id);\n    this.payload = payload;\n    this.type = DELETE_ADDRESS_SUCCESS;\n  }\n}\nclass LoadAddressSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(ADDRESS_ENTITIES, Array.isArray(payload) ? payload.map(address => address === null || address === void 0 ? void 0 : address.id) : payload === null || payload === void 0 ? void 0 : payload.id);\n    this.payload = payload;\n    this.type = LOAD_ADDRESS_SUCCESS;\n  }\n}\nclass LoadAddresses extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(ADDRESS_LIST, payload.orgUnitId);\n    this.payload = payload;\n    this.type = LOAD_ADDRESSES;\n  }\n}\nclass LoadAddressesFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(ADDRESS_LIST, payload.orgUnitId, payload.error);\n    this.payload = payload;\n    this.type = LOAD_ADDRESSES_FAIL;\n  }\n}\nclass LoadAddressesSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(ADDRESS_LIST, payload.orgUnitId);\n    this.payload = payload;\n    this.type = LOAD_ADDRESSES_SUCCESS;\n  }\n}\nvar orgUnit_action = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LOAD_ORG_UNIT: LOAD_ORG_UNIT,\n  LOAD_ORG_UNIT_FAIL: LOAD_ORG_UNIT_FAIL,\n  LOAD_ORG_UNIT_SUCCESS: LOAD_ORG_UNIT_SUCCESS,\n  LOAD_UNIT_NODE: LOAD_UNIT_NODE,\n  LOAD_UNIT_NODE_FAIL: LOAD_UNIT_NODE_FAIL,\n  LOAD_UNIT_NODE_SUCCESS: LOAD_UNIT_NODE_SUCCESS,\n  LOAD_UNIT_NODES: LOAD_UNIT_NODES,\n  LOAD_UNIT_NODES_FAIL: LOAD_UNIT_NODES_FAIL,\n  LOAD_UNIT_NODES_SUCCESS: LOAD_UNIT_NODES_SUCCESS,\n  CREATE_ORG_UNIT: CREATE_ORG_UNIT,\n  CREATE_ORG_UNIT_FAIL: CREATE_ORG_UNIT_FAIL,\n  CREATE_ORG_UNIT_SUCCESS: CREATE_ORG_UNIT_SUCCESS,\n  UPDATE_ORG_UNIT: UPDATE_ORG_UNIT,\n  UPDATE_ORG_UNIT_FAIL: UPDATE_ORG_UNIT_FAIL,\n  UPDATE_ORG_UNIT_SUCCESS: UPDATE_ORG_UNIT_SUCCESS,\n  LOAD_UNIT_TREE: LOAD_UNIT_TREE,\n  LOAD_UNIT_TREE_FAIL: LOAD_UNIT_TREE_FAIL,\n  LOAD_UNIT_TREE_SUCCESS: LOAD_UNIT_TREE_SUCCESS,\n  LOAD_APPROVAL_PROCESSES: LOAD_APPROVAL_PROCESSES,\n  LOAD_APPROVAL_PROCESSES_FAIL: LOAD_APPROVAL_PROCESSES_FAIL,\n  LOAD_APPROVAL_PROCESSES_SUCCESS: LOAD_APPROVAL_PROCESSES_SUCCESS,\n  LOAD_ASSIGNED_USERS: LOAD_ASSIGNED_USERS,\n  LOAD_ASSIGNED_USERS_SUCCESS: LOAD_ASSIGNED_USERS_SUCCESS,\n  LOAD_ASSIGNED_USERS_FAIL: LOAD_ASSIGNED_USERS_FAIL,\n  ASSIGN_ROLE: ASSIGN_ROLE,\n  ASSIGN_ROLE_SUCCESS: ASSIGN_ROLE_SUCCESS,\n  ASSIGN_ROLE_FAIL: ASSIGN_ROLE_FAIL,\n  UNASSIGN_ROLE: UNASSIGN_ROLE,\n  UNASSIGN_ROLE_SUCCESS: UNASSIGN_ROLE_SUCCESS,\n  UNASSIGN_ROLE_FAIL: UNASSIGN_ROLE_FAIL,\n  ASSIGN_APPROVER: ASSIGN_APPROVER,\n  ASSIGN_APPROVER_SUCCESS: ASSIGN_APPROVER_SUCCESS,\n  ASSIGN_APPROVER_FAIL: ASSIGN_APPROVER_FAIL,\n  UNASSIGN_APPROVER: UNASSIGN_APPROVER,\n  UNASSIGN_APPROVER_SUCCESS: UNASSIGN_APPROVER_SUCCESS,\n  UNASSIGN_APPROVER_FAIL: UNASSIGN_APPROVER_FAIL,\n  CREATE_ADDRESS: CREATE_ADDRESS,\n  CREATE_ADDRESS_SUCCESS: CREATE_ADDRESS_SUCCESS,\n  CREATE_ADDRESS_FAIL: CREATE_ADDRESS_FAIL,\n  UPDATE_ADDRESS: UPDATE_ADDRESS,\n  UPDATE_ADDRESS_SUCCESS: UPDATE_ADDRESS_SUCCESS,\n  UPDATE_ADDRESS_FAIL: UPDATE_ADDRESS_FAIL,\n  DELETE_ADDRESS: DELETE_ADDRESS,\n  DELETE_ADDRESS_SUCCESS: DELETE_ADDRESS_SUCCESS,\n  DELETE_ADDRESS_FAIL: DELETE_ADDRESS_FAIL,\n  LOAD_ADDRESS_SUCCESS: LOAD_ADDRESS_SUCCESS,\n  LOAD_ADDRESSES: LOAD_ADDRESSES,\n  LOAD_ADDRESSES_SUCCESS: LOAD_ADDRESSES_SUCCESS,\n  LOAD_ADDRESSES_FAIL: LOAD_ADDRESSES_FAIL,\n  CLEAR_ASSIGNED_USERS: CLEAR_ASSIGNED_USERS,\n  LoadOrgUnit: LoadOrgUnit,\n  LoadOrgUnitFail: LoadOrgUnitFail,\n  LoadOrgUnitSuccess: LoadOrgUnitSuccess,\n  LoadOrgUnitNodes: LoadOrgUnitNodes,\n  LoadOrgUnitNodesFail: LoadOrgUnitNodesFail,\n  LoadOrgUnitNodesSuccess: LoadOrgUnitNodesSuccess,\n  CreateUnit: CreateUnit,\n  CreateUnitFail: CreateUnitFail,\n  CreateUnitSuccess: CreateUnitSuccess,\n  UpdateUnit: UpdateUnit,\n  UpdateUnitFail: UpdateUnitFail,\n  UpdateUnitSuccess: UpdateUnitSuccess,\n  LoadTree: LoadTree,\n  LoadTreeFail: LoadTreeFail,\n  LoadTreeSuccess: LoadTreeSuccess,\n  LoadApprovalProcesses: LoadApprovalProcesses,\n  LoadApprovalProcessesFail: LoadApprovalProcessesFail,\n  LoadApprovalProcessesSuccess: LoadApprovalProcessesSuccess,\n  LoadAssignedUsers: LoadAssignedUsers,\n  ClearAssignedUsers: ClearAssignedUsers,\n  LoadAssignedUsersFail: LoadAssignedUsersFail,\n  LoadAssignedUsersSuccess: LoadAssignedUsersSuccess,\n  AssignRole: AssignRole,\n  AssignRoleFail: AssignRoleFail,\n  AssignRoleSuccess: AssignRoleSuccess,\n  UnassignRole: UnassignRole,\n  UnassignRoleFail: UnassignRoleFail,\n  UnassignRoleSuccess: UnassignRoleSuccess,\n  AssignApprover: AssignApprover,\n  AssignApproverFail: AssignApproverFail,\n  AssignApproverSuccess: AssignApproverSuccess,\n  UnassignApprover: UnassignApprover,\n  UnassignApproverFail: UnassignApproverFail,\n  UnassignApproverSuccess: UnassignApproverSuccess,\n  CreateAddress: CreateAddress,\n  CreateAddressFail: CreateAddressFail,\n  CreateAddressSuccess: CreateAddressSuccess,\n  UpdateAddress: UpdateAddress,\n  UpdateAddressFail: UpdateAddressFail,\n  UpdateAddressSuccess: UpdateAddressSuccess,\n  DeleteAddress: DeleteAddress,\n  DeleteAddressFail: DeleteAddressFail,\n  DeleteAddressSuccess: DeleteAddressSuccess,\n  LoadAddressSuccess: LoadAddressSuccess,\n  LoadAddresses: LoadAddresses,\n  LoadAddressesFail: LoadAddressesFail,\n  LoadAddressesSuccess: LoadAddressesSuccess\n});\nconst LOAD_USER_GROUP = '[UserGroup] Load UserGroup Data';\nconst LOAD_USER_GROUP_FAIL = '[UserGroup] Load UserGroup Data Fail';\nconst LOAD_USER_GROUP_SUCCESS = '[UserGroup] Load UserGroup Data Success';\nconst LOAD_USER_GROUPS = '[UserGroup] Load UserGroups';\nconst LOAD_USER_GROUPS_FAIL = '[UserGroup] Load UserGroups Fail';\nconst LOAD_USER_GROUPS_SUCCESS = '[UserGroup] Load UserGroups Success';\nconst LOAD_USER_GROUP_PERMISSIONS = '[UserGroup] Load Permissions Data';\nconst LOAD_USER_GROUP_PERMISSIONS_FAIL = '[UserGroup] Load Permissions Data Fail';\nconst LOAD_USER_GROUP_PERMISSIONS_SUCCESS = '[UserGroup] Load Permissions Data Success';\nconst LOAD_USER_GROUP_AVAILABLE_CUSTOMERS = '[UserGroup] Load Customers Data';\nconst LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_FAIL = '[UserGroup] Load Customers Data Fail';\nconst LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS = '[UserGroup] Load Customers Data Success';\nconst CREATE_USER_GROUP = '[UserGroup] Create UserGroup';\nconst CREATE_USER_GROUP_FAIL = '[UserGroup] Create UserGroup Fail';\nconst CREATE_USER_GROUP_SUCCESS = '[UserGroup] Create UserGroup Success';\nconst USER_GROUP_ASSIGN_MEMBER = '[UserGroup] Assign Member';\nconst USER_GROUP_ASSIGN_MEMBER_FAIL = '[UserGroup] Assign Member Fail';\nconst USER_GROUP_ASSIGN_MEMBER_SUCCESS = '[UserGroup] Assign Member Success';\nconst USER_GROUP_ASSIGN_PERMISSION = '[UserGroup] Assign Permissions';\nconst USER_GROUP_ASSIGN_PERMISSION_FAIL = '[UserGroup] Assign Permissions Fail';\nconst USER_GROUP_ASSIGN_PERMISSION_SUCCESS = '[UserGroup] Assign Permissions Success';\nconst UPDATE_USER_GROUP = '[UserGroup] Update UserGroup';\nconst UPDATE_USER_GROUP_FAIL = '[UserGroup] Update UserGroup Fail';\nconst UPDATE_USER_GROUP_SUCCESS = '[UserGroup] Update UserGroup Success';\nconst DELETE_USER_GROUP = '[UserGroup] Delete UserGroup';\nconst DELETE_USER_GROUP_FAIL = '[UserGroup] Delete UserGroup Fail';\nconst DELETE_USER_GROUP_SUCCESS = '[UserGroup] Delete UserGroup Success';\nconst USER_GROUP_UNASSIGN_ALL_MEMBERS = '[UserGroup] Unassign Members';\nconst USER_GROUP_UNASSIGN_ALL_MEMBERS_FAIL = '[UserGroup] Unassign Members Fail';\nconst USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS = '[UserGroup] Unassign Members Success';\nconst USER_GROUP_UNASSIGN_MEMBER = '[UserGroup] Unassign Member';\nconst USER_GROUP_UNASSIGN_MEMBER_FAIL = '[UserGroup] Unassign Member Fail';\nconst USER_GROUP_UNASSIGN_MEMBER_SUCCESS = '[UserGroup] Unassign Member Success';\nconst USER_GROUP_UNASSIGN_PERMISSION = '[UserGroup] Unassign Permission';\nconst USER_GROUP_UNASSIGN_PERMISSION_FAIL = '[UserGroup] Unassign Permission Fail';\nconst USER_GROUP_UNASSIGN_PERMISSION_SUCCESS = '[UserGroup] Unassign Permission Success';\nclass LoadUserGroup extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId);\n    this.payload = payload;\n    this.type = LOAD_USER_GROUP;\n  }\n}\nclass LoadUserGroupFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n    this.payload = payload;\n    this.type = LOAD_USER_GROUP_FAIL;\n  }\n}\nclass LoadUserGroupSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, Array.isArray(payload) ? payload.map(userGroup => userGroup === null || userGroup === void 0 ? void 0 : userGroup.uid) : payload === null || payload === void 0 ? void 0 : payload.uid);\n    this.payload = payload;\n    this.type = LOAD_USER_GROUP_SUCCESS;\n  }\n}\nclass LoadUserGroups extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(USER_GROUP_LIST, StateUtils.serializeSearchConfig(payload.params));\n    this.payload = payload;\n    this.type = LOAD_USER_GROUPS;\n  }\n}\nclass LoadUserGroupsFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(USER_GROUP_LIST, StateUtils.serializeSearchConfig(payload.params), payload.error);\n    this.payload = payload;\n    this.type = LOAD_USER_GROUPS_FAIL;\n  }\n}\nclass LoadUserGroupsSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(USER_GROUP_LIST, StateUtils.serializeSearchConfig(payload.params));\n    this.payload = payload;\n    this.type = LOAD_USER_GROUPS_SUCCESS;\n  }\n}\nclass LoadPermissions$1 extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(USER_GROUP_PERMISSIONS, StateUtils.serializeSearchConfig(payload.params, payload.userGroupId));\n    this.payload = payload;\n    this.type = LOAD_USER_GROUP_PERMISSIONS;\n  }\n}\nclass LoadPermissionsFail$1 extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(USER_GROUP_PERMISSIONS, StateUtils.serializeSearchConfig(payload.params, payload.userGroupId), payload.error);\n    this.payload = payload;\n    this.type = LOAD_USER_GROUP_PERMISSIONS_FAIL;\n  }\n}\nclass LoadPermissionsSuccess$1 extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(USER_GROUP_PERMISSIONS, StateUtils.serializeSearchConfig(payload.params, payload.userGroupId));\n    this.payload = payload;\n    this.type = LOAD_USER_GROUP_PERMISSIONS_SUCCESS;\n  }\n}\nclass LoadAvailableOrgCustomers extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(USER_GROUP_AVAILABLE_CUSTOMERS, StateUtils.serializeSearchConfig(payload.params, payload.userGroupId));\n    this.payload = payload;\n    this.type = LOAD_USER_GROUP_AVAILABLE_CUSTOMERS;\n  }\n}\nclass LoadAvailableOrgCustomersFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(USER_GROUP_AVAILABLE_CUSTOMERS, StateUtils.serializeSearchConfig(payload.params, payload.userGroupId), payload.error);\n    this.payload = payload;\n    this.type = LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_FAIL;\n  }\n}\nclass LoadAvailableOrgCustomersSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(USER_GROUP_AVAILABLE_CUSTOMERS, StateUtils.serializeSearchConfig(payload.params, payload.userGroupId));\n    this.payload = payload;\n    this.type = LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS;\n  }\n}\nclass CreateUserGroup extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroup.uid);\n    this.payload = payload;\n    this.type = CREATE_USER_GROUP;\n  }\n}\nclass CreateUserGroupFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n    this.payload = payload;\n    this.type = CREATE_USER_GROUP_FAIL;\n  }\n}\nclass CreateUserGroupSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.uid, payload);\n    this.payload = payload;\n    this.type = CREATE_USER_GROUP_SUCCESS;\n  }\n}\nclass AssignMember extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.customerId);\n    this.payload = payload;\n    this.type = USER_GROUP_ASSIGN_MEMBER;\n  }\n}\nclass AssignMemberFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.customerId, payload.error);\n    this.payload = payload;\n    this.type = USER_GROUP_ASSIGN_MEMBER_FAIL;\n  }\n}\nclass AssignMemberSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.customerId, payload);\n    this.payload = payload;\n    this.type = USER_GROUP_ASSIGN_MEMBER_SUCCESS;\n  }\n}\nclass AssignPermission extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionUid);\n    this.payload = payload;\n    this.type = USER_GROUP_ASSIGN_PERMISSION;\n  }\n}\nclass AssignPermissionFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionUid, payload.error);\n    this.payload = payload;\n    this.type = USER_GROUP_ASSIGN_PERMISSION_FAIL;\n  }\n}\nclass AssignPermissionSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionUid, payload);\n    this.payload = payload;\n    this.type = USER_GROUP_ASSIGN_PERMISSION_SUCCESS;\n  }\n}\nclass UpdateUserGroup extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroup.uid);\n    this.payload = payload;\n    this.type = UPDATE_USER_GROUP;\n  }\n}\nclass UpdateUserGroupFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n    this.payload = payload;\n    this.type = UPDATE_USER_GROUP_FAIL;\n  }\n}\nclass UpdateUserGroupSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.uid, payload);\n    this.payload = payload;\n    this.type = UPDATE_USER_GROUP_SUCCESS;\n  }\n}\nclass DeleteUserGroup extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId);\n    this.payload = payload;\n    this.type = DELETE_USER_GROUP;\n  }\n}\nclass DeleteUserGroupFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n    this.payload = payload;\n    this.type = DELETE_USER_GROUP_FAIL;\n  }\n}\nclass DeleteUserGroupSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.uid, payload);\n    this.payload = payload;\n    this.type = DELETE_USER_GROUP_SUCCESS;\n  }\n}\nclass UnassignMember extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.customerId);\n    this.payload = payload;\n    this.type = USER_GROUP_UNASSIGN_MEMBER;\n  }\n}\nclass UnassignMemberFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.customerId, payload.error);\n    this.payload = payload;\n    this.type = USER_GROUP_UNASSIGN_MEMBER_FAIL;\n  }\n}\nclass UnassignMemberSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.customerId, payload);\n    this.payload = payload;\n    this.type = USER_GROUP_UNASSIGN_MEMBER_SUCCESS;\n  }\n}\nclass UnassignAllMembers extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId);\n    this.payload = payload;\n    this.type = USER_GROUP_UNASSIGN_ALL_MEMBERS;\n  }\n}\nclass UnassignAllMembersFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n    this.payload = payload;\n    this.type = USER_GROUP_UNASSIGN_ALL_MEMBERS_FAIL;\n  }\n}\nclass UnassignAllMembersSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.uid, payload);\n    this.payload = payload;\n    this.type = USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS;\n  }\n}\nclass UnassignPermission extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionUid);\n    this.payload = payload;\n    this.type = USER_GROUP_UNASSIGN_PERMISSION;\n  }\n}\nclass UnassignPermissionFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionUid, payload.error);\n    this.payload = payload;\n    this.type = USER_GROUP_UNASSIGN_PERMISSION_FAIL;\n  }\n}\nclass UnassignPermissionSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionUid, payload);\n    this.payload = payload;\n    this.type = USER_GROUP_UNASSIGN_PERMISSION_SUCCESS;\n  }\n}\nvar userGroup_action = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LOAD_USER_GROUP: LOAD_USER_GROUP,\n  LOAD_USER_GROUP_FAIL: LOAD_USER_GROUP_FAIL,\n  LOAD_USER_GROUP_SUCCESS: LOAD_USER_GROUP_SUCCESS,\n  LOAD_USER_GROUPS: LOAD_USER_GROUPS,\n  LOAD_USER_GROUPS_FAIL: LOAD_USER_GROUPS_FAIL,\n  LOAD_USER_GROUPS_SUCCESS: LOAD_USER_GROUPS_SUCCESS,\n  LOAD_USER_GROUP_PERMISSIONS: LOAD_USER_GROUP_PERMISSIONS,\n  LOAD_USER_GROUP_PERMISSIONS_FAIL: LOAD_USER_GROUP_PERMISSIONS_FAIL,\n  LOAD_USER_GROUP_PERMISSIONS_SUCCESS: LOAD_USER_GROUP_PERMISSIONS_SUCCESS,\n  LOAD_USER_GROUP_AVAILABLE_CUSTOMERS: LOAD_USER_GROUP_AVAILABLE_CUSTOMERS,\n  LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_FAIL: LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_FAIL,\n  LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS: LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS,\n  CREATE_USER_GROUP: CREATE_USER_GROUP,\n  CREATE_USER_GROUP_FAIL: CREATE_USER_GROUP_FAIL,\n  CREATE_USER_GROUP_SUCCESS: CREATE_USER_GROUP_SUCCESS,\n  USER_GROUP_ASSIGN_MEMBER: USER_GROUP_ASSIGN_MEMBER,\n  USER_GROUP_ASSIGN_MEMBER_FAIL: USER_GROUP_ASSIGN_MEMBER_FAIL,\n  USER_GROUP_ASSIGN_MEMBER_SUCCESS: USER_GROUP_ASSIGN_MEMBER_SUCCESS,\n  USER_GROUP_ASSIGN_PERMISSION: USER_GROUP_ASSIGN_PERMISSION,\n  USER_GROUP_ASSIGN_PERMISSION_FAIL: USER_GROUP_ASSIGN_PERMISSION_FAIL,\n  USER_GROUP_ASSIGN_PERMISSION_SUCCESS: USER_GROUP_ASSIGN_PERMISSION_SUCCESS,\n  UPDATE_USER_GROUP: UPDATE_USER_GROUP,\n  UPDATE_USER_GROUP_FAIL: UPDATE_USER_GROUP_FAIL,\n  UPDATE_USER_GROUP_SUCCESS: UPDATE_USER_GROUP_SUCCESS,\n  DELETE_USER_GROUP: DELETE_USER_GROUP,\n  DELETE_USER_GROUP_FAIL: DELETE_USER_GROUP_FAIL,\n  DELETE_USER_GROUP_SUCCESS: DELETE_USER_GROUP_SUCCESS,\n  USER_GROUP_UNASSIGN_ALL_MEMBERS: USER_GROUP_UNASSIGN_ALL_MEMBERS,\n  USER_GROUP_UNASSIGN_ALL_MEMBERS_FAIL: USER_GROUP_UNASSIGN_ALL_MEMBERS_FAIL,\n  USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS: USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS,\n  USER_GROUP_UNASSIGN_MEMBER: USER_GROUP_UNASSIGN_MEMBER,\n  USER_GROUP_UNASSIGN_MEMBER_FAIL: USER_GROUP_UNASSIGN_MEMBER_FAIL,\n  USER_GROUP_UNASSIGN_MEMBER_SUCCESS: USER_GROUP_UNASSIGN_MEMBER_SUCCESS,\n  USER_GROUP_UNASSIGN_PERMISSION: USER_GROUP_UNASSIGN_PERMISSION,\n  USER_GROUP_UNASSIGN_PERMISSION_FAIL: USER_GROUP_UNASSIGN_PERMISSION_FAIL,\n  USER_GROUP_UNASSIGN_PERMISSION_SUCCESS: USER_GROUP_UNASSIGN_PERMISSION_SUCCESS,\n  LoadUserGroup: LoadUserGroup,\n  LoadUserGroupFail: LoadUserGroupFail,\n  LoadUserGroupSuccess: LoadUserGroupSuccess,\n  LoadUserGroups: LoadUserGroups,\n  LoadUserGroupsFail: LoadUserGroupsFail,\n  LoadUserGroupsSuccess: LoadUserGroupsSuccess,\n  LoadPermissions: LoadPermissions$1,\n  LoadPermissionsFail: LoadPermissionsFail$1,\n  LoadPermissionsSuccess: LoadPermissionsSuccess$1,\n  LoadAvailableOrgCustomers: LoadAvailableOrgCustomers,\n  LoadAvailableOrgCustomersFail: LoadAvailableOrgCustomersFail,\n  LoadAvailableOrgCustomersSuccess: LoadAvailableOrgCustomersSuccess,\n  CreateUserGroup: CreateUserGroup,\n  CreateUserGroupFail: CreateUserGroupFail,\n  CreateUserGroupSuccess: CreateUserGroupSuccess,\n  AssignMember: AssignMember,\n  AssignMemberFail: AssignMemberFail,\n  AssignMemberSuccess: AssignMemberSuccess,\n  AssignPermission: AssignPermission,\n  AssignPermissionFail: AssignPermissionFail,\n  AssignPermissionSuccess: AssignPermissionSuccess,\n  UpdateUserGroup: UpdateUserGroup,\n  UpdateUserGroupFail: UpdateUserGroupFail,\n  UpdateUserGroupSuccess: UpdateUserGroupSuccess,\n  DeleteUserGroup: DeleteUserGroup,\n  DeleteUserGroupFail: DeleteUserGroupFail,\n  DeleteUserGroupSuccess: DeleteUserGroupSuccess,\n  UnassignMember: UnassignMember,\n  UnassignMemberFail: UnassignMemberFail,\n  UnassignMemberSuccess: UnassignMemberSuccess,\n  UnassignAllMembers: UnassignAllMembers,\n  UnassignAllMembersFail: UnassignAllMembersFail,\n  UnassignAllMembersSuccess: UnassignAllMembersSuccess,\n  UnassignPermission: UnassignPermission,\n  UnassignPermissionFail: UnassignPermissionFail,\n  UnassignPermissionSuccess: UnassignPermissionSuccess\n});\nconst LOAD_PERMISSION = '[Permission] Load Permission Data';\nconst LOAD_PERMISSION_FAIL = '[Permission] Load Permission Data Fail';\nconst LOAD_PERMISSION_SUCCESS = '[Permission] Load Permission Data Success';\nconst LOAD_PERMISSIONS = '[Permission] Load Permissions';\nconst LOAD_PERMISSIONS_FAIL = '[Permission] Load Permissions Fail';\nconst LOAD_PERMISSIONS_SUCCESS = '[Permission] Load Permissions Success';\nconst CREATE_PERMISSION = '[Permission] Create Permission';\nconst CREATE_PERMISSION_FAIL = '[Permission] Create Permission Fail';\nconst CREATE_PERMISSION_SUCCESS = '[Permission] Create Permission Success';\nconst UPDATE_PERMISSION = '[Permission] Update Permission';\nconst UPDATE_PERMISSION_FAIL = '[Permission] Update Permission Fail';\nconst UPDATE_PERMISSION_SUCCESS = '[Permission] Update Permission Success';\nconst LOAD_PERMISSION_TYPES = '[Permission Types] Load Permission Types';\nconst LOAD_PERMISSION_TYPES_FAIL = '[Permission Types] Load Permission Types Fail';\nconst LOAD_PERMISSION_TYPES_SUCCESS = '[Permission Types] Load Permission Types Success';\nclass LoadPermission extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionCode);\n    this.payload = payload;\n    this.type = LOAD_PERMISSION;\n  }\n}\nclass LoadPermissionFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionCode, payload.error);\n    this.payload = payload;\n    this.type = LOAD_PERMISSION_FAIL;\n  }\n}\nclass LoadPermissionSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, Array.isArray(payload) ? payload.map(permission => permission === null || permission === void 0 ? void 0 : permission.code) : payload === null || payload === void 0 ? void 0 : payload.code);\n    this.payload = payload;\n    this.type = LOAD_PERMISSION_SUCCESS;\n  }\n}\nclass LoadPermissions extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PERMISSION_LIST, StateUtils.serializeSearchConfig(payload.params));\n    this.payload = payload;\n    this.type = LOAD_PERMISSIONS;\n  }\n}\nclass LoadPermissionsFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PERMISSION_LIST, StateUtils.serializeSearchConfig(payload.params), payload.error);\n    this.payload = payload;\n    this.type = LOAD_PERMISSIONS_FAIL;\n  }\n}\nclass LoadPermissionsSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PERMISSION_LIST, StateUtils.serializeSearchConfig(payload.params));\n    this.payload = payload;\n    this.type = LOAD_PERMISSIONS_SUCCESS;\n  }\n}\nclass CreatePermission extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permission.code);\n    this.payload = payload;\n    this.type = CREATE_PERMISSION;\n  }\n}\nclass CreatePermissionFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionCode, payload.error);\n    this.payload = payload;\n    this.type = CREATE_PERMISSION_FAIL;\n  }\n}\nclass CreatePermissionSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.code, payload);\n    this.payload = payload;\n    this.type = CREATE_PERMISSION_SUCCESS;\n  }\n}\nclass UpdatePermission extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permission.code);\n    this.payload = payload;\n    this.type = UPDATE_PERMISSION;\n  }\n}\nclass UpdatePermissionFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionCode, payload.error);\n    this.payload = payload;\n    this.type = UPDATE_PERMISSION_FAIL;\n  }\n}\nclass UpdatePermissionSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.code, payload);\n    this.payload = payload;\n    this.type = UPDATE_PERMISSION_SUCCESS;\n  }\n}\nclass LoadPermissionTypes extends StateUtils.EntityLoadAction {\n  constructor() {\n    super(PERMISSION_TYPES_LIST, PERMISSION_TYPES);\n    this.type = LOAD_PERMISSION_TYPES;\n  }\n}\nclass LoadPermissionTypesFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PERMISSION_TYPES_LIST, PERMISSION_TYPES, payload.error);\n    this.payload = payload;\n    this.type = LOAD_PERMISSION_TYPES_FAIL;\n  }\n}\nclass LoadPermissionTypesSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PERMISSION_TYPES_LIST, PERMISSION_TYPES);\n    this.payload = payload;\n    this.type = LOAD_PERMISSION_TYPES_SUCCESS;\n  }\n}\nvar permission_action = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LOAD_PERMISSION: LOAD_PERMISSION,\n  LOAD_PERMISSION_FAIL: LOAD_PERMISSION_FAIL,\n  LOAD_PERMISSION_SUCCESS: LOAD_PERMISSION_SUCCESS,\n  LOAD_PERMISSIONS: LOAD_PERMISSIONS,\n  LOAD_PERMISSIONS_FAIL: LOAD_PERMISSIONS_FAIL,\n  LOAD_PERMISSIONS_SUCCESS: LOAD_PERMISSIONS_SUCCESS,\n  CREATE_PERMISSION: CREATE_PERMISSION,\n  CREATE_PERMISSION_FAIL: CREATE_PERMISSION_FAIL,\n  CREATE_PERMISSION_SUCCESS: CREATE_PERMISSION_SUCCESS,\n  UPDATE_PERMISSION: UPDATE_PERMISSION,\n  UPDATE_PERMISSION_FAIL: UPDATE_PERMISSION_FAIL,\n  UPDATE_PERMISSION_SUCCESS: UPDATE_PERMISSION_SUCCESS,\n  LOAD_PERMISSION_TYPES: LOAD_PERMISSION_TYPES,\n  LOAD_PERMISSION_TYPES_FAIL: LOAD_PERMISSION_TYPES_FAIL,\n  LOAD_PERMISSION_TYPES_SUCCESS: LOAD_PERMISSION_TYPES_SUCCESS,\n  LoadPermission: LoadPermission,\n  LoadPermissionFail: LoadPermissionFail,\n  LoadPermissionSuccess: LoadPermissionSuccess,\n  LoadPermissions: LoadPermissions,\n  LoadPermissionsFail: LoadPermissionsFail,\n  LoadPermissionsSuccess: LoadPermissionsSuccess,\n  CreatePermission: CreatePermission,\n  CreatePermissionFail: CreatePermissionFail,\n  CreatePermissionSuccess: CreatePermissionSuccess,\n  UpdatePermission: UpdatePermission,\n  UpdatePermissionFail: UpdatePermissionFail,\n  UpdatePermissionSuccess: UpdatePermissionSuccess,\n  LoadPermissionTypes: LoadPermissionTypes,\n  LoadPermissionTypesFail: LoadPermissionTypesFail,\n  LoadPermissionTypesSuccess: LoadPermissionTypesSuccess\n});\nconst LOAD_COST_CENTER = '[CostCenter] Load CostCenter Data';\nconst LOAD_COST_CENTER_FAIL = '[CostCenter] Load CostCenter Data Fail';\nconst LOAD_COST_CENTER_SUCCESS = '[CostCenter] Load CostCenter Data Success';\nconst LOAD_COST_CENTERS = '[CostCenter] Load CostCenters';\nconst LOAD_COST_CENTERS_FAIL = '[CostCenter] Load CostCenters Fail';\nconst LOAD_COST_CENTERS_SUCCESS = '[CostCenter] Load CostCenters Success';\nconst CREATE_COST_CENTER = '[CostCenter] Create CostCenter';\nconst CREATE_COST_CENTER_FAIL = '[CostCenter] Create CostCenter Fail';\nconst CREATE_COST_CENTER_SUCCESS = '[CostCenter] Create CostCenter Success';\nconst UPDATE_COST_CENTER = '[CostCenter] Update CostCenter';\nconst UPDATE_COST_CENTER_FAIL = '[CostCenter] Update CostCenter Fail';\nconst UPDATE_COST_CENTER_SUCCESS = '[CostCenter] Update CostCenter Success';\nconst LOAD_ASSIGNED_BUDGETS = '[CostCenter] Load Budgets';\nconst LOAD_ASSIGNED_BUDGETS_SUCCESS = '[CostCenter] Load Budgets success';\nconst LOAD_ASSIGNED_BUDGETS_FAIL = '[CostCenter] Load Budgets fail';\nconst ASSIGN_BUDGET = '[CostCenter] Assign Budget';\nconst ASSIGN_BUDGET_SUCCESS = '[CostCenter] Assign Budget success';\nconst ASSIGN_BUDGET_FAIL = '[CostCenter] Assign Budget fail';\nconst UNASSIGN_BUDGET = '[CostCenter] Unassign Budget';\nconst UNASSIGN_BUDGET_SUCCESS = '[CostCenter] Unassign Budget success';\nconst UNASSIGN_BUDGET_FAIL = '[CostCenter] Unassign Budget fail';\nclass LoadCostCenter extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(COST_CENTER_ENTITIES, payload.costCenterCode);\n    this.payload = payload;\n    this.type = LOAD_COST_CENTER;\n  }\n}\nclass LoadCostCenterFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(COST_CENTER_ENTITIES, payload.costCenterCode, payload.error);\n    this.payload = payload;\n    this.type = LOAD_COST_CENTER_FAIL;\n  }\n}\nclass LoadCostCenterSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(COST_CENTER_ENTITIES, Array.isArray(payload) ? payload.map(costCenter => costCenter === null || costCenter === void 0 ? void 0 : costCenter.code) : payload === null || payload === void 0 ? void 0 : payload.code);\n    this.payload = payload;\n    this.type = LOAD_COST_CENTER_SUCCESS;\n  }\n}\nclass LoadCostCenters extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(COST_CENTER_LIST, StateUtils.serializeSearchConfig(payload.params));\n    this.payload = payload;\n    this.type = LOAD_COST_CENTERS;\n  }\n}\nclass LoadCostCentersFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(COST_CENTER_LIST, StateUtils.serializeSearchConfig(payload.params), payload.error);\n    this.payload = payload;\n    this.type = LOAD_COST_CENTERS_FAIL;\n  }\n}\nclass LoadCostCentersSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(COST_CENTER_LIST, StateUtils.serializeSearchConfig(payload.params));\n    this.payload = payload;\n    this.type = LOAD_COST_CENTERS_SUCCESS;\n  }\n}\nclass CreateCostCenter extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(COST_CENTER_ENTITIES, payload.costCenter.code);\n    this.payload = payload;\n    this.type = CREATE_COST_CENTER;\n  }\n}\nclass CreateCostCenterFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(COST_CENTER_ENTITIES, payload.costCenterCode, payload.error);\n    this.payload = payload;\n    this.type = CREATE_COST_CENTER_FAIL;\n  }\n}\nclass CreateCostCenterSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(COST_CENTER_ENTITIES, payload.code, payload);\n    this.payload = payload;\n    this.type = CREATE_COST_CENTER_SUCCESS;\n  }\n}\nclass UpdateCostCenter extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(COST_CENTER_ENTITIES, payload.costCenter.code);\n    this.payload = payload;\n    this.type = UPDATE_COST_CENTER;\n  }\n}\nclass UpdateCostCenterFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(COST_CENTER_ENTITIES, payload.costCenterCode, payload.error);\n    this.payload = payload;\n    this.type = UPDATE_COST_CENTER_FAIL;\n  }\n}\nclass UpdateCostCenterSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(COST_CENTER_ENTITIES, payload.code, payload);\n    this.payload = payload;\n    this.type = UPDATE_COST_CENTER_SUCCESS;\n  }\n}\nclass LoadAssignedBudgets extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(COST_CENTER_ASSIGNED_BUDGETS, StateUtils.serializeSearchConfig(payload.params, payload.costCenterCode));\n    this.payload = payload;\n    this.type = LOAD_ASSIGNED_BUDGETS;\n  }\n}\nclass LoadAssignedBudgetsFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(COST_CENTER_ASSIGNED_BUDGETS, StateUtils.serializeSearchConfig(payload.params, payload.costCenterCode), payload.error);\n    this.payload = payload;\n    this.type = LOAD_ASSIGNED_BUDGETS_FAIL;\n  }\n}\nclass LoadAssignedBudgetsSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(COST_CENTER_ASSIGNED_BUDGETS, StateUtils.serializeSearchConfig(payload.params, payload.costCenterCode));\n    this.payload = payload;\n    this.type = LOAD_ASSIGNED_BUDGETS_SUCCESS;\n  }\n}\nclass AssignBudget extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.budgetCode);\n    this.payload = payload;\n    this.type = ASSIGN_BUDGET;\n  }\n}\nclass AssignBudgetFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.budgetCode, payload.error);\n    this.payload = payload;\n    this.type = ASSIGN_BUDGET_FAIL;\n  }\n}\nclass AssignBudgetSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.code, payload);\n    this.payload = payload;\n    this.type = ASSIGN_BUDGET_SUCCESS;\n  }\n}\nclass UnassignBudget extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.budgetCode);\n    this.payload = payload;\n    this.type = UNASSIGN_BUDGET;\n  }\n}\nclass UnassignBudgetFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.budgetCode, payload.error);\n    this.payload = payload;\n    this.type = UNASSIGN_BUDGET_FAIL;\n  }\n}\nclass UnassignBudgetSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(BUDGET_ENTITIES, payload.code, payload);\n    this.payload = payload;\n    this.type = UNASSIGN_BUDGET_SUCCESS;\n  }\n}\nvar costCenter_action = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LOAD_COST_CENTER: LOAD_COST_CENTER,\n  LOAD_COST_CENTER_FAIL: LOAD_COST_CENTER_FAIL,\n  LOAD_COST_CENTER_SUCCESS: LOAD_COST_CENTER_SUCCESS,\n  LOAD_COST_CENTERS: LOAD_COST_CENTERS,\n  LOAD_COST_CENTERS_FAIL: LOAD_COST_CENTERS_FAIL,\n  LOAD_COST_CENTERS_SUCCESS: LOAD_COST_CENTERS_SUCCESS,\n  CREATE_COST_CENTER: CREATE_COST_CENTER,\n  CREATE_COST_CENTER_FAIL: CREATE_COST_CENTER_FAIL,\n  CREATE_COST_CENTER_SUCCESS: CREATE_COST_CENTER_SUCCESS,\n  UPDATE_COST_CENTER: UPDATE_COST_CENTER,\n  UPDATE_COST_CENTER_FAIL: UPDATE_COST_CENTER_FAIL,\n  UPDATE_COST_CENTER_SUCCESS: UPDATE_COST_CENTER_SUCCESS,\n  LOAD_ASSIGNED_BUDGETS: LOAD_ASSIGNED_BUDGETS,\n  LOAD_ASSIGNED_BUDGETS_SUCCESS: LOAD_ASSIGNED_BUDGETS_SUCCESS,\n  LOAD_ASSIGNED_BUDGETS_FAIL: LOAD_ASSIGNED_BUDGETS_FAIL,\n  ASSIGN_BUDGET: ASSIGN_BUDGET,\n  ASSIGN_BUDGET_SUCCESS: ASSIGN_BUDGET_SUCCESS,\n  ASSIGN_BUDGET_FAIL: ASSIGN_BUDGET_FAIL,\n  UNASSIGN_BUDGET: UNASSIGN_BUDGET,\n  UNASSIGN_BUDGET_SUCCESS: UNASSIGN_BUDGET_SUCCESS,\n  UNASSIGN_BUDGET_FAIL: UNASSIGN_BUDGET_FAIL,\n  LoadCostCenter: LoadCostCenter,\n  LoadCostCenterFail: LoadCostCenterFail,\n  LoadCostCenterSuccess: LoadCostCenterSuccess,\n  LoadCostCenters: LoadCostCenters,\n  LoadCostCentersFail: LoadCostCentersFail,\n  LoadCostCentersSuccess: LoadCostCentersSuccess,\n  CreateCostCenter: CreateCostCenter,\n  CreateCostCenterFail: CreateCostCenterFail,\n  CreateCostCenterSuccess: CreateCostCenterSuccess,\n  UpdateCostCenter: UpdateCostCenter,\n  UpdateCostCenterFail: UpdateCostCenterFail,\n  UpdateCostCenterSuccess: UpdateCostCenterSuccess,\n  LoadAssignedBudgets: LoadAssignedBudgets,\n  LoadAssignedBudgetsFail: LoadAssignedBudgetsFail,\n  LoadAssignedBudgetsSuccess: LoadAssignedBudgetsSuccess,\n  AssignBudget: AssignBudget,\n  AssignBudgetFail: AssignBudgetFail,\n  AssignBudgetSuccess: AssignBudgetSuccess,\n  UnassignBudget: UnassignBudget,\n  UnassignBudgetFail: UnassignBudgetFail,\n  UnassignBudgetSuccess: UnassignBudgetSuccess\n});\nconst LOAD_B2B_USER = '[B2BUser] Load B2BUser Data';\nconst LOAD_B2B_USER_FAIL = '[B2BUser] Load B2BUser Data Fail';\nconst LOAD_B2B_USER_SUCCESS = '[B2BUser] Load B2BUser Data Success';\nconst CREATE_B2B_USER = '[B2BUser] Create B2BUser Data';\nconst CREATE_B2B_USER_FAIL = '[B2BUser] Create B2BUser Data Fail';\nconst CREATE_B2B_USER_SUCCESS = '[B2BUser] Create B2BUser Data Success';\nconst UPDATE_B2B_USER = '[B2BUser] Update B2BUser Data';\nconst UPDATE_B2B_USER_FAIL = '[B2BUser] Update B2BUser Data Fail';\nconst UPDATE_B2B_USER_SUCCESS = '[B2BUser] Update B2BUser Data Success';\nconst LOAD_B2B_USERS = '[B2BUser] Load B2BUsers';\nconst LOAD_B2B_USERS_FAIL = '[B2BUser] Load B2BUsers Fail';\nconst LOAD_B2B_USERS_SUCCESS = '[B2BUser] Load B2BUsers Success';\nconst LOAD_B2B_USER_APPROVERS = '[B2BUser] Load B2BUser Approvers';\nconst LOAD_B2B_USER_APPROVERS_FAIL = '[B2BUser] Load B2BUser Approvers Fail';\nconst LOAD_B2B_USER_APPROVERS_SUCCESS = '[B2BUser] Load B2BUser Approvers Success';\nconst ASSIGN_B2B_USER_APPROVER = '[B2BUser] Assign B2BUser Approver';\nconst ASSIGN_B2B_USER_APPROVER_FAIL = '[B2BUser] Assign B2BUser Approver Fail';\nconst ASSIGN_B2B_USER_APPROVER_SUCCESS = '[B2BUser] Assign B2BUser Approver Success';\nconst UNASSIGN_B2B_USER_APPROVER = '[B2BUser] Unassign B2BUser Approver';\nconst UNASSIGN_B2B_USER_APPROVER_FAIL = '[B2BUser] Unassign B2BUser Approver Fail';\nconst UNASSIGN_B2B_USER_APPROVER_SUCCESS = '[B2BUser] Unassign B2BUser Approver Success';\nconst LOAD_B2B_USER_PERMISSIONS = '[B2BUser] Load B2BUser Permissions';\nconst LOAD_B2B_USER_PERMISSIONS_FAIL = '[B2BUser] Load B2BUser Permissions Fail';\nconst LOAD_B2B_USER_PERMISSIONS_SUCCESS = '[B2BUser] Load B2BUser Permissions Success';\nconst ASSIGN_B2B_USER_PERMISSION = '[B2BUser] Assign B2BUser Permission';\nconst ASSIGN_B2B_USER_PERMISSION_FAIL = '[B2BUser] Assign B2BUser Permission Fail';\nconst ASSIGN_B2B_USER_PERMISSION_SUCCESS = '[B2BUser] Assign B2BUser Permission Success';\nconst UNASSIGN_B2B_USER_PERMISSION = '[B2BUser] Unassign B2BUser Permission';\nconst UNASSIGN_B2B_USER_PERMISSION_FAIL = '[B2BUser] Unassign B2BUser Permission Fail';\nconst UNASSIGN_B2B_USER_PERMISSION_SUCCESS = '[B2BUser] Unassign B2BUser Permission Success';\nconst LOAD_B2B_USER_USER_GROUPS = '[B2BUser] Load B2BUser User Groups';\nconst LOAD_B2B_USER_USER_GROUPS_FAIL = '[B2BUser] Load B2BUser User Groups Fail';\nconst LOAD_B2B_USER_USER_GROUPS_SUCCESS = '[B2BUser] Load B2BUser User Groups Success';\nconst ASSIGN_B2B_USER_USER_GROUP = '[B2BUser] Assign B2BUser User Group';\nconst ASSIGN_B2B_USER_USER_GROUP_FAIL = '[B2BUser] Assign B2BUser User Group Fail';\nconst ASSIGN_B2B_USER_USER_GROUP_SUCCESS = '[B2BUser] Assign B2BUser User Group Success';\nconst UNASSIGN_B2B_USER_USER_GROUP = '[B2BUser] Unassign B2BUser User Group';\nconst UNASSIGN_B2B_USER_USER_GROUP_FAIL = '[B2BUser] Unassign B2BUser User Group Fail';\nconst UNASSIGN_B2B_USER_USER_GROUP_SUCCESS = '[B2BUser] Unassign B2BUser User Group Success';\nclass LoadB2BUser extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId);\n    this.payload = payload;\n    this.type = LOAD_B2B_USER;\n  }\n}\nclass LoadB2BUserFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n    this.payload = payload;\n    this.type = LOAD_B2B_USER_FAIL;\n  }\n}\nclass LoadB2BUserSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, Array.isArray(payload) ? payload.map(orgUnitCustomer => orgUnitCustomer === null || orgUnitCustomer === void 0 ? void 0 : orgUnitCustomer.customerId) : payload === null || payload === void 0 ? void 0 : payload.customerId);\n    this.payload = payload;\n    this.type = LOAD_B2B_USER_SUCCESS;\n  }\n}\nclass CreateB2BUser extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomer.customerId);\n    this.payload = payload;\n    this.type = CREATE_B2B_USER;\n  }\n}\nclass CreateB2BUserFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n    this.payload = payload;\n    this.type = CREATE_B2B_USER_FAIL;\n  }\n}\nclass CreateB2BUserSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.customerId, payload);\n    this.payload = payload;\n    this.type = CREATE_B2B_USER_SUCCESS;\n  }\n}\nclass UpdateB2BUser extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomer.customerId);\n    this.payload = payload;\n    this.type = UPDATE_B2B_USER;\n  }\n}\nclass UpdateB2BUserFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n    this.payload = payload;\n    this.type = UPDATE_B2B_USER_FAIL;\n  }\n}\nclass UpdateB2BUserSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.customerId, payload);\n    this.payload = payload;\n    this.type = UPDATE_B2B_USER_SUCCESS;\n  }\n}\nclass LoadB2BUsers extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(USER_LIST, StateUtils.serializeSearchConfig(payload.params));\n    this.payload = payload;\n    this.type = LOAD_B2B_USERS;\n  }\n}\nclass LoadB2BUsersFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(USER_LIST, StateUtils.serializeSearchConfig(payload.params), payload.error);\n    this.payload = payload;\n    this.type = LOAD_B2B_USERS_FAIL;\n  }\n}\nclass LoadB2BUsersSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(USER_LIST, StateUtils.serializeSearchConfig(payload.params));\n    this.payload = payload;\n    this.type = LOAD_B2B_USERS_SUCCESS;\n  }\n}\nclass LoadB2BUserApprovers extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_APPROVERS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId));\n    this.payload = payload;\n    this.type = LOAD_B2B_USER_APPROVERS;\n  }\n}\nclass LoadB2BUserApproversFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_APPROVERS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId), payload.error);\n    this.payload = payload;\n    this.type = LOAD_B2B_USER_APPROVERS_FAIL;\n  }\n}\nclass LoadB2BUserApproversSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_APPROVERS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId));\n    this.payload = payload;\n    this.type = LOAD_B2B_USER_APPROVERS_SUCCESS;\n  }\n}\nclass AssignB2BUserApprover extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.approverId);\n    this.payload = payload;\n    this.type = ASSIGN_B2B_USER_APPROVER;\n  }\n}\nclass AssignB2BUserApproverFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.approverId);\n    this.payload = payload;\n    this.type = ASSIGN_B2B_USER_APPROVER_FAIL;\n  }\n}\nclass AssignB2BUserApproverSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.approverId, payload);\n    this.payload = payload;\n    this.type = ASSIGN_B2B_USER_APPROVER_SUCCESS;\n  }\n}\nclass UnassignB2BUserApprover extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.approverId);\n    this.payload = payload;\n    this.type = UNASSIGN_B2B_USER_APPROVER;\n  }\n}\nclass UnassignB2BUserApproverFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.approverId);\n    this.payload = payload;\n    this.type = UNASSIGN_B2B_USER_APPROVER_FAIL;\n  }\n}\nclass UnassignB2BUserApproverSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_ENTITIES, payload.approverId, payload);\n    this.payload = payload;\n    this.type = UNASSIGN_B2B_USER_APPROVER_SUCCESS;\n  }\n}\nclass LoadB2BUserPermissions extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_PERMISSIONS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId));\n    this.payload = payload;\n    this.type = LOAD_B2B_USER_PERMISSIONS;\n  }\n}\nclass LoadB2BUserPermissionsFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_PERMISSIONS, payload.orgCustomerId, payload.error);\n    this.payload = payload;\n    this.type = LOAD_B2B_USER_PERMISSIONS_FAIL;\n  }\n}\nclass LoadB2BUserPermissionsSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_PERMISSIONS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId));\n    this.payload = payload;\n    this.type = LOAD_B2B_USER_PERMISSIONS_SUCCESS;\n  }\n}\nclass AssignB2BUserPermission extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionId);\n    this.payload = payload;\n    this.type = ASSIGN_B2B_USER_PERMISSION;\n  }\n}\nclass AssignB2BUserPermissionFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionId, payload.error);\n    this.payload = payload;\n    this.type = ASSIGN_B2B_USER_PERMISSION_FAIL;\n  }\n}\nclass AssignB2BUserPermissionSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionId, payload);\n    this.payload = payload;\n    this.type = ASSIGN_B2B_USER_PERMISSION_SUCCESS;\n  }\n}\nclass UnassignB2BUserPermission extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionId);\n    this.payload = payload;\n    this.type = UNASSIGN_B2B_USER_PERMISSION;\n  }\n}\nclass UnassignB2BUserPermissionFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionId, payload.error);\n    this.payload = payload;\n    this.type = UNASSIGN_B2B_USER_PERMISSION_FAIL;\n  }\n}\nclass UnassignB2BUserPermissionSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PERMISSION_ENTITIES, payload.permissionId, payload);\n    this.payload = payload;\n    this.type = UNASSIGN_B2B_USER_PERMISSION_SUCCESS;\n  }\n}\nclass LoadB2BUserUserGroups extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(B2B_USER_USER_GROUPS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId));\n    this.payload = payload;\n    this.type = LOAD_B2B_USER_USER_GROUPS;\n  }\n}\nclass LoadB2BUserUserGroupsFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(B2B_USER_USER_GROUPS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId), payload.error);\n    this.payload = payload;\n    this.type = LOAD_B2B_USER_USER_GROUPS_FAIL;\n  }\n}\nclass LoadB2BUserUserGroupsSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(B2B_USER_USER_GROUPS, StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId));\n    this.payload = payload;\n    this.type = LOAD_B2B_USER_USER_GROUPS_SUCCESS;\n  }\n}\nclass AssignB2BUserUserGroup extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId);\n    this.payload = payload;\n    this.type = ASSIGN_B2B_USER_USER_GROUP;\n  }\n}\nclass AssignB2BUserUserGroupFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n    this.payload = payload;\n    this.type = ASSIGN_B2B_USER_USER_GROUP_FAIL;\n  }\n}\nclass AssignB2BUserUserGroupSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.uid, payload);\n    this.payload = payload;\n    this.type = ASSIGN_B2B_USER_USER_GROUP_SUCCESS;\n  }\n}\nclass UnassignB2BUserUserGroup extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId);\n    this.payload = payload;\n    this.type = UNASSIGN_B2B_USER_USER_GROUP;\n  }\n}\nclass UnassignB2BUserUserGroupFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n    this.payload = payload;\n    this.type = UNASSIGN_B2B_USER_USER_GROUP_FAIL;\n  }\n}\nclass UnassignB2BUserUserGroupSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(USER_GROUP_ENTITIES, payload.uid, payload);\n    this.payload = payload;\n    this.type = UNASSIGN_B2B_USER_USER_GROUP_SUCCESS;\n  }\n}\nvar b2bUser_action = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LOAD_B2B_USER: LOAD_B2B_USER,\n  LOAD_B2B_USER_FAIL: LOAD_B2B_USER_FAIL,\n  LOAD_B2B_USER_SUCCESS: LOAD_B2B_USER_SUCCESS,\n  CREATE_B2B_USER: CREATE_B2B_USER,\n  CREATE_B2B_USER_FAIL: CREATE_B2B_USER_FAIL,\n  CREATE_B2B_USER_SUCCESS: CREATE_B2B_USER_SUCCESS,\n  UPDATE_B2B_USER: UPDATE_B2B_USER,\n  UPDATE_B2B_USER_FAIL: UPDATE_B2B_USER_FAIL,\n  UPDATE_B2B_USER_SUCCESS: UPDATE_B2B_USER_SUCCESS,\n  LOAD_B2B_USERS: LOAD_B2B_USERS,\n  LOAD_B2B_USERS_FAIL: LOAD_B2B_USERS_FAIL,\n  LOAD_B2B_USERS_SUCCESS: LOAD_B2B_USERS_SUCCESS,\n  LOAD_B2B_USER_APPROVERS: LOAD_B2B_USER_APPROVERS,\n  LOAD_B2B_USER_APPROVERS_FAIL: LOAD_B2B_USER_APPROVERS_FAIL,\n  LOAD_B2B_USER_APPROVERS_SUCCESS: LOAD_B2B_USER_APPROVERS_SUCCESS,\n  ASSIGN_B2B_USER_APPROVER: ASSIGN_B2B_USER_APPROVER,\n  ASSIGN_B2B_USER_APPROVER_FAIL: ASSIGN_B2B_USER_APPROVER_FAIL,\n  ASSIGN_B2B_USER_APPROVER_SUCCESS: ASSIGN_B2B_USER_APPROVER_SUCCESS,\n  UNASSIGN_B2B_USER_APPROVER: UNASSIGN_B2B_USER_APPROVER,\n  UNASSIGN_B2B_USER_APPROVER_FAIL: UNASSIGN_B2B_USER_APPROVER_FAIL,\n  UNASSIGN_B2B_USER_APPROVER_SUCCESS: UNASSIGN_B2B_USER_APPROVER_SUCCESS,\n  LOAD_B2B_USER_PERMISSIONS: LOAD_B2B_USER_PERMISSIONS,\n  LOAD_B2B_USER_PERMISSIONS_FAIL: LOAD_B2B_USER_PERMISSIONS_FAIL,\n  LOAD_B2B_USER_PERMISSIONS_SUCCESS: LOAD_B2B_USER_PERMISSIONS_SUCCESS,\n  ASSIGN_B2B_USER_PERMISSION: ASSIGN_B2B_USER_PERMISSION,\n  ASSIGN_B2B_USER_PERMISSION_FAIL: ASSIGN_B2B_USER_PERMISSION_FAIL,\n  ASSIGN_B2B_USER_PERMISSION_SUCCESS: ASSIGN_B2B_USER_PERMISSION_SUCCESS,\n  UNASSIGN_B2B_USER_PERMISSION: UNASSIGN_B2B_USER_PERMISSION,\n  UNASSIGN_B2B_USER_PERMISSION_FAIL: UNASSIGN_B2B_USER_PERMISSION_FAIL,\n  UNASSIGN_B2B_USER_PERMISSION_SUCCESS: UNASSIGN_B2B_USER_PERMISSION_SUCCESS,\n  LOAD_B2B_USER_USER_GROUPS: LOAD_B2B_USER_USER_GROUPS,\n  LOAD_B2B_USER_USER_GROUPS_FAIL: LOAD_B2B_USER_USER_GROUPS_FAIL,\n  LOAD_B2B_USER_USER_GROUPS_SUCCESS: LOAD_B2B_USER_USER_GROUPS_SUCCESS,\n  ASSIGN_B2B_USER_USER_GROUP: ASSIGN_B2B_USER_USER_GROUP,\n  ASSIGN_B2B_USER_USER_GROUP_FAIL: ASSIGN_B2B_USER_USER_GROUP_FAIL,\n  ASSIGN_B2B_USER_USER_GROUP_SUCCESS: ASSIGN_B2B_USER_USER_GROUP_SUCCESS,\n  UNASSIGN_B2B_USER_USER_GROUP: UNASSIGN_B2B_USER_USER_GROUP,\n  UNASSIGN_B2B_USER_USER_GROUP_FAIL: UNASSIGN_B2B_USER_USER_GROUP_FAIL,\n  UNASSIGN_B2B_USER_USER_GROUP_SUCCESS: UNASSIGN_B2B_USER_USER_GROUP_SUCCESS,\n  LoadB2BUser: LoadB2BUser,\n  LoadB2BUserFail: LoadB2BUserFail,\n  LoadB2BUserSuccess: LoadB2BUserSuccess,\n  CreateB2BUser: CreateB2BUser,\n  CreateB2BUserFail: CreateB2BUserFail,\n  CreateB2BUserSuccess: CreateB2BUserSuccess,\n  UpdateB2BUser: UpdateB2BUser,\n  UpdateB2BUserFail: UpdateB2BUserFail,\n  UpdateB2BUserSuccess: UpdateB2BUserSuccess,\n  LoadB2BUsers: LoadB2BUsers,\n  LoadB2BUsersFail: LoadB2BUsersFail,\n  LoadB2BUsersSuccess: LoadB2BUsersSuccess,\n  LoadB2BUserApprovers: LoadB2BUserApprovers,\n  LoadB2BUserApproversFail: LoadB2BUserApproversFail,\n  LoadB2BUserApproversSuccess: LoadB2BUserApproversSuccess,\n  AssignB2BUserApprover: AssignB2BUserApprover,\n  AssignB2BUserApproverFail: AssignB2BUserApproverFail,\n  AssignB2BUserApproverSuccess: AssignB2BUserApproverSuccess,\n  UnassignB2BUserApprover: UnassignB2BUserApprover,\n  UnassignB2BUserApproverFail: UnassignB2BUserApproverFail,\n  UnassignB2BUserApproverSuccess: UnassignB2BUserApproverSuccess,\n  LoadB2BUserPermissions: LoadB2BUserPermissions,\n  LoadB2BUserPermissionsFail: LoadB2BUserPermissionsFail,\n  LoadB2BUserPermissionsSuccess: LoadB2BUserPermissionsSuccess,\n  AssignB2BUserPermission: AssignB2BUserPermission,\n  AssignB2BUserPermissionFail: AssignB2BUserPermissionFail,\n  AssignB2BUserPermissionSuccess: AssignB2BUserPermissionSuccess,\n  UnassignB2BUserPermission: UnassignB2BUserPermission,\n  UnassignB2BUserPermissionFail: UnassignB2BUserPermissionFail,\n  UnassignB2BUserPermissionSuccess: UnassignB2BUserPermissionSuccess,\n  LoadB2BUserUserGroups: LoadB2BUserUserGroups,\n  LoadB2BUserUserGroupsFail: LoadB2BUserUserGroupsFail,\n  LoadB2BUserUserGroupsSuccess: LoadB2BUserUserGroupsSuccess,\n  AssignB2BUserUserGroup: AssignB2BUserUserGroup,\n  AssignB2BUserUserGroupFail: AssignB2BUserUserGroupFail,\n  AssignB2BUserUserGroupSuccess: AssignB2BUserUserGroupSuccess,\n  UnassignB2BUserUserGroup: UnassignB2BUserUserGroup,\n  UnassignB2BUserUserGroupFail: UnassignB2BUserUserGroupFail,\n  UnassignB2BUserUserGroupSuccess: UnassignB2BUserUserGroupSuccess\n});\nconst CLEAR_ORGANIZATION_DATA = '[Organization] Clear Data';\nclass OrganizationClearData {\n  constructor() {\n    this.type = CLEAR_ORGANIZATION_DATA;\n  }\n}\nvar organization_action = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CLEAR_ORGANIZATION_DATA: CLEAR_ORGANIZATION_DATA,\n  OrganizationClearData: OrganizationClearData\n});\nlet BudgetEffects = /*#__PURE__*/(() => {\n  class BudgetEffects {\n    constructor(actions$, budgetConnector) {\n      this.actions$ = actions$;\n      this.budgetConnector = budgetConnector;\n      this.loadBudget$ = this.actions$.pipe(ofType(LOAD_BUDGET), map(action => action.payload), switchMap(({\n        userId,\n        budgetCode\n      }) => {\n        return this.budgetConnector.get(userId, budgetCode).pipe(map(budget => {\n          return new LoadBudgetSuccess([budget]);\n        }), catchError(error => of(new LoadBudgetFail({\n          budgetCode,\n          error: normalizeHttpError(error)\n        }))));\n      }));\n      this.loadBudgets$ = this.actions$.pipe(ofType(LOAD_BUDGETS), map(action => action.payload), switchMap(payload => this.budgetConnector.getList(payload.userId, payload.params).pipe(switchMap(budgets => {\n        const {\n          values,\n          page\n        } = StateUtils.normalizeListPage(budgets, 'code');\n        return [new LoadBudgetSuccess(values), new LoadBudgetsSuccess({\n          page,\n          params: payload.params\n        })];\n      }), catchError(error => of(new LoadBudgetsFail({\n        params: payload.params,\n        error: normalizeHttpError(error)\n      }))))));\n      this.createBudget$ = this.actions$.pipe(ofType(CREATE_BUDGET), map(action => action.payload), switchMap(payload => this.budgetConnector.create(payload.userId, payload.budget).pipe(switchMap(data => [new CreateBudgetSuccess(data), new OrganizationClearData()]), catchError(error => from([new CreateBudgetFail({\n        budgetCode: payload.budget.code,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.updateBudget$ = this.actions$.pipe(ofType(UPDATE_BUDGET), map(action => action.payload), switchMap(payload => this.budgetConnector.update(payload.userId, payload.budgetCode, payload.budget).pipe(switchMap(data => [new UpdateBudgetSuccess(data), new OrganizationClearData()]), catchError(error => from([new UpdateBudgetFail({\n        budgetCode: payload.budget.code,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n    }\n  }\n  BudgetEffects.ɵfac = function BudgetEffects_Factory(t) {\n    return new (t || BudgetEffects)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(BudgetConnector));\n  };\n  BudgetEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BudgetEffects,\n    factory: BudgetEffects.ɵfac\n  });\n  __decorate([Effect()], BudgetEffects.prototype, \"loadBudget$\", void 0);\n  __decorate([Effect()], BudgetEffects.prototype, \"loadBudgets$\", void 0);\n  __decorate([Effect()], BudgetEffects.prototype, \"createBudget$\", void 0);\n  __decorate([Effect()], BudgetEffects.prototype, \"updateBudget$\", void 0);\n  return BudgetEffects;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrgUnitEffects = /*#__PURE__*/(() => {\n  class OrgUnitEffects {\n    // @Effect()\n    // loadAddress$: Observable<\n    //   | OrgUnitActions.LoadAddressSuccess\n    //   | OrgUnitActions.LoadAddressesSuccess\n    //   | OrgUnitActions.LoadAddressesFail\n    // > = this.actions$.pipe(\n    //   ofType(OrgUnitActions.LOAD_ADDRESSES),\n    //   map((action: OrgUnitActions.LoadAddresses) => action.payload),\n    //   switchMap(({ userId, orgUnitId }) => {\n    //     return this.orgUnitConnector.getAddresses(userId, orgUnitId).pipe(\n    //       switchMap((addresses: EntitiesModel<B2BAddress>) => {\n    //         const { values, page } = StateUtils.normalizeListPage(addresses, 'id');\n    //         return [\n    //           new OrgUnitActions.LoadAddressSuccess(values),\n    //           new OrgUnitActions.LoadAddressesSuccess({ page, orgUnitId }),\n    //         ];\n    //       }),\n    //       catchError(error =>\n    //         of(\n    //           new OrgUnitActions.LoadAddressesFail({\n    //             orgUnitId,\n    //             error: normalizeHttpError(error),\n    //           })\n    //         )\n    //       )\n    //     );\n    //   })\n    // );\n    constructor(actions$, orgUnitConnector) {\n      this.actions$ = actions$;\n      this.orgUnitConnector = orgUnitConnector;\n      this.loadOrgUnit$ = this.actions$.pipe(ofType(LOAD_ORG_UNIT), map(action => action.payload), switchMap(({\n        userId,\n        orgUnitId\n      }) => {\n        return this.orgUnitConnector.get(userId, orgUnitId).pipe(switchMap(orgUnit => {\n          const {\n            values,\n            page\n          } = StateUtils.normalizeListPage({\n            values: orgUnit.addresses\n          }, 'id');\n          return [new LoadOrgUnitSuccess([orgUnit]), new LoadAddressSuccess(values), new LoadAddressesSuccess({\n            page,\n            orgUnitId\n          })];\n        }), catchError(error => of(new LoadOrgUnitFail({\n          orgUnitId,\n          error: normalizeHttpError(error)\n        }))));\n      }));\n      this.loadAvailableOrgUnits$ = this.actions$.pipe(ofType(LOAD_UNIT_NODES), map(action => action.payload), switchMap(payload => this.orgUnitConnector.getList(payload.userId).pipe(map(orgUnitsList => new LoadOrgUnitNodesSuccess(orgUnitsList)), catchError(error => of(new LoadOrgUnitNodesFail({\n        error: normalizeHttpError(error)\n      }))))));\n      this.createUnit$ = this.actions$.pipe(ofType(CREATE_ORG_UNIT), map(action => action.payload), switchMap(payload => this.orgUnitConnector.create(payload.userId, payload.unit).pipe(switchMap(data => [new CreateUnitSuccess(data), new OrganizationClearData()]), catchError(error => from([new CreateUnitFail({\n        unitCode: payload.unit.uid,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.updateUnit$ = this.actions$.pipe(ofType(UPDATE_ORG_UNIT), map(action => action.payload), switchMap(payload => this.orgUnitConnector.update(payload.userId, payload.unitCode, payload.unit).pipe(switchMap(_data => [\n      // Workaround for empty response\n      new UpdateUnitSuccess(payload.unit), new OrganizationClearData()]), catchError(error => from([new UpdateUnitFail({\n        unitCode: payload.unit.uid,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.loadTree$ = this.actions$.pipe(ofType(LOAD_UNIT_TREE), map(action => action.payload), switchMap(({\n        userId\n      }) => {\n        return this.orgUnitConnector.getTree(userId).pipe(map(orgUnit => new LoadTreeSuccess(orgUnit)), catchError(error => of(new LoadTreeFail({\n          error: normalizeHttpError(error)\n        }))));\n      }));\n      this.loadApprovalProcesses$ = this.actions$.pipe(ofType(LOAD_APPROVAL_PROCESSES), map(action => action.payload), switchMap(({\n        userId\n      }) => {\n        return this.orgUnitConnector.getApprovalProcesses(userId).pipe(map(approvalProcesses => new LoadApprovalProcessesSuccess(approvalProcesses)), catchError(error => of(new LoadApprovalProcessesFail({\n          error: normalizeHttpError(error)\n        }))));\n      }));\n      this.loadUsers$ = this.actions$.pipe(ofType(LOAD_ASSIGNED_USERS), map(action => action.payload), groupBy(({\n        orgUnitId,\n        roleId,\n        params\n      }) => StateUtils.serializeParams([orgUnitId, roleId], params)), mergeMap(group => group.pipe(switchMap(({\n        userId,\n        orgUnitId,\n        roleId,\n        params\n      }) => {\n        return this.orgUnitConnector.getUsers(userId, orgUnitId, roleId, params).pipe(switchMap(users => {\n          const {\n            values,\n            page\n          } = StateUtils.normalizeListPage(users, 'customerId');\n          return [new LoadB2BUserSuccess(values), new LoadAssignedUsersSuccess({\n            orgUnitId,\n            roleId,\n            page,\n            params\n          })];\n        }), catchError(error => of(new LoadAssignedUsersFail({\n          orgUnitId,\n          roleId,\n          params,\n          error: normalizeHttpError(error)\n        }))));\n      }))));\n      this.assignRoleToUser = this.actions$.pipe(ofType(ASSIGN_ROLE), map(action => action.payload), switchMap(({\n        userId,\n        orgCustomerId,\n        roleId\n      }) => this.orgUnitConnector.assignRole(userId, orgCustomerId, roleId).pipe(map(() => new AssignRoleSuccess({\n        uid: orgCustomerId,\n        roleId,\n        selected: true\n      })), catchError(error => of(new AssignRoleFail({\n        orgCustomerId,\n        error: normalizeHttpError(error)\n      }))))));\n      this.unassignRoleToUser$ = this.actions$.pipe(ofType(UNASSIGN_ROLE), map(action => action.payload), switchMap(({\n        userId,\n        orgCustomerId,\n        roleId\n      }) => this.orgUnitConnector.unassignRole(userId, orgCustomerId, roleId).pipe(map(() => new UnassignRoleSuccess({\n        uid: orgCustomerId,\n        roleId,\n        selected: false\n      })), catchError(error => of(new UnassignRoleFail({\n        orgCustomerId,\n        error: normalizeHttpError(error)\n      }))))));\n      this.assignApprover = this.actions$.pipe(ofType(ASSIGN_APPROVER), map(action => action.payload), mergeMap(({\n        userId,\n        orgUnitId,\n        orgCustomerId,\n        roleId\n      }) => this.orgUnitConnector.assignApprover(userId, orgUnitId, orgCustomerId, roleId).pipe(switchMap(() => [new AssignApproverSuccess({\n        uid: orgCustomerId,\n        roleId,\n        selected: true\n      }), new OrganizationClearData()]), catchError(error => from([new AssignApproverFail({\n        orgCustomerId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.unassignApprover = this.actions$.pipe(ofType(UNASSIGN_APPROVER), map(action => action.payload), mergeMap(({\n        userId,\n        orgUnitId,\n        orgCustomerId,\n        roleId\n      }) => this.orgUnitConnector.unassignApprover(userId, orgUnitId, orgCustomerId, roleId).pipe(switchMap(() => [new UnassignApproverSuccess({\n        uid: orgCustomerId,\n        roleId,\n        selected: false\n      }), new OrganizationClearData()]), catchError(error => from([new UnassignApproverFail({\n        orgCustomerId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.createAddress$ = this.actions$.pipe(ofType(CREATE_ADDRESS), map(action => action.payload), switchMap(payload => this.orgUnitConnector.createAddress(payload.userId, payload.orgUnitId, payload.address).pipe(switchMap(data => [new CreateAddressSuccess(data), new CreateAddressSuccess({\n        id: null\n      }), new OrganizationClearData()]), catchError(error => from([new CreateAddressFail({\n        addressId: payload.address.id,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.updateAddress$ = this.actions$.pipe(ofType(UPDATE_ADDRESS), map(action => action.payload), switchMap(({\n        userId,\n        orgUnitId,\n        addressId,\n        address\n      }) => this.orgUnitConnector.updateAddress(userId, orgUnitId, addressId, address).pipe(switchMap(() => [\n      // commented out due to no response from backend on PATCH request\n      // new OrgUnitActions.UpdateAddressSuccess(data),\n      new UpdateAddressSuccess(address), new OrganizationClearData()]), catchError(error => from([new UpdateAddressFail({\n        addressId: address.id,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.deleteAddress$ = this.actions$.pipe(ofType(DELETE_ADDRESS), map(action => action.payload), switchMap(payload => this.orgUnitConnector.deleteAddress(payload.userId, payload.orgUnitId, payload.addressId).pipe(switchMap(() => [new DeleteAddressSuccess({\n        id: payload.addressId\n      }), new OrganizationClearData()]), catchError(error => from([new DeleteAddressFail({\n        addressId: payload.addressId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n    }\n  }\n  OrgUnitEffects.ɵfac = function OrgUnitEffects_Factory(t) {\n    return new (t || OrgUnitEffects)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(OrgUnitConnector));\n  };\n  OrgUnitEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrgUnitEffects,\n    factory: OrgUnitEffects.ɵfac\n  });\n  __decorate([Effect()], OrgUnitEffects.prototype, \"loadOrgUnit$\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"loadAvailableOrgUnits$\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"createUnit$\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"updateUnit$\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"loadTree$\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"loadApprovalProcesses$\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"loadUsers$\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"assignRoleToUser\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"unassignRoleToUser$\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"assignApprover\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"unassignApprover\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"createAddress$\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"updateAddress$\", void 0);\n  __decorate([Effect()], OrgUnitEffects.prototype, \"deleteAddress$\", void 0);\n  return OrgUnitEffects;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PermissionEffects = /*#__PURE__*/(() => {\n  class PermissionEffects {\n    constructor(actions$, permissionConnector) {\n      this.actions$ = actions$;\n      this.permissionConnector = permissionConnector;\n      this.loadPermission$ = this.actions$.pipe(ofType(LOAD_PERMISSION), map(action => action.payload), switchMap(({\n        userId,\n        permissionCode\n      }) => {\n        return this.permissionConnector.get(userId, permissionCode).pipe(map(permission => {\n          return new LoadPermissionSuccess([permission]);\n        }), catchError(error => of(new LoadPermissionFail({\n          permissionCode,\n          error: normalizeHttpError(error)\n        }))));\n      }));\n      this.loadPermissions$ = this.actions$.pipe(ofType(LOAD_PERMISSIONS), map(action => action.payload), switchMap(payload => this.permissionConnector.getList(payload.userId, payload.params).pipe(switchMap(permissions => {\n        const {\n          values,\n          page\n        } = StateUtils.normalizeListPage(permissions, 'code');\n        return [new LoadPermissionSuccess(values), new LoadPermissionsSuccess({\n          page,\n          params: payload.params\n        })];\n      }), catchError(error => of(new LoadPermissionsFail({\n        params: payload.params,\n        error: normalizeHttpError(error)\n      }))))));\n      this.createPermission$ = this.actions$.pipe(ofType(CREATE_PERMISSION), map(action => action.payload), switchMap(payload => this.permissionConnector.create(payload.userId, payload.permission).pipe(switchMap(data => [new CreatePermissionSuccess(data), new OrganizationClearData()]), catchError(error => from([new CreatePermissionFail({\n        permissionCode: payload.permission.code,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.updatePermission$ = this.actions$.pipe(ofType(UPDATE_PERMISSION), map(action => action.payload), switchMap(payload => this.permissionConnector.update(payload.userId, payload.permissionCode, payload.permission).pipe(switchMap(data => [new UpdatePermissionSuccess(data), new OrganizationClearData()]), catchError(error => from([new UpdatePermissionFail({\n        permissionCode: payload.permission.code,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.loadPermissionTypes$ = this.actions$.pipe(ofType(LOAD_PERMISSION_TYPES), switchMap(() => this.permissionConnector.getTypes().pipe(map(permissionTypeList => new LoadPermissionTypesSuccess(permissionTypeList)), catchError(error => of(new LoadPermissionTypesFail({\n        error: normalizeHttpError(error)\n      }))))));\n    }\n  }\n  PermissionEffects.ɵfac = function PermissionEffects_Factory(t) {\n    return new (t || PermissionEffects)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(PermissionConnector));\n  };\n  PermissionEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PermissionEffects,\n    factory: PermissionEffects.ɵfac\n  });\n  __decorate([Effect()], PermissionEffects.prototype, \"loadPermission$\", void 0);\n  __decorate([Effect()], PermissionEffects.prototype, \"loadPermissions$\", void 0);\n  __decorate([Effect()], PermissionEffects.prototype, \"createPermission$\", void 0);\n  __decorate([Effect()], PermissionEffects.prototype, \"updatePermission$\", void 0);\n  __decorate([Effect()], PermissionEffects.prototype, \"loadPermissionTypes$\", void 0);\n  return PermissionEffects;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CostCenterEffects = /*#__PURE__*/(() => {\n  class CostCenterEffects {\n    constructor(actions$, costCenterConnector) {\n      this.actions$ = actions$;\n      this.costCenterConnector = costCenterConnector;\n      this.loadCostCenter$ = this.actions$.pipe(ofType(LOAD_COST_CENTER), map(action => action.payload), switchMap(({\n        userId,\n        costCenterCode\n      }) => {\n        return this.costCenterConnector.get(userId, costCenterCode).pipe(map(costCenter => {\n          return new LoadCostCenterSuccess([costCenter]);\n        }), catchError(error => of(new LoadCostCenterFail({\n          costCenterCode,\n          error: normalizeHttpError(error)\n        }))));\n      }));\n      this.loadCostCenters$ = this.actions$.pipe(ofType(LOAD_COST_CENTERS), map(action => action.payload), switchMap(payload => this.costCenterConnector.getList(payload.userId, payload.params).pipe(switchMap(costCenters => {\n        const {\n          values,\n          page\n        } = StateUtils.normalizeListPage(costCenters, 'code');\n        return [new LoadCostCenterSuccess(values), new LoadCostCentersSuccess({\n          page,\n          params: payload.params\n        })];\n      }), catchError(error => of(new LoadCostCentersFail({\n        params: payload.params,\n        error: normalizeHttpError(error)\n      }))))));\n      this.createCostCenter$ = this.actions$.pipe(ofType(CREATE_COST_CENTER), map(action => action.payload), switchMap(payload => this.costCenterConnector.create(payload.userId, payload.costCenter).pipe(switchMap(data => [new CreateCostCenterSuccess(data), new OrganizationClearData()]), catchError(error => from([new CreateCostCenterFail({\n        costCenterCode: payload.costCenter.code,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.updateCostCenter$ = this.actions$.pipe(ofType(UPDATE_COST_CENTER), map(action => action.payload), switchMap(payload => this.costCenterConnector.update(payload.userId, payload.costCenterCode, payload.costCenter).pipe(switchMap(data => [new UpdateCostCenterSuccess(data), new OrganizationClearData()]), catchError(error => from([new UpdateCostCenterFail({\n        costCenterCode: payload.costCenter.code,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.loadAssignedBudgets$ = this.actions$.pipe(ofType(LOAD_ASSIGNED_BUDGETS), map(action => action.payload), groupBy(({\n        costCenterCode,\n        params\n      }) => StateUtils.serializeParams(costCenterCode, params)), mergeMap(group => group.pipe(switchMap(({\n        userId,\n        costCenterCode,\n        params\n      }) => this.costCenterConnector.getBudgets(userId, costCenterCode, params).pipe(switchMap(budgets => {\n        const {\n          values,\n          page\n        } = StateUtils.normalizeListPage(budgets, 'code');\n        return [new LoadBudgetSuccess(values), new LoadAssignedBudgetsSuccess({\n          costCenterCode,\n          page,\n          params\n        })];\n      }), catchError(error => of(new LoadAssignedBudgetsFail({\n        costCenterCode,\n        params,\n        error: normalizeHttpError(error)\n      }))))))));\n      this.assignBudgetToCostCenter$ = this.actions$.pipe(ofType(ASSIGN_BUDGET), map(action => action.payload), mergeMap(({\n        userId,\n        costCenterCode,\n        budgetCode\n      }) => this.costCenterConnector.assignBudget(userId, costCenterCode, budgetCode).pipe(switchMap(() => [new AssignBudgetSuccess({\n        code: budgetCode,\n        selected: true\n      }), new OrganizationClearData()]), catchError(error => from([new AssignBudgetFail({\n        budgetCode,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.unassignBudgetToCostCenter$ = this.actions$.pipe(ofType(UNASSIGN_BUDGET), map(action => action.payload), mergeMap(({\n        userId,\n        costCenterCode,\n        budgetCode\n      }) => this.costCenterConnector.unassignBudget(userId, costCenterCode, budgetCode).pipe(switchMap(() => [new UnassignBudgetSuccess({\n        code: budgetCode,\n        selected: false\n      }), new OrganizationClearData()]), catchError(error => from([new UnassignBudgetFail({\n        budgetCode,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n    }\n  }\n  CostCenterEffects.ɵfac = function CostCenterEffects_Factory(t) {\n    return new (t || CostCenterEffects)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(CostCenterConnector));\n  };\n  CostCenterEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CostCenterEffects,\n    factory: CostCenterEffects.ɵfac\n  });\n  __decorate([Effect()], CostCenterEffects.prototype, \"loadCostCenter$\", void 0);\n  __decorate([Effect()], CostCenterEffects.prototype, \"loadCostCenters$\", void 0);\n  __decorate([Effect()], CostCenterEffects.prototype, \"createCostCenter$\", void 0);\n  __decorate([Effect()], CostCenterEffects.prototype, \"updateCostCenter$\", void 0);\n  __decorate([Effect()], CostCenterEffects.prototype, \"loadAssignedBudgets$\", void 0);\n  __decorate([Effect()], CostCenterEffects.prototype, \"assignBudgetToCostCenter$\", void 0);\n  __decorate([Effect()], CostCenterEffects.prototype, \"unassignBudgetToCostCenter$\", void 0);\n  return CostCenterEffects;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet B2BUserEffects = /*#__PURE__*/(() => {\n  class B2BUserEffects {\n    constructor(actions$, b2bUserConnector, routingService, userService, userIdService) {\n      this.actions$ = actions$;\n      this.b2bUserConnector = b2bUserConnector;\n      this.routingService = routingService;\n      this.userService = userService;\n      this.userIdService = userIdService;\n      this.loadB2BUser$ = this.actions$.pipe(ofType(LOAD_B2B_USER), map(action => action.payload), switchMap(({\n        userId,\n        orgCustomerId\n      }) => {\n        return this.b2bUserConnector.get(userId, orgCustomerId).pipe(map(b2bUser => {\n          return new LoadB2BUserSuccess([b2bUser]);\n        }), catchError(error => of(new LoadB2BUserFail({\n          orgCustomerId,\n          error: normalizeHttpError(error)\n        }))));\n      }));\n      this.createB2BUser$ = this.actions$.pipe(ofType(CREATE_B2B_USER), map(action => action.payload), switchMap(({\n        userId,\n        orgCustomer\n      }) => this.b2bUserConnector.create(userId, orgCustomer).pipe(switchMap(data => {\n        const isAssignedToApprovers = orgCustomer.isAssignedToApprovers;\n        // TODO Workaround for not known customerId while user creation (redireciton)\n        return this.routingService.getRouterState().pipe(take(1), tap(route => this.redirectToDetails(route, data)), switchMap(() => {\n          const successActions = [new CreateB2BUserSuccess(data), new CreateB2BUserSuccess({\n            customerId: null\n          }), new OrganizationClearData()];\n          if (isAssignedToApprovers) {\n            successActions.splice(1, 0, new AssignApprover({\n              userId,\n              orgUnitId: orgCustomer.orgUnit.uid,\n              orgCustomerId: data.customerId,\n              roleId: B2BUserRole.APPROVER\n            }));\n          }\n          return successActions;\n        }));\n      }), catchError(error => from([new CreateB2BUserFail({\n        orgCustomerId: orgCustomer.customerId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.updateB2BUser$ = this.actions$.pipe(ofType(UPDATE_B2B_USER), map(action => action.payload), switchMap(({\n        userId,\n        orgCustomerId,\n        orgCustomer\n      }) => {\n        const isAssignedToApprovers = orgCustomer.isAssignedToApprovers;\n        return this.b2bUserConnector.update(userId, orgCustomerId, orgCustomer).pipe(switchMap(_data => {\n          const successActions = [\n          // TODO: change for 'payload: data' when backend API start to return user data on PATCH\n          new UpdateB2BUserSuccess(orgCustomer)];\n          if (isAssignedToApprovers) {\n            successActions.push(new AssignApprover({\n              userId,\n              orgUnitId: orgCustomer.orgUnit.uid,\n              orgCustomerId,\n              roleId: B2BUserRole.APPROVER\n            }));\n          }\n          return successActions;\n        }), catchError(error => from([new UpdateB2BUserFail({\n          orgCustomerId: orgCustomer.customerId,\n          error: normalizeHttpError(error)\n        }), new OrganizationClearData()])));\n      }));\n      this.checkSelfEmailUpdate$ = this.actions$.pipe(ofType(UPDATE_B2B_USER_SUCCESS), map(action => action.payload), withLatestFrom(this.userService.get(), this.userIdService.getUserId()), switchMap(([payload, currentUser]) => {\n        const currentUserEmailMatch = payload.customerId === currentUser.customerId && payload.email !== currentUser.displayUid;\n        if (currentUserEmailMatch) {\n          this.routingService.go({\n            cxRoute: 'login'\n          });\n        }\n        return currentUserEmailMatch ? [new AuthActions.Logout()] : [new OrganizationClearData()];\n      }));\n      this.loadB2BUsers$ = this.actions$.pipe(ofType(LOAD_B2B_USERS), map(action => action.payload), switchMap(payload => this.b2bUserConnector.getList(payload.userId, payload.params).pipe(switchMap(b2bUsers => {\n        const {\n          values,\n          page\n        } = StateUtils.normalizeListPage(b2bUsers, 'customerId');\n        return [new LoadB2BUserSuccess(values), new LoadB2BUsersSuccess({\n          page,\n          params: payload.params\n        })];\n      }), catchError(error => of(new LoadB2BUsersFail({\n        params: payload.params,\n        error: normalizeHttpError(error)\n      }))))));\n      this.loadB2BUserApprovers$ = this.actions$.pipe(ofType(LOAD_B2B_USER_APPROVERS), map(action => action.payload), groupBy(({\n        orgCustomerId,\n        params\n      }) => StateUtils.serializeParams(orgCustomerId, params)), mergeMap(group => group.pipe(switchMap(payload => this.b2bUserConnector.getApprovers(payload.userId, payload.orgCustomerId, payload.params).pipe(switchMap(approvers => {\n        const {\n          values,\n          page\n        } = StateUtils.normalizeListPage(approvers, 'customerId');\n        return [new LoadB2BUserSuccess(values), new LoadB2BUserApproversSuccess({\n          orgCustomerId: payload.orgCustomerId,\n          page,\n          params: payload.params\n        })];\n      }), catchError(error => of(new LoadB2BUserApproversFail({\n        orgCustomerId: payload.orgCustomerId,\n        params: payload.params,\n        error: normalizeHttpError(error)\n      }))))))));\n      this.loadB2BUserPermissions$ = this.actions$.pipe(ofType(LOAD_B2B_USER_PERMISSIONS), map(action => action.payload), groupBy(({\n        orgCustomerId,\n        params\n      }) => StateUtils.serializeParams(orgCustomerId, params)), mergeMap(group => group.pipe(switchMap(payload => this.b2bUserConnector.getPermissions(payload.userId, payload.orgCustomerId, payload.params).pipe(switchMap(permissions => {\n        const {\n          values,\n          page\n        } = StateUtils.normalizeListPage(permissions, 'code');\n        return [new LoadPermissionSuccess(values), new LoadB2BUserPermissionsSuccess({\n          orgCustomerId: payload.orgCustomerId,\n          page,\n          params: payload.params\n        })];\n      }), catchError(error => of(new LoadB2BUserPermissionsFail({\n        orgCustomerId: payload.orgCustomerId,\n        params: payload.params,\n        error: normalizeHttpError(error)\n      }))))))));\n      this.loadB2BUserUserGroups$ = this.actions$.pipe(ofType(LOAD_B2B_USER_USER_GROUPS), map(action => action.payload), groupBy(({\n        orgCustomerId,\n        params\n      }) => StateUtils.serializeParams(orgCustomerId, params)), mergeMap(group => group.pipe(switchMap(payload => this.b2bUserConnector.getUserGroups(payload.userId, payload.orgCustomerId, payload.params).pipe(switchMap(userGroups => {\n        const {\n          values,\n          page\n        } = StateUtils.normalizeListPage(userGroups, 'uid');\n        return [new LoadUserGroupSuccess(values), new LoadB2BUserUserGroupsSuccess({\n          orgCustomerId: payload.orgCustomerId,\n          page,\n          params: payload.params\n        })];\n      }), catchError(error => of(new LoadB2BUserUserGroupsFail({\n        orgCustomerId: payload.orgCustomerId,\n        params: payload.params,\n        error: normalizeHttpError(error)\n      }))))))));\n      this.assignApproverToB2BUser$ = this.actions$.pipe(ofType(ASSIGN_B2B_USER_APPROVER), map(action => action.payload), mergeMap(payload => this.b2bUserConnector.assignApprover(payload.userId, payload.orgCustomerId, payload.approverId).pipe(switchMap(data => [new AssignB2BUserApproverSuccess({\n        // Occ returned email, but we use customerId in store\n        approverId: payload.approverId,\n        selected: data.selected\n      })\n      // Clearing data in this case causes unexpected behavior (#10468)\n      // new OrganizationActions.OrganizationClearData(),\n      ]), catchError(error => from([new AssignB2BUserApproverFail({\n        orgCustomerId: payload.orgCustomerId,\n        approverId: payload.approverId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.unassignApproverFromB2BUser$ = this.actions$.pipe(ofType(UNASSIGN_B2B_USER_APPROVER), map(action => action.payload), mergeMap(payload => this.b2bUserConnector.unassignApprover(payload.userId, payload.orgCustomerId, payload.approverId).pipe(switchMap(data => [new UnassignB2BUserApproverSuccess({\n        // Occ returned email, but we use customerId in store\n        approverId: payload.approverId,\n        selected: data.selected\n      })\n      // Clearing data in this case causes unexpected behavior (#10468)\n      // new OrganizationActions.OrganizationClearData(),\n      ]), catchError(error => from([new UnassignB2BUserApproverFail({\n        orgCustomerId: payload.orgCustomerId,\n        approverId: payload.approverId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.assignPermissionToB2BUser$ = this.actions$.pipe(ofType(ASSIGN_B2B_USER_PERMISSION), map(action => action.payload), mergeMap(payload => this.b2bUserConnector.assignPermission(payload.userId, payload.orgCustomerId, payload.permissionId).pipe(switchMap(data => [new AssignB2BUserPermissionSuccess({\n        permissionId: data.id,\n        selected: data.selected\n      }), new OrganizationClearData()]), catchError(error => from([new AssignB2BUserPermissionFail({\n        orgCustomerId: payload.orgCustomerId,\n        permissionId: payload.permissionId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.unassignPermissionFromB2BUser$ = this.actions$.pipe(ofType(UNASSIGN_B2B_USER_PERMISSION), map(action => action.payload), mergeMap(payload => this.b2bUserConnector.unassignPermission(payload.userId, payload.orgCustomerId, payload.permissionId).pipe(switchMap(data => [new UnassignB2BUserPermissionSuccess({\n        permissionId: data.id,\n        selected: data.selected\n      }), new OrganizationClearData()]), catchError(error => from([new UnassignB2BUserPermissionFail({\n        orgCustomerId: payload.orgCustomerId,\n        permissionId: payload.permissionId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.assignUserGroupToB2BUser$ = this.actions$.pipe(ofType(ASSIGN_B2B_USER_USER_GROUP), map(action => action.payload), mergeMap(payload => this.b2bUserConnector.assignUserGroup(payload.userId, payload.orgCustomerId, payload.userGroupId).pipe(switchMap(data => [new AssignB2BUserUserGroupSuccess({\n        uid: data.id,\n        selected: data.selected\n      }), new OrganizationClearData()]), catchError(error => from([new AssignB2BUserUserGroupFail({\n        orgCustomerId: payload.orgCustomerId,\n        userGroupId: payload.userGroupId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.unassignUserGroupFromB2BUser$ = this.actions$.pipe(ofType(UNASSIGN_B2B_USER_USER_GROUP), map(action => action.payload), mergeMap(payload => this.b2bUserConnector.unassignUserGroup(payload.userId, payload.orgCustomerId, payload.userGroupId).pipe(switchMap(\n      // TODO: Workaround because occ doesn't respond here\n      // (data) =>\n      //   new B2BUserActions.DeleteB2BUserUserGroupSuccess({\n      //     uid: data.id,\n      //     selected: data.selected,\n      //   })\n      () => [new UnassignB2BUserUserGroupSuccess({\n        uid: payload.userGroupId,\n        selected: false\n      }), new OrganizationClearData()]), catchError(error => from([new UnassignB2BUserUserGroupFail({\n        orgCustomerId: payload.orgCustomerId,\n        userGroupId: payload.userGroupId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n    }\n    redirectToDetails(route, data) {\n      var _a, _b, _c;\n      if (((_c = (_b = (_a = route) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.context) === null || _c === void 0 ? void 0 : _c.id) !== '/organization/units') {\n        this.routingService.go({\n          cxRoute: 'orgUserDetails',\n          params: data\n        });\n      }\n    }\n  }\n  B2BUserEffects.ɵfac = function B2BUserEffects_Factory(t) {\n    return new (t || B2BUserEffects)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(B2BUserConnector), i0.ɵɵinject(i1.RoutingService), i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i1.UserIdService));\n  };\n  B2BUserEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: B2BUserEffects,\n    factory: B2BUserEffects.ɵfac\n  });\n  __decorate([Effect()], B2BUserEffects.prototype, \"loadB2BUser$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"createB2BUser$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"updateB2BUser$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"checkSelfEmailUpdate$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"loadB2BUsers$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"loadB2BUserApprovers$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"loadB2BUserPermissions$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"loadB2BUserUserGroups$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"assignApproverToB2BUser$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"unassignApproverFromB2BUser$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"assignPermissionToB2BUser$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"unassignPermissionFromB2BUser$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"assignUserGroupToB2BUser$\", void 0);\n  __decorate([Effect()], B2BUserEffects.prototype, \"unassignUserGroupFromB2BUser$\", void 0);\n  return B2BUserEffects;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UserGroupEffects = /*#__PURE__*/(() => {\n  class UserGroupEffects {\n    constructor(actions$, userGroupConnector) {\n      this.actions$ = actions$;\n      this.userGroupConnector = userGroupConnector;\n      this.loadUserGroup$ = this.actions$.pipe(ofType(LOAD_USER_GROUP), map(action => action.payload), switchMap(({\n        userId,\n        userGroupId\n      }) => {\n        return this.userGroupConnector.get(userId, userGroupId).pipe(map(userGroup => {\n          return new LoadUserGroupSuccess([userGroup]);\n        }), catchError(error => of(new LoadUserGroupFail({\n          userGroupId,\n          error: normalizeHttpError(error)\n        }))));\n      }));\n      this.loadUserGroups$ = this.actions$.pipe(ofType(LOAD_USER_GROUPS), map(action => action.payload), switchMap(payload => this.userGroupConnector.getList(payload.userId, payload.params).pipe(switchMap(userGroups => {\n        const {\n          values,\n          page\n        } = StateUtils.normalizeListPage(userGroups, 'uid');\n        return [new LoadUserGroupSuccess(values), new LoadUserGroupsSuccess({\n          page,\n          params: payload.params\n        })];\n      }), catchError(error => of(new LoadUserGroupsFail({\n        params: payload.params,\n        error: normalizeHttpError(error)\n      }))))));\n      this.loadAvailableOrderApprovalPermissions$ = this.actions$.pipe(ofType(LOAD_USER_GROUP_PERMISSIONS), map(action => action.payload), groupBy(({\n        userGroupId,\n        params\n      }) => StateUtils.serializeParams(userGroupId, params)), mergeMap(group => group.pipe(switchMap(payload => this.userGroupConnector.getAvailableOrderApprovalPermissions(payload.userId, payload.userGroupId, payload.params).pipe(switchMap(permissions => {\n        const {\n          values,\n          page\n        } = StateUtils.normalizeListPage(permissions, 'code');\n        return [new LoadPermissionSuccess(values), new LoadPermissionsSuccess$1({\n          userGroupId: payload.userGroupId,\n          page,\n          params: payload.params\n        })];\n      }), catchError(error => of(new LoadPermissionsFail$1({\n        userGroupId: payload.userGroupId,\n        params: payload.params,\n        error: normalizeHttpError(error)\n      }))))))));\n      this.loadAvailableOrgCustomers$ = this.actions$.pipe(ofType(LOAD_USER_GROUP_AVAILABLE_CUSTOMERS), map(action => action.payload), groupBy(({\n        userGroupId,\n        params\n      }) => StateUtils.serializeParams(userGroupId, params)), mergeMap(group => group.pipe(switchMap(payload => this.userGroupConnector.getAvailableOrgCustomers(payload.userId, payload.userGroupId, payload.params).pipe(switchMap(customers => {\n        const {\n          values,\n          page\n        } = StateUtils.normalizeListPage(customers, 'customerId');\n        return [new LoadB2BUserSuccess(values), new LoadAvailableOrgCustomersSuccess({\n          userGroupId: payload.userGroupId,\n          page,\n          params: payload.params\n        })];\n      }), catchError(error => of(new LoadAvailableOrgCustomersFail({\n        userGroupId: payload.userGroupId,\n        params: payload.params,\n        error: normalizeHttpError(error)\n      }))))))));\n      this.createUserGroup$ = this.actions$.pipe(ofType(CREATE_USER_GROUP), map(action => action.payload), switchMap(payload => this.userGroupConnector.create(payload.userId, payload.userGroup).pipe(switchMap(data => [new CreateUserGroupSuccess(data), new OrganizationClearData()]), catchError(error => from([new CreateUserGroupFail({\n        userGroupId: payload.userGroup.uid,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.updateUserGroup$ = this.actions$.pipe(ofType(UPDATE_USER_GROUP), map(action => action.payload), switchMap(payload => this.userGroupConnector.update(payload.userId, payload.userGroupId, payload.userGroup).pipe(switchMap(() => [\n      // TODO: Workaround for empty PATCH response:\n      new UpdateUserGroupSuccess(payload.userGroup), new OrganizationClearData()]), catchError(error => from([new UpdateUserGroupFail({\n        userGroupId: payload.userGroup.uid,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.deleteUserGroup$ = this.actions$.pipe(ofType(DELETE_USER_GROUP), map(action => action.payload), switchMap(payload => this.userGroupConnector.delete(payload.userId, payload.userGroupId).pipe(switchMap(data => [new DeleteUserGroupSuccess(data), new OrganizationClearData()]), catchError(error => from([new DeleteUserGroupFail({\n        userGroupId: payload.userGroupId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.assignPermissionToUserGroup$ = this.actions$.pipe(ofType(USER_GROUP_ASSIGN_PERMISSION), map(action => action.payload), mergeMap(payload => this.userGroupConnector.assignOrderApprovalPermission(payload.userId, payload.userGroupId, payload.permissionUid).pipe(switchMap(data => [new AssignPermissionSuccess({\n        permissionUid: data.id,\n        selected: data.selected\n      }), new OrganizationClearData()]), catchError(error => from([new AssignPermissionFail({\n        userGroupId: payload.userGroupId,\n        permissionUid: payload.permissionUid,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.assignMemberUnitUserGroup$ = this.actions$.pipe(ofType(USER_GROUP_ASSIGN_MEMBER), map(action => action.payload), mergeMap(payload => this.userGroupConnector.assignMember(payload.userId, payload.userGroupId, payload.customerId).pipe(switchMap(() => [new AssignMemberSuccess({\n        customerId: payload.customerId,\n        selected: true\n      }), new OrganizationClearData()]), catchError(error => from([new AssignMemberFail({\n        userGroupId: payload.userGroupId,\n        customerId: payload.customerId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.unassignMemberFromUserGroup$ = this.actions$.pipe(ofType(USER_GROUP_UNASSIGN_MEMBER), map(action => action.payload), mergeMap(payload => this.userGroupConnector.unassignMember(payload.userId, payload.userGroupId, payload.customerId).pipe(switchMap(() => [new UnassignMemberSuccess({\n        customerId: payload.customerId,\n        selected: false\n      }), new OrganizationClearData()]), catchError(error => from([new UnassignMemberFail({\n        userGroupId: payload.userGroupId,\n        customerId: payload.customerId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.unassignPermissionFromUserGroup$ = this.actions$.pipe(ofType(USER_GROUP_UNASSIGN_PERMISSION), map(action => action.payload), mergeMap(payload => this.userGroupConnector.unassignOrderApprovalPermission(payload.userId, payload.userGroupId, payload.permissionUid).pipe(switchMap(data => [new UnassignPermissionSuccess({\n        permissionUid: data.id,\n        selected: data.selected\n      }), new OrganizationClearData()]), catchError(error => from([new UnassignPermissionFail({\n        userGroupId: payload.userGroupId,\n        permissionUid: payload.permissionUid,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n      this.unassignAllMembersFromUserGroup$ = this.actions$.pipe(ofType(USER_GROUP_UNASSIGN_ALL_MEMBERS), map(action => action.payload), switchMap(payload => this.userGroupConnector.unassignAllMembers(payload.userId, payload.userGroupId).pipe(switchMap(() => [new UnassignAllMembersSuccess({\n        selected: false\n      }), new OrganizationClearData()]), catchError(error => from([new UnassignAllMembersFail({\n        userGroupId: payload.userGroupId,\n        error: normalizeHttpError(error)\n      }), new OrganizationClearData()])))));\n    }\n  }\n  UserGroupEffects.ɵfac = function UserGroupEffects_Factory(t) {\n    return new (t || UserGroupEffects)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(UserGroupConnector));\n  };\n  UserGroupEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserGroupEffects,\n    factory: UserGroupEffects.ɵfac\n  });\n  __decorate([Effect()], UserGroupEffects.prototype, \"loadUserGroup$\", void 0);\n  __decorate([Effect()], UserGroupEffects.prototype, \"loadUserGroups$\", void 0);\n  __decorate([Effect()], UserGroupEffects.prototype, \"loadAvailableOrderApprovalPermissions$\", void 0);\n  __decorate([Effect()], UserGroupEffects.prototype, \"loadAvailableOrgCustomers$\", void 0);\n  __decorate([Effect()], UserGroupEffects.prototype, \"createUserGroup$\", void 0);\n  __decorate([Effect()], UserGroupEffects.prototype, \"updateUserGroup$\", void 0);\n  __decorate([Effect()], UserGroupEffects.prototype, \"deleteUserGroup$\", void 0);\n  __decorate([Effect()], UserGroupEffects.prototype, \"assignPermissionToUserGroup$\", void 0);\n  __decorate([Effect()], UserGroupEffects.prototype, \"assignMemberUnitUserGroup$\", void 0);\n  __decorate([Effect()], UserGroupEffects.prototype, \"unassignMemberFromUserGroup$\", void 0);\n  __decorate([Effect()], UserGroupEffects.prototype, \"unassignPermissionFromUserGroup$\", void 0);\n  __decorate([Effect()], UserGroupEffects.prototype, \"unassignAllMembersFromUserGroup$\", void 0);\n  return UserGroupEffects;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst effects = [BudgetEffects, OrgUnitEffects, UserGroupEffects, PermissionEffects, CostCenterEffects, B2BUserEffects];\nconst b2bUserInitialState = undefined;\nconst b2bUsersInitialState = undefined;\nfunction b2bUserEntitiesReducer(state = b2bUserInitialState, action) {\n  var _a, _b, _c;\n  switch (action.type) {\n    case LOAD_B2B_USER_SUCCESS:\n    case CREATE_B2B_USER_SUCCESS:\n    case UPDATE_B2B_USER_SUCCESS:\n      return action.payload;\n    case ASSIGN_ROLE_SUCCESS:\n    case ASSIGN_APPROVER_SUCCESS:\n      return Object.assign(Object.assign({}, state), {\n        selected: (_a = action.payload) === null || _a === void 0 ? void 0 : _a.selected,\n        roles: [...((state === null || state === void 0 ? void 0 : state.roles) || []), (_b = action.payload) === null || _b === void 0 ? void 0 : _b.roleId]\n      });\n    case UNASSIGN_ROLE_SUCCESS:\n    case UNASSIGN_APPROVER_SUCCESS:\n      return Object.assign(Object.assign({}, state), {\n        selected: (_c = action.payload) === null || _c === void 0 ? void 0 : _c.selected,\n        roles: [...((state === null || state === void 0 ? void 0 : state.roles) || [])].filter(role => {\n          var _a;\n          return role !== ((_a = action.payload) === null || _a === void 0 ? void 0 : _a.roleId);\n        })\n      });\n    case ASSIGN_B2B_USER_APPROVER_SUCCESS:\n    case UNASSIGN_B2B_USER_APPROVER_SUCCESS:\n    case USER_GROUP_ASSIGN_MEMBER_SUCCESS:\n    case USER_GROUP_UNASSIGN_MEMBER_SUCCESS:\n    case USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS:\n      return Object.assign(Object.assign({}, state), action.payload);\n  }\n  return state;\n}\nfunction userListReducer(state = b2bUsersInitialState, action) {\n  switch (action.type) {\n    case LOAD_B2B_USERS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nfunction b2bUserApproverListReducer(state = b2bUsersInitialState, action) {\n  switch (action.type) {\n    case LOAD_B2B_USER_APPROVERS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nfunction b2bUserPermissionListReducer(state = b2bUsersInitialState, action) {\n  switch (action.type) {\n    case LOAD_B2B_USER_PERMISSIONS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nfunction b2bUserUserGroupListReducer(state = b2bUsersInitialState, action) {\n  switch (action.type) {\n    case LOAD_B2B_USER_USER_GROUPS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nconst budgetInitialState = undefined;\nconst budgetsInitialState = undefined;\nfunction budgetsEntitiesReducer(state = budgetInitialState, action) {\n  switch (action.type) {\n    case LOAD_BUDGET_SUCCESS:\n    case CREATE_BUDGET_SUCCESS:\n    case UPDATE_BUDGET_SUCCESS:\n      return action.payload;\n    case UNASSIGN_BUDGET_SUCCESS:\n    case ASSIGN_BUDGET_SUCCESS:\n      return Object.assign(Object.assign({}, state), action.payload);\n  }\n  return state;\n}\nfunction budgetsListReducer(state = budgetsInitialState, action) {\n  switch (action.type) {\n    case LOAD_BUDGETS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nconst costCenterInitialState = undefined;\nconst costCentersInitialState = undefined;\nfunction costCentersEntitiesReducer(state = costCenterInitialState, action) {\n  switch (action.type) {\n    case LOAD_COST_CENTER_SUCCESS:\n    case CREATE_COST_CENTER_SUCCESS:\n    case UPDATE_COST_CENTER_SUCCESS:\n      return action.payload;\n  }\n  return state;\n}\nfunction costCentersListReducer(state = costCentersInitialState, action) {\n  switch (action.type) {\n    case LOAD_COST_CENTERS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nfunction costCenterAssignedBudgetsListReducer(state = costCentersInitialState, action) {\n  switch (action.type) {\n    case LOAD_ASSIGNED_BUDGETS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nconst orgUnitInitialState = undefined;\nconst orgUnitsInitialState = undefined;\nfunction orgUnitEntitiesReducer(state = orgUnitInitialState, action) {\n  switch (action.type) {\n    case LOAD_ORG_UNIT_SUCCESS:\n    case CREATE_ORG_UNIT_SUCCESS:\n      return action.payload;\n    case UPDATE_ORG_UNIT_SUCCESS:\n      return Object.assign(Object.assign({}, state), action.payload);\n  }\n  return state;\n}\nfunction orgUnitListReducer(state = orgUnitsInitialState, action) {\n  switch (action.type) {}\n  return state;\n}\nfunction orgUnitUserListReducer(state = orgUnitsInitialState, action) {\n  switch (action.type) {\n    case LOAD_ASSIGNED_USERS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nfunction orgUnitAddressListReducer(state = orgUnitsInitialState, action) {\n  switch (action.type) {\n    case LOAD_ADDRESSES_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nconst permissionInitialState = undefined;\nconst permissionsInitialState = undefined;\nfunction permissionsEntitiesReducer(state = permissionInitialState, action) {\n  switch (action.type) {\n    case LOAD_PERMISSION_SUCCESS:\n    case CREATE_PERMISSION_SUCCESS:\n    case UPDATE_PERMISSION_SUCCESS:\n      return action.payload;\n    case USER_GROUP_ASSIGN_PERMISSION_SUCCESS:\n    case USER_GROUP_UNASSIGN_PERMISSION_SUCCESS:\n    case ASSIGN_B2B_USER_PERMISSION_SUCCESS:\n    case UNASSIGN_B2B_USER_PERMISSION_SUCCESS:\n      return Object.assign(Object.assign({}, state), action.payload);\n  }\n  return state;\n}\nfunction permissionsListReducer(state = permissionsInitialState, action) {\n  switch (action.type) {\n    case LOAD_PERMISSIONS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nconst userGroupInitialState = undefined;\nconst userGroupsInitialState = undefined;\nfunction userGroupEntitiesReducer(state = userGroupInitialState, action) {\n  switch (action.type) {\n    case LOAD_USER_GROUP_SUCCESS:\n    case CREATE_USER_GROUP_SUCCESS:\n    case UPDATE_USER_GROUP_SUCCESS:\n      return action.payload;\n    case ASSIGN_B2B_USER_USER_GROUP_SUCCESS:\n    case UNASSIGN_B2B_USER_USER_GROUP_SUCCESS:\n      return Object.assign(Object.assign({}, state), action.payload);\n  }\n  return state;\n}\nfunction userGroupsListReducer(state = userGroupsInitialState, action) {\n  switch (action.type) {\n    case LOAD_USER_GROUPS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nfunction userGroupAvailableOrderApprovalPermissionsListReducer(state = userGroupsInitialState, action) {\n  switch (action.type) {\n    case LOAD_USER_GROUP_PERMISSIONS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nfunction userGroupAvailablOrgCustomersListReducer(state = userGroupsInitialState, action) {\n  switch (action.type) {\n    case LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\nfunction getReducers() {\n  return {\n    [BUDGET_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer(BUDGET_ENTITIES, budgetsEntitiesReducer),\n      list: StateUtils.entityLoaderReducer(BUDGET_LIST, budgetsListReducer)\n    }),\n    [PERMISSION_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer(PERMISSION_ENTITIES, permissionsEntitiesReducer),\n      list: StateUtils.entityLoaderReducer(PERMISSION_LIST, permissionsListReducer),\n      permissionTypes: StateUtils.entityLoaderReducer(PERMISSION_TYPES_LIST)\n    }),\n    [ORG_UNIT_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer(ORG_UNIT_ENTITIES, orgUnitEntitiesReducer),\n      availableOrgUnitNodes: StateUtils.entityLoaderReducer(ORG_UNIT_NODE_LIST),\n      tree: StateUtils.entityLoaderReducer(ORG_UNIT_TREE_ENTITY),\n      approvalProcesses: StateUtils.entityLoaderReducer(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES),\n      users: StateUtils.entityLoaderReducer(ORG_UNIT_ASSIGNED_USERS, orgUnitUserListReducer),\n      addressList: StateUtils.entityLoaderReducer(ADDRESS_LIST, orgUnitAddressListReducer),\n      addressEntities: StateUtils.entityLoaderReducer(ADDRESS_ENTITIES)\n    }),\n    [USER_GROUP_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer(USER_GROUP_ENTITIES, userGroupEntitiesReducer),\n      list: StateUtils.entityLoaderReducer(USER_GROUP_LIST, userGroupsListReducer),\n      permissions: StateUtils.entityLoaderReducer(USER_GROUP_PERMISSIONS, userGroupAvailableOrderApprovalPermissionsListReducer),\n      customers: StateUtils.entityLoaderReducer(USER_GROUP_AVAILABLE_CUSTOMERS, userGroupAvailablOrgCustomersListReducer)\n    }),\n    [COST_CENTER_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer(COST_CENTER_ENTITIES, costCentersEntitiesReducer),\n      list: StateUtils.entityLoaderReducer(COST_CENTER_LIST, costCentersListReducer),\n      budgets: StateUtils.entityLoaderReducer(COST_CENTER_ASSIGNED_BUDGETS, costCenterAssignedBudgetsListReducer)\n    }),\n    [B2B_USER_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer(B2B_USER_ENTITIES, b2bUserEntitiesReducer),\n      list: StateUtils.entityLoaderReducer(USER_LIST, userListReducer),\n      approvers: StateUtils.entityLoaderReducer(B2B_USER_APPROVERS, b2bUserApproverListReducer),\n      permissions: StateUtils.entityLoaderReducer(B2B_USER_PERMISSIONS, b2bUserPermissionListReducer),\n      userGroups: StateUtils.entityLoaderReducer(B2B_USER_USER_GROUPS, b2bUserUserGroupListReducer)\n    })\n  };\n}\nconst reducerToken = new InjectionToken('OrganizationReducers');\nconst reducerProvider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\nfunction clearOrganizationState(reducer) {\n  return function (state, action) {\n    if (action.type === CLEAR_ORGANIZATION_DATA) {\n      state = undefined;\n    }\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    if (action.type === SiteContextActions.LANGUAGE_CHANGE) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\nconst metaReducers = [clearOrganizationState];\nlet OrganizationStoreModule = /*#__PURE__*/(() => {\n  class OrganizationStoreModule {}\n  OrganizationStoreModule.ɵfac = function OrganizationStoreModule_Factory(t) {\n    return new (t || OrganizationStoreModule)();\n  };\n  OrganizationStoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: OrganizationStoreModule\n  });\n  OrganizationStoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [reducerProvider],\n    imports: [[StoreModule.forFeature(ORGANIZATION_FEATURE, reducerToken, {\n      metaReducers\n    }), EffectsModule.forFeature(effects)]]\n  });\n  return OrganizationStoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AdministrationCoreModule = /*#__PURE__*/(() => {\n  class AdministrationCoreModule {\n    static forRoot() {\n      return {\n        ngModule: AdministrationCoreModule,\n        providers: [BudgetConnector, OrgUnitConnector, UserGroupConnector, PermissionConnector, CostCenterConnector, B2BUserConnector]\n      };\n    }\n  }\n  AdministrationCoreModule.ɵfac = function AdministrationCoreModule_Factory(t) {\n    return new (t || AdministrationCoreModule)();\n  };\n  AdministrationCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AdministrationCoreModule\n  });\n  AdministrationCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[OrganizationPageMetaModule, OrganizationStoreModule]]\n  });\n  return AdministrationCoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst B2B_USER_NORMALIZER = new InjectionToken('B2BUserNormalizer');\nconst B2B_USER_SERIALIZER = new InjectionToken('B2BUserSerializer');\nconst B2B_USERS_NORMALIZER = new InjectionToken('UserListNormalizer');\nconst BUDGET_NORMALIZER = new InjectionToken('BudgetNormalizer');\nconst BUDGETS_NORMALIZER = new InjectionToken('BudgetsListNormalizer');\nconst BUDGET_SERIALIZER = new InjectionToken('BudgetSerializer');\nconst B2BUNIT_NODE_NORMALIZER = new InjectionToken('B2BUnitNodeNormalizer');\nconst B2BUNIT_NODE_LIST_NORMALIZER = new InjectionToken('B2BUnitNodeListNormalizer');\nconst B2BUNIT_NORMALIZER = new InjectionToken('B2BUnitNormalizer');\nconst B2BUNIT_SERIALIZER = new InjectionToken('B2BUnitSerializer');\nconst B2BUNIT_APPROVAL_PROCESSES_NORMALIZER = new InjectionToken('B2BUnitApprovalProcessNormalizer');\nconst PERMISSION_NORMALIZER = new InjectionToken('PermissionNormalizer');\nconst PERMISSIONS_NORMALIZER = new InjectionToken('PermissionsListNormalizer');\nconst PERMISSION_TYPE_NORMALIZER = new InjectionToken('PermissionTypeNormalizer');\nconst PERMISSION_TYPES_NORMALIZER = new InjectionToken('PermissionTypesListNormalizer');\nconst PERMISSION_SERIALIZER = new InjectionToken('PermissionSerializer');\nconst USER_GROUP_NORMALIZER = new InjectionToken('UserGroupNormalizer');\nconst USER_GROUP_SERIALIZER = new InjectionToken('UserGroupSerializer');\nconst USER_GROUPS_NORMALIZER = new InjectionToken('UserGroupListNormalizer');\nlet AdminGuard = /*#__PURE__*/(() => {\n  class AdminGuard {\n    constructor(userService, routingService, globalMessageService) {\n      this.userService = userService;\n      this.routingService = routingService;\n      this.globalMessageService = globalMessageService;\n    }\n    canActivate() {\n      return this.userService.get().pipe(filter(user => user && Object.keys(user).length > 0), pluck('roles'), map(roles => {\n        const hasRole = Array.isArray(roles) && roles.includes(B2BUserRole.ADMIN);\n        if (!hasRole) {\n          // routing as temporary solution until /organization won't\n          // have set up proper permission on backend\n          this.routingService.go({\n            cxRoute: 'organization'\n          });\n          this.globalMessageService.add({\n            key: 'organization.notification.noSufficientPermissions'\n          }, GlobalMessageType.MSG_TYPE_WARNING);\n        }\n        return hasRole;\n      }));\n    }\n  }\n  AdminGuard.ɵfac = function AdminGuard_Factory(t) {\n    return new (t || AdminGuard)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i1.RoutingService), i0.ɵɵinject(i1.GlobalMessageService));\n  };\n  AdminGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AdminGuard,\n    factory: AdminGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AdminGuard;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrganizationBadRequestHandler = /*#__PURE__*/(() => {\n  class OrganizationBadRequestHandler extends HttpErrorHandler {\n    constructor() {\n      super(...arguments);\n      this.responseStatus = HttpResponseStatus.BAD_REQUEST;\n      this.costCenterMask = /ambiguous unique keys \\{code\\=(.*)\\} for model B2BCostCenterModel/;\n      this.unitMask = /ambiguous unique keys \\{uid\\=(.*)\\} for model B2BUnitModel/;\n      this.permissionMask = /Approval Permission with code\\: (.*) already exists\\./;\n      this.unknownMask = /Model saving error\\./;\n    }\n    hasMatch(errorResponse) {\n      return super.hasMatch(errorResponse) && this.matchMask(errorResponse);\n    }\n    handleError(_request, response) {\n      this.getErrors(response).forEach(({\n        message\n      }) => {\n        // Handle cost center conflict\n        this.handleOrganizationConflict(message, this.costCenterMask, 'costCenter');\n        // Handle unit conflict\n        this.handleOrganizationConflict(message, this.unitMask, 'unit');\n        // Handle unit conflict\n        this.handleOrganizationConflict(message, this.permissionMask, 'permission');\n        // Handle unknown conflict\n        this.handleOrganizationConflict(message, this.unknownMask, 'unknown');\n      });\n    }\n    matchMask(response) {\n      return this.getErrors(response).some(error => [this.costCenterMask, this.unitMask, this.permissionMask, this.unknownMask].some(mask => mask.test(error.message)));\n    }\n    handleOrganizationConflict(message, mask, key) {\n      const result = message.match(mask);\n      const params = {\n        code: result === null || result === void 0 ? void 0 : result[1]\n      };\n      if (result) {\n        this.globalMessageService.add({\n          key: `organization.httpHandlers.conflict.${key}`,\n          params\n        }, GlobalMessageType.MSG_TYPE_ERROR);\n      }\n    }\n    getErrors(response) {\n      var _a;\n      return (((_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) || []).filter(error => error.type === 'ModelSavingError' || error.type === 'DuplicateUidError');\n    }\n    getPriority() {\n      return 0 /* NORMAL */;\n    }\n  }\n\n  OrganizationBadRequestHandler.ɵfac = /* @__PURE__ */function () {\n    let ɵOrganizationBadRequestHandler_BaseFactory;\n    return function OrganizationBadRequestHandler_Factory(t) {\n      return (ɵOrganizationBadRequestHandler_BaseFactory || (ɵOrganizationBadRequestHandler_BaseFactory = i0.ɵɵgetInheritedFactory(OrganizationBadRequestHandler)))(t || OrganizationBadRequestHandler);\n    };\n  }();\n  OrganizationBadRequestHandler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrganizationBadRequestHandler,\n    factory: OrganizationBadRequestHandler.ɵfac,\n    providedIn: 'root'\n  });\n  return OrganizationBadRequestHandler;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrganizationConflictHandler = /*#__PURE__*/(() => {\n  class OrganizationConflictHandler extends HttpErrorHandler {\n    constructor() {\n      super(...arguments);\n      this.responseStatus = HttpResponseStatus.CONFLICT;\n      this.budgetMask = /Budget with code \\[(.*)\\] already exists/;\n      this.userMask = /User already exists/;\n      this.userGroupMask = /Member Permission with the same id already exists/;\n      this.unitMask = /Organizational unit with uid \\[(.*)\\] already exists/;\n    }\n    hasMatch(errorResponse) {\n      return super.hasMatch(errorResponse) && this.matchMask(errorResponse);\n    }\n    handleError(request, response) {\n      return this.getErrors(response).forEach(({\n        message\n      }) => {\n        var _a, _b;\n        // Handle budget conflict\n        this.handleConflict(message, this.budgetMask, 'budget');\n        // Handle user email conflict\n        this.handleConflict(message, this.userMask, 'user', (_a = request === null || request === void 0 ? void 0 : request.body) === null || _a === void 0 ? void 0 : _a.email);\n        // Handle user group conflict\n        this.handleConflict(message, this.userGroupMask, 'userGroup', (_b = request === null || request === void 0 ? void 0 : request.body) === null || _b === void 0 ? void 0 : _b.uid);\n        // Handle unit conflict\n        this.handleConflict(message, this.unitMask, 'unit');\n      });\n    }\n    matchMask(response) {\n      return this.getErrors(response).some(error => [this.budgetMask, this.userMask, this.userGroupMask, this.unitMask].some(mask => mask.test(error.message)));\n    }\n    handleConflict(message, mask, key, code) {\n      var _a;\n      const result = message.match(mask);\n      const params = {\n        code: (_a = result === null || result === void 0 ? void 0 : result[1]) !== null && _a !== void 0 ? _a : code\n      };\n      if (result) {\n        this.globalMessageService.add({\n          key: `organization.httpHandlers.conflict.${key}`,\n          params\n        }, GlobalMessageType.MSG_TYPE_ERROR);\n      }\n    }\n    getErrors(response) {\n      var _a;\n      return (((_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) || []).filter(error => error.type === 'AlreadyExistsError');\n    }\n    getPriority() {\n      return 0 /* NORMAL */;\n    }\n  }\n\n  OrganizationConflictHandler.ɵfac = /* @__PURE__ */function () {\n    let ɵOrganizationConflictHandler_BaseFactory;\n    return function OrganizationConflictHandler_Factory(t) {\n      return (ɵOrganizationConflictHandler_BaseFactory || (ɵOrganizationConflictHandler_BaseFactory = i0.ɵɵgetInheritedFactory(OrganizationConflictHandler)))(t || OrganizationConflictHandler);\n    };\n  }();\n  OrganizationConflictHandler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrganizationConflictHandler,\n    factory: OrganizationConflictHandler.ɵfac,\n    providedIn: 'root'\n  });\n  return OrganizationConflictHandler;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nvar LoadStatus = /*#__PURE__*/(() => {\n  (function (LoadStatus) {\n    LoadStatus[LoadStatus[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    LoadStatus[LoadStatus[\"ERROR\"] = 1] = \"ERROR\";\n  })(LoadStatus || (LoadStatus = {}));\n  return LoadStatus;\n})();\nvar Period = /*#__PURE__*/(() => {\n  (function (Period) {\n    Period[\"DAY\"] = \"DAY\";\n    Period[\"WEEK\"] = \"WEEK\";\n    Period[\"MONTH\"] = \"MONTH\";\n    Period[\"QUARTER\"] = \"QUARTER\";\n    Period[\"YEAR\"] = \"YEAR\";\n  })(Period || (Period = {}));\n  return Period;\n})();\nconst getOrganizationState = createFeatureSelector(ORGANIZATION_FEATURE);\nconst getPermissionManagementState = createSelector(getOrganizationState, state => state[PERMISSION_FEATURE]);\nconst getPermissionsState = createSelector(getPermissionManagementState, state => state && state.entities);\nconst getPermissionState = permissionId => createSelector(getPermissionsState, state => StateUtils.entityLoaderStateSelector(state, permissionId));\nconst getPermissionTypesState = createSelector(getPermissionManagementState, state => state && state.permissionTypes);\nconst getPermission = permissionCode => createSelector(getPermissionsState, state => StateUtils.entityLoaderStateSelector(state, permissionCode));\nconst getPermissionValue = permissionCode => {\n  return createSelector(getPermission(permissionCode), permissionState => StateUtils.loaderValueSelector(permissionState));\n};\nconst getPermissionList = params => createSelector(getPermissionManagementState, state => StateUtils.denormalizeSearch(state, params));\nconst getPermissionTypes = () => createSelector(getPermissionTypesState, state => StateUtils.entityLoaderStateSelector(state, PERMISSION_TYPES));\nvar permission_selector = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getPermissionManagementState: getPermissionManagementState,\n  getPermissionsState: getPermissionsState,\n  getPermissionState: getPermissionState,\n  getPermissionTypesState: getPermissionTypesState,\n  getPermission: getPermission,\n  getPermissionValue: getPermissionValue,\n  getPermissionList: getPermissionList,\n  getPermissionTypes: getPermissionTypes\n});\nconst getB2BUserManagementState = createSelector(getOrganizationState, state => state[B2B_USER_FEATURE]);\nconst getB2BUsersState = createSelector(getB2BUserManagementState, state => state && state.entities);\nconst getB2BUserState = orgCustomerId => createSelector(getB2BUsersState, state => StateUtils.entityLoaderStateSelector(state, orgCustomerId));\nconst getB2BUserValue = orgCustomerId => {\n  return createSelector(getB2BUserState(orgCustomerId), b2BUserState => StateUtils.loaderValueSelector(b2BUserState));\n};\nconst getUserList = params => createSelector(getB2BUserManagementState, state => StateUtils.denormalizeSearch(state, params));\nconst getB2BUserApprovers = (code, params) => createSelector(getB2BUserManagementState, getB2BUsersState, (state, approvers) => StateUtils.denormalizeCustomB2BSearch(state.approvers, approvers, params, code));\nconst getB2BUserPermissions = (code, params) => createSelector(getB2BUserManagementState, getPermissionsState, (state, permissions) => StateUtils.denormalizeCustomB2BSearch(state.permissions, permissions, params, code));\n// avoid circular dependency\nconst getUserGroupsState$1 = createSelector(getOrganizationState, state => state[USER_GROUP_FEATURE].entities);\nconst getB2BUserUserGroups = (code, params) => createSelector(getB2BUserManagementState, getUserGroupsState$1, (state, userGroups) => StateUtils.denormalizeCustomB2BSearch(state.userGroups, userGroups, params, code));\nvar b2bUser_selector = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getB2BUserManagementState: getB2BUserManagementState,\n  getB2BUsersState: getB2BUsersState,\n  getB2BUserState: getB2BUserState,\n  getB2BUserValue: getB2BUserValue,\n  getUserList: getUserList,\n  getB2BUserApprovers: getB2BUserApprovers,\n  getB2BUserPermissions: getB2BUserPermissions,\n  getB2BUserUserGroups: getB2BUserUserGroups\n});\nfunction getItemStatus(itemState) {\n  return itemState.pipe(observeOn(queueScheduler), pairwise(), filter(([previousState]) => previousState.loading), map(([_previousState, currentState]) => ({\n    status: currentState.success ? LoadStatus.SUCCESS : currentState.error ? LoadStatus.ERROR : null,\n    item: currentState.value\n  })));\n}\nlet B2BUserService = /*#__PURE__*/(() => {\n  class B2BUserService {\n    constructor(store, userIdService) {\n      this.store = store;\n      this.userIdService = userIdService;\n    }\n    load(orgCustomerId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadB2BUser({\n        userId,\n        orgCustomerId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadList(params) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadB2BUsers({\n        userId,\n        params\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getB2BUserValue(orgCustomerId) {\n      return this.store.select(getB2BUserValue(orgCustomerId)).pipe(filter(Boolean));\n    }\n    get(orgCustomerId) {\n      const loading$ = this.getB2BUserState(orgCustomerId).pipe(auditTime(0), tap(state => {\n        if (!(state.loading || state.success || state.error)) {\n          this.load(orgCustomerId);\n        }\n      }));\n      return using(() => loading$.subscribe(), () => this.getB2BUserValue(orgCustomerId));\n    }\n    getList(params) {\n      return this.getUserList(params).pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadList(params);\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    getErrorState(orgCustomerId) {\n      return this.getB2BUserState(orgCustomerId).pipe(map(state => state.error));\n    }\n    create(orgCustomer) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new CreateB2BUser({\n        userId,\n        orgCustomer\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    update(orgCustomerId, orgCustomer) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UpdateB2BUser({\n        userId,\n        orgCustomerId,\n        orgCustomer\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getLoadingStatus(orgCustomerId) {\n      return getItemStatus(this.getB2BUserState(orgCustomerId));\n    }\n    loadApprovers(orgCustomerId, params) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadB2BUserApprovers({\n        userId,\n        orgCustomerId,\n        params\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getApprovers(orgCustomerId, params) {\n      return this.getB2BUserApproverList(orgCustomerId, params).pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadApprovers(orgCustomerId, params);\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    assignApprover(orgCustomerId, approverId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new AssignB2BUserApprover({\n        userId,\n        orgCustomerId,\n        approverId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    unassignApprover(orgCustomerId, approverId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UnassignB2BUserApprover({\n        userId,\n        orgCustomerId,\n        approverId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadPermissions(orgCustomerId, params) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadB2BUserPermissions({\n        userId,\n        orgCustomerId,\n        params\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getPermissions(orgCustomerId, params) {\n      return this.getB2BUserPermissionList(orgCustomerId, params).pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadPermissions(orgCustomerId, params);\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    assignPermission(orgCustomerId, permissionId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new AssignB2BUserPermission({\n        userId,\n        orgCustomerId,\n        permissionId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    unassignPermission(orgCustomerId, permissionId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UnassignB2BUserPermission({\n        userId,\n        orgCustomerId,\n        permissionId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadUserGroups(orgCustomerId, params) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadB2BUserUserGroups({\n        userId,\n        orgCustomerId,\n        params\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getUserGroups(orgCustomerId, params) {\n      return this.getB2BUserUserGroupList(orgCustomerId, params).pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadUserGroups(orgCustomerId, params);\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    assignUserGroup(orgCustomerId, userGroupId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new AssignB2BUserUserGroup({\n        userId,\n        orgCustomerId,\n        userGroupId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    unassignUserGroup(orgCustomerId, userGroupId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UnassignB2BUserUserGroup({\n        userId,\n        orgCustomerId,\n        userGroupId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Get list of all roles for B2BUser sorted by increasing privileges.\n     *\n     * This list is not driven by the backend (lack of API), but reflects roles\n     * from the backend: `b2badmingroup`, `b2bcustomergroup`, `b2bmanagergroup` and `b2bapprovergroup`.\n     *\n     * If you reconfigure those roles in the backend or extend the list, you should change\n     * this implementation accordingly.\n     */\n    getAllRoles() {\n      return [B2BUserRole.CUSTOMER, B2BUserRole.MANAGER, B2BUserRole.APPROVER, B2BUserRole.ADMIN];\n    }\n    getB2BUserApproverList(orgCustomerId, params) {\n      return this.store.select(getB2BUserApprovers(orgCustomerId, params));\n    }\n    getB2BUserPermissionList(orgCustomerId, params) {\n      return this.store.select(getB2BUserPermissions(orgCustomerId, params));\n    }\n    getB2BUserUserGroupList(orgCustomerId, params) {\n      return this.store.select(getB2BUserUserGroups(orgCustomerId, params));\n    }\n    getB2BUserState(orgCustomerId) {\n      return this.store.select(getB2BUserState(orgCustomerId));\n    }\n    getUserList(params) {\n      return this.store.select(getUserList(params));\n    }\n  }\n  B2BUserService.ɵfac = function B2BUserService_Factory(t) {\n    return new (t || B2BUserService)(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(i1.UserIdService));\n  };\n  B2BUserService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: B2BUserService,\n    factory: B2BUserService.ɵfac,\n    providedIn: 'root'\n  });\n  return B2BUserService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst getBudgetManagementState = createSelector(getOrganizationState, state => state[BUDGET_FEATURE]);\nconst getBudgetsState = createSelector(getBudgetManagementState, state => state && state.entities);\nconst getBudget = budgetCode => createSelector(getBudgetsState, state => StateUtils.entityLoaderStateSelector(state, budgetCode));\nconst getBudgetValue = budgetCode => {\n  return createSelector(getBudget(budgetCode), budgetState => StateUtils.loaderValueSelector(budgetState));\n};\nconst getBudgetList = params => createSelector(getBudgetManagementState, state => StateUtils.denormalizeSearch(state, params));\nvar budget_selector = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getBudgetManagementState: getBudgetManagementState,\n  getBudgetsState: getBudgetsState,\n  getBudget: getBudget,\n  getBudgetValue: getBudgetValue,\n  getBudgetList: getBudgetList\n});\nconst getB2BOrgUnitState = createSelector(getOrganizationState, state => state[ORG_UNIT_FEATURE]);\nconst getOrgUnitsNodeListState = createSelector(getB2BOrgUnitState, state => state && state.availableOrgUnitNodes);\nconst getOrgUnitsState = createSelector(getB2BOrgUnitState, state => state && state.entities);\nconst getOrgUnitsTreeState = createSelector(getB2BOrgUnitState, state => state && state.tree);\nconst getAddressesState = createSelector(getB2BOrgUnitState, state => state && state.addressEntities);\nconst getApprovalProcessesState = createSelector(getB2BOrgUnitState, state => state && state.approvalProcesses);\nconst getOrgUnit = orgUnitId => createSelector(getOrgUnitsState, state => StateUtils.entityLoaderStateSelector(state, orgUnitId));\nconst getOrgUnitValue = orgUnitId => {\n  return createSelector(getOrgUnit(orgUnitId), orgUnitState => StateUtils.loaderValueSelector(orgUnitState));\n};\nconst getOrgUnitState = orgUnitId => createSelector(getOrgUnitsState, state => StateUtils.entityLoaderStateSelector(state, orgUnitId));\nconst getOrgUnitList = () => createSelector(getOrgUnitsNodeListState, state => StateUtils.entityLoaderStateSelector(state, ORG_UNIT_NODES));\nconst getOrgUnitTree = () => createSelector(getOrgUnitsTreeState, state => StateUtils.entityLoaderStateSelector(state, ORG_UNIT_TREE));\nconst getApprovalProcesses = () => createSelector(getApprovalProcessesState, state => StateUtils.entityLoaderStateSelector(state, ORG_UNIT_APPROVAL_PROCESSES));\nconst getAssignedUsers = (orgUnitId, roleId, params) => createSelector(getB2BOrgUnitState, getB2BUsersState, (state, users) => StateUtils.denormalizeCustomB2BSearch(state.users, users, params, `${orgUnitId},${roleId}`));\nconst getB2BAddresses = (orgUnitId, params) => createSelector(getB2BOrgUnitState, state => StateUtils.denormalizeCustomB2BSearch(state.addressList, state.addressEntities, params, orgUnitId));\nconst getB2BAddress = addressId => createSelector(getAddressesState, state => StateUtils.entityLoaderStateSelector(state, addressId));\nvar orgUnit_selector = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getB2BOrgUnitState: getB2BOrgUnitState,\n  getOrgUnitsNodeListState: getOrgUnitsNodeListState,\n  getOrgUnitsState: getOrgUnitsState,\n  getOrgUnitsTreeState: getOrgUnitsTreeState,\n  getAddressesState: getAddressesState,\n  getApprovalProcessesState: getApprovalProcessesState,\n  getOrgUnit: getOrgUnit,\n  getOrgUnitValue: getOrgUnitValue,\n  getOrgUnitState: getOrgUnitState,\n  getOrgUnitList: getOrgUnitList,\n  getOrgUnitTree: getOrgUnitTree,\n  getApprovalProcesses: getApprovalProcesses,\n  getAssignedUsers: getAssignedUsers,\n  getB2BAddresses: getB2BAddresses,\n  getB2BAddress: getB2BAddress\n});\nconst getUserGroupManagementState = createSelector(getOrganizationState, state => state[USER_GROUP_FEATURE]);\nconst getUserGroupsState = createSelector(getUserGroupManagementState, state => state && state.entities);\nconst getUserGroup = userGroupId => createSelector(getUserGroupsState, state => StateUtils.entityLoaderStateSelector(state, userGroupId));\nconst getUserGroupValue = userGroupId => {\n  return createSelector(getUserGroup(userGroupId), userGroupState => StateUtils.loaderValueSelector(userGroupState));\n};\nconst getUserGroupList = params => createSelector(getUserGroupManagementState, state => StateUtils.denormalizeSearch(state, params));\nconst getAvailableOrgCustomers = (code, params) => createSelector(getUserGroupManagementState, getB2BUsersState, (state, customers) => StateUtils.denormalizeCustomB2BSearch(state.customers, customers, params, code));\nconst getAvailableOrderApprovalPermissions = (code, params) => createSelector(getUserGroupManagementState, getPermissionsState, (state, permissions) => StateUtils.denormalizeCustomB2BSearch(state.permissions, permissions, params, code));\nconst getUserGroupState = code => createSelector(getUserGroupsState, state => StateUtils.entityLoaderStateSelector(state, code));\nvar userGroup_selector = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getUserGroupManagementState: getUserGroupManagementState,\n  getUserGroupsState: getUserGroupsState,\n  getUserGroup: getUserGroup,\n  getUserGroupValue: getUserGroupValue,\n  getUserGroupList: getUserGroupList,\n  getAvailableOrgCustomers: getAvailableOrgCustomers,\n  getAvailableOrderApprovalPermissions: getAvailableOrderApprovalPermissions,\n  getUserGroupState: getUserGroupState\n});\nconst getCostCenterManagementState = createSelector(getOrganizationState, state => state[COST_CENTER_FEATURE]);\nconst getCostCentersState = createSelector(getCostCenterManagementState, state => state && state.entities);\nconst getCostCenter = costCenterCode => createSelector(getCostCentersState, state => StateUtils.entityLoaderStateSelector(state, costCenterCode));\nconst getCostCenterValue = costCenterCode => {\n  return createSelector(getCostCenter(costCenterCode), costCenterState => StateUtils.loaderValueSelector(costCenterState));\n};\nconst getCostCenterList = params => createSelector(getCostCenterManagementState, state => StateUtils.denormalizeSearch(state, params));\nconst getAssignedBudgets = (code, params) => createSelector(getCostCenterManagementState, getBudgetsState, (state, budgets) => StateUtils.denormalizeCustomB2BSearch(state.budgets, budgets, params, code));\nconst getCostCenterState = code => createSelector(getCostCentersState, state => StateUtils.entityLoaderStateSelector(state, code));\nvar costCenter_selector = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getCostCenterManagementState: getCostCenterManagementState,\n  getCostCentersState: getCostCentersState,\n  getCostCenter: getCostCenter,\n  getCostCenterValue: getCostCenterValue,\n  getCostCenterList: getCostCenterList,\n  getAssignedBudgets: getAssignedBudgets,\n  getCostCenterState: getCostCenterState\n});\nlet BudgetService = /*#__PURE__*/(() => {\n  class BudgetService {\n    constructor(store, userIdService) {\n      this.store = store;\n      this.userIdService = userIdService;\n    }\n    loadBudget(budgetCode) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadBudget({\n        userId,\n        budgetCode\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadBudgets(params) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadBudgets({\n        userId,\n        params\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getBudgetState(budgetCode) {\n      return this.store.select(getBudget(budgetCode));\n    }\n    getBudgetValue(budgetCode) {\n      return this.store.select(getBudgetValue(budgetCode)).pipe(filter(Boolean));\n    }\n    getBudgetList(params) {\n      return this.store.select(getBudgetList(params));\n    }\n    get(budgetCode) {\n      const loading$ = this.getBudgetState(budgetCode).pipe(auditTime(0), tap(state => {\n        if (!(state.loading || state.success || state.error)) {\n          this.loadBudget(budgetCode);\n        }\n      }));\n      return using(() => loading$.subscribe(), () => this.getBudgetValue(budgetCode));\n    }\n    getList(params) {\n      return this.getBudgetList(params).pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadBudgets(params);\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    getCostCenters(budgetCode) {\n      return this.get(budgetCode).pipe(map(budget => {\n        var _a;\n        return {\n          values: (_a = budget.costCenters) !== null && _a !== void 0 ? _a : []\n        };\n      }));\n    }\n    getErrorState(budgetCode) {\n      return this.getBudgetState(budgetCode).pipe(map(state => state.error));\n    }\n    create(budget) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new CreateBudget({\n        userId,\n        budget\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    update(budgetCode, budget) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UpdateBudget({\n        userId,\n        budgetCode,\n        budget\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getLoadingStatus(budgetCode) {\n      return getItemStatus(this.getBudgetState(budgetCode));\n    }\n  }\n  BudgetService.ɵfac = function BudgetService_Factory(t) {\n    return new (t || BudgetService)(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(i1.UserIdService));\n  };\n  BudgetService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BudgetService,\n    factory: BudgetService.ɵfac,\n    providedIn: 'root'\n  });\n  return BudgetService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CostCenterService = /*#__PURE__*/(() => {\n  class CostCenterService {\n    constructor(store, userIdService) {\n      this.store = store;\n      this.userIdService = userIdService;\n    }\n    load(costCenterCode) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadCostCenter({\n        userId,\n        costCenterCode\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadList(params) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadCostCenters({\n        userId,\n        params\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getCostCenter(costCenterCode) {\n      return this.store.select(getCostCenter(costCenterCode));\n    }\n    getCostCenterValue(costCenterCode) {\n      return this.store.select(getCostCenterValue(costCenterCode)).pipe(filter(Boolean));\n    }\n    getCostCenterList(params) {\n      return this.store.select(getCostCenterList(params));\n    }\n    getBudgetList(costCenterCode, params) {\n      return this.store.select(getAssignedBudgets(costCenterCode, params));\n    }\n    get(costCenterCode) {\n      const loading$ = this.getCostCenter(costCenterCode).pipe(auditTime(0), tap(state => {\n        if (!(state.loading || state.success || state.error)) {\n          this.load(costCenterCode);\n        }\n      }));\n      return using(() => loading$.subscribe(), () => this.getCostCenterValue(costCenterCode));\n    }\n    getList(params) {\n      return this.getCostCenterList(params).pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadList(params);\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    getCostCenterState(costCenterCode) {\n      return this.store.select(getCostCenterState(costCenterCode));\n    }\n    create(costCenter) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new CreateCostCenter({\n        userId,\n        costCenter\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    update(costCenterCode, costCenter) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UpdateCostCenter({\n        userId,\n        costCenterCode,\n        costCenter\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getLoadingStatus(costCenterCode) {\n      return getItemStatus(this.getCostCenter(costCenterCode));\n    }\n    loadBudgets(costCenterCode, params) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadAssignedBudgets({\n        userId,\n        costCenterCode,\n        params\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getBudgets(costCenterCode, params) {\n      return this.getBudgetList(costCenterCode, params).pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadBudgets(costCenterCode, params);\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    assignBudget(costCenterCode, budgetCode) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new AssignBudget({\n        userId,\n        costCenterCode,\n        budgetCode\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    unassignBudget(costCenterCode, budgetCode) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UnassignBudget({\n        userId,\n        costCenterCode,\n        budgetCode\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getErrorState(costCenterCode) {\n      return this.getCostCenterState(costCenterCode).pipe(map(state => state.error));\n    }\n  }\n  CostCenterService.ɵfac = function CostCenterService_Factory(t) {\n    return new (t || CostCenterService)(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(i1.UserIdService));\n  };\n  CostCenterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CostCenterService,\n    factory: CostCenterService.ɵfac,\n    providedIn: 'root'\n  });\n  return CostCenterService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrgUnitService = /*#__PURE__*/(() => {\n  class OrgUnitService {\n    constructor(store, userIdService) {\n      this.store = store;\n      this.userIdService = userIdService;\n    }\n    clearAssignedUsersList(orgUnitId, roleId, params) {\n      this.store.dispatch(new ClearAssignedUsers({\n        orgUnitId,\n        roleId,\n        params\n      }));\n    }\n    load(orgUnitId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadOrgUnit({\n        userId,\n        orgUnitId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadList() {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadOrgUnitNodes({\n        userId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadTree() {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadTree({\n        userId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadApprovalProcesses() {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadApprovalProcesses({\n        userId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadUsers(orgUnitId, roleId, params) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadAssignedUsers({\n        userId,\n        orgUnitId,\n        roleId,\n        params\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadAddresses(orgUnitId) {\n      // TODO: replace it after turn on loadAddresses$\n      // this.store.dispatch(\n      //   new OrgUnitActions.LoadAddresses({ userId, orgUnitId })\n      // );\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadOrgUnit({\n        userId,\n        orgUnitId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getOrgUnit(orgUnitId) {\n      return this.store.select(getOrgUnit(orgUnitId));\n    }\n    getOrgUnitValue(orgUnitId) {\n      return this.store.select(getOrgUnitValue(orgUnitId)).pipe(filter(Boolean));\n    }\n    getTreeState() {\n      return this.store.select(getOrgUnitTree());\n    }\n    getOrgUnitsList() {\n      return this.store.select(getOrgUnitList());\n    }\n    getAddressesState(orgUnitId) {\n      return this.store.select(getB2BAddresses(orgUnitId, null));\n    }\n    getAddressState(addressId) {\n      return this.store.select(getB2BAddress(addressId));\n    }\n    getAssignedUsers(orgUnitId, roleId, params) {\n      return this.store.select(getAssignedUsers(orgUnitId, roleId, params));\n    }\n    getApprovalProcessesList() {\n      return this.store.select(getApprovalProcesses());\n    }\n    get(orgUnitId) {\n      const loading$ = this.getOrgUnit(orgUnitId).pipe(auditTime(0), tap(state => {\n        if (!(state.loading || state.success || state.error)) {\n          this.load(orgUnitId);\n        }\n      }));\n      return using(() => loading$.subscribe(), () => this.getOrgUnitValue(orgUnitId));\n    }\n    getCostCenters(orgUnitId) {\n      return this.get(orgUnitId).pipe(map(orgUnit => {\n        var _a;\n        return {\n          values: (_a = orgUnit.costCenters) !== null && _a !== void 0 ? _a : []\n        };\n      }));\n    }\n    findUnitChildrenInTree(orginitId, unit) {\n      return unit.id === orginitId ? unit.children : unit.children.flatMap(child => this.findUnitChildrenInTree(orginitId, child));\n    }\n    getChildUnits(orgUnitId) {\n      return this.getTree().pipe(map(tree => ({\n        values: this.findUnitChildrenInTree(orgUnitId, tree)\n      })));\n    }\n    getTree() {\n      return this.getTreeState().pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadTree();\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    getApprovalProcesses() {\n      return this.getApprovalProcessesList().pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadApprovalProcesses();\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    getList() {\n      return this.getOrgUnitsList().pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadList();\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    getActiveUnitList() {\n      return this.getList().pipe(map(units => units.filter(unit => unit.active)), map(units => units.sort(this.sortUnitList)));\n    }\n    sortUnitList(a, b) {\n      return a.id.toLowerCase() < b.id.toLowerCase() ? -1 : a.id.toLowerCase() > b.id.toLowerCase() ? 1 : 0;\n    }\n    getUsers(orgUnitId, roleId, params) {\n      return this.getAssignedUsers(orgUnitId, roleId, params).pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadUsers(orgUnitId, roleId, params);\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    getErrorState(orgCustomerId) {\n      return this.getOrgUnitState(orgCustomerId).pipe(map(state => state.error));\n    }\n    create(unit) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new CreateUnit({\n        userId,\n        unit\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    update(unitCode, unit) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UpdateUnit({\n        userId,\n        unitCode,\n        unit\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getLoadingStatus(orgUnitId) {\n      return getItemStatus(this.getOrgUnit(orgUnitId));\n    }\n    assignRole(orgCustomerId, roleId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new AssignRole({\n        userId,\n        orgCustomerId,\n        roleId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    unassignRole(orgCustomerId, roleId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UnassignRole({\n        userId,\n        orgCustomerId,\n        roleId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    assignApprover(orgUnitId, orgCustomerId, roleId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new AssignApprover({\n        orgUnitId,\n        userId,\n        orgCustomerId,\n        roleId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    unassignApprover(orgUnitId, orgCustomerId, roleId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UnassignApprover({\n        orgUnitId,\n        userId,\n        orgCustomerId,\n        roleId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    createAddress(orgUnitId, address) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new CreateAddress({\n        userId,\n        orgUnitId,\n        address\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getAddresses(orgUnitId) {\n      return this.getAddressesState(orgUnitId).pipe(observeOn(queueScheduler), tap(state => {\n        if (!(state.loading || state.success || state.error)) {\n          this.loadAddresses(orgUnitId);\n        }\n      }), filter(state => state.success || state.error), map(state => state.value));\n    }\n    getAddress(orgUnitId, addressId) {\n      return this.getAddressState(addressId).pipe(observeOn(queueScheduler), tap(state => {\n        if (!(state.loading || state.success || state.error)) {\n          this.loadAddresses(orgUnitId);\n        }\n      }), filter(state => state.success || state.error), map(state => state.value));\n    }\n    updateAddress(orgUnitId, addressId, address) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UpdateAddress({\n        userId,\n        orgUnitId,\n        addressId,\n        address\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getAddressLoadingStatus(addressId) {\n      return getItemStatus(this.getAddressState(addressId));\n    }\n    deleteAddress(orgUnitId, addressId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new DeleteAddress({\n        userId,\n        orgUnitId,\n        addressId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getOrgUnitState(orgUnitId) {\n      return this.store.select(getOrgUnitState(orgUnitId));\n    }\n  }\n  OrgUnitService.ɵfac = function OrgUnitService_Factory(t) {\n    return new (t || OrgUnitService)(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(i1.UserIdService));\n  };\n  OrgUnitService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrgUnitService,\n    factory: OrgUnitService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrgUnitService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PermissionService = /*#__PURE__*/(() => {\n  class PermissionService {\n    constructor(store, userIdService) {\n      this.store = store;\n      this.userIdService = userIdService;\n    }\n    loadPermission(permissionCode) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadPermission({\n        userId,\n        permissionCode\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadPermissions(params) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadPermissions({\n        userId,\n        params\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadPermissionTypes() {\n      this.userIdService.takeUserId(true).subscribe(() => this.store.dispatch(new LoadPermissionTypes()), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getPermission(permissionCode) {\n      return this.store.select(getPermission(permissionCode));\n    }\n    getPermissionValue(permissionCode) {\n      return this.store.select(getPermissionValue(permissionCode)).pipe(filter(Boolean));\n    }\n    getPermissionList(params) {\n      return this.store.select(getPermissionList(params));\n    }\n    getPermissionTypeList() {\n      return this.store.select(getPermissionTypes());\n    }\n    get(permissionCode) {\n      const loading$ = this.getPermission(permissionCode).pipe(auditTime(0), tap(state => {\n        if (!(state.loading || state.success || state.error)) {\n          this.loadPermission(permissionCode);\n        }\n      }));\n      return using(() => loading$.subscribe(), () => this.getPermissionValue(permissionCode));\n    }\n    getTypes() {\n      return this.getPermissionTypeList().pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadPermissionTypes();\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    getList(params) {\n      return this.getPermissionList(params).pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadPermissions(params);\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    create(permission) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new CreatePermission({\n        userId,\n        permission\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    update(permissionCode, permission) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UpdatePermission({\n        userId,\n        permissionCode,\n        permission\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getLoadingStatus(permissionCode) {\n      return getItemStatus(this.getPermission(permissionCode));\n    }\n    getPermissionState(code) {\n      return this.store.select(getPermissionState(code));\n    }\n    getErrorState(permissionCode) {\n      return this.getPermissionState(permissionCode).pipe(map(state => state.error));\n    }\n  }\n  PermissionService.ɵfac = function PermissionService_Factory(t) {\n    return new (t || PermissionService)(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(i1.UserIdService));\n  };\n  PermissionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PermissionService,\n    factory: PermissionService.ɵfac,\n    providedIn: 'root'\n  });\n  return PermissionService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UserGroupService = /*#__PURE__*/(() => {\n  class UserGroupService {\n    constructor(store, userIdService) {\n      this.store = store;\n      this.userIdService = userIdService;\n    }\n    load(userGroupId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadUserGroup({\n        userId,\n        userGroupId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadList(params) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadUserGroups({\n        userId,\n        params\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getUserGroup(userGroupId) {\n      return this.store.select(getUserGroup(userGroupId));\n    }\n    getUserGroupValue(userGroupId) {\n      return this.store.select(getUserGroupValue(userGroupId)).pipe(filter(Boolean));\n    }\n    getUserGroupList(params) {\n      return this.store.select(getUserGroupList(params));\n    }\n    getAvailableOrgCustomersList(userGroupId, params) {\n      return this.store.select(getAvailableOrgCustomers(userGroupId, params));\n    }\n    getAvailableOrderApprovalPermissionsList(userGroupId, params) {\n      return this.store.select(getAvailableOrderApprovalPermissions(userGroupId, params));\n    }\n    get(userGroupUid) {\n      const loading$ = this.getUserGroup(userGroupUid).pipe(auditTime(0), tap(state => {\n        if (!(state.loading || state.success || state.error)) {\n          this.load(userGroupUid);\n        }\n      }));\n      return using(() => loading$.subscribe(), () => this.getUserGroupValue(userGroupUid));\n    }\n    getList(params) {\n      return this.getUserGroupList(params).pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadList(params);\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    create(userGroup) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new CreateUserGroup({\n        userId,\n        userGroup\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    update(userGroupId, userGroup) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UpdateUserGroup({\n        userId,\n        userGroupId,\n        userGroup\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getLoadingStatus(budgetCode) {\n      return getItemStatus(this.getUserGroup(budgetCode));\n    }\n    delete(userGroupId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new DeleteUserGroup({\n        userId,\n        userGroupId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadAvailableOrgCustomers(userGroupId, params) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadAvailableOrgCustomers({\n        userId,\n        userGroupId,\n        params\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    loadAvailableOrderApprovalPermissions(userGroupId, params) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new LoadPermissions$1({\n        userId,\n        userGroupId,\n        params\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    getAvailableOrgCustomers(userGroupId, params) {\n      return this.getAvailableOrgCustomersList(userGroupId, params).pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadAvailableOrgCustomers(userGroupId, params);\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    getAvailableOrderApprovalPermissions(userGroupId, params) {\n      return this.getAvailableOrderApprovalPermissionsList(userGroupId, params).pipe(observeOn(queueScheduler), tap(process => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadAvailableOrderApprovalPermissions(userGroupId, params);\n        }\n      }), filter(process => process.success || process.error), map(result => result.value));\n    }\n    assignMember(userGroupId, customerId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new AssignMember({\n        userId,\n        userGroupId,\n        customerId\n      })), () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    unassignMember(userGroupId, customerId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UnassignMember({\n        userId,\n        userGroupId,\n        customerId\n      })), () => {});\n    }\n    unassignAllMembers(userGroupId) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UnassignAllMembers({\n        userId,\n        userGroupId\n      })), () => {});\n    }\n    assignPermission(userGroupId, permissionUid) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new AssignPermission({\n        userId,\n        userGroupId,\n        permissionUid\n      })), () => {});\n    }\n    unassignPermission(userGroupId, permissionUid) {\n      this.userIdService.takeUserId(true).subscribe(userId => this.store.dispatch(new UnassignPermission({\n        userId,\n        userGroupId,\n        permissionUid\n      })), () => {});\n    }\n    getUserGroupState(code) {\n      return this.store.select(getUserGroupState(code));\n    }\n    getErrorState(code) {\n      return this.getUserGroupState(code).pipe(map(state => state.error));\n    }\n  }\n  UserGroupService.ɵfac = function UserGroupService_Factory(t) {\n    return new (t || UserGroupService)(i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(i1.UserIdService));\n  };\n  UserGroupService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserGroupService,\n    factory: UserGroupService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserGroupService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ADDRESS_ENTITIES, ADDRESS_LIST, AdminGuard, AdministrationCoreModule, B2BUNIT_APPROVAL_PROCESSES_NORMALIZER, B2BUNIT_NODE_LIST_NORMALIZER, B2BUNIT_NODE_NORMALIZER, B2BUNIT_NORMALIZER, B2BUNIT_SERIALIZER, b2bUser_action as B2BUserActions, B2BUserAdapter, B2BUserConnector, b2bUser_selector as B2BUserSelectors, B2BUserService, B2B_USERS_NORMALIZER, B2B_USER_APPROVERS, B2B_USER_ENTITIES, B2B_USER_FEATURE, B2B_USER_NORMALIZER, B2B_USER_PERMISSIONS, B2B_USER_SERIALIZER, B2B_USER_USER_GROUPS, BUDGETS_NORMALIZER, BUDGET_ENTITIES, BUDGET_FEATURE, BUDGET_LIST, BUDGET_NORMALIZER, BUDGET_SERIALIZER, budget_action as BudgetActions, BudgetAdapter, BudgetConnector, budget_selector as BudgetSelectors, BudgetService, COST_CENTER_ASSIGNED_BUDGETS, COST_CENTER_ENTITIES, COST_CENTER_FEATURE, COST_CENTER_LIST, costCenter_action as CostCenterActions, CostCenterAdapter, CostCenterConnector, costCenter_selector as CostCenterSelectors, CostCenterService, LoadStatus, ORGANIZATION_FEATURE, ORG_UNIT_APPROVAL_PROCESSES, ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_ASSIGNED_USERS, ORG_UNIT_ENTITIES, ORG_UNIT_FEATURE, ORG_UNIT_NODES, ORG_UNIT_NODE_ENTITIES, ORG_UNIT_NODE_LIST, ORG_UNIT_TREE, ORG_UNIT_TREE_ENTITY, orgUnit_action as OrgUnitActions, OrgUnitAdapter, OrgUnitConnector, orgUnit_selector as OrgUnitSelectors, OrgUnitService, organization_action as OrganizationActions, OrganizationBadRequestHandler, OrganizationConflictHandler, OrganizationPageMetaModule, OrganizationPageMetaResolver, PERMISSIONS_NORMALIZER, PERMISSION_ENTITIES, PERMISSION_FEATURE, PERMISSION_LIST, PERMISSION_NORMALIZER, PERMISSION_SERIALIZER, PERMISSION_TYPES, PERMISSION_TYPES_LIST, PERMISSION_TYPES_NORMALIZER, PERMISSION_TYPE_NORMALIZER, Period, permission_action as PermissionActions, PermissionAdapter, PermissionConnector, permission_selector as PermissionSelectors, PermissionService, USER_GROUPS_NORMALIZER, USER_GROUP_AVAILABLE_CUSTOMERS, USER_GROUP_ENTITIES, USER_GROUP_FEATURE, USER_GROUP_LIST, USER_GROUP_NORMALIZER, USER_GROUP_PERMISSIONS, USER_GROUP_SERIALIZER, USER_LIST, userGroup_action as UserGroupActions, UserGroupAdapter, UserGroupConnector, userGroup_selector as UserGroupSelectors, UserGroupService };\n//# sourceMappingURL=spartacus-organization-administration-core.js.map","map":null,"metadata":{},"sourceType":"module"}