{"ast":null,"code":"import * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, NgModule, Injectable } from '@angular/core';\nimport * as i5 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i2$1 from '@spartacus/core';\nimport { GlobalMessageType, UrlModule, I18nModule, provideDefaultConfig, AuthGuard, OAuthFlow, NotAuthGuard, RoutingService, AuthConfigService, GlobalMessageService, HttpErrorModel, AuthService, AuthRedirectService } from '@spartacus/core';\nimport * as i2 from '@spartacus/storefront';\nimport { ICON_TYPE, IconModule, SpinnerModule, CustomFormValidators, FormErrorsModule, sortTitles } from '@spartacus/storefront';\nimport { BehaviorSubject, Subscription, combineLatest } from 'rxjs';\nimport { first, tap, map, filter, switchMap } from 'rxjs/operators';\nimport * as i1 from '@spartacus/user/profile/root';\nimport { UserPasswordFacade, UserEmailFacade, UserProfileFacade } from '@spartacus/user/profile/root';\nimport * as i4 from '@angular/forms';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nfunction CloseAccountModalComponent_ng_container_0_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 8);\n    i0.ɵɵelement(2, \"cx-spinner\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CloseAccountModalComponent_ng_container_0_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"div\", 10);\n    i0.ɵɵelementStart(2, \"p\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 10);\n    i0.ɵɵelementStart(6, \"div\", 12);\n    i0.ɵɵelementStart(7, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function CloseAccountModalComponent_ng_container_0_ng_template_11_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return ctx_r4.closeAccount();\n    });\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function CloseAccountModalComponent_ng_container_0_ng_template_11_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.dismissModal();\n    });\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 3, \"closeAccount.confirmAccountClosureMessage\"), \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(9, 5, \"closeAccount.closeMyAccount\"), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(12, 7, \"common.cancel\"), \" \");\n  }\n}\nfunction CloseAccountModalComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵelementStart(2, \"h3\", 2);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function CloseAccountModalComponent_ng_container_0_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.dismissModal();\n    });\n    i0.ɵɵpipe(6, \"cxTranslate\");\n    i0.ɵɵelementStart(7, \"span\", 4);\n    i0.ɵɵelement(8, \"cx-icon\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, CloseAccountModalComponent_ng_container_0_div_9_Template, 3, 0, \"div\", 6);\n    i0.ɵɵpipe(10, \"async\");\n    i0.ɵɵtemplate(11, CloseAccountModalComponent_ng_container_0_ng_template_11_Template, 13, 9, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const _r2 = i0.ɵɵreference(12);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 5, \"closeAccount.confirmAccountClosure\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(6, 7, \"common.close\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"type\", ctx_r0.iconTypes.CLOSE);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 9, ctx_r0.isLoading$))(\"ngIfElse\", _r2);\n  }\n}\nconst _c0 = function () {\n  return {\n    cxRoute: \"home\"\n  };\n};\nfunction ForgotPasswordComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 7);\n  }\n}\nconst _c1 = function () {\n  return {\n    cxRoute: \"login\"\n  };\n};\nfunction RegisterComponent_section_0_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const title_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", title_r5.code);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", title_r5.name, \" \");\n  }\n}\nfunction RegisterComponent_section_0_label_58_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\");\n    i0.ɵɵelement(1, \"input\", 26);\n    i0.ɵɵelementStart(2, \"span\", 21);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const anonymousConsent_r6 = ctx.ngIf;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r4.isConsentGiven(anonymousConsent_r6.consent));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", anonymousConsent_r6.template, \" \");\n  }\n}\nconst _c2 = function () {\n  return {\n    cxRoute: \"termsAndConditions\"\n  };\n};\nfunction RegisterComponent_section_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\", 2);\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵelementStart(2, \"div\", 4);\n    i0.ɵɵelementStart(3, \"div\", 5);\n    i0.ɵɵelementStart(4, \"form\", 6);\n    i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_section_0_Template_form_ngSubmit_4_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.submitForm();\n    });\n    i0.ɵɵelementStart(5, \"div\", 7);\n    i0.ɵɵelementStart(6, \"label\");\n    i0.ɵɵelementStart(7, \"span\", 8);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"select\", 9);\n    i0.ɵɵelementStart(11, \"option\", 10);\n    i0.ɵɵtext(12);\n    i0.ɵɵpipe(13, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(14, RegisterComponent_section_0_option_14_Template, 2, 2, \"option\", 11);\n    i0.ɵɵpipe(15, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 7);\n    i0.ɵɵelementStart(17, \"label\");\n    i0.ɵɵelementStart(18, \"span\", 8);\n    i0.ɵɵtext(19);\n    i0.ɵɵpipe(20, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(21, \"input\", 12);\n    i0.ɵɵpipe(22, \"cxTranslate\");\n    i0.ɵɵelement(23, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"div\", 7);\n    i0.ɵɵelementStart(25, \"label\");\n    i0.ɵɵelementStart(26, \"span\", 8);\n    i0.ɵɵtext(27);\n    i0.ɵɵpipe(28, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(29, \"input\", 14);\n    i0.ɵɵpipe(30, \"cxTranslate\");\n    i0.ɵɵelement(31, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(32, \"div\", 7);\n    i0.ɵɵelementStart(33, \"label\");\n    i0.ɵɵelementStart(34, \"span\", 8);\n    i0.ɵɵtext(35);\n    i0.ɵɵpipe(36, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(37, \"input\", 15);\n    i0.ɵɵpipe(38, \"cxTranslate\");\n    i0.ɵɵelement(39, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(40, \"div\", 7);\n    i0.ɵɵelementStart(41, \"label\");\n    i0.ɵɵelementStart(42, \"span\", 8);\n    i0.ɵɵtext(43);\n    i0.ɵɵpipe(44, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(45, \"input\", 16);\n    i0.ɵɵpipe(46, \"cxTranslate\");\n    i0.ɵɵelement(47, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(48, \"div\", 7);\n    i0.ɵɵelementStart(49, \"label\");\n    i0.ɵɵelementStart(50, \"span\", 8);\n    i0.ɵɵtext(51);\n    i0.ɵɵpipe(52, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(53, \"input\", 17);\n    i0.ɵɵpipe(54, \"cxTranslate\");\n    i0.ɵɵelement(55, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(56, \"div\", 7);\n    i0.ɵɵelementStart(57, \"div\", 18);\n    i0.ɵɵtemplate(58, RegisterComponent_section_0_label_58_Template, 4, 2, \"label\", 19);\n    i0.ɵɵpipe(59, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(60, \"div\", 7);\n    i0.ɵɵelementStart(61, \"div\", 18);\n    i0.ɵɵelementStart(62, \"label\");\n    i0.ɵɵelement(63, \"input\", 20);\n    i0.ɵɵelementStart(64, \"span\", 21);\n    i0.ɵɵtext(65);\n    i0.ɵɵpipe(66, \"cxTranslate\");\n    i0.ɵɵelementStart(67, \"a\", 22);\n    i0.ɵɵpipe(68, \"cxUrl\");\n    i0.ɵɵtext(69);\n    i0.ɵɵpipe(70, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(71, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(72, \"button\", 23);\n    i0.ɵɵtext(73);\n    i0.ɵɵpipe(74, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(75, \"a\", 24);\n    i0.ɵɵpipe(76, \"cxUrl\");\n    i0.ɵɵtext(77);\n    i0.ɵɵpipe(78, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.registerForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 27, \"register.title\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(13, 29, \"register.selectTitle\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(15, 31, ctx_r0.titles$));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 33, \"register.firstName.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(22, 35, \"register.firstName.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"firstName\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(28, 37, \"register.lastName.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(30, 39, \"register.lastName.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"lastName\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(36, 41, \"register.emailAddress.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(38, 43, \"register.emailAddress.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"email\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(44, 45, \"register.password.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(46, 47, \"register.password.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"password\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(52, 49, \"register.confirmPassword.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(54, 51, \"register.confirmPassword.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"passwordconf\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(59, 53, ctx_r0.anonymousConsent$));\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(66, 55, \"register.confirmThatRead\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(68, 57, i0.ɵɵpureFunction0(67, _c2)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(70, 59, \"register.termsAndConditions\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"termsandconditions\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(74, 61, \"register.register\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(76, 63, i0.ɵɵpureFunction0(68, _c1)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(78, 65, \"register.signIn\"));\n  }\n}\nfunction RegisterComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelement(1, \"cx-spinner\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 2);\n  }\n}\nfunction ResetPasswordComponent_form_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 3);\n    i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_form_2_Template_form_ngSubmit_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const token_r2 = restoredCtx.ngIf;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onSubmit(token_r2);\n    });\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵelementStart(2, \"span\", 4);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 5);\n    i0.ɵɵpipe(6, \"cxTranslate\");\n    i0.ɵɵelement(7, \"cx-form-errors\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"label\");\n    i0.ɵɵelementStart(9, \"span\", 4);\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"input\", 7);\n    i0.ɵɵpipe(13, \"cxTranslate\");\n    i0.ɵɵelement(14, \"cx-form-errors\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 8);\n    i0.ɵɵtext(16);\n    i0.ɵɵpipe(17, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.form);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 9, \"register.newPassword\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(6, 11, \"register.password.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r1.form.get(\"password\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(11, 13, \"register.passwordMinRequirements\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(13, 15, \"register.confirmPassword.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r1.form.get(\"passwordConfirm\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.form.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(17, 17, \"register.resetPassword\"), \" \");\n  }\n}\nfunction UpdateEmailComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 9);\n  }\n}\nfunction UpdatePasswordComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 9);\n  }\n}\nfunction UpdateProfileComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 12);\n  }\n}\nfunction UpdateProfileComponent_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const title_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", title_r2.code);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", title_r2.name, \" \");\n  }\n}\nlet CloseAccountModalComponent = /*#__PURE__*/(() => {\n  class CloseAccountModalComponent {\n    constructor(modalService, authService, globalMessageService, routingService, translationService, userProfile) {\n      this.modalService = modalService;\n      this.authService = authService;\n      this.globalMessageService = globalMessageService;\n      this.routingService = routingService;\n      this.translationService = translationService;\n      this.userProfile = userProfile;\n      this.iconTypes = ICON_TYPE;\n      this.isLoading$ = new BehaviorSubject(false);\n    }\n    ngOnInit() {\n      this.isLoggedIn$ = this.authService.isUserLoggedIn();\n    }\n    onSuccess() {\n      this.dismissModal();\n      this.translationService.translate('closeAccount.accountClosedSuccessfully').pipe(first()).subscribe(text => {\n        this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n      });\n      this.routingService.go({\n        cxRoute: 'home'\n      });\n    }\n    onError() {\n      this.dismissModal();\n      this.translationService.translate('closeAccount.accountClosedFailure').pipe(first()).subscribe(text => {\n        this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n      });\n    }\n    dismissModal(reason) {\n      this.modalService.dismissActiveModal(reason);\n    }\n    closeAccount() {\n      this.isLoading$.next(true);\n      this.userProfile.close().subscribe({\n        next: () => {\n          this.onSuccess();\n          this.isLoading$.next(false);\n        },\n        error: () => {\n          this.onError();\n          this.isLoading$.next(false);\n        }\n      });\n    }\n  }\n  CloseAccountModalComponent.ɵfac = function CloseAccountModalComponent_Factory(t) {\n    return new (t || CloseAccountModalComponent)(i0.ɵɵdirectiveInject(i2.ModalService), i0.ɵɵdirectiveInject(i2$1.AuthService), i0.ɵɵdirectiveInject(i2$1.GlobalMessageService), i0.ɵɵdirectiveInject(i2$1.RoutingService), i0.ɵɵdirectiveInject(i2$1.TranslationService), i0.ɵɵdirectiveInject(i1.UserProfileFacade));\n  };\n  CloseAccountModalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CloseAccountModalComponent,\n    selectors: [[\"cx-close-account-modal\"]],\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [1, \"modal-header\", \"cx-dialog-header\"], [1, \"modal-title\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [\"aria-hidden\", \"true\"], [3, \"type\"], [4, \"ngIf\", \"ngIfElse\"], [\"loaded\", \"\"], [1, \"cx-spinner\"], [1, \"modal-body\"], [1, \"cx-row\"], [1, \"cx-confirmation\"], [1, \"cx-btn-group\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"click\"]],\n    template: function CloseAccountModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CloseAccountModalComponent_ng_container_0_Template, 13, 11, \"ng-container\", 0);\n        i0.ɵɵpipe(1, \"async\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.isLoggedIn$));\n      }\n    },\n    directives: [i3.NgIf, i2.IconComponent, i2.SpinnerComponent],\n    pipes: [i3.AsyncPipe, i2$1.TranslatePipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CloseAccountModalComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CloseAccountComponent = /*#__PURE__*/(() => {\n  class CloseAccountComponent {\n    constructor(modalService) {\n      this.modalService = modalService;\n    }\n    openModal() {\n      this.modal = this.modalService.open(CloseAccountModalComponent, {\n        centered: true\n      }).componentInstance;\n    }\n  }\n  CloseAccountComponent.ɵfac = function CloseAccountComponent_Factory(t) {\n    return new (t || CloseAccountComponent)(i0.ɵɵdirectiveInject(i2.ModalService));\n  };\n  CloseAccountComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CloseAccountComponent,\n    selectors: [[\"cx-close-account\"]],\n    decls: 11,\n    vars: 10,\n    consts: [[1, \"col-lg-8\", \"col-md-9\"], [1, \"row\", \"cx-btn-group\"], [1, \"col-sm-3\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"col-sm-6\"], [1, \"btn\", \"btn-primary\", 3, \"click\"]],\n    template: function CloseAccountComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"a\", 3);\n        i0.ɵɵpipe(4, \"cxUrl\");\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵelementStart(8, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function CloseAccountComponent_Template_button_click_8_listener() {\n          return ctx.openModal();\n        });\n        i0.ɵɵtext(9);\n        i0.ɵɵpipe(10, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(4, 3, i0.ɵɵpureFunction0(9, _c0)));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 5, \"common.cancel\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(10, 7, \"closeAccount.closeMyAccount\"), \" \");\n      }\n    },\n    directives: [i5.RouterLinkWithHref],\n    pipes: [i2$1.UrlPipe, i2$1.TranslatePipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CloseAccountComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CloseAccountModule = /*#__PURE__*/(() => {\n  class CloseAccountModule {}\n  CloseAccountModule.ɵfac = function CloseAccountModule_Factory(t) {\n    return new (t || CloseAccountModule)();\n  };\n  CloseAccountModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CloseAccountModule\n  });\n  CloseAccountModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideDefaultConfig({\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard]\n        }\n      }\n    })],\n    imports: [[CommonModule, RouterModule, UrlModule, I18nModule, IconModule, SpinnerModule]]\n  });\n  return CloseAccountModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ForgotPasswordComponentService = /*#__PURE__*/(() => {\n  class ForgotPasswordComponentService {\n    constructor(userPasswordService, routingService, authConfigService, globalMessage) {\n      this.userPasswordService = userPasswordService;\n      this.routingService = routingService;\n      this.authConfigService = authConfigService;\n      this.globalMessage = globalMessage;\n      this.busy$ = new BehaviorSubject(false);\n      this.isUpdating$ = this.busy$.pipe(tap(state => state === true ? this.form.disable() : this.form.enable()));\n      this.form = new FormGroup({\n        userEmail: new FormControl('', [Validators.required, CustomFormValidators.emailValidator])\n      });\n    }\n    /**\n     * Sends an email to the user to reset the password.\n     *\n     * When the `ResourceOwnerPasswordFlow` is used, the user is routed\n     * to the login page.\n     */\n    requestEmail() {\n      if (!this.form.valid) {\n        this.form.markAllAsTouched();\n        return;\n      }\n      this.busy$.next(true);\n      this.userPasswordService.requestForgotPasswordEmail(this.form.value.userEmail).subscribe({\n        next: () => this.onSuccess(),\n        error: error => this.onError(error)\n      });\n    }\n    onSuccess() {\n      this.globalMessage.add({\n        key: 'forgottenPassword.passwordResetEmailSent'\n      }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n      this.busy$.next(false);\n      this.form.reset();\n      this.redirect();\n    }\n    onError(_error) {\n      this.busy$.next(false);\n    }\n    /**\n     * Redirects the user back to the login page.\n     *\n     * This only happens in case of the `ResourceOwnerPasswordFlow` OAuth flow.\n     */\n    redirect() {\n      if (this.authConfigService.getOAuthFlow() === OAuthFlow.ResourceOwnerPasswordFlow) {\n        this.routingService.go({\n          cxRoute: 'login'\n        });\n      }\n    }\n  }\n  ForgotPasswordComponentService.ɵfac = function ForgotPasswordComponentService_Factory(t) {\n    return new (t || ForgotPasswordComponentService)(i0.ɵɵinject(i1.UserPasswordFacade), i0.ɵɵinject(i2$1.RoutingService), i0.ɵɵinject(i2$1.AuthConfigService), i0.ɵɵinject(i2$1.GlobalMessageService));\n  };\n  ForgotPasswordComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ForgotPasswordComponentService,\n    factory: ForgotPasswordComponentService.ɵfac\n  });\n  return ForgotPasswordComponentService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ForgotPasswordComponent = /*#__PURE__*/(() => {\n  class ForgotPasswordComponent {\n    constructor(service) {\n      this.service = service;\n      this.form = this.service.form;\n      this.isUpdating$ = this.service.isUpdating$;\n    }\n    onSubmit() {\n      this.service.requestEmail();\n    }\n  }\n  ForgotPasswordComponent.ɵfac = function ForgotPasswordComponent_Factory(t) {\n    return new (t || ForgotPasswordComponent)(i0.ɵɵdirectiveInject(ForgotPasswordComponentService));\n  };\n  ForgotPasswordComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ForgotPasswordComponent,\n    selectors: [[\"cx-forgot-password\"]],\n    decls: 17,\n    vars: 22,\n    consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"aria-required\", \"true\", \"type\", \"email\", \"formControlName\", \"userEmail\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"], [1, \"overlay\"]],\n    template: function ForgotPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ForgotPasswordComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵelementStart(2, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function ForgotPasswordComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(3, \"label\");\n        i0.ɵɵelementStart(4, \"span\", 2);\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 3);\n        i0.ɵɵpipe(8, \"cxTranslate\");\n        i0.ɵɵelement(9, \"cx-form-errors\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"a\", 5);\n        i0.ɵɵpipe(11, \"cxUrl\");\n        i0.ɵɵtext(12);\n        i0.ɵɵpipe(13, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 6);\n        i0.ɵɵtext(15);\n        i0.ɵɵpipe(16, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 9, ctx.isUpdating$));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 11, \"forgottenPassword.emailAddress.label\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(8, 13, \"forgottenPassword.emailAddress.placeholder\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.form.get(\"userEmail\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(11, 15, i0.ɵɵpureFunction0(21, _c1)));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 17, \"common.cancel\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.form.disabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(16, 19, \"common.submit\"), \" \");\n      }\n    },\n    directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i2.FormErrorsComponent, i5.RouterLinkWithHref, i2.SpinnerComponent],\n    pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ForgotPasswordComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ForgotPasswordModule = /*#__PURE__*/(() => {\n  class ForgotPasswordModule {}\n  ForgotPasswordModule.ɵfac = function ForgotPasswordModule_Factory(t) {\n    return new (t || ForgotPasswordModule)();\n  };\n  ForgotPasswordModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ForgotPasswordModule\n  });\n  ForgotPasswordModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideDefaultConfig({\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n          providers: [{\n            provide: ForgotPasswordComponentService,\n            useClass: ForgotPasswordComponentService,\n            deps: [UserPasswordFacade, RoutingService, AuthConfigService, GlobalMessageService]\n          }]\n        }\n      }\n    })],\n    imports: [[CommonModule, ReactiveFormsModule, RouterModule, UrlModule, I18nModule, FormErrorsModule, SpinnerModule]]\n  });\n  return ForgotPasswordModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor(userRegister, globalMessageService, fb, router, anonymousConsentsService, anonymousConsentsConfig, authConfigService) {\n      this.userRegister = userRegister;\n      this.globalMessageService = globalMessageService;\n      this.fb = fb;\n      this.router = router;\n      this.anonymousConsentsService = anonymousConsentsService;\n      this.anonymousConsentsConfig = anonymousConsentsConfig;\n      this.authConfigService = authConfigService;\n      this.isLoading$ = new BehaviorSubject(false);\n      this.subscription = new Subscription();\n      this.registerForm = this.fb.group({\n        titleCode: [''],\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n        password: ['', [Validators.required, CustomFormValidators.passwordValidator]],\n        passwordconf: ['', Validators.required],\n        newsletter: new FormControl({\n          value: false,\n          disabled: this.isConsentRequired()\n        }),\n        termsandconditions: [false, Validators.requiredTrue]\n      }, {\n        validators: CustomFormValidators.passwordsMustMatch('password', 'passwordconf')\n      });\n    }\n    ngOnInit() {\n      var _a, _b, _c;\n      this.titles$ = this.userRegister.getTitles().pipe(map(titles => {\n        return titles.sort(sortTitles);\n      }));\n      // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n      this.subscription.add(this.globalMessageService.get().pipe(filter(messages => !!Object.keys(messages).length)).subscribe(globalMessageEntities => {\n        const messages = globalMessageEntities && globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n        if (messages && messages.some(message => message === 'This field is required.')) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.globalMessageService.add({\n            key: 'register.titleRequired'\n          }, GlobalMessageType.MSG_TYPE_ERROR);\n        }\n      }));\n      const registerConsent = (_c = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.registerConsent) !== null && _c !== void 0 ? _c : '';\n      this.anonymousConsent$ = combineLatest([this.anonymousConsentsService.getConsent(registerConsent), this.anonymousConsentsService.getTemplate(registerConsent)]).pipe(map(([consent, template]) => {\n        return {\n          consent,\n          template: (template === null || template === void 0 ? void 0 : template.description) ? template.description : ''\n        };\n      }));\n      this.subscription.add(\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      }));\n    }\n    submitForm() {\n      if (this.registerForm.valid) {\n        this.registerUser();\n      } else {\n        this.registerForm.markAllAsTouched();\n      }\n    }\n    registerUser() {\n      this.isLoading$.next(true);\n      this.userRegister.register(this.collectDataFromRegisterForm(this.registerForm.value)).subscribe({\n        next: () => this.onRegisterUserSuccess(),\n        complete: () => this.isLoading$.next(false)\n      });\n    }\n    titleSelected(title) {\n      this.registerForm['controls'].titleCode.setValue(title.code);\n    }\n    collectDataFromRegisterForm(formData) {\n      const {\n        firstName,\n        lastName,\n        email,\n        password,\n        titleCode\n      } = formData;\n      return {\n        firstName,\n        lastName,\n        uid: email.toLowerCase(),\n        password,\n        titleCode\n      };\n    }\n    isConsentGiven(consent) {\n      return this.anonymousConsentsService.isConsentGiven(consent);\n    }\n    isConsentRequired() {\n      var _a, _b, _c, _d;\n      const requiredConsents = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.requiredConsents;\n      const registerConsent = (_d = (_c = this.anonymousConsentsConfig) === null || _c === void 0 ? void 0 : _c.anonymousConsents) === null || _d === void 0 ? void 0 : _d.registerConsent;\n      if (requiredConsents && registerConsent) {\n        return requiredConsents.includes(registerConsent);\n      }\n      return false;\n    }\n    onRegisterUserSuccess() {\n      if (this.authConfigService.getOAuthFlow() === OAuthFlow.ResourceOwnerPasswordFlow) {\n        this.router.go('login');\n      }\n      this.globalMessageService.add({\n        key: 'register.postRegisterMessage'\n      }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n    toggleAnonymousConsent() {\n      var _a, _b;\n      const registerConsent = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.registerConsent;\n      if (registerConsent) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        if (Boolean(this.registerForm.get('newsletter').value)) {\n          this.anonymousConsentsService.giveConsent(registerConsent);\n        } else {\n          this.anonymousConsentsService.withdrawConsent(registerConsent);\n        }\n      }\n    }\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n  }\n  RegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.UserRegisterFacade), i0.ɵɵdirectiveInject(i2$1.GlobalMessageService), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i2$1.RoutingService), i0.ɵɵdirectiveInject(i2$1.AnonymousConsentsService), i0.ɵɵdirectiveInject(i2$1.AnonymousConsentsConfig), i0.ɵɵdirectiveInject(i2$1.AuthConfigService));\n  };\n  RegisterComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"cx-register\"]],\n    decls: 4,\n    vars: 4,\n    consts: [[\"class\", \"cx-page-section container\", 4, \"ngIf\", \"ngIfElse\"], [\"loading\", \"\"], [1, \"cx-page-section\", \"container\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-6\"], [1, \"cx-section\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [1, \"label-content\"], [\"formControlName\", \"titleCode\", 1, \"form-control\"], [\"selected\", \"\", \"value\", \"\", \"disabled\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"firstname\", \"formControlName\", \"firstName\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"lastname\", \"formControlName\", \"lastName\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"email\", \"name\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"confirmpassword\", \"formControlName\", \"passwordconf\", 1, \"form-control\", 3, \"placeholder\"], [1, \"form-check\"], [4, \"ngIf\"], [\"aria-required\", \"true\", \"type\", \"checkbox\", \"name\", \"termsandconditions\", \"formControlName\", \"termsandconditions\"], [1, \"form-check-label\"], [\"target\", \"_blank\", 3, \"routerLink\"], [\"type\", \"submit\", 1, \"btn\", \"btn-block\", \"btn-primary\"], [1, \"cx-login-link\", \"btn-link\", 3, \"routerLink\"], [3, \"value\"], [\"type\", \"checkbox\", \"name\", \"newsletter\", \"formControlName\", \"newsletter\", 1, \"form-check-input\", 3, \"checked\"], [1, \"cx-spinner\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, RegisterComponent_section_0_Template, 79, 69, \"section\", 0);\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵtemplate(2, RegisterComponent_ng_template_2_Template, 2, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(3);\n        i0.ɵɵproperty(\"ngIf\", !i0.ɵɵpipeBind1(1, 2, ctx.isLoading$))(\"ngIfElse\", _r1);\n      }\n    },\n    directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.FormControlName, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i3.NgForOf, i4.DefaultValueAccessor, i2.FormErrorsComponent, i4.CheckboxControlValueAccessor, i5.RouterLinkWithHref, i2.SpinnerComponent],\n    pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n    encapsulation: 2\n  });\n  return RegisterComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet RegisterComponentModule = /*#__PURE__*/(() => {\n  class RegisterComponentModule {}\n  RegisterComponentModule.ɵfac = function RegisterComponentModule_Factory(t) {\n    return new (t || RegisterComponentModule)();\n  };\n  RegisterComponentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RegisterComponentModule\n  });\n  RegisterComponentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideDefaultConfig({\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard]\n        }\n      }\n    })],\n    imports: [[CommonModule, ReactiveFormsModule, RouterModule, UrlModule, I18nModule, SpinnerModule, FormErrorsModule]]\n  });\n  return RegisterComponentModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ResetPasswordComponentService = /*#__PURE__*/(() => {\n  class ResetPasswordComponentService {\n    constructor(userPasswordService, routingService, globalMessage) {\n      this.userPasswordService = userPasswordService;\n      this.routingService = routingService;\n      this.globalMessage = globalMessage;\n      this.busy$ = new BehaviorSubject(false);\n      this.isUpdating$ = this.busy$.pipe(tap(state => state === true ? this.form.disable() : this.form.enable()));\n      this.resetToken$ = this.routingService.getRouterState().pipe(map(routerState => routerState.state.queryParams['token']));\n      this.form = new FormGroup({\n        password: new FormControl('', [Validators.required, CustomFormValidators.passwordValidator]),\n        passwordConfirm: new FormControl('', Validators.required)\n      }, {\n        validators: CustomFormValidators.passwordsMustMatch('password', 'passwordConfirm')\n      });\n    }\n    /**\n     * Resets the password by the given token.\n     *\n     * The token has been provided during the request password flow.\n     * The token is not validated on the client.\n     */\n    resetPassword(token) {\n      if (!this.form.valid) {\n        this.form.markAllAsTouched();\n        return;\n      }\n      this.busy$.next(true);\n      const password = this.form.get('password').value;\n      this.userPasswordService.reset(token, password).subscribe({\n        next: () => this.onSuccess(),\n        error: error => this.onError(error)\n      });\n    }\n    onSuccess() {\n      this.globalMessage.add({\n        key: 'forgottenPassword.passwordResetSuccess'\n      }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n      this.busy$.next(false);\n      this.form.reset();\n      this.redirect();\n    }\n    onError(error) {\n      var _a;\n      this.busy$.next(false);\n      if (error instanceof HttpErrorModel) {\n        ((_a = error.details) !== null && _a !== void 0 ? _a : []).forEach(err => {\n          if (err.message) {\n            this.globalMessage.add({\n              raw: err.message\n            }, GlobalMessageType.MSG_TYPE_ERROR);\n          }\n        });\n      }\n    }\n    /**\n     * Redirects the user to the login page.\n     */\n    redirect() {\n      this.routingService.go({\n        cxRoute: 'login'\n      });\n    }\n  }\n  ResetPasswordComponentService.ɵfac = function ResetPasswordComponentService_Factory(t) {\n    return new (t || ResetPasswordComponentService)(i0.ɵɵinject(i1.UserPasswordFacade), i0.ɵɵinject(i2$1.RoutingService), i0.ɵɵinject(i2$1.GlobalMessageService));\n  };\n  ResetPasswordComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ResetPasswordComponentService,\n    factory: ResetPasswordComponentService.ɵfac\n  });\n  return ResetPasswordComponentService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ResetPasswordComponent = /*#__PURE__*/(() => {\n  class ResetPasswordComponent {\n    constructor(service) {\n      this.service = service;\n      this.form = this.service.form;\n      this.isUpdating$ = this.service.isUpdating$;\n      this.token$ = this.service.resetToken$;\n    }\n    onSubmit(token) {\n      this.service.resetPassword(token);\n    }\n  }\n  ResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n    return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(ResetPasswordComponentService));\n  };\n  ResetPasswordComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ResetPasswordComponent,\n    selectors: [[\"cx-reset-password\"]],\n    hostAttrs: [1, \"user-form\"],\n    decls: 4,\n    vars: 6,\n    consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [1, \"overlay\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"aria-required\", \"true\", \"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"password\", \"formControlName\", \"passwordConfirm\", 1, \"form-control\", 3, \"placeholder\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"]],\n    template: function ResetPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ResetPasswordComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵtemplate(2, ResetPasswordComponent_form_2_Template, 18, 19, \"form\", 1);\n        i0.ɵɵpipe(3, \"async\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 2, ctx.isUpdating$));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(3, 4, ctx.token$));\n      }\n    },\n    directives: [i3.NgIf, i2.SpinnerComponent, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i2.FormErrorsComponent],\n    pipes: [i3.AsyncPipe, i2$1.TranslatePipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ResetPasswordComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ResetPasswordModule = /*#__PURE__*/(() => {\n  class ResetPasswordModule {}\n  ResetPasswordModule.ɵfac = function ResetPasswordModule_Factory(t) {\n    return new (t || ResetPasswordModule)();\n  };\n  ResetPasswordModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ResetPasswordModule\n  });\n  ResetPasswordModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideDefaultConfig({\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordComponent,\n          guards: [NotAuthGuard],\n          providers: [{\n            provide: ResetPasswordComponentService,\n            useClass: ResetPasswordComponentService,\n            deps: [UserPasswordFacade, RoutingService, GlobalMessageService]\n          }]\n        }\n      }\n    })],\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule, RouterModule, I18nModule, FormErrorsModule, SpinnerModule]]\n  });\n  return ResetPasswordModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UpdateEmailComponentService = /*#__PURE__*/(() => {\n  class UpdateEmailComponentService {\n    constructor(userEmail, routingService, globalMessageService, authService, authRedirectService) {\n      this.userEmail = userEmail;\n      this.routingService = routingService;\n      this.globalMessageService = globalMessageService;\n      this.authService = authService;\n      this.authRedirectService = authRedirectService;\n      this.busy$ = new BehaviorSubject(false);\n      this.isUpdating$ = this.busy$.pipe(tap(state => state === true ? this.form.disable() : this.form.enable()));\n      this.form = new FormGroup({\n        email: new FormControl('', [Validators.required, CustomFormValidators.emailValidator]),\n        confirmEmail: new FormControl('', [Validators.required]),\n        password: new FormControl('', [Validators.required])\n      }, {\n        validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail')\n      });\n    }\n    save() {\n      var _a, _b;\n      if (!this.form.valid) {\n        this.form.markAllAsTouched();\n        return;\n      }\n      this.busy$.next(true);\n      const newEmail = (_a = this.form.get('confirmEmail')) === null || _a === void 0 ? void 0 : _a.value;\n      const password = (_b = this.form.get('password')) === null || _b === void 0 ? void 0 : _b.value;\n      this.userEmail.update(password, newEmail).subscribe({\n        next: () => this.onSuccess(newEmail),\n        error: error => this.onError(error)\n      });\n    }\n    /**\n     * Handles successful updating of the user email.\n     */\n    onSuccess(newUid) {\n      this.globalMessageService.add({\n        key: 'updateEmailForm.emailUpdateSuccess',\n        params: {\n          newUid\n        }\n      }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n      this.busy$.next(false);\n      this.form.reset();\n      // sets the redirect url after login\n      this.authRedirectService.setRedirectUrl(this.routingService.getUrl({\n        cxRoute: 'home'\n      }));\n      // TODO(#9638): Use logout route when it will support passing redirect url\n      this.authService.coreLogout().then(() => {\n        this.routingService.go({\n          cxRoute: 'login'\n        }, {\n          state: {\n            newUid\n          }\n        });\n      });\n    }\n    onError(_error) {\n      this.busy$.next(false);\n    }\n  }\n  UpdateEmailComponentService.ɵfac = function UpdateEmailComponentService_Factory(t) {\n    return new (t || UpdateEmailComponentService)(i0.ɵɵinject(i1.UserEmailFacade), i0.ɵɵinject(i2$1.RoutingService), i0.ɵɵinject(i2$1.GlobalMessageService), i0.ɵɵinject(i2$1.AuthService), i0.ɵɵinject(i2$1.AuthRedirectService));\n  };\n  UpdateEmailComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdateEmailComponentService,\n    factory: UpdateEmailComponentService.ɵfac\n  });\n  return UpdateEmailComponentService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UpdateEmailComponent = /*#__PURE__*/(() => {\n  class UpdateEmailComponent {\n    constructor(service) {\n      this.service = service;\n      this.form = this.service.form;\n      this.isUpdating$ = this.service.isUpdating$;\n    }\n    onSubmit() {\n      this.service.save();\n    }\n  }\n  UpdateEmailComponent.ɵfac = function UpdateEmailComponent_Factory(t) {\n    return new (t || UpdateEmailComponent)(i0.ɵɵdirectiveInject(UpdateEmailComponentService));\n  };\n  UpdateEmailComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: UpdateEmailComponent,\n    selectors: [[\"cx-update-email\"]],\n    hostAttrs: [1, \"user-form\"],\n    decls: 31,\n    vars: 36,\n    consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"aria-required\", \"true\", \"type\", \"email\", \"name\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"email\", \"name\", \"confirmEmail\", \"formControlName\", \"confirmEmail\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"password\", \"formControlName\", \"password\", \"autocomplete\", \"new-password\", 1, \"form-control\", 3, \"placeholder\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"], [1, \"overlay\"]],\n    template: function UpdateEmailComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, UpdateEmailComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵelementStart(2, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function UpdateEmailComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(3, \"label\");\n        i0.ɵɵelementStart(4, \"span\", 2);\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 3);\n        i0.ɵɵpipe(8, \"cxTranslate\");\n        i0.ɵɵelement(9, \"cx-form-errors\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"label\");\n        i0.ɵɵelementStart(11, \"span\", 2);\n        i0.ɵɵtext(12);\n        i0.ɵɵpipe(13, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"input\", 5);\n        i0.ɵɵpipe(15, \"cxTranslate\");\n        i0.ɵɵelement(16, \"cx-form-errors\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"label\");\n        i0.ɵɵelementStart(18, \"span\", 2);\n        i0.ɵɵtext(19);\n        i0.ɵɵpipe(20, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 6);\n        i0.ɵɵpipe(22, \"cxTranslate\");\n        i0.ɵɵelement(23, \"cx-form-errors\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"a\", 7);\n        i0.ɵɵpipe(25, \"cxUrl\");\n        i0.ɵɵtext(26);\n        i0.ɵɵpipe(27, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"button\", 8);\n        i0.ɵɵtext(29);\n        i0.ɵɵpipe(30, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 15, ctx.isUpdating$));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 17, \"updateEmailForm.newEmailAddress.label\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(8, 19, \"updateEmailForm.newEmailAddress.placeholder\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.form.get(\"email\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 21, \"updateEmailForm.confirmNewEmailAddress.label\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(15, 23, \"updateEmailForm.confirmNewEmailAddress.placeholder\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.form.get(\"confirmEmail\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 25, \"updateEmailForm.password.label\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(22, 27, \"updateEmailForm.password.placeholder\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.form.get(\"password\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(25, 29, i0.ɵɵpureFunction0(35, _c0)));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(27, 31, \"common.cancel\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.form.disabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(30, 33, \"common.save\"), \" \");\n      }\n    },\n    directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i2.FormErrorsComponent, i5.RouterLinkWithHref, i2.SpinnerComponent],\n    pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return UpdateEmailComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UpdateEmailModule = /*#__PURE__*/(() => {\n  class UpdateEmailModule {}\n  UpdateEmailModule.ɵfac = function UpdateEmailModule_Factory(t) {\n    return new (t || UpdateEmailModule)();\n  };\n  UpdateEmailModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: UpdateEmailModule\n  });\n  UpdateEmailModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideDefaultConfig({\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n          providers: [{\n            provide: UpdateEmailComponentService,\n            useClass: UpdateEmailComponentService,\n            deps: [UserEmailFacade, RoutingService, GlobalMessageService, AuthService, AuthRedirectService]\n          }]\n        }\n      }\n    })],\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, UrlModule, RouterModule, I18nModule, FormErrorsModule]]\n  });\n  return UpdateEmailModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UpdatePasswordComponentService = /*#__PURE__*/(() => {\n  class UpdatePasswordComponentService {\n    constructor(userPasswordService, routingService, globalMessageService) {\n      this.userPasswordService = userPasswordService;\n      this.routingService = routingService;\n      this.globalMessageService = globalMessageService;\n      this.busy$ = new BehaviorSubject(false);\n      this.isUpdating$ = this.busy$.pipe(tap(state => state === true ? this.form.disable() : this.form.enable()));\n      this.form = new FormGroup({\n        oldPassword: new FormControl('', Validators.required),\n        newPassword: new FormControl('', [Validators.required, CustomFormValidators.passwordValidator]),\n        newPasswordConfirm: new FormControl('', Validators.required)\n      }, {\n        validators: CustomFormValidators.passwordsMustMatch('newPassword', 'newPasswordConfirm')\n      });\n    }\n    /**\n     * Updates the password for the user.\n     */\n    updatePassword() {\n      var _a, _b;\n      if (!this.form.valid) {\n        this.form.markAllAsTouched();\n        return;\n      }\n      this.busy$.next(true);\n      const oldPassword = (_a = this.form.get('oldPassword')) === null || _a === void 0 ? void 0 : _a.value;\n      const newPassword = (_b = this.form.get('newPassword')) === null || _b === void 0 ? void 0 : _b.value;\n      this.userPasswordService.update(oldPassword, newPassword).subscribe({\n        next: () => this.onSuccess(),\n        error: error => this.onError(error)\n      });\n    }\n    onSuccess() {\n      this.globalMessageService.add({\n        key: 'updatePasswordForm.passwordUpdateSuccess'\n      }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n      this.busy$.next(false);\n      this.form.reset();\n      this.routingService.go({\n        cxRoute: 'home'\n      });\n    }\n    onError(_error) {\n      this.busy$.next(false);\n      this.form.reset();\n    }\n  }\n  UpdatePasswordComponentService.ɵfac = function UpdatePasswordComponentService_Factory(t) {\n    return new (t || UpdatePasswordComponentService)(i0.ɵɵinject(i1.UserPasswordFacade), i0.ɵɵinject(i2$1.RoutingService), i0.ɵɵinject(i2$1.GlobalMessageService));\n  };\n  UpdatePasswordComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdatePasswordComponentService,\n    factory: UpdatePasswordComponentService.ɵfac\n  });\n  return UpdatePasswordComponentService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UpdatePasswordComponent = /*#__PURE__*/(() => {\n  class UpdatePasswordComponent {\n    constructor(service) {\n      this.service = service;\n      this.form = this.service.form;\n      this.isUpdating$ = this.service.isUpdating$;\n    }\n    onSubmit() {\n      this.service.updatePassword();\n    }\n  }\n  UpdatePasswordComponent.ɵfac = function UpdatePasswordComponent_Factory(t) {\n    return new (t || UpdatePasswordComponent)(i0.ɵɵdirectiveInject(UpdatePasswordComponentService));\n  };\n  UpdatePasswordComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: UpdatePasswordComponent,\n    selectors: [[\"cx-update-password\"]],\n    hostAttrs: [1, \"user-form\"],\n    decls: 31,\n    vars: 36,\n    consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"oldPassword\", \"formControlName\", \"oldPassword\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"newPassword\", \"formControlName\", \"newPassword\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"newPasswordConfirm\", \"formControlName\", \"newPasswordConfirm\", 1, \"form-control\", 3, \"placeholder\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"], [1, \"overlay\"]],\n    template: function UpdatePasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, UpdatePasswordComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵelementStart(2, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function UpdatePasswordComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(3, \"label\");\n        i0.ɵɵelementStart(4, \"span\", 2);\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 3);\n        i0.ɵɵpipe(8, \"cxTranslate\");\n        i0.ɵɵelement(9, \"cx-form-errors\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"label\");\n        i0.ɵɵelementStart(11, \"span\", 2);\n        i0.ɵɵtext(12);\n        i0.ɵɵpipe(13, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"input\", 5);\n        i0.ɵɵpipe(15, \"cxTranslate\");\n        i0.ɵɵelement(16, \"cx-form-errors\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"label\");\n        i0.ɵɵelementStart(18, \"span\", 2);\n        i0.ɵɵtext(19);\n        i0.ɵɵpipe(20, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 6);\n        i0.ɵɵpipe(22, \"cxTranslate\");\n        i0.ɵɵelement(23, \"cx-form-errors\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"a\", 7);\n        i0.ɵɵpipe(25, \"cxUrl\");\n        i0.ɵɵtext(26);\n        i0.ɵɵpipe(27, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"button\", 8);\n        i0.ɵɵtext(29);\n        i0.ɵɵpipe(30, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 15, ctx.isUpdating$));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 17, \"updatePasswordForm.oldPassword.label\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(8, 19, \"updatePasswordForm.oldPassword.placeholder\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.form.get(\"oldPassword\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 21, \"updatePasswordForm.newPassword.label\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(15, 23, \"updatePasswordForm.newPassword.placeholder\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.form.get(\"newPassword\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 25, \"updatePasswordForm.confirmPassword.label\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(22, 27, \"updatePasswordForm.confirmPassword.placeholder\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.form.get(\"newPasswordConfirm\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(25, 29, i0.ɵɵpureFunction0(35, _c0)));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(27, 31, \"common.cancel\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.form.disabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(30, 33, \"common.save\"), \" \");\n      }\n    },\n    directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i2.FormErrorsComponent, i5.RouterLinkWithHref, i2.SpinnerComponent],\n    pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return UpdatePasswordComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UpdatePasswordModule = /*#__PURE__*/(() => {\n  class UpdatePasswordModule {}\n  UpdatePasswordModule.ɵfac = function UpdatePasswordModule_Factory(t) {\n    return new (t || UpdatePasswordModule)();\n  };\n  UpdatePasswordModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: UpdatePasswordModule\n  });\n  UpdatePasswordModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideDefaultConfig({\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n          providers: [{\n            provide: UpdatePasswordComponentService,\n            useClass: UpdatePasswordComponentService,\n            deps: [UserPasswordFacade, RoutingService, GlobalMessageService]\n          }]\n        }\n      }\n    })],\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, I18nModule, FormErrorsModule, UrlModule, RouterModule]]\n  });\n  return UpdatePasswordModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UpdateProfileComponentService = /*#__PURE__*/(() => {\n  class UpdateProfileComponentService {\n    constructor(userProfile, globalMessageService) {\n      this.userProfile = userProfile;\n      this.globalMessageService = globalMessageService;\n      this.user$ = this.userProfile.get().pipe(filter(user => Boolean(user)));\n      this.busy$ = new BehaviorSubject(false);\n      this.isUpdating$ = this.user$.pipe(tap(user => this.form.patchValue(user)), switchMap(_user => this.busy$), tap(state => state === true ? this.form.disable() : this.form.enable()));\n      this.titles$ = this.userProfile.getTitles();\n      this.form = new FormGroup({\n        customerId: new FormControl(''),\n        titleCode: new FormControl(''),\n        firstName: new FormControl('', Validators.required),\n        lastName: new FormControl('', Validators.required)\n      });\n    }\n    /**\n     * Updates the user's details and handles the UI.\n     */\n    updateProfile() {\n      if (!this.form.valid) {\n        this.form.markAllAsTouched();\n        return;\n      }\n      this.busy$.next(true);\n      this.userProfile.update(this.form.value).subscribe({\n        next: () => this.onSuccess(),\n        error: error => this.onError(error)\n      });\n    }\n    onSuccess() {\n      this.globalMessageService.add({\n        key: 'updateProfileForm.profileUpdateSuccess'\n      }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n      this.busy$.next(false);\n      this.form.reset();\n    }\n    onError(_error) {\n      this.busy$.next(false);\n    }\n  }\n  UpdateProfileComponentService.ɵfac = function UpdateProfileComponentService_Factory(t) {\n    return new (t || UpdateProfileComponentService)(i0.ɵɵinject(i1.UserProfileFacade), i0.ɵɵinject(i2$1.GlobalMessageService));\n  };\n  UpdateProfileComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdateProfileComponentService,\n    factory: UpdateProfileComponentService.ɵfac\n  });\n  return UpdateProfileComponentService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UpdateProfileComponent = /*#__PURE__*/(() => {\n  class UpdateProfileComponent {\n    constructor(service) {\n      this.service = service;\n      this.form = this.service.form;\n      this.isUpdating$ = this.service.isUpdating$;\n      this.titles$ = this.service.titles$;\n    }\n    onSubmit() {\n      this.service.updateProfile();\n    }\n  }\n  UpdateProfileComponent.ɵfac = function UpdateProfileComponent_Factory(t) {\n    return new (t || UpdateProfileComponent)(i0.ɵɵdirectiveInject(UpdateProfileComponentService));\n  };\n  UpdateProfileComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: UpdateProfileComponent,\n    selectors: [[\"cx-update-profile\"]],\n    hostAttrs: [1, \"user-form\"],\n    decls: 40,\n    vars: 42,\n    consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"formControlName\", \"titleCode\", 1, \"form-control\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"firstName\", \"formControlName\", \"firstName\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"lastName\", \"formControlName\", \"lastName\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"customerId\", \"formControlName\", \"customerId\", \"readonly\", \"\", 1, \"form-control\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"], [1, \"overlay\"], [3, \"value\"]],\n    template: function UpdateProfileComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, UpdateProfileComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵelementStart(2, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function UpdateProfileComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(3, \"label\");\n        i0.ɵɵelementStart(4, \"span\", 2);\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"select\", 3);\n        i0.ɵɵelementStart(8, \"option\", 4);\n        i0.ɵɵtext(9);\n        i0.ɵɵpipe(10, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, UpdateProfileComponent_option_11_Template, 2, 2, \"option\", 5);\n        i0.ɵɵpipe(12, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"label\");\n        i0.ɵɵelementStart(14, \"span\", 2);\n        i0.ɵɵtext(15);\n        i0.ɵɵpipe(16, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 6);\n        i0.ɵɵpipe(18, \"cxTranslate\");\n        i0.ɵɵelement(19, \"cx-form-errors\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"label\");\n        i0.ɵɵelementStart(21, \"span\", 2);\n        i0.ɵɵtext(22);\n        i0.ɵɵpipe(23, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"input\", 8);\n        i0.ɵɵpipe(25, \"cxTranslate\");\n        i0.ɵɵelement(26, \"cx-form-errors\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"label\");\n        i0.ɵɵelementStart(28, \"span\", 2);\n        i0.ɵɵtext(29);\n        i0.ɵɵpipe(30, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(31, \"input\", 9);\n        i0.ɵɵelement(32, \"cx-form-errors\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"a\", 10);\n        i0.ɵɵpipe(34, \"cxUrl\");\n        i0.ɵɵtext(35);\n        i0.ɵɵpipe(36, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"button\", 11);\n        i0.ɵɵtext(38);\n        i0.ɵɵpipe(39, \"cxTranslate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 17, ctx.isUpdating$));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 19, \"updateProfileForm.title\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(10, 21, \"updateProfileForm.none\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(12, 23, ctx.titles$));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(16, 25, \"updateProfileForm.firstName.label\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(18, 27, \"updateProfileForm.firstName.placeholder\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.form.get(\"firstName\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(23, 29, \"updateProfileForm.lastName.label\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(25, 31, \"updateProfileForm.lastName.placeholder\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"control\", ctx.form.get(\"lastName\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(30, 33, \"updateProfileForm.customerId\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"control\", ctx.form.get(\"lastName\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(34, 35, i0.ɵɵpureFunction0(41, _c0)));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(36, 37, \"common.cancel\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.form.disabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(39, 39, \"common.save\"), \" \");\n      }\n    },\n    directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.FormControlName, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i3.NgForOf, i4.DefaultValueAccessor, i2.FormErrorsComponent, i5.RouterLinkWithHref, i2.SpinnerComponent],\n    pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return UpdateProfileComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UpdateProfileModule = /*#__PURE__*/(() => {\n  class UpdateProfileModule {}\n  UpdateProfileModule.ɵfac = function UpdateProfileModule_Factory(t) {\n    return new (t || UpdateProfileModule)();\n  };\n  UpdateProfileModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: UpdateProfileModule\n  });\n  UpdateProfileModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideDefaultConfig({\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n          providers: [{\n            provide: UpdateProfileComponentService,\n            useClass: UpdateProfileComponentService,\n            deps: [UserProfileFacade, GlobalMessageService]\n          }]\n        }\n      }\n    })],\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, I18nModule, FormErrorsModule, RouterModule, UrlModule]]\n  });\n  return UpdateProfileModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UserProfileComponentsModule = /*#__PURE__*/(() => {\n  class UserProfileComponentsModule {}\n  UserProfileComponentsModule.ɵfac = function UserProfileComponentsModule_Factory(t) {\n    return new (t || UserProfileComponentsModule)();\n  };\n  UserProfileComponentsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: UserProfileComponentsModule\n  });\n  UserProfileComponentsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[RegisterComponentModule, UpdateProfileModule, UpdateEmailModule, UpdatePasswordModule, ForgotPasswordModule, ResetPasswordModule, CloseAccountModule]]\n  });\n  return UserProfileComponentsModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CloseAccountComponent, CloseAccountModalComponent, CloseAccountModule, ForgotPasswordComponent, ForgotPasswordComponentService, ForgotPasswordModule, RegisterComponent, RegisterComponentModule, ResetPasswordComponent, ResetPasswordComponentService, ResetPasswordModule, UpdateEmailComponent, UpdateEmailComponentService, UpdateEmailModule, UpdatePasswordComponent, UpdatePasswordComponentService, UpdatePasswordModule, UpdateProfileComponent, UpdateProfileComponentService, UpdateProfileModule, UserProfileComponentsModule };\n//# sourceMappingURL=spartacus-user-profile-components.js.map","map":null,"metadata":{},"sourceType":"module"}