{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@ngrx/store';\nimport { createFeatureSelector, createSelector, select, StoreModule } from '@ngrx/store';\nimport * as i2 from '@spartacus/core';\nimport { StateUtils, PROCESS_FEATURE, ProcessSelectors, normalizeHttpError, GlobalMessageType, SiteContextActions } from '@spartacus/core';\nimport { tap, map, take, switchMap, catchError } from 'rxjs/operators';\nimport { OrderReturnRequestFacade, OrderFacade, ReplenishmentOrderFacade } from '@spartacus/order/root';\nimport * as i1$1 from '@ngrx/effects';\nimport { ofType, Effect, EffectsModule } from '@ngrx/effects';\nimport { __decorate } from 'tslib';\nimport { of } from 'rxjs';\nconst ORDER_HISTORY_NORMALIZER = new InjectionToken('OrderHistoryNormalizer');\nconst CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken('ConsignmentTrackingNormalizer');\nconst ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken('OrderReturnRequestNormalizer');\nconst ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken('OrderReturnRequestInputSerializer');\nconst ORDER_RETURNS_NORMALIZER = new InjectionToken('OrderReturnsNormalizer');\nconst REPLENISHMENT_ORDER_HISTORY_NORMALIZER = new InjectionToken('ReplenishmentOrderHistoryNormalizer');\nclass OrderAdapter {}\nlet OrderConnector = /*#__PURE__*/(() => {\n  class OrderConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    get(userId, orderCode) {\n      return this.adapter.load(userId, orderCode);\n    }\n    getHistory(userId, pageSize, currentPage, sort) {\n      return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n    }\n    getConsignmentTracking(orderCode, consignmentCode, userId) {\n      return this.adapter.getConsignmentTracking(orderCode, consignmentCode, userId);\n    }\n    cancel(userId, orderCode, cancelRequestInput) {\n      return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n    }\n    return(userId, returnRequestInput) {\n      return this.adapter.createReturnRequest(userId, returnRequestInput);\n    }\n    getReturnRequestDetail(userId, returnRequestCode) {\n      return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n    }\n    getReturnRequestList(userId, pageSize, currentPage, sort) {\n      return this.adapter.loadReturnRequestList(userId, pageSize, currentPage, sort);\n    }\n    cancelReturnRequest(userId, returnRequestCode, returnRequestModification) {\n      return this.adapter.cancelReturnRequest(userId, returnRequestCode, returnRequestModification);\n    }\n  }\n  OrderConnector.ɵfac = function OrderConnector_Factory(t) {\n    return new (t || OrderConnector)(i0.ɵɵinject(OrderAdapter));\n  };\n  OrderConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrderConnector,\n    factory: OrderConnector.ɵfac\n  });\n  return OrderConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass ReplenishmentOrderAdapter {}\nlet ReplenishmentOrderConnector = /*#__PURE__*/(() => {\n  class ReplenishmentOrderConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    load(userId, replenishmentOrderCode) {\n      return this.adapter.load(userId, replenishmentOrderCode);\n    }\n    loadReplenishmentDetailsHistory(userId, replenishmentOrderCode, pageSize, currentPage, sort) {\n      return this.adapter.loadReplenishmentDetailsHistory(userId, replenishmentOrderCode, pageSize, currentPage, sort);\n    }\n    cancelReplenishmentOrder(userId, replenishmentOrderCode) {\n      return this.adapter.cancelReplenishmentOrder(userId, replenishmentOrderCode);\n    }\n    loadHistory(userId, pageSize, currentPage, sort) {\n      return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n    }\n  }\n  ReplenishmentOrderConnector.ɵfac = function ReplenishmentOrderConnector_Factory(t) {\n    return new (t || ReplenishmentOrderConnector)(i0.ɵɵinject(ReplenishmentOrderAdapter));\n  };\n  ReplenishmentOrderConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ReplenishmentOrderConnector,\n    factory: ReplenishmentOrderConnector.ɵfac\n  });\n  return ReplenishmentOrderConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst LOAD_CONSIGNMENT_TRACKING = '[Order] Load Consignment Tracking';\nconst LOAD_CONSIGNMENT_TRACKING_FAIL = '[Order] Load Consignment Tracking Fail';\nconst LOAD_CONSIGNMENT_TRACKING_SUCCESS = '[Order] Load Consignment Tracking Success';\nconst CLEAR_CONSIGNMENT_TRACKING = '[Order] Clear Consignment Tracking';\nclass LoadConsignmentTracking {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = LOAD_CONSIGNMENT_TRACKING;\n  }\n}\nclass LoadConsignmentTrackingFail {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  }\n}\nclass LoadConsignmentTrackingSuccess {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  }\n}\nclass ClearConsignmentTracking {\n  constructor() {\n    this.type = CLEAR_CONSIGNMENT_TRACKING;\n  }\n}\nconst ORDER_FEATURE = 'order';\nconst CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nconst CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\nconst CANCEL_REPLENISHMENT_ORDER_PROCESS_ID = 'cancelReplenishmentOrder';\nconst ORDERS = '[Order] User Orders';\nconst RETURN_REQUESTS = '[Order] Order Return Requests';\nconst RETURN_REQUEST_DETAILS = '[Order] Return Request Details';\nconst ORDER_DETAILS = '[Order] User Order Details';\nconst REPLENISHMENT_ORDERS = '[Order] User Replenishment Orders';\nconst REPLENISHMENT_ORDER_DETAILS = '[Order] User Replenishment Order Details';\nconst LOAD_ORDER_DETAILS = '[Order] Load Order Details';\nconst LOAD_ORDER_DETAILS_FAIL = '[Order] Load Order Details Fail';\nconst LOAD_ORDER_DETAILS_SUCCESS = '[Order] Load Order Details Success';\nconst CLEAR_ORDER_DETAILS = '[Order] Clear Order Details';\nconst CANCEL_ORDER = '[Order] Cancel Order';\nconst CANCEL_ORDER_FAIL = '[Order] Cancel Order Fail';\nconst CANCEL_ORDER_SUCCESS = '[Order] Cancel Order Success';\nconst RESET_CANCEL_ORDER_PROCESS = '[Order] Reset Cancel Order Process';\nclass LoadOrderDetails extends StateUtils.LoaderLoadAction {\n  constructor(payload) {\n    super(ORDER_DETAILS);\n    this.payload = payload;\n    this.type = LOAD_ORDER_DETAILS;\n  }\n}\nclass LoadOrderDetailsFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(ORDER_DETAILS, payload);\n    this.payload = payload;\n    this.type = LOAD_ORDER_DETAILS_FAIL;\n  }\n}\nclass LoadOrderDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(ORDER_DETAILS);\n    this.payload = payload;\n    this.type = LOAD_ORDER_DETAILS_SUCCESS;\n  }\n}\nclass ClearOrderDetails extends StateUtils.LoaderResetAction {\n  constructor() {\n    super(ORDER_DETAILS);\n    this.type = CLEAR_ORDER_DETAILS;\n  }\n}\nclass CancelOrder extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n    this.payload = payload;\n    this.type = CANCEL_ORDER;\n  }\n}\nclass CancelOrderFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n    this.payload = payload;\n    this.type = CANCEL_ORDER_FAIL;\n  }\n}\nclass CancelOrderSuccess extends StateUtils.EntitySuccessAction {\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n    this.type = CANCEL_ORDER_SUCCESS;\n  }\n}\nclass ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n    this.type = RESET_CANCEL_ORDER_PROCESS;\n  }\n}\nconst CREATE_ORDER_RETURN_REQUEST = '[Order] Create Order Return Request';\nconst CREATE_ORDER_RETURN_REQUEST_FAIL = '[Order] Create Order Return Request Fail';\nconst CREATE_ORDER_RETURN_REQUEST_SUCCESS = '[Order] Create Order Return Request Success';\nconst LOAD_ORDER_RETURN_REQUEST = '[Order] Load Order Return Request details';\nconst LOAD_ORDER_RETURN_REQUEST_FAIL = '[Order] Load Order Return Request details Fail';\nconst LOAD_ORDER_RETURN_REQUEST_SUCCESS = '[Order] Load Order Return Request details Success';\nconst CANCEL_ORDER_RETURN_REQUEST = '[Order] Cancel Order Return Request';\nconst CANCEL_ORDER_RETURN_REQUEST_FAIL = '[Order] Cancel Order Return Request Fail';\nconst CANCEL_ORDER_RETURN_REQUEST_SUCCESS = '[Order] Cancel Order Return Request Success';\nconst LOAD_ORDER_RETURN_REQUEST_LIST = '[Order] Load User Order Return Request List';\nconst LOAD_ORDER_RETURN_REQUEST_LIST_FAIL = '[Order] Load User Order Return Request List Fail';\nconst LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS = '[Order] Load User Order Return Request List Success';\nconst CLEAR_ORDER_RETURN_REQUEST = '[Order] Clear Order Return Request Details';\nconst CLEAR_ORDER_RETURN_REQUEST_LIST = '[Order] Clear Order Return Request List';\nconst RESET_CANCEL_RETURN_PROCESS = '[Order] Reset Cancel Return Request Process';\nclass CreateOrderReturnRequest extends StateUtils.LoaderLoadAction {\n  constructor(payload) {\n    super(RETURN_REQUEST_DETAILS);\n    this.payload = payload;\n    this.type = CREATE_ORDER_RETURN_REQUEST;\n  }\n}\nclass CreateOrderReturnRequestFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(RETURN_REQUEST_DETAILS, payload);\n    this.payload = payload;\n    this.type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  }\n}\nclass CreateOrderReturnRequestSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(RETURN_REQUEST_DETAILS);\n    this.payload = payload;\n    this.type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  }\n}\nclass LoadOrderReturnRequest extends StateUtils.LoaderLoadAction {\n  constructor(payload) {\n    super(RETURN_REQUEST_DETAILS);\n    this.payload = payload;\n    this.type = LOAD_ORDER_RETURN_REQUEST;\n  }\n}\nclass LoadOrderReturnRequestFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(RETURN_REQUEST_DETAILS, payload);\n    this.payload = payload;\n    this.type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  }\n}\nclass LoadOrderReturnRequestSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(RETURN_REQUEST_DETAILS);\n    this.payload = payload;\n    this.type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  }\n}\nclass CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n    this.payload = payload;\n    this.type = CANCEL_ORDER_RETURN_REQUEST;\n  }\n}\nclass CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n    this.payload = payload;\n    this.type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  }\n}\nclass CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n    this.type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  }\n}\nclass LoadOrderReturnRequestList extends StateUtils.LoaderLoadAction {\n  constructor(payload) {\n    super(RETURN_REQUESTS);\n    this.payload = payload;\n    this.type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  }\n}\nclass LoadOrderReturnRequestListFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(RETURN_REQUESTS, payload);\n    this.payload = payload;\n    this.type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  }\n}\nclass LoadOrderReturnRequestListSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(RETURN_REQUESTS);\n    this.payload = payload;\n    this.type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  }\n}\nclass ClearOrderReturnRequest extends StateUtils.LoaderResetAction {\n  constructor() {\n    super(RETURN_REQUEST_DETAILS);\n    this.type = CLEAR_ORDER_RETURN_REQUEST;\n  }\n}\nclass ClearOrderReturnRequestList extends StateUtils.LoaderResetAction {\n  constructor() {\n    super(RETURN_REQUESTS);\n    this.type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  }\n}\nclass ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n    this.type = RESET_CANCEL_RETURN_PROCESS;\n  }\n}\nconst LOAD_USER_ORDERS = '[Order] Load User Orders';\nconst LOAD_USER_ORDERS_FAIL = '[Order] Load User Orders Fail';\nconst LOAD_USER_ORDERS_SUCCESS = '[Order] Load User Orders Success';\nconst CLEAR_USER_ORDERS = '[Order] Clear User Orders';\nclass LoadUserOrders extends StateUtils.LoaderLoadAction {\n  constructor(payload) {\n    super(ORDERS);\n    this.payload = payload;\n    this.type = LOAD_USER_ORDERS;\n  }\n}\nclass LoadUserOrdersFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(ORDERS, payload);\n    this.payload = payload;\n    this.type = LOAD_USER_ORDERS_FAIL;\n  }\n}\nclass LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(ORDERS);\n    this.payload = payload;\n    this.type = LOAD_USER_ORDERS_SUCCESS;\n  }\n}\nclass ClearUserOrders extends StateUtils.LoaderResetAction {\n  constructor() {\n    super(ORDERS);\n    this.type = CLEAR_USER_ORDERS;\n  }\n}\nconst LOAD_REPLENISHMENT_ORDER_DETAILS = '[Order] Load Replenishment Order Details';\nconst LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS = '[Order] Load Replenishment Order Details Success';\nconst LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL = '[Order] Load Replenishment Order Details Fail';\nconst ClEAR_REPLENISHMENT_ORDER_DETAILS = '[Order] Clear Replenishment Order Details';\nconst CANCEL_REPLENISHMENT_ORDER = '[Order] Cancel Replenishment Order';\nconst CANCEL_REPLENISHMENT_ORDER_SUCCESS = '[Order] Cancel Replenishment Order Success';\nconst CANCEL_REPLENISHMENT_ORDER_FAIL = '[Order] Cancel Replenishment Order Fail';\nconst CLEAR_CANCEL_REPLENISHMENT_ORDER = '[Order] Clear Cancel Replenishment Order';\nclass LoadReplenishmentOrderDetails extends StateUtils.LoaderLoadAction {\n  constructor(payload) {\n    super(REPLENISHMENT_ORDER_DETAILS);\n    this.payload = payload;\n    this.type = LOAD_REPLENISHMENT_ORDER_DETAILS;\n  }\n}\nclass LoadReplenishmentOrderDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(REPLENISHMENT_ORDER_DETAILS);\n    this.payload = payload;\n    this.type = LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS;\n  }\n}\nclass LoadReplenishmentOrderDetailsFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(REPLENISHMENT_ORDER_DETAILS, payload);\n    this.payload = payload;\n    this.type = LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL;\n  }\n}\nclass ClearReplenishmentOrderDetails extends StateUtils.LoaderResetAction {\n  constructor() {\n    super(REPLENISHMENT_ORDER_DETAILS);\n    this.type = ClEAR_REPLENISHMENT_ORDER_DETAILS;\n  }\n}\nclass CancelReplenishmentOrder extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);\n    this.payload = payload;\n    this.type = CANCEL_REPLENISHMENT_ORDER;\n  }\n}\nclass CancelReplenishmentOrderSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);\n    this.payload = payload;\n    this.type = CANCEL_REPLENISHMENT_ORDER_SUCCESS;\n  }\n}\nclass CancelReplenishmentOrderFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID, payload);\n    this.payload = payload;\n    this.type = CANCEL_REPLENISHMENT_ORDER_FAIL;\n  }\n}\nclass ClearCancelReplenishmentOrder extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);\n    this.type = CLEAR_CANCEL_REPLENISHMENT_ORDER;\n  }\n}\nconst LOAD_USER_REPLENISHMENT_ORDERS = '[Order] Load User Replenishment Orders';\nconst LOAD_USER_REPLENISHMENT_ORDERS_FAIL = '[Order] Load User Replenishment Orders Fail';\nconst LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS = '[Order] Load User Replenishment Orders Success';\nconst CLEAR_USER_REPLENISHMENT_ORDERS = '[Order] Clear User Replenishment Orders';\nclass LoadUserReplenishmentOrders extends StateUtils.LoaderLoadAction {\n  constructor(payload) {\n    super(REPLENISHMENT_ORDERS);\n    this.payload = payload;\n    this.type = LOAD_USER_REPLENISHMENT_ORDERS;\n  }\n}\nclass LoadUserReplenishmentOrdersFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(REPLENISHMENT_ORDERS, payload);\n    this.payload = payload;\n    this.type = LOAD_USER_REPLENISHMENT_ORDERS_FAIL;\n  }\n}\nclass LoadUserReplenishmentOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(REPLENISHMENT_ORDERS);\n    this.payload = payload;\n    this.type = LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS;\n  }\n}\nclass ClearUserReplenishmentOrders extends StateUtils.LoaderResetAction {\n  constructor() {\n    super(REPLENISHMENT_ORDERS);\n    this.type = CLEAR_USER_REPLENISHMENT_ORDERS;\n  }\n}\nvar orderGroup_actions = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LOAD_CONSIGNMENT_TRACKING: LOAD_CONSIGNMENT_TRACKING,\n  LOAD_CONSIGNMENT_TRACKING_FAIL: LOAD_CONSIGNMENT_TRACKING_FAIL,\n  LOAD_CONSIGNMENT_TRACKING_SUCCESS: LOAD_CONSIGNMENT_TRACKING_SUCCESS,\n  CLEAR_CONSIGNMENT_TRACKING: CLEAR_CONSIGNMENT_TRACKING,\n  LoadConsignmentTracking: LoadConsignmentTracking,\n  LoadConsignmentTrackingFail: LoadConsignmentTrackingFail,\n  LoadConsignmentTrackingSuccess: LoadConsignmentTrackingSuccess,\n  ClearConsignmentTracking: ClearConsignmentTracking,\n  LOAD_ORDER_DETAILS: LOAD_ORDER_DETAILS,\n  LOAD_ORDER_DETAILS_FAIL: LOAD_ORDER_DETAILS_FAIL,\n  LOAD_ORDER_DETAILS_SUCCESS: LOAD_ORDER_DETAILS_SUCCESS,\n  CLEAR_ORDER_DETAILS: CLEAR_ORDER_DETAILS,\n  CANCEL_ORDER: CANCEL_ORDER,\n  CANCEL_ORDER_FAIL: CANCEL_ORDER_FAIL,\n  CANCEL_ORDER_SUCCESS: CANCEL_ORDER_SUCCESS,\n  RESET_CANCEL_ORDER_PROCESS: RESET_CANCEL_ORDER_PROCESS,\n  LoadOrderDetails: LoadOrderDetails,\n  LoadOrderDetailsFail: LoadOrderDetailsFail,\n  LoadOrderDetailsSuccess: LoadOrderDetailsSuccess,\n  ClearOrderDetails: ClearOrderDetails,\n  CancelOrder: CancelOrder,\n  CancelOrderFail: CancelOrderFail,\n  CancelOrderSuccess: CancelOrderSuccess,\n  ResetCancelOrderProcess: ResetCancelOrderProcess,\n  CREATE_ORDER_RETURN_REQUEST: CREATE_ORDER_RETURN_REQUEST,\n  CREATE_ORDER_RETURN_REQUEST_FAIL: CREATE_ORDER_RETURN_REQUEST_FAIL,\n  CREATE_ORDER_RETURN_REQUEST_SUCCESS: CREATE_ORDER_RETURN_REQUEST_SUCCESS,\n  LOAD_ORDER_RETURN_REQUEST: LOAD_ORDER_RETURN_REQUEST,\n  LOAD_ORDER_RETURN_REQUEST_FAIL: LOAD_ORDER_RETURN_REQUEST_FAIL,\n  LOAD_ORDER_RETURN_REQUEST_SUCCESS: LOAD_ORDER_RETURN_REQUEST_SUCCESS,\n  CANCEL_ORDER_RETURN_REQUEST: CANCEL_ORDER_RETURN_REQUEST,\n  CANCEL_ORDER_RETURN_REQUEST_FAIL: CANCEL_ORDER_RETURN_REQUEST_FAIL,\n  CANCEL_ORDER_RETURN_REQUEST_SUCCESS: CANCEL_ORDER_RETURN_REQUEST_SUCCESS,\n  LOAD_ORDER_RETURN_REQUEST_LIST: LOAD_ORDER_RETURN_REQUEST_LIST,\n  LOAD_ORDER_RETURN_REQUEST_LIST_FAIL: LOAD_ORDER_RETURN_REQUEST_LIST_FAIL,\n  LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS,\n  CLEAR_ORDER_RETURN_REQUEST: CLEAR_ORDER_RETURN_REQUEST,\n  CLEAR_ORDER_RETURN_REQUEST_LIST: CLEAR_ORDER_RETURN_REQUEST_LIST,\n  RESET_CANCEL_RETURN_PROCESS: RESET_CANCEL_RETURN_PROCESS,\n  CreateOrderReturnRequest: CreateOrderReturnRequest,\n  CreateOrderReturnRequestFail: CreateOrderReturnRequestFail,\n  CreateOrderReturnRequestSuccess: CreateOrderReturnRequestSuccess,\n  LoadOrderReturnRequest: LoadOrderReturnRequest,\n  LoadOrderReturnRequestFail: LoadOrderReturnRequestFail,\n  LoadOrderReturnRequestSuccess: LoadOrderReturnRequestSuccess,\n  CancelOrderReturnRequest: CancelOrderReturnRequest,\n  CancelOrderReturnRequestFail: CancelOrderReturnRequestFail,\n  CancelOrderReturnRequestSuccess: CancelOrderReturnRequestSuccess,\n  LoadOrderReturnRequestList: LoadOrderReturnRequestList,\n  LoadOrderReturnRequestListFail: LoadOrderReturnRequestListFail,\n  LoadOrderReturnRequestListSuccess: LoadOrderReturnRequestListSuccess,\n  ClearOrderReturnRequest: ClearOrderReturnRequest,\n  ClearOrderReturnRequestList: ClearOrderReturnRequestList,\n  ResetCancelReturnProcess: ResetCancelReturnProcess,\n  LOAD_USER_ORDERS: LOAD_USER_ORDERS,\n  LOAD_USER_ORDERS_FAIL: LOAD_USER_ORDERS_FAIL,\n  LOAD_USER_ORDERS_SUCCESS: LOAD_USER_ORDERS_SUCCESS,\n  CLEAR_USER_ORDERS: CLEAR_USER_ORDERS,\n  LoadUserOrders: LoadUserOrders,\n  LoadUserOrdersFail: LoadUserOrdersFail,\n  LoadUserOrdersSuccess: LoadUserOrdersSuccess,\n  ClearUserOrders: ClearUserOrders,\n  LOAD_REPLENISHMENT_ORDER_DETAILS: LOAD_REPLENISHMENT_ORDER_DETAILS,\n  LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS: LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS,\n  LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL: LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL,\n  ClEAR_REPLENISHMENT_ORDER_DETAILS: ClEAR_REPLENISHMENT_ORDER_DETAILS,\n  CANCEL_REPLENISHMENT_ORDER: CANCEL_REPLENISHMENT_ORDER,\n  CANCEL_REPLENISHMENT_ORDER_SUCCESS: CANCEL_REPLENISHMENT_ORDER_SUCCESS,\n  CANCEL_REPLENISHMENT_ORDER_FAIL: CANCEL_REPLENISHMENT_ORDER_FAIL,\n  CLEAR_CANCEL_REPLENISHMENT_ORDER: CLEAR_CANCEL_REPLENISHMENT_ORDER,\n  LoadReplenishmentOrderDetails: LoadReplenishmentOrderDetails,\n  LoadReplenishmentOrderDetailsSuccess: LoadReplenishmentOrderDetailsSuccess,\n  LoadReplenishmentOrderDetailsFail: LoadReplenishmentOrderDetailsFail,\n  ClearReplenishmentOrderDetails: ClearReplenishmentOrderDetails,\n  CancelReplenishmentOrder: CancelReplenishmentOrder,\n  CancelReplenishmentOrderSuccess: CancelReplenishmentOrderSuccess,\n  CancelReplenishmentOrderFail: CancelReplenishmentOrderFail,\n  ClearCancelReplenishmentOrder: ClearCancelReplenishmentOrder,\n  LOAD_USER_REPLENISHMENT_ORDERS: LOAD_USER_REPLENISHMENT_ORDERS,\n  LOAD_USER_REPLENISHMENT_ORDERS_FAIL: LOAD_USER_REPLENISHMENT_ORDERS_FAIL,\n  LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS: LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS,\n  CLEAR_USER_REPLENISHMENT_ORDERS: CLEAR_USER_REPLENISHMENT_ORDERS,\n  LoadUserReplenishmentOrders: LoadUserReplenishmentOrders,\n  LoadUserReplenishmentOrdersFail: LoadUserReplenishmentOrdersFail,\n  LoadUserReplenishmentOrdersSuccess: LoadUserReplenishmentOrdersSuccess,\n  ClearUserReplenishmentOrders: ClearUserReplenishmentOrders\n});\nconst getOrderState = createFeatureSelector(ORDER_FEATURE);\nconst getConsignmentTrackingState = createSelector(getOrderState, state => state.consignmentTracking);\nconst getConsignmentTracking = createSelector(getConsignmentTrackingState, state => state.tracking);\nconst getOrderDetailState = createSelector(getOrderState, state => state.orderDetail);\nconst getOrderDetails = createSelector(getOrderDetailState, state => StateUtils.loaderValueSelector(state));\nconst getOrderReturnRequestState = createSelector(getOrderState, state => state.orderReturn);\nconst getOrderReturnRequest = createSelector(getOrderReturnRequestState, state => StateUtils.loaderValueSelector(state));\nconst getOrderReturnRequestLoading = createSelector(getOrderReturnRequestState, state => StateUtils.loaderLoadingSelector(state));\nconst getOrderReturnRequestSuccess = createSelector(getOrderReturnRequestState, state => StateUtils.loaderSuccessSelector(state) && !StateUtils.loaderLoadingSelector(state));\nconst getOrderReturnRequestListState = createSelector(getOrderState, state => state.orderReturnList);\nconst getOrderReturnRequestList = createSelector(getOrderReturnRequestListState, state => StateUtils.loaderValueSelector(state));\nconst getOrdersState = createSelector(getOrderState, state => state.orders);\nconst getOrdersLoaded = createSelector(getOrdersState, state => StateUtils.loaderSuccessSelector(state));\nconst getOrders = createSelector(getOrdersState, state => StateUtils.loaderValueSelector(state));\nconst getReplenishmentOrderState = createSelector(getOrderState, state => state.replenishmentOrder);\nconst getReplenishmentOrderDetailsValue = createSelector(getReplenishmentOrderState, state => StateUtils.loaderValueSelector(state));\nconst getReplenishmentOrderDetailsLoading = createSelector(getReplenishmentOrderState, state => StateUtils.loaderLoadingSelector(state));\nconst getReplenishmentOrderDetailsSuccess = createSelector(getReplenishmentOrderState, state => StateUtils.loaderSuccessSelector(state));\nconst getReplenishmentOrderDetailsError = createSelector(getReplenishmentOrderState, state => StateUtils.loaderErrorSelector(state));\nconst getReplenishmentOrdersState = createSelector(getOrderState, state => state.replenishmentOrders);\nconst getReplenishmentOrders = createSelector(getReplenishmentOrdersState, state => StateUtils.loaderValueSelector(state));\nconst getReplenishmentOrdersLoading = createSelector(getReplenishmentOrdersState, state => StateUtils.loaderLoadingSelector(state));\nconst getReplenishmentOrdersError = createSelector(getReplenishmentOrdersState, state => StateUtils.loaderErrorSelector(state));\nconst getReplenishmentOrdersSuccess = createSelector(getReplenishmentOrdersState, state => StateUtils.loaderSuccessSelector(state));\nvar orderGroup_selectors = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getConsignmentTrackingState: getConsignmentTrackingState,\n  getConsignmentTracking: getConsignmentTracking,\n  getOrderState: getOrderState,\n  getOrderDetailState: getOrderDetailState,\n  getOrderDetails: getOrderDetails,\n  getOrderReturnRequestState: getOrderReturnRequestState,\n  getOrderReturnRequest: getOrderReturnRequest,\n  getOrderReturnRequestLoading: getOrderReturnRequestLoading,\n  getOrderReturnRequestSuccess: getOrderReturnRequestSuccess,\n  getOrderReturnRequestListState: getOrderReturnRequestListState,\n  getOrderReturnRequestList: getOrderReturnRequestList,\n  getOrdersState: getOrdersState,\n  getOrdersLoaded: getOrdersLoaded,\n  getOrders: getOrders,\n  getReplenishmentOrderState: getReplenishmentOrderState,\n  getReplenishmentOrderDetailsValue: getReplenishmentOrderDetailsValue,\n  getReplenishmentOrderDetailsLoading: getReplenishmentOrderDetailsLoading,\n  getReplenishmentOrderDetailsSuccess: getReplenishmentOrderDetailsSuccess,\n  getReplenishmentOrderDetailsError: getReplenishmentOrderDetailsError,\n  getReplenishmentOrdersState: getReplenishmentOrdersState,\n  getReplenishmentOrders: getReplenishmentOrders,\n  getReplenishmentOrdersLoading: getReplenishmentOrdersLoading,\n  getReplenishmentOrdersError: getReplenishmentOrdersError,\n  getReplenishmentOrdersSuccess: getReplenishmentOrdersSuccess\n});\nlet OrderReturnRequestService = /*#__PURE__*/(() => {\n  class OrderReturnRequestService {\n    constructor(store, processStateStore, userIdService) {\n      this.store = store;\n      this.processStateStore = processStateStore;\n      this.userIdService = userIdService;\n    }\n    /**\n     * Create order return request\n     * @param orderCode an order code\n     * @param returnRequestInput order return request entry input\n     */\n    createOrderReturnRequest(returnRequestInput) {\n      this.userIdService.takeUserId().subscribe(userId => {\n        this.store.dispatch(new CreateOrderReturnRequest({\n          userId,\n          returnRequestInput\n        }));\n      });\n    }\n    /**\n     * Return an order return request\n     */\n    getOrderReturnRequest() {\n      return this.store.pipe(select(getOrderReturnRequest));\n    }\n    /**\n     * Gets order return request list\n     */\n    getOrderReturnRequestList(pageSize) {\n      return this.store.pipe(select(getOrderReturnRequestListState), tap(returnListState => {\n        const attemptedLoad = returnListState.loading || returnListState.success || returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }), map(returnListState => returnListState.value));\n    }\n    /**\n     * Loads order return request detail\n     * @param returnRequestCode\n     */\n    loadOrderReturnRequestDetail(returnRequestCode) {\n      this.userIdService.takeUserId().subscribe(userId => {\n        this.store.dispatch(new LoadOrderReturnRequest({\n          userId,\n          returnRequestCode\n        }));\n      });\n    }\n    /**\n     * Loads order return request list\n     * @param pageSize page size\n     * @param currentPage current page\n     * @param sort sort\n     */\n    loadOrderReturnRequestList(pageSize, currentPage, sort) {\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        this.store.dispatch(new LoadOrderReturnRequestList({\n          userId,\n          pageSize,\n          currentPage,\n          sort\n        }));\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Cleaning order return request list\n     */\n    clearOrderReturnRequestList() {\n      this.store.dispatch(new ClearOrderReturnRequestList());\n    }\n    /**\n     * Get the order return request loading flag\n     */\n    getReturnRequestLoading() {\n      return this.store.pipe(select(getOrderReturnRequestLoading));\n    }\n    /**\n     * Get the order return request success flag\n     */\n    getReturnRequestSuccess() {\n      return this.store.pipe(select(getOrderReturnRequestSuccess));\n    }\n    /**\n     * Cleaning order return request details\n     */\n    clearOrderReturnRequestDetail() {\n      this.store.dispatch(new ClearOrderReturnRequest());\n    }\n    /*\n     * Cancel order return request\n     */\n    cancelOrderReturnRequest(returnRequestCode, returnRequestModification) {\n      this.userIdService.takeUserId().subscribe(userId => {\n        this.store.dispatch(new CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification\n        }));\n      });\n    }\n    /**\n     * Returns the cancel return request loading flag\n     */\n    getCancelReturnRequestLoading() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID)));\n    }\n    /**\n     * Returns the cancel return request success flag\n     */\n    getCancelReturnRequestSuccess() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID)));\n    }\n    /**\n     * Resets the cancel return request process flags\n     */\n    resetCancelReturnRequestProcessState() {\n      return this.store.dispatch(new ResetCancelReturnProcess());\n    }\n  }\n  OrderReturnRequestService.ɵfac = function OrderReturnRequestService_Factory(t) {\n    return new (t || OrderReturnRequestService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.UserIdService));\n  };\n  OrderReturnRequestService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrderReturnRequestService,\n    factory: OrderReturnRequestService.ɵfac\n  });\n  return OrderReturnRequestService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrderService = /*#__PURE__*/(() => {\n  class OrderService {\n    constructor(store, processStateStore, userIdService, routingService) {\n      this.store = store;\n      this.processStateStore = processStateStore;\n      this.userIdService = userIdService;\n      this.routingService = routingService;\n    }\n    /**\n     * Returns an order's detail\n     */\n    getOrderDetails() {\n      return this.store.pipe(select(getOrderDetails));\n    }\n    /**\n     * Retrieves order's details\n     *\n     * @param orderCode an order code\n     */\n    loadOrderDetails(orderCode) {\n      this.userIdService.takeUserId().subscribe(userId => {\n        this.store.dispatch(new LoadOrderDetails({\n          userId,\n          orderCode\n        }));\n      });\n    }\n    /**\n     * Clears order's details\n     */\n    clearOrderDetails() {\n      this.store.dispatch(new ClearOrderDetails());\n    }\n    /**\n     * Returns order history list\n     */\n    getOrderHistoryList(pageSize) {\n      return this.store.pipe(select(getOrdersState), tap(orderListState => {\n        const attemptedLoad = orderListState.loading || orderListState.success || orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }), map(orderListState => orderListState.value));\n    }\n    /**\n     * Returns a loaded flag for order history list\n     */\n    getOrderHistoryListLoaded() {\n      return this.store.pipe(select(getOrdersLoaded));\n    }\n    /**\n     * Retrieves an order list\n     * @param pageSize page size\n     * @param currentPage current page\n     * @param sort sort\n     */\n    loadOrderList(pageSize, currentPage, sort) {\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        let replenishmentOrderCode;\n        this.routingService.getRouterState().pipe(take(1)).subscribe(data => {\n          var _a, _b;\n          replenishmentOrderCode = (_b = (_a = data === null || data === void 0 ? void 0 : data.state) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.replenishmentOrderCode;\n        }).unsubscribe();\n        this.store.dispatch(new LoadUserOrders({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n          replenishmentOrderCode\n        }));\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Cleaning order list\n     */\n    clearOrderList() {\n      this.store.dispatch(new ClearUserOrders());\n    }\n    /**\n     *  Returns a consignment tracking detail\n     */\n    getConsignmentTracking() {\n      return this.store.pipe(select(getConsignmentTracking));\n    }\n    /**\n     * Retrieves consignment tracking details\n     * @param orderCode an order code\n     * @param consignmentCode a consignment code\n     */\n    loadConsignmentTracking(orderCode, consignmentCode) {\n      this.userIdService.takeUserId().subscribe(userId => {\n        this.store.dispatch(new LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode\n        }));\n      });\n    }\n    /**\n     * Cleaning consignment tracking\n     */\n    clearConsignmentTracking() {\n      this.store.dispatch(new ClearConsignmentTracking());\n    }\n    /*\n     * Cancel an order\n     */\n    cancelOrder(orderCode, cancelRequestInput) {\n      this.userIdService.takeUserId().subscribe(userId => {\n        this.store.dispatch(new CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput\n        }));\n      });\n    }\n    /**\n     * Returns the cancel order loading flag\n     */\n    getCancelOrderLoading() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID)));\n    }\n    /**\n     * Returns the cancel order success flag\n     */\n    getCancelOrderSuccess() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID)));\n    }\n    /**\n     * Resets the cancel order process flags\n     */\n    resetCancelOrderProcessState() {\n      return this.store.dispatch(new ResetCancelOrderProcess());\n    }\n  }\n  OrderService.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.RoutingService));\n  };\n  OrderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac\n  });\n  return OrderService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ReplenishmentOrderService = /*#__PURE__*/(() => {\n  class ReplenishmentOrderService {\n    constructor(store, processStateStore, userIdService) {\n      this.store = store;\n      this.processStateStore = processStateStore;\n      this.userIdService = userIdService;\n    }\n    /**\n     * Returns replenishment order details for a given 'current' user\n     *\n     * @param replenishmentOrderCode a replenishment order code\n     */\n    loadReplenishmentOrderDetails(replenishmentOrderCode) {\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        this.store.dispatch(new LoadReplenishmentOrderDetails({\n          userId,\n          replenishmentOrderCode\n        }));\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Returns a replenishment order details\n     */\n    getReplenishmentOrderDetails() {\n      return this.store.pipe(select(getReplenishmentOrderDetailsValue));\n    }\n    /**\n     * Returns a replenishment order details loading flag\n     */\n    getReplenishmentOrderDetailsLoading() {\n      return this.store.pipe(select(getReplenishmentOrderDetailsLoading));\n    }\n    /**\n     * Returns a replenishment order details success flag\n     */\n    getReplenishmentOrderDetailsSuccess() {\n      return this.store.pipe(select(getReplenishmentOrderDetailsSuccess));\n    }\n    /**\n     * Returns a replenishment order details error flag\n     */\n    getReplenishmentOrderDetailsError() {\n      return this.store.pipe(select(getReplenishmentOrderDetailsError));\n    }\n    /**\n     * Clears the replenishment orders details state\n     */\n    clearReplenishmentOrderDetails() {\n      this.store.dispatch(new ClearReplenishmentOrderDetails());\n    }\n    /**\n     * Cancels a specific replenishment order for a given 'current' user\n     *\n     * @param replenishmentOrderCode a replenishment order code\n     */\n    cancelReplenishmentOrder(replenishmentOrderCode) {\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        this.store.dispatch(new CancelReplenishmentOrder({\n          userId,\n          replenishmentOrderCode\n        }));\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Returns the cancel replenishment order loading flag\n     */\n    getCancelReplenishmentOrderLoading() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessLoadingFactory(CANCEL_REPLENISHMENT_ORDER_PROCESS_ID)));\n    }\n    /**\n     * Returns the cancel replenishment order success flag\n     */\n    getCancelReplenishmentOrderSuccess() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessSuccessFactory(CANCEL_REPLENISHMENT_ORDER_PROCESS_ID)));\n    }\n    /**\n     * Returns the cancel replenishment order error flag\n     */\n    getCancelReplenishmentOrderError() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessErrorFactory(CANCEL_REPLENISHMENT_ORDER_PROCESS_ID)));\n    }\n    /**\n     * Clears the cancel replenishment order processing state\n     */\n    clearCancelReplenishmentOrderProcessState() {\n      this.store.dispatch(new ClearCancelReplenishmentOrder());\n    }\n    /**\n     * Returns replenishment order history list\n     */\n    getReplenishmentOrderHistoryList(pageSize) {\n      return this.store.pipe(select(getReplenishmentOrdersState), tap(replenishmentOrderListState => {\n        const attemptedLoad = replenishmentOrderListState.loading || replenishmentOrderListState.success || replenishmentOrderListState.error;\n        if (!attemptedLoad) {\n          this.loadReplenishmentOrderList(pageSize);\n        }\n      }), map(replenishmentOrderListState => replenishmentOrderListState.value));\n    }\n    /**\n     * Returns a loading flag for replenishment order history list\n     */\n    getReplenishmentOrderHistoryListLoading() {\n      return this.store.pipe(select(getReplenishmentOrdersLoading));\n    }\n    /**\n     * Returns a error flag for replenishment order history list\n     */\n    getReplenishmentOrderHistoryListError() {\n      return this.store.pipe(select(getReplenishmentOrdersError));\n    }\n    /**\n     * Returns a success flag for replenishment order history list\n     */\n    getReplenishmentOrderHistoryListSuccess() {\n      return this.store.pipe(select(getReplenishmentOrdersSuccess));\n    }\n    /**\n     * Retrieves a replenishment order list\n     * @param pageSize page size\n     * @param currentPage current page\n     * @param sort sort\n     */\n    loadReplenishmentOrderList(pageSize, currentPage, sort) {\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        this.store.dispatch(new LoadUserReplenishmentOrders({\n          userId,\n          pageSize,\n          currentPage,\n          sort\n        }));\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Cleaning replenishment order list\n     */\n    clearReplenishmentOrderList() {\n      this.store.dispatch(new ClearUserReplenishmentOrders());\n    }\n  }\n  ReplenishmentOrderService.ɵfac = function ReplenishmentOrderService_Factory(t) {\n    return new (t || ReplenishmentOrderService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.UserIdService));\n  };\n  ReplenishmentOrderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ReplenishmentOrderService,\n    factory: ReplenishmentOrderService.ɵfac\n  });\n  return ReplenishmentOrderService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst facadeProviders = [OrderReturnRequestService, {\n  provide: OrderReturnRequestFacade,\n  useExisting: OrderReturnRequestService\n}, OrderService, {\n  provide: OrderFacade,\n  useExisting: OrderService\n}, ReplenishmentOrderService, {\n  provide: ReplenishmentOrderFacade,\n  useExisting: ReplenishmentOrderService\n}];\nlet ConsignmentTrackingEffects = /*#__PURE__*/(() => {\n  class ConsignmentTrackingEffects {\n    constructor(actions$, orderConnector) {\n      this.actions$ = actions$;\n      this.orderConnector = orderConnector;\n      this.loadConsignmentTracking$ = this.actions$.pipe(ofType(LOAD_CONSIGNMENT_TRACKING), map(action => action.payload), switchMap(payload => {\n        return this.orderConnector.getConsignmentTracking(payload.orderCode, payload.consignmentCode, payload.userId).pipe(map(tracking => new LoadConsignmentTrackingSuccess(tracking)), catchError(error => of(new LoadConsignmentTrackingFail(normalizeHttpError(error)))));\n      }));\n    }\n  }\n  ConsignmentTrackingEffects.ɵfac = function ConsignmentTrackingEffects_Factory(t) {\n    return new (t || ConsignmentTrackingEffects)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(OrderConnector));\n  };\n  ConsignmentTrackingEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ConsignmentTrackingEffects,\n    factory: ConsignmentTrackingEffects.ɵfac\n  });\n  __decorate([Effect()], ConsignmentTrackingEffects.prototype, \"loadConsignmentTracking$\", void 0);\n  return ConsignmentTrackingEffects;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrderDetailsEffect = /*#__PURE__*/(() => {\n  class OrderDetailsEffect {\n    constructor(actions$, orderConnector, globalMessageService) {\n      this.actions$ = actions$;\n      this.orderConnector = orderConnector;\n      this.globalMessageService = globalMessageService;\n      this.loadOrderDetails$ = this.actions$.pipe(ofType(LOAD_ORDER_DETAILS), map(action => action.payload), switchMap(payload => {\n        return this.orderConnector.get(payload.userId, payload.orderCode).pipe(map(order => {\n          return new LoadOrderDetailsSuccess(order);\n        }), catchError(error => of(new LoadOrderDetailsFail(normalizeHttpError(error)))));\n      }));\n      this.cancelOrder$ = this.actions$.pipe(ofType(CANCEL_ORDER), map(action => action.payload), switchMap(payload => {\n        return this.orderConnector.cancel(payload.userId, payload.orderCode, payload.cancelRequestInput).pipe(map(() => new CancelOrderSuccess()), catchError(error => {\n          var _a;\n          (_a = error.error) === null || _a === void 0 ? void 0 : _a.errors.forEach(err => this.globalMessageService.add(err.message, GlobalMessageType.MSG_TYPE_ERROR));\n          return of(new CancelOrderFail(normalizeHttpError(error)));\n        }));\n      }));\n    }\n  }\n  OrderDetailsEffect.ɵfac = function OrderDetailsEffect_Factory(t) {\n    return new (t || OrderDetailsEffect)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(OrderConnector), i0.ɵɵinject(i2.GlobalMessageService));\n  };\n  OrderDetailsEffect.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrderDetailsEffect,\n    factory: OrderDetailsEffect.ɵfac\n  });\n  __decorate([Effect()], OrderDetailsEffect.prototype, \"loadOrderDetails$\", void 0);\n  __decorate([Effect()], OrderDetailsEffect.prototype, \"cancelOrder$\", void 0);\n  return OrderDetailsEffect;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrderReturnRequestEffect = /*#__PURE__*/(() => {\n  class OrderReturnRequestEffect {\n    constructor(actions$, orderConnector) {\n      this.actions$ = actions$;\n      this.orderConnector = orderConnector;\n      this.createReturnRequest$ = this.actions$.pipe(ofType(CREATE_ORDER_RETURN_REQUEST), map(action => action.payload), switchMap(payload => {\n        return this.orderConnector.return(payload.userId, payload.returnRequestInput).pipe(map(returnRequest => new CreateOrderReturnRequestSuccess(returnRequest)), catchError(error => of(new CreateOrderReturnRequestFail(normalizeHttpError(error)))));\n      }));\n      this.loadReturnRequest$ = this.actions$.pipe(ofType(LOAD_ORDER_RETURN_REQUEST), map(action => action.payload), switchMap(payload => {\n        return this.orderConnector.getReturnRequestDetail(payload.userId, payload.returnRequestCode).pipe(map(returnRequest => new LoadOrderReturnRequestSuccess(returnRequest)), catchError(error => of(new LoadOrderReturnRequestFail(normalizeHttpError(error)))));\n      }));\n      this.cancelReturnRequest$ = this.actions$.pipe(ofType(CANCEL_ORDER_RETURN_REQUEST), map(action => action.payload), switchMap(payload => {\n        return this.orderConnector.cancelReturnRequest(payload.userId, payload.returnRequestCode, payload.returnRequestModification).pipe(map(() => new CancelOrderReturnRequestSuccess()), catchError(error => of(new CancelOrderReturnRequestFail(normalizeHttpError(error)))));\n      }));\n      this.loadReturnRequestList$ = this.actions$.pipe(ofType(LOAD_ORDER_RETURN_REQUEST_LIST), map(action => action.payload), switchMap(payload => {\n        return this.orderConnector.getReturnRequestList(payload.userId, payload.pageSize, payload.currentPage, payload.sort).pipe(map(returnRequestList => new LoadOrderReturnRequestListSuccess(returnRequestList)), catchError(error => of(new LoadOrderReturnRequestListFail(normalizeHttpError(error)))));\n      }));\n    }\n  }\n  OrderReturnRequestEffect.ɵfac = function OrderReturnRequestEffect_Factory(t) {\n    return new (t || OrderReturnRequestEffect)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(OrderConnector));\n  };\n  OrderReturnRequestEffect.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrderReturnRequestEffect,\n    factory: OrderReturnRequestEffect.ɵfac\n  });\n  __decorate([Effect()], OrderReturnRequestEffect.prototype, \"createReturnRequest$\", void 0);\n  __decorate([Effect()], OrderReturnRequestEffect.prototype, \"loadReturnRequest$\", void 0);\n  __decorate([Effect()], OrderReturnRequestEffect.prototype, \"cancelReturnRequest$\", void 0);\n  __decorate([Effect()], OrderReturnRequestEffect.prototype, \"loadReturnRequestList$\", void 0);\n  return OrderReturnRequestEffect;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrdersEffect = /*#__PURE__*/(() => {\n  class OrdersEffect {\n    constructor(actions$, orderConnector, replenishmentOrderConnector) {\n      this.actions$ = actions$;\n      this.orderConnector = orderConnector;\n      this.replenishmentOrderConnector = replenishmentOrderConnector;\n      this.loadUserOrders$ = this.actions$.pipe(ofType(LOAD_USER_ORDERS), map(action => action.payload), switchMap(payload => {\n        var _a;\n        return (Boolean(payload.replenishmentOrderCode) ? this.replenishmentOrderConnector.loadReplenishmentDetailsHistory(payload.userId, (_a = payload.replenishmentOrderCode) !== null && _a !== void 0 ? _a : '', payload.pageSize, payload.currentPage, payload.sort) : this.orderConnector.getHistory(payload.userId, payload.pageSize, payload.currentPage, payload.sort)).pipe(map(orders => {\n          return new LoadUserOrdersSuccess(orders);\n        }), catchError(error => of(new LoadUserOrdersFail(normalizeHttpError(error)))));\n      }));\n      this.resetUserOrders$ = this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE), map(() => {\n        return new ClearUserOrders();\n      }));\n    }\n  }\n  OrdersEffect.ɵfac = function OrdersEffect_Factory(t) {\n    return new (t || OrdersEffect)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(OrderConnector), i0.ɵɵinject(ReplenishmentOrderConnector));\n  };\n  OrdersEffect.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrdersEffect,\n    factory: OrdersEffect.ɵfac\n  });\n  __decorate([Effect()], OrdersEffect.prototype, \"loadUserOrders$\", void 0);\n  __decorate([Effect()], OrdersEffect.prototype, \"resetUserOrders$\", void 0);\n  return OrdersEffect;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ReplenishmentOrderDetailsEffect = /*#__PURE__*/(() => {\n  class ReplenishmentOrderDetailsEffect {\n    constructor(actions$, replenishmentOrderConnector, globalMessageService) {\n      this.actions$ = actions$;\n      this.replenishmentOrderConnector = replenishmentOrderConnector;\n      this.globalMessageService = globalMessageService;\n      this.loadReplenishmentOrderDetails$ = this.actions$.pipe(ofType(LOAD_REPLENISHMENT_ORDER_DETAILS), map(action => action.payload), switchMap(payload => {\n        return this.replenishmentOrderConnector.load(payload.userId, payload.replenishmentOrderCode).pipe(map(replenishmentOrder => {\n          return new LoadReplenishmentOrderDetailsSuccess(replenishmentOrder);\n        }), catchError(error => of(new LoadReplenishmentOrderDetailsFail(normalizeHttpError(error)))));\n      }));\n      this.cancelReplenishmentOrder$ = this.actions$.pipe(ofType(CANCEL_REPLENISHMENT_ORDER), map(action => action.payload), switchMap(payload => {\n        return this.replenishmentOrderConnector.cancelReplenishmentOrder(payload.userId, payload.replenishmentOrderCode).pipe(map(replenishmentOrder => new CancelReplenishmentOrderSuccess(replenishmentOrder)), catchError(error => {\n          var _a;\n          (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.errors.forEach(err => this.globalMessageService.add(err.message, GlobalMessageType.MSG_TYPE_ERROR));\n          return of(new CancelReplenishmentOrderFail(normalizeHttpError(error)));\n        }));\n      }));\n    }\n  }\n  ReplenishmentOrderDetailsEffect.ɵfac = function ReplenishmentOrderDetailsEffect_Factory(t) {\n    return new (t || ReplenishmentOrderDetailsEffect)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(ReplenishmentOrderConnector), i0.ɵɵinject(i2.GlobalMessageService));\n  };\n  ReplenishmentOrderDetailsEffect.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ReplenishmentOrderDetailsEffect,\n    factory: ReplenishmentOrderDetailsEffect.ɵfac\n  });\n  __decorate([Effect()], ReplenishmentOrderDetailsEffect.prototype, \"loadReplenishmentOrderDetails$\", void 0);\n  __decorate([Effect()], ReplenishmentOrderDetailsEffect.prototype, \"cancelReplenishmentOrder$\", void 0);\n  return ReplenishmentOrderDetailsEffect;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ReplenishmentOrdersEffect = /*#__PURE__*/(() => {\n  class ReplenishmentOrdersEffect {\n    constructor(actions$, replenishmentOrderConnector) {\n      this.actions$ = actions$;\n      this.replenishmentOrderConnector = replenishmentOrderConnector;\n      this.loadUserReplenishmentOrders$ = this.actions$.pipe(ofType(LOAD_USER_REPLENISHMENT_ORDERS), map(action => action.payload), switchMap(payload => {\n        return this.replenishmentOrderConnector.loadHistory(payload.userId, payload.pageSize, payload.currentPage, payload.sort).pipe(map(orders => {\n          return new LoadUserReplenishmentOrdersSuccess(orders);\n        }), catchError(error => of(new LoadUserReplenishmentOrdersFail(normalizeHttpError(error)))));\n      }));\n    }\n  }\n  ReplenishmentOrdersEffect.ɵfac = function ReplenishmentOrdersEffect_Factory(t) {\n    return new (t || ReplenishmentOrdersEffect)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(ReplenishmentOrderConnector));\n  };\n  ReplenishmentOrdersEffect.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ReplenishmentOrdersEffect,\n    factory: ReplenishmentOrdersEffect.ɵfac\n  });\n  __decorate([Effect()], ReplenishmentOrdersEffect.prototype, \"loadUserReplenishmentOrders$\", void 0);\n  return ReplenishmentOrdersEffect;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst effects = [OrdersEffect, OrderDetailsEffect, ConsignmentTrackingEffects, OrderReturnRequestEffect, ReplenishmentOrderDetailsEffect, ReplenishmentOrdersEffect];\nconst initialState$5 = {\n  tracking: {}\n};\nfunction reducer$5(state = initialState$5, action) {\n  switch (action.type) {\n    case LOAD_CONSIGNMENT_TRACKING_SUCCESS:\n      {\n        const tracking = action.payload;\n        return {\n          tracking\n        };\n      }\n    case CLEAR_CONSIGNMENT_TRACKING:\n      {\n        return initialState$5;\n      }\n  }\n  return state;\n}\nconst initialState$4 = {};\nfunction reducer$4(state = initialState$4, action) {\n  switch (action.type) {\n    case LOAD_ORDER_DETAILS_SUCCESS:\n      {\n        const order = action.payload;\n        return order;\n      }\n  }\n  return state;\n}\nconst initialState$3 = {\n  returnRequests: [],\n  pagination: {},\n  sorts: []\n};\nfunction reducer$3(state = initialState$3, action) {\n  switch (action.type) {\n    case LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS:\n      {\n        return action.payload ? action.payload : initialState$3;\n      }\n  }\n  return state;\n}\nconst initialState$2 = {\n  orders: [],\n  pagination: {},\n  sorts: []\n};\nfunction reducer$2(state = initialState$2, action) {\n  switch (action.type) {\n    case LOAD_USER_ORDERS_SUCCESS:\n      {\n        return action.payload ? action.payload : initialState$2;\n      }\n    case LOAD_USER_ORDERS_FAIL:\n      {\n        return initialState$2;\n      }\n  }\n  return state;\n}\nconst initialState$1 = {};\nfunction reducer$1(state = initialState$1, action) {\n  switch (action.type) {\n    case LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS:\n    case CANCEL_REPLENISHMENT_ORDER_SUCCESS:\n      {\n        return action.payload ? action.payload : initialState$1;\n      }\n    default:\n      {\n        return state;\n      }\n  }\n}\nconst initialState = {\n  replenishmentOrders: [],\n  pagination: {},\n  sorts: []\n};\nfunction reducer(state = initialState, action) {\n  var _a;\n  switch (action.type) {\n    case LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS:\n      {\n        return action.payload ? action.payload : initialState;\n      }\n    case CANCEL_REPLENISHMENT_ORDER_SUCCESS:\n      {\n        const cancelledReplenishmentOrder = action.payload;\n        const userReplenishmentOrders = [...((_a = state.replenishmentOrders) !== null && _a !== void 0 ? _a : [])];\n        const index = userReplenishmentOrders.findIndex(replenishmentOrder => replenishmentOrder.replenishmentOrderCode === cancelledReplenishmentOrder.replenishmentOrderCode);\n        if (index === -1) {\n          return initialState;\n        } else {\n          userReplenishmentOrders[index] = Object.assign({}, cancelledReplenishmentOrder);\n        }\n        return Object.assign(Object.assign({}, state), {\n          replenishmentOrders: userReplenishmentOrders\n        });\n      }\n  }\n  return state;\n}\nfunction getReducers() {\n  return {\n    orders: StateUtils.loaderReducer(ORDERS, reducer$2),\n    orderDetail: StateUtils.loaderReducer(ORDER_DETAILS, reducer$4),\n    replenishmentOrders: StateUtils.loaderReducer(REPLENISHMENT_ORDERS, reducer),\n    orderReturn: StateUtils.loaderReducer(RETURN_REQUEST_DETAILS),\n    orderReturnList: StateUtils.loaderReducer(RETURN_REQUESTS, reducer$3),\n    consignmentTracking: reducer$5,\n    replenishmentOrder: StateUtils.loaderReducer(REPLENISHMENT_ORDER_DETAILS, reducer$1)\n  };\n}\nconst reducerToken = new InjectionToken('OrderReducers');\nconst reducerProvider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\nlet OrderStoreModule = /*#__PURE__*/(() => {\n  class OrderStoreModule {}\n  OrderStoreModule.ɵfac = function OrderStoreModule_Factory(t) {\n    return new (t || OrderStoreModule)();\n  };\n  OrderStoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: OrderStoreModule\n  });\n  OrderStoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [reducerProvider],\n    imports: [[EffectsModule.forFeature(effects), StoreModule.forFeature(ORDER_FEATURE, reducerToken)]]\n  });\n  return OrderStoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrderCoreModule = /*#__PURE__*/(() => {\n  class OrderCoreModule {}\n  OrderCoreModule.ɵfac = function OrderCoreModule_Factory(t) {\n    return new (t || OrderCoreModule)();\n  };\n  OrderCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: OrderCoreModule\n  });\n  OrderCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [OrderConnector, ReplenishmentOrderConnector, ...facadeProviders],\n    imports: [[OrderStoreModule]]\n  });\n  return OrderCoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CANCEL_ORDER_PROCESS_ID, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID, CANCEL_RETURN_PROCESS_ID, CONSIGNMENT_TRACKING_NORMALIZER, ORDERS, ORDER_DETAILS, ORDER_FEATURE, ORDER_HISTORY_NORMALIZER, ORDER_RETURNS_NORMALIZER, ORDER_RETURN_REQUEST_INPUT_SERIALIZER, ORDER_RETURN_REQUEST_NORMALIZER, orderGroup_actions as OrderActions, OrderAdapter, OrderConnector, OrderCoreModule, OrderReturnRequestService, orderGroup_selectors as OrderSelectors, OrderService, REPLENISHMENT_ORDERS, REPLENISHMENT_ORDER_DETAILS, REPLENISHMENT_ORDER_HISTORY_NORMALIZER, RETURN_REQUESTS, RETURN_REQUEST_DETAILS, ReplenishmentOrderAdapter, ReplenishmentOrderConnector, ReplenishmentOrderService };\n//# sourceMappingURL=spartacus-order-core.js.map","map":null,"metadata":{},"sourceType":"module"}