{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, APP_INITIALIZER, NgModule } from '@angular/core';\nimport * as i3 from '@spartacus/storefront';\nimport { PageComponentModule } from '@spartacus/storefront';\nimport * as i1$1 from '@spartacus/core';\nimport { AuthStorageService, AuthActions, OCC_USER_ID_ANONYMOUS, OCC_USER_ID_CURRENT, AuthHttpHeaderService, InterceptorUtil, USE_CUSTOMER_SUPPORT_AGENT_TOKEN, GlobalMessageType, AuthService } from '@spartacus/core';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport { __awaiter } from 'tslib';\nimport { BehaviorSubject, combineLatest, of, from } from 'rxjs';\nimport * as i3$1 from '@ngrx/store';\nconst ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\nclass AsmEnablerService {\n  constructor(location, winRef, launchDialogService, featureModules) {\n    this.location = location;\n    this.winRef = winRef;\n    this.launchDialogService = launchDialogService;\n    this.featureModules = featureModules;\n  }\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load() {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled() {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  isLaunched() {\n    const params = this.location.path().split('?')[1];\n    return !!params && params.split('&').includes('asm=true');\n  }\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  isUsedBefore() {\n    if (this.winRef.localStorage) {\n      return this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true';\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  addUi() {\n    this.featureModules.resolveFeature('asm').subscribe(() => this.launchDialogService.launch(\"ASM\" /* ASM */));\n  }\n}\n\nAsmEnablerService.ɵfac = function AsmEnablerService_Factory(t) {\n  return new (t || AsmEnablerService)(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i1$1.WindowRef), i0.ɵɵinject(i3.LaunchDialogService), i0.ɵɵinject(i1$1.FeatureModulesService));\n};\nAsmEnablerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmEnablerService,\n  factory: AsmEnablerService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmEnablerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Location\n    }, {\n      type: i1$1.WindowRef\n    }, {\n      type: i3.LaunchDialogService\n    }, {\n      type: i1$1.FeatureModulesService\n    }];\n  }, null);\n})();\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\nclass AsmLoaderModule {}\nAsmLoaderModule.ɵfac = function AsmLoaderModule_Factory(t) {\n  return new (t || AsmLoaderModule)();\n};\nAsmLoaderModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AsmLoaderModule\n});\nAsmLoaderModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: APP_INITIALIZER,\n    useFactory: asmFactory,\n    deps: [AsmEnablerService],\n    multi: true\n  }],\n  imports: [[CommonModule, PageComponentModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmLoaderModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PageComponentModule],\n      providers: [{\n        provide: APP_INITIALIZER,\n        useFactory: asmFactory,\n        deps: [AsmEnablerService],\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nfunction asmFactory(asmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n\n/**\n * Indicates if auth token is for regular user or CS Agent.\n */\nvar TokenTarget;\n(function (TokenTarget) {\n  TokenTarget[\"CSAgent\"] = \"CSAgent\";\n  TokenTarget[\"User\"] = \"User\";\n})(TokenTarget || (TokenTarget = {}));\n/**\n * With AsmAuthStorageService apart from storing the token we also need to store\n * information for which user is the token (regular user or CS Agent).\n *\n * Overrides `AuthStorageService`.\n */\nclass AsmAuthStorageService extends AuthStorageService {\n  constructor() {\n    super(...arguments);\n    this._tokenTarget$ = new BehaviorSubject(TokenTarget.User);\n  }\n  /**\n   * Get target user for current auth token.\n   *\n   * @return observable with TokenTarget\n   */\n  getTokenTarget() {\n    return this._tokenTarget$;\n  }\n  /**\n   * Set new token target.\n   *\n   * @param tokenTarget\n   */\n  setTokenTarget(tokenTarget) {\n    this._tokenTarget$.next(tokenTarget);\n  }\n  /**\n   * Get token for previously user session, when it was interrupted by CS agent login.\n   *\n   * @return previously logged in user token.\n   */\n  getEmulatedUserToken() {\n    return this.emulatedUserToken;\n  }\n  /**\n   * Save user token on CS agent login.\n   *\n   * @param token\n   */\n  setEmulatedUserToken(token) {\n    this.emulatedUserToken = token;\n  }\n  /**\n   * Change token target to CS Agent.\n   */\n  switchTokenTargetToCSAgent() {\n    this._tokenTarget$.next(TokenTarget.CSAgent);\n  }\n  /**\n   * Change token target to user.\n   */\n  switchTokenTargetToUser() {\n    this._tokenTarget$.next(TokenTarget.User);\n  }\n  /**\n   * When we start emulation from the UI (not by ASM login) we can't restore user session on cs agent logout.\n   * Only available solution is to drop session we could restore, to avoid account hijack.\n   */\n  clearEmulatedUserToken() {\n    this.emulatedUserToken = undefined;\n  }\n}\nAsmAuthStorageService.ɵfac = /* @__PURE__ */function () {\n  let ɵAsmAuthStorageService_BaseFactory;\n  return function AsmAuthStorageService_Factory(t) {\n    return (ɵAsmAuthStorageService_BaseFactory || (ɵAsmAuthStorageService_BaseFactory = i0.ɵɵgetInheritedFactory(AsmAuthStorageService)))(t || AsmAuthStorageService);\n  };\n}();\nAsmAuthStorageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmAuthStorageService,\n  factory: AsmAuthStorageService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmAuthStorageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * Auth service for CS agent. Useful to login/logout agent, start emulation\n * or get information about the status of emulation.\n */\nclass CsAgentAuthService {\n  constructor(authService, authStorageService, userIdService, oAuthLibWrapperService, store, userService) {\n    this.authService = authService;\n    this.authStorageService = authStorageService;\n    this.userIdService = userIdService;\n    this.oAuthLibWrapperService = oAuthLibWrapperService;\n    this.store = store;\n    this.userService = userService;\n  }\n  /**\n   * Loads access token for a customer support agent.\n   * @param userId\n   * @param password\n   */\n  authorizeCustomerSupportAgent(userId, password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let userToken;\n      this.authStorageService.getToken().subscribe(token => userToken = token).unsubscribe();\n      this.authStorageService.switchTokenTargetToCSAgent();\n      try {\n        yield this.oAuthLibWrapperService.authorizeWithPasswordFlow(userId, password);\n        // Start emulation for currently logged in user\n        let customerId;\n        this.userService.get().subscribe(user => customerId = user === null || user === void 0 ? void 0 : user.customerId).unsubscribe();\n        this.store.dispatch(new AuthActions.Logout());\n        if (customerId !== undefined && userToken !== undefined) {\n          // OCC specific user id handling. Customize when implementing different backend\n          this.userIdService.setUserId(customerId);\n          this.authStorageService.setEmulatedUserToken(userToken);\n          this.store.dispatch(new AuthActions.Login());\n        } else {\n          // When we can't get the customerId just end all current sessions\n          this.userIdService.setUserId(OCC_USER_ID_ANONYMOUS);\n          this.authStorageService.clearEmulatedUserToken();\n        }\n      } catch (_a) {\n        this.authStorageService.switchTokenTargetToUser();\n      }\n    });\n  }\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stopped by calling logout().\n   * @param customerId\n   */\n  startCustomerEmulationSession(customerId) {\n    this.authStorageService.clearEmulatedUserToken();\n    // OCC specific user id handling. Customize when implementing different backend\n    this.store.dispatch(new AuthActions.Logout());\n    this.userIdService.setUserId(customerId);\n    this.store.dispatch(new AuthActions.Login());\n  }\n  /**\n   * Check if CS agent is currently logged in.\n   *\n   * @returns observable emitting true when CS agent is logged in or false when not.\n   */\n  isCustomerSupportAgentLoggedIn() {\n    return combineLatest([this.authStorageService.getToken(), this.authStorageService.getTokenTarget()]).pipe(map(([token, tokenTarget]) => Boolean((token === null || token === void 0 ? void 0 : token.access_token) && tokenTarget === TokenTarget.CSAgent)));\n  }\n  /**\n   * Utility function to determine if customer is emulated.\n   *\n   * @returns observable emitting true when there is active emulation session or false when not.\n   */\n  isCustomerEmulated() {\n    return this.userIdService.isEmulated();\n  }\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  getCustomerSupportAgentTokenLoading() {\n    // TODO(#8248): Create new loading state outside of store\n    return of(false);\n  }\n  /**\n   * Logout a customer support agent.\n   */\n  logoutCustomerSupportAgent() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const emulatedToken = this.authStorageService.getEmulatedUserToken();\n      let isCustomerEmulated;\n      this.userIdService.isEmulated().subscribe(emulated => isCustomerEmulated = emulated).unsubscribe();\n      yield this.oAuthLibWrapperService.revokeAndLogout();\n      this.store.dispatch({\n        type: '[Auth] Logout Customer Support Agent'\n      });\n      this.authStorageService.setTokenTarget(TokenTarget.User);\n      if (isCustomerEmulated && emulatedToken) {\n        this.store.dispatch(new AuthActions.Logout());\n        this.authStorageService.setToken(emulatedToken);\n        this.userIdService.setUserId(OCC_USER_ID_CURRENT);\n        this.authStorageService.clearEmulatedUserToken();\n        this.store.dispatch(new AuthActions.Login());\n      } else {\n        this.authService.logout();\n      }\n    });\n  }\n}\nCsAgentAuthService.ɵfac = function CsAgentAuthService_Factory(t) {\n  return new (t || CsAgentAuthService)(i0.ɵɵinject(i1$1.AuthService), i0.ɵɵinject(AsmAuthStorageService), i0.ɵɵinject(i1$1.UserIdService), i0.ɵɵinject(i1$1.OAuthLibWrapperService), i0.ɵɵinject(i3$1.Store), i0.ɵɵinject(i1$1.UserService));\n};\nCsAgentAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CsAgentAuthService,\n  factory: CsAgentAuthService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CsAgentAuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.AuthService\n    }, {\n      type: AsmAuthStorageService\n    }, {\n      type: i1$1.UserIdService\n    }, {\n      type: i1$1.OAuthLibWrapperService\n    }, {\n      type: i3$1.Store\n    }, {\n      type: i1$1.UserService\n    }];\n  }, null);\n})();\n\n/**\n * Overrides `AuthHttpHeaderService` to handle asm calls as well (not only OCC)\n * in cases of normal user session and on customer emulation.\n */\nclass AsmAuthHttpHeaderService extends AuthHttpHeaderService {\n  constructor(authService, authStorageService, csAgentAuthService, oAuthLibWrapperService, routingService, globalMessageService, occEndpointsService, authRedirectService) {\n    super(authService, authStorageService, oAuthLibWrapperService, routingService, occEndpointsService, globalMessageService, authRedirectService);\n    this.authService = authService;\n    this.authStorageService = authStorageService;\n    this.csAgentAuthService = csAgentAuthService;\n    this.oAuthLibWrapperService = oAuthLibWrapperService;\n    this.routingService = routingService;\n    this.globalMessageService = globalMessageService;\n    this.occEndpointsService = occEndpointsService;\n    this.authRedirectService = authRedirectService;\n  }\n  /**\n   * Checks if the authorization header should be added to the request\n   *\n   *  @override\n   */\n  shouldAddAuthorizationHeader(request) {\n    return super.shouldAddAuthorizationHeader(request) || this.isCSAgentTokenRequest(request);\n  }\n  /**\n   * @override\n   *\n   * Checks if particular request should be handled by this service.\n   */\n  shouldCatchError(request) {\n    return super.shouldCatchError(request) || this.isCSAgentTokenRequest(request);\n  }\n  /**\n   * @override\n   *\n   * Adds `Authorization` header to occ and CS agent requests.\n   * For CS agent requests also removes the `cx-use-csagent-token` header (to avoid problems with CORS).\n   */\n  alterRequest(request, token) {\n    const hasAuthorizationHeader = !!this.getAuthorizationHeader(request);\n    const isCSAgentRequest = this.isCSAgentTokenRequest(request);\n    let req = super.alterRequest(request, token);\n    if (!hasAuthorizationHeader && isCSAgentRequest) {\n      req = request.clone({\n        setHeaders: Object.assign({}, this.createAuthorizationHeader(token))\n      });\n      return InterceptorUtil.removeHeader(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, req);\n    }\n    return req;\n  }\n  isCSAgentTokenRequest(request) {\n    const isRequestWithCSAgentToken = InterceptorUtil.getInterceptorParam(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, request.headers);\n    return Boolean(isRequestWithCSAgentToken);\n  }\n  /**\n   * @override\n   *\n   * On backend errors indicating expired `refresh_token` we need to logout\n   * currently logged in user and CS agent.\n   */\n  handleExpiredRefreshToken() {\n    this.csAgentAuthService.isCustomerSupportAgentLoggedIn().pipe(take(1)).subscribe(csAgentLoggedIn => {\n      if (csAgentLoggedIn) {\n        this.authService.setLogoutProgress(true);\n        this.csAgentAuthService.logoutCustomerSupportAgent();\n        this.globalMessageService.add({\n          key: 'asm.csagentTokenExpired'\n        }, GlobalMessageType.MSG_TYPE_ERROR);\n      } else {\n        super.handleExpiredRefreshToken();\n      }\n    });\n  }\n}\nAsmAuthHttpHeaderService.ɵfac = function AsmAuthHttpHeaderService_Factory(t) {\n  return new (t || AsmAuthHttpHeaderService)(i0.ɵɵinject(i1$1.AuthService), i0.ɵɵinject(i1$1.AuthStorageService), i0.ɵɵinject(CsAgentAuthService), i0.ɵɵinject(i1$1.OAuthLibWrapperService), i0.ɵɵinject(i1$1.RoutingService), i0.ɵɵinject(i1$1.GlobalMessageService), i0.ɵɵinject(i1$1.OccEndpointsService), i0.ɵɵinject(i1$1.AuthRedirectService));\n};\nAsmAuthHttpHeaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmAuthHttpHeaderService,\n  factory: AsmAuthHttpHeaderService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmAuthHttpHeaderService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.AuthService\n    }, {\n      type: i1$1.AuthStorageService\n    }, {\n      type: CsAgentAuthService\n    }, {\n      type: i1$1.OAuthLibWrapperService\n    }, {\n      type: i1$1.RoutingService\n    }, {\n      type: i1$1.GlobalMessageService\n    }, {\n      type: i1$1.OccEndpointsService\n    }, {\n      type: i1$1.AuthRedirectService\n    }];\n  }, null);\n})();\n\n/**\n * Version of AuthService that is working for both user na CS agent.\n * Overrides AuthService when ASM module is enabled.\n */\nclass AsmAuthService extends AuthService {\n  constructor(store, userIdService, oAuthLibWrapperService, authStorageService, authRedirectService, globalMessageService, routingService) {\n    super(store, userIdService, oAuthLibWrapperService, authStorageService, authRedirectService, routingService);\n    this.store = store;\n    this.userIdService = userIdService;\n    this.oAuthLibWrapperService = oAuthLibWrapperService;\n    this.authStorageService = authStorageService;\n    this.authRedirectService = authRedirectService;\n    this.globalMessageService = globalMessageService;\n    this.routingService = routingService;\n  }\n  canUserLogin() {\n    let tokenTarget;\n    let token;\n    this.authStorageService.getToken().subscribe(tok => token = tok).unsubscribe();\n    this.authStorageService.getTokenTarget().subscribe(tokTarget => tokenTarget = tokTarget).unsubscribe();\n    return !(Boolean(token === null || token === void 0 ? void 0 : token.access_token) && tokenTarget === TokenTarget.CSAgent);\n  }\n  warnAboutLoggedCSAgent() {\n    this.globalMessageService.add({\n      key: 'asm.auth.agentLoggedInError'\n    }, GlobalMessageType.MSG_TYPE_ERROR);\n  }\n  /**\n   * Loads a new user token with Resource Owner Password Flow when CS agent is not logged in.\n   * @param userId\n   * @param password\n   */\n  loginWithCredentials(userId, password) {\n    const _super = Object.create(null, {\n      loginWithCredentials: {\n        get: () => super.loginWithCredentials\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.canUserLogin()) {\n        yield _super.loginWithCredentials.call(this, userId, password);\n      } else {\n        this.warnAboutLoggedCSAgent();\n      }\n    });\n  }\n  /**\n   * Initialize Implicit/Authorization Code flow by redirecting to OAuth server when CS agent is not logged in.\n   */\n  loginWithRedirect() {\n    if (this.canUserLogin()) {\n      super.loginWithRedirect();\n      return true;\n    } else {\n      this.warnAboutLoggedCSAgent();\n      return false;\n    }\n  }\n  /**\n   * Revokes tokens and clears state for logged user (tokens, userId).\n   * To perform logout it is best to use `logout` method. Use this method with caution.\n   */\n  coreLogout() {\n    return this.userIdService.isEmulated().pipe(take(1), switchMap(isEmulated => {\n      if (isEmulated) {\n        this.authStorageService.clearEmulatedUserToken();\n        this.userIdService.clearUserId();\n        this.store.dispatch(new AuthActions.Logout());\n        return of(true);\n      } else {\n        return from(super.coreLogout());\n      }\n    })).toPromise();\n  }\n  /**\n   * Returns `true` if user is logged in or being emulated.\n   */\n  isUserLoggedIn() {\n    return combineLatest([this.authStorageService.getToken(), this.userIdService.isEmulated(), this.authStorageService.getTokenTarget()]).pipe(map(([token, isEmulated, tokenTarget]) => Boolean(token === null || token === void 0 ? void 0 : token.access_token) && (tokenTarget === TokenTarget.User || tokenTarget === TokenTarget.CSAgent && isEmulated)));\n  }\n}\nAsmAuthService.ɵfac = function AsmAuthService_Factory(t) {\n  return new (t || AsmAuthService)(i0.ɵɵinject(i3$1.Store), i0.ɵɵinject(i1$1.UserIdService), i0.ɵɵinject(i1$1.OAuthLibWrapperService), i0.ɵɵinject(AsmAuthStorageService), i0.ɵɵinject(i1$1.AuthRedirectService), i0.ɵɵinject(i1$1.GlobalMessageService), i0.ɵɵinject(i1$1.RoutingService));\n};\nAsmAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmAuthService,\n  factory: AsmAuthService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmAuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i3$1.Store\n    }, {\n      type: i1$1.UserIdService\n    }, {\n      type: i1$1.OAuthLibWrapperService\n    }, {\n      type: AsmAuthStorageService\n    }, {\n      type: i1$1.AuthRedirectService\n    }, {\n      type: i1$1.GlobalMessageService\n    }, {\n      type: i1$1.RoutingService\n    }];\n  }, null);\n})();\nclass AsmRootModule {}\nAsmRootModule.ɵfac = function AsmRootModule_Factory(t) {\n  return new (t || AsmRootModule)();\n};\nAsmRootModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AsmRootModule\n});\nAsmRootModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: AuthStorageService,\n    useExisting: AsmAuthStorageService\n  }, {\n    provide: AuthService,\n    useExisting: AsmAuthService\n  }, {\n    provide: AuthHttpHeaderService,\n    useExisting: AsmAuthHttpHeaderService\n  }],\n  imports: [[AsmLoaderModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmRootModule, [{\n    type: NgModule,\n    args: [{\n      imports: [AsmLoaderModule],\n      providers: [{\n        provide: AuthStorageService,\n        useExisting: AsmAuthStorageService\n      }, {\n        provide: AuthService,\n        useExisting: AsmAuthService\n      }, {\n        provide: AuthHttpHeaderService,\n        useExisting: AsmAuthHttpHeaderService\n      }]\n    }]\n  }], null, null);\n})();\nconst ASM_FEATURE = 'asm';\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ASM_ENABLED_LOCAL_STORAGE_KEY, ASM_FEATURE, AsmAuthHttpHeaderService, AsmAuthService, AsmAuthStorageService, AsmEnablerService, AsmLoaderModule, AsmRootModule, CsAgentAuthService, TokenTarget, asmFactory };","map":{"version":3,"names":["i1","CommonModule","i0","Injectable","APP_INITIALIZER","NgModule","i3","PageComponentModule","i1$1","AuthStorageService","AuthActions","OCC_USER_ID_ANONYMOUS","OCC_USER_ID_CURRENT","AuthHttpHeaderService","InterceptorUtil","USE_CUSTOMER_SUPPORT_AGENT_TOKEN","GlobalMessageType","AuthService","map","take","switchMap","__awaiter","BehaviorSubject","combineLatest","of","from","i3$1","ASM_ENABLED_LOCAL_STORAGE_KEY","AsmEnablerService","constructor","location","winRef","launchDialogService","featureModules","load","isEnabled","addUi","isLaunched","isUsedBefore","localStorage","setItem","params","path","split","includes","getItem","resolveFeature","subscribe","launch","ɵfac","Location","WindowRef","LaunchDialogService","FeatureModulesService","ɵprov","type","args","providedIn","AsmLoaderModule","ɵmod","ɵinj","provide","useFactory","asmFactory","deps","multi","imports","providers","asmEnablerService","isReady","TokenTarget","AsmAuthStorageService","arguments","_tokenTarget$","User","getTokenTarget","setTokenTarget","tokenTarget","next","getEmulatedUserToken","emulatedUserToken","setEmulatedUserToken","token","switchTokenTargetToCSAgent","CSAgent","switchTokenTargetToUser","clearEmulatedUserToken","undefined","CsAgentAuthService","authService","authStorageService","userIdService","oAuthLibWrapperService","store","userService","authorizeCustomerSupportAgent","userId","password","userToken","getToken","unsubscribe","authorizeWithPasswordFlow","customerId","get","user","dispatch","Logout","setUserId","Login","_a","startCustomerEmulationSession","isCustomerSupportAgentLoggedIn","pipe","Boolean","access_token","isCustomerEmulated","isEmulated","getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","emulatedToken","emulated","revokeAndLogout","setToken","logout","UserIdService","OAuthLibWrapperService","Store","UserService","AsmAuthHttpHeaderService","csAgentAuthService","routingService","globalMessageService","occEndpointsService","authRedirectService","shouldAddAuthorizationHeader","request","isCSAgentTokenRequest","shouldCatchError","alterRequest","hasAuthorizationHeader","getAuthorizationHeader","isCSAgentRequest","req","clone","setHeaders","Object","assign","createAuthorizationHeader","removeHeader","isRequestWithCSAgentToken","getInterceptorParam","headers","handleExpiredRefreshToken","csAgentLoggedIn","setLogoutProgress","add","key","MSG_TYPE_ERROR","RoutingService","GlobalMessageService","OccEndpointsService","AuthRedirectService","AsmAuthService","canUserLogin","tok","tokTarget","warnAboutLoggedCSAgent","loginWithCredentials","_super","create","call","loginWithRedirect","coreLogout","clearUserId","toPromise","isUserLoggedIn","AsmRootModule","useExisting","ASM_FEATURE"],"sources":["/home/hamid/cangubike/js-storefront/olf/node_modules/@spartacus/asm/fesm2015/spartacus-asm-root.js"],"sourcesContent":["import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, APP_INITIALIZER, NgModule } from '@angular/core';\nimport * as i3 from '@spartacus/storefront';\nimport { PageComponentModule } from '@spartacus/storefront';\nimport * as i1$1 from '@spartacus/core';\nimport { AuthStorageService, AuthActions, OCC_USER_ID_ANONYMOUS, OCC_USER_ID_CURRENT, AuthHttpHeaderService, InterceptorUtil, USE_CUSTOMER_SUPPORT_AGENT_TOKEN, GlobalMessageType, AuthService } from '@spartacus/core';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport { __awaiter } from 'tslib';\nimport { BehaviorSubject, combineLatest, of, from } from 'rxjs';\nimport * as i3$1 from '@ngrx/store';\n\nconst ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\nclass AsmEnablerService {\n    constructor(location, winRef, launchDialogService, featureModules) {\n        this.location = location;\n        this.winRef = winRef;\n        this.launchDialogService = launchDialogService;\n        this.featureModules = featureModules;\n    }\n    /**\n     * Loads the ASM UI if needed. The ASM UI will be added based on the\n     * existence of a URL parameter or previous usage given by local storage.\n     */\n    load() {\n        if (this.isEnabled()) {\n            this.addUi();\n        }\n    }\n    /**\n     * Indicates whether the ASM module is enabled.\n     */\n    isEnabled() {\n        if (this.isLaunched() && !this.isUsedBefore()) {\n            if (this.winRef.localStorage) {\n                this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n            }\n        }\n        return this.isLaunched() || this.isUsedBefore();\n    }\n    /**\n     * Indicates whether ASM is launched through the URL,\n     * using the asm flag in the URL.\n     */\n    isLaunched() {\n        const params = this.location.path().split('?')[1];\n        return !!params && params.split('&').includes('asm=true');\n    }\n    /**\n     * Evaluates local storage where we persist the usage of ASM.\n     */\n    isUsedBefore() {\n        if (this.winRef.localStorage) {\n            return (this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) ===\n                'true');\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Adds the ASM UI by using the `cx-storefront` outlet.\n     */\n    addUi() {\n        this.featureModules\n            .resolveFeature('asm')\n            .subscribe(() => this.launchDialogService.launch(\"ASM\" /* ASM */));\n    }\n}\nAsmEnablerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmEnablerService, deps: [{ token: i1.Location }, { token: i1$1.WindowRef }, { token: i3.LaunchDialogService }, { token: i1$1.FeatureModulesService }], target: i0.ɵɵFactoryTarget.Injectable });\nAsmEnablerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmEnablerService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmEnablerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Location }, { type: i1$1.WindowRef }, { type: i3.LaunchDialogService }, { type: i1$1.FeatureModulesService }]; } });\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\nclass AsmLoaderModule {\n}\nAsmLoaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmLoaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAsmLoaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmLoaderModule, imports: [CommonModule, PageComponentModule] });\nAsmLoaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmLoaderModule, providers: [\n        {\n            provide: APP_INITIALIZER,\n            useFactory: asmFactory,\n            deps: [AsmEnablerService],\n            multi: true,\n        },\n    ], imports: [[CommonModule, PageComponentModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmLoaderModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, PageComponentModule],\n                    providers: [\n                        {\n                            provide: APP_INITIALIZER,\n                            useFactory: asmFactory,\n                            deps: [AsmEnablerService],\n                            multi: true,\n                        },\n                    ],\n                }]\n        }] });\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nfunction asmFactory(asmEnablerService) {\n    const isReady = () => {\n        asmEnablerService.load();\n    };\n    return isReady;\n}\n\n/**\n * Indicates if auth token is for regular user or CS Agent.\n */\nvar TokenTarget;\n(function (TokenTarget) {\n    TokenTarget[\"CSAgent\"] = \"CSAgent\";\n    TokenTarget[\"User\"] = \"User\";\n})(TokenTarget || (TokenTarget = {}));\n/**\n * With AsmAuthStorageService apart from storing the token we also need to store\n * information for which user is the token (regular user or CS Agent).\n *\n * Overrides `AuthStorageService`.\n */\nclass AsmAuthStorageService extends AuthStorageService {\n    constructor() {\n        super(...arguments);\n        this._tokenTarget$ = new BehaviorSubject(TokenTarget.User);\n    }\n    /**\n     * Get target user for current auth token.\n     *\n     * @return observable with TokenTarget\n     */\n    getTokenTarget() {\n        return this._tokenTarget$;\n    }\n    /**\n     * Set new token target.\n     *\n     * @param tokenTarget\n     */\n    setTokenTarget(tokenTarget) {\n        this._tokenTarget$.next(tokenTarget);\n    }\n    /**\n     * Get token for previously user session, when it was interrupted by CS agent login.\n     *\n     * @return previously logged in user token.\n     */\n    getEmulatedUserToken() {\n        return this.emulatedUserToken;\n    }\n    /**\n     * Save user token on CS agent login.\n     *\n     * @param token\n     */\n    setEmulatedUserToken(token) {\n        this.emulatedUserToken = token;\n    }\n    /**\n     * Change token target to CS Agent.\n     */\n    switchTokenTargetToCSAgent() {\n        this._tokenTarget$.next(TokenTarget.CSAgent);\n    }\n    /**\n     * Change token target to user.\n     */\n    switchTokenTargetToUser() {\n        this._tokenTarget$.next(TokenTarget.User);\n    }\n    /**\n     * When we start emulation from the UI (not by ASM login) we can't restore user session on cs agent logout.\n     * Only available solution is to drop session we could restore, to avoid account hijack.\n     */\n    clearEmulatedUserToken() {\n        this.emulatedUserToken = undefined;\n    }\n}\nAsmAuthStorageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthStorageService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\nAsmAuthStorageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthStorageService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthStorageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }] });\n\n/**\n * Auth service for CS agent. Useful to login/logout agent, start emulation\n * or get information about the status of emulation.\n */\nclass CsAgentAuthService {\n    constructor(authService, authStorageService, userIdService, oAuthLibWrapperService, store, userService) {\n        this.authService = authService;\n        this.authStorageService = authStorageService;\n        this.userIdService = userIdService;\n        this.oAuthLibWrapperService = oAuthLibWrapperService;\n        this.store = store;\n        this.userService = userService;\n    }\n    /**\n     * Loads access token for a customer support agent.\n     * @param userId\n     * @param password\n     */\n    authorizeCustomerSupportAgent(userId, password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let userToken;\n            this.authStorageService\n                .getToken()\n                .subscribe((token) => (userToken = token))\n                .unsubscribe();\n            this.authStorageService.switchTokenTargetToCSAgent();\n            try {\n                yield this.oAuthLibWrapperService.authorizeWithPasswordFlow(userId, password);\n                // Start emulation for currently logged in user\n                let customerId;\n                this.userService\n                    .get()\n                    .subscribe((user) => (customerId = user === null || user === void 0 ? void 0 : user.customerId))\n                    .unsubscribe();\n                this.store.dispatch(new AuthActions.Logout());\n                if (customerId !== undefined && userToken !== undefined) {\n                    // OCC specific user id handling. Customize when implementing different backend\n                    this.userIdService.setUserId(customerId);\n                    this.authStorageService.setEmulatedUserToken(userToken);\n                    this.store.dispatch(new AuthActions.Login());\n                }\n                else {\n                    // When we can't get the customerId just end all current sessions\n                    this.userIdService.setUserId(OCC_USER_ID_ANONYMOUS);\n                    this.authStorageService.clearEmulatedUserToken();\n                }\n            }\n            catch (_a) {\n                this.authStorageService.switchTokenTargetToUser();\n            }\n        });\n    }\n    /**\n     * Starts an ASM customer emulation session.\n     * A customer emulation session is stopped by calling logout().\n     * @param customerId\n     */\n    startCustomerEmulationSession(customerId) {\n        this.authStorageService.clearEmulatedUserToken();\n        // OCC specific user id handling. Customize when implementing different backend\n        this.store.dispatch(new AuthActions.Logout());\n        this.userIdService.setUserId(customerId);\n        this.store.dispatch(new AuthActions.Login());\n    }\n    /**\n     * Check if CS agent is currently logged in.\n     *\n     * @returns observable emitting true when CS agent is logged in or false when not.\n     */\n    isCustomerSupportAgentLoggedIn() {\n        return combineLatest([\n            this.authStorageService.getToken(),\n            this.authStorageService.getTokenTarget(),\n        ]).pipe(map(([token, tokenTarget]) => Boolean((token === null || token === void 0 ? void 0 : token.access_token) && tokenTarget === TokenTarget.CSAgent)));\n    }\n    /**\n     * Utility function to determine if customer is emulated.\n     *\n     * @returns observable emitting true when there is active emulation session or false when not.\n     */\n    isCustomerEmulated() {\n        return this.userIdService.isEmulated();\n    }\n    /**\n     * Returns the customer support agent's token loading status\n     */\n    getCustomerSupportAgentTokenLoading() {\n        // TODO(#8248): Create new loading state outside of store\n        return of(false);\n    }\n    /**\n     * Logout a customer support agent.\n     */\n    logoutCustomerSupportAgent() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const emulatedToken = this.authStorageService.getEmulatedUserToken();\n            let isCustomerEmulated;\n            this.userIdService\n                .isEmulated()\n                .subscribe((emulated) => (isCustomerEmulated = emulated))\n                .unsubscribe();\n            yield this.oAuthLibWrapperService.revokeAndLogout();\n            this.store.dispatch({ type: '[Auth] Logout Customer Support Agent' });\n            this.authStorageService.setTokenTarget(TokenTarget.User);\n            if (isCustomerEmulated && emulatedToken) {\n                this.store.dispatch(new AuthActions.Logout());\n                this.authStorageService.setToken(emulatedToken);\n                this.userIdService.setUserId(OCC_USER_ID_CURRENT);\n                this.authStorageService.clearEmulatedUserToken();\n                this.store.dispatch(new AuthActions.Login());\n            }\n            else {\n                this.authService.logout();\n            }\n        });\n    }\n}\nCsAgentAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CsAgentAuthService, deps: [{ token: i1$1.AuthService }, { token: AsmAuthStorageService }, { token: i1$1.UserIdService }, { token: i1$1.OAuthLibWrapperService }, { token: i3$1.Store }, { token: i1$1.UserService }], target: i0.ɵɵFactoryTarget.Injectable });\nCsAgentAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CsAgentAuthService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CsAgentAuthService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.AuthService }, { type: AsmAuthStorageService }, { type: i1$1.UserIdService }, { type: i1$1.OAuthLibWrapperService }, { type: i3$1.Store }, { type: i1$1.UserService }]; } });\n\n/**\n * Overrides `AuthHttpHeaderService` to handle asm calls as well (not only OCC)\n * in cases of normal user session and on customer emulation.\n */\nclass AsmAuthHttpHeaderService extends AuthHttpHeaderService {\n    constructor(authService, authStorageService, csAgentAuthService, oAuthLibWrapperService, routingService, globalMessageService, occEndpointsService, authRedirectService) {\n        super(authService, authStorageService, oAuthLibWrapperService, routingService, occEndpointsService, globalMessageService, authRedirectService);\n        this.authService = authService;\n        this.authStorageService = authStorageService;\n        this.csAgentAuthService = csAgentAuthService;\n        this.oAuthLibWrapperService = oAuthLibWrapperService;\n        this.routingService = routingService;\n        this.globalMessageService = globalMessageService;\n        this.occEndpointsService = occEndpointsService;\n        this.authRedirectService = authRedirectService;\n    }\n    /**\n     * Checks if the authorization header should be added to the request\n     *\n     *  @override\n     */\n    shouldAddAuthorizationHeader(request) {\n        return (super.shouldAddAuthorizationHeader(request) ||\n            this.isCSAgentTokenRequest(request));\n    }\n    /**\n     * @override\n     *\n     * Checks if particular request should be handled by this service.\n     */\n    shouldCatchError(request) {\n        return (super.shouldCatchError(request) || this.isCSAgentTokenRequest(request));\n    }\n    /**\n     * @override\n     *\n     * Adds `Authorization` header to occ and CS agent requests.\n     * For CS agent requests also removes the `cx-use-csagent-token` header (to avoid problems with CORS).\n     */\n    alterRequest(request, token) {\n        const hasAuthorizationHeader = !!this.getAuthorizationHeader(request);\n        const isCSAgentRequest = this.isCSAgentTokenRequest(request);\n        let req = super.alterRequest(request, token);\n        if (!hasAuthorizationHeader && isCSAgentRequest) {\n            req = request.clone({\n                setHeaders: Object.assign({}, this.createAuthorizationHeader(token)),\n            });\n            return InterceptorUtil.removeHeader(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, req);\n        }\n        return req;\n    }\n    isCSAgentTokenRequest(request) {\n        const isRequestWithCSAgentToken = InterceptorUtil.getInterceptorParam(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, request.headers);\n        return Boolean(isRequestWithCSAgentToken);\n    }\n    /**\n     * @override\n     *\n     * On backend errors indicating expired `refresh_token` we need to logout\n     * currently logged in user and CS agent.\n     */\n    handleExpiredRefreshToken() {\n        this.csAgentAuthService\n            .isCustomerSupportAgentLoggedIn()\n            .pipe(take(1))\n            .subscribe((csAgentLoggedIn) => {\n            if (csAgentLoggedIn) {\n                this.authService.setLogoutProgress(true);\n                this.csAgentAuthService.logoutCustomerSupportAgent();\n                this.globalMessageService.add({\n                    key: 'asm.csagentTokenExpired',\n                }, GlobalMessageType.MSG_TYPE_ERROR);\n            }\n            else {\n                super.handleExpiredRefreshToken();\n            }\n        });\n    }\n}\nAsmAuthHttpHeaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthHttpHeaderService, deps: [{ token: i1$1.AuthService }, { token: i1$1.AuthStorageService }, { token: CsAgentAuthService }, { token: i1$1.OAuthLibWrapperService }, { token: i1$1.RoutingService }, { token: i1$1.GlobalMessageService }, { token: i1$1.OccEndpointsService }, { token: i1$1.AuthRedirectService }], target: i0.ɵɵFactoryTarget.Injectable });\nAsmAuthHttpHeaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthHttpHeaderService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthHttpHeaderService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.AuthService }, { type: i1$1.AuthStorageService }, { type: CsAgentAuthService }, { type: i1$1.OAuthLibWrapperService }, { type: i1$1.RoutingService }, { type: i1$1.GlobalMessageService }, { type: i1$1.OccEndpointsService }, { type: i1$1.AuthRedirectService }]; } });\n\n/**\n * Version of AuthService that is working for both user na CS agent.\n * Overrides AuthService when ASM module is enabled.\n */\nclass AsmAuthService extends AuthService {\n    constructor(store, userIdService, oAuthLibWrapperService, authStorageService, authRedirectService, globalMessageService, routingService) {\n        super(store, userIdService, oAuthLibWrapperService, authStorageService, authRedirectService, routingService);\n        this.store = store;\n        this.userIdService = userIdService;\n        this.oAuthLibWrapperService = oAuthLibWrapperService;\n        this.authStorageService = authStorageService;\n        this.authRedirectService = authRedirectService;\n        this.globalMessageService = globalMessageService;\n        this.routingService = routingService;\n    }\n    canUserLogin() {\n        let tokenTarget;\n        let token;\n        this.authStorageService\n            .getToken()\n            .subscribe((tok) => (token = tok))\n            .unsubscribe();\n        this.authStorageService\n            .getTokenTarget()\n            .subscribe((tokTarget) => (tokenTarget = tokTarget))\n            .unsubscribe();\n        return !(Boolean(token === null || token === void 0 ? void 0 : token.access_token) && tokenTarget === TokenTarget.CSAgent);\n    }\n    warnAboutLoggedCSAgent() {\n        this.globalMessageService.add({\n            key: 'asm.auth.agentLoggedInError',\n        }, GlobalMessageType.MSG_TYPE_ERROR);\n    }\n    /**\n     * Loads a new user token with Resource Owner Password Flow when CS agent is not logged in.\n     * @param userId\n     * @param password\n     */\n    loginWithCredentials(userId, password) {\n        const _super = Object.create(null, {\n            loginWithCredentials: { get: () => super.loginWithCredentials }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.canUserLogin()) {\n                yield _super.loginWithCredentials.call(this, userId, password);\n            }\n            else {\n                this.warnAboutLoggedCSAgent();\n            }\n        });\n    }\n    /**\n     * Initialize Implicit/Authorization Code flow by redirecting to OAuth server when CS agent is not logged in.\n     */\n    loginWithRedirect() {\n        if (this.canUserLogin()) {\n            super.loginWithRedirect();\n            return true;\n        }\n        else {\n            this.warnAboutLoggedCSAgent();\n            return false;\n        }\n    }\n    /**\n     * Revokes tokens and clears state for logged user (tokens, userId).\n     * To perform logout it is best to use `logout` method. Use this method with caution.\n     */\n    coreLogout() {\n        return this.userIdService\n            .isEmulated()\n            .pipe(take(1), switchMap((isEmulated) => {\n            if (isEmulated) {\n                this.authStorageService.clearEmulatedUserToken();\n                this.userIdService.clearUserId();\n                this.store.dispatch(new AuthActions.Logout());\n                return of(true);\n            }\n            else {\n                return from(super.coreLogout());\n            }\n        }))\n            .toPromise();\n    }\n    /**\n     * Returns `true` if user is logged in or being emulated.\n     */\n    isUserLoggedIn() {\n        return combineLatest([\n            this.authStorageService.getToken(),\n            this.userIdService.isEmulated(),\n            this.authStorageService.getTokenTarget(),\n        ]).pipe(map(([token, isEmulated, tokenTarget]) => Boolean(token === null || token === void 0 ? void 0 : token.access_token) &&\n            (tokenTarget === TokenTarget.User ||\n                (tokenTarget === TokenTarget.CSAgent && isEmulated))));\n    }\n}\nAsmAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthService, deps: [{ token: i3$1.Store }, { token: i1$1.UserIdService }, { token: i1$1.OAuthLibWrapperService }, { token: AsmAuthStorageService }, { token: i1$1.AuthRedirectService }, { token: i1$1.GlobalMessageService }, { token: i1$1.RoutingService }], target: i0.ɵɵFactoryTarget.Injectable });\nAsmAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i3$1.Store }, { type: i1$1.UserIdService }, { type: i1$1.OAuthLibWrapperService }, { type: AsmAuthStorageService }, { type: i1$1.AuthRedirectService }, { type: i1$1.GlobalMessageService }, { type: i1$1.RoutingService }]; } });\n\nclass AsmRootModule {\n}\nAsmRootModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmRootModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAsmRootModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmRootModule, imports: [AsmLoaderModule] });\nAsmRootModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmRootModule, providers: [\n        {\n            provide: AuthStorageService,\n            useExisting: AsmAuthStorageService,\n        },\n        {\n            provide: AuthService,\n            useExisting: AsmAuthService,\n        },\n        {\n            provide: AuthHttpHeaderService,\n            useExisting: AsmAuthHttpHeaderService,\n        },\n    ], imports: [[AsmLoaderModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmRootModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [AsmLoaderModule],\n                    providers: [\n                        {\n                            provide: AuthStorageService,\n                            useExisting: AsmAuthStorageService,\n                        },\n                        {\n                            provide: AuthService,\n                            useExisting: AsmAuthService,\n                        },\n                        {\n                            provide: AuthHttpHeaderService,\n                            useExisting: AsmAuthHttpHeaderService,\n                        },\n                    ],\n                }]\n        }] });\n\nconst ASM_FEATURE = 'asm';\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ASM_ENABLED_LOCAL_STORAGE_KEY, ASM_FEATURE, AsmAuthHttpHeaderService, AsmAuthService, AsmAuthStorageService, AsmEnablerService, AsmLoaderModule, AsmRootModule, CsAgentAuthService, TokenTarget, asmFactory };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,iBAAiB;AACrC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,OAAO,KAAKC,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,EAAEC,eAAe,EAAEC,QAAQ,QAAQ,eAAe;AACrE,OAAO,KAAKC,EAAE,MAAM,uBAAuB;AAC3C,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,OAAO,KAAKC,IAAI,MAAM,iBAAiB;AACvC,SAASC,kBAAkB,EAAEC,WAAW,EAAEC,qBAAqB,EAAEC,mBAAmB,EAAEC,qBAAqB,EAAEC,eAAe,EAAEC,gCAAgC,EAAEC,iBAAiB,EAAEC,WAAW,QAAQ,iBAAiB;AACvN,SAASC,GAAG,EAAEC,IAAI,EAAEC,SAAS,QAAQ,gBAAgB;AACrD,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,eAAe,EAAEC,aAAa,EAAEC,EAAE,EAAEC,IAAI,QAAQ,MAAM;AAC/D,OAAO,KAAKC,IAAI,MAAM,aAAa;AAEnC,MAAMC,6BAA6B,GAAG,aAAa;;AAEnD;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;EACpBC,WAAW,CAACC,QAAQ,EAAEC,MAAM,EAAEC,mBAAmB,EAAEC,cAAc,EAAE;IAC/D,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,cAAc,GAAGA,cAAc;EACxC;EACA;AACJ;AACA;AACA;EACIC,IAAI,GAAG;IACH,IAAI,IAAI,CAACC,SAAS,EAAE,EAAE;MAClB,IAAI,CAACC,KAAK,EAAE;IAChB;EACJ;EACA;AACJ;AACA;EACID,SAAS,GAAG;IACR,IAAI,IAAI,CAACE,UAAU,EAAE,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE,EAAE;MAC3C,IAAI,IAAI,CAACP,MAAM,CAACQ,YAAY,EAAE;QAC1B,IAAI,CAACR,MAAM,CAACQ,YAAY,CAACC,OAAO,CAACb,6BAA6B,EAAE,MAAM,CAAC;MAC3E;IACJ;IACA,OAAO,IAAI,CAACU,UAAU,EAAE,IAAI,IAAI,CAACC,YAAY,EAAE;EACnD;EACA;AACJ;AACA;AACA;EACID,UAAU,GAAG;IACT,MAAMI,MAAM,GAAG,IAAI,CAACX,QAAQ,CAACY,IAAI,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACjD,OAAO,CAAC,CAACF,MAAM,IAAIA,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC;EAC7D;EACA;AACJ;AACA;EACIN,YAAY,GAAG;IACX,IAAI,IAAI,CAACP,MAAM,CAACQ,YAAY,EAAE;MAC1B,OAAQ,IAAI,CAACR,MAAM,CAACQ,YAAY,CAACM,OAAO,CAAClB,6BAA6B,CAAC,KACnE,MAAM;IACd,CAAC,MACI;MACD,OAAO,KAAK;IAChB;EACJ;EACA;AACJ;AACA;EACIS,KAAK,GAAG;IACJ,IAAI,CAACH,cAAc,CACda,cAAc,CAAC,KAAK,CAAC,CACrBC,SAAS,CAAC,MAAM,IAAI,CAACf,mBAAmB,CAACgB,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC;EAC1E;AACJ;;AACApB,iBAAiB,CAACqB,IAAI;EAAA,iBAAwFrB,iBAAiB,EAA3B1B,EAAE,UAA2CF,EAAE,CAACkD,QAAQ,GAAxDhD,EAAE,UAAmEM,IAAI,CAAC2C,SAAS,GAAnFjD,EAAE,UAA8FI,EAAE,CAAC8C,mBAAmB,GAAtHlD,EAAE,UAAiIM,IAAI,CAAC6C,qBAAqB;AAAA,CAA6C;AAC9SzB,iBAAiB,CAAC0B,KAAK,kBAD6EpD,EAAE;EAAA,OACY0B,iBAAiB;EAAA,SAAjBA,iBAAiB;EAAA,YAAc;AAAM,EAAG;AAC1J;EAAA,mDAFoG1B,EAAE,mBAEX0B,iBAAiB,EAAc,CAAC;IAC/G2B,IAAI,EAAEpD,UAAU;IAChBqD,IAAI,EAAE,CAAC;MACCC,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEF,IAAI,EAAEvD,EAAE,CAACkD;IAAS,CAAC,EAAE;MAAEK,IAAI,EAAE/C,IAAI,CAAC2C;IAAU,CAAC,EAAE;MAAEI,IAAI,EAAEjD,EAAE,CAAC8C;IAAoB,CAAC,EAAE;MAAEG,IAAI,EAAE/C,IAAI,CAAC6C;IAAsB,CAAC,CAAC;EAAE,CAAC;AAAA;;AAE7K;AACA;AACA;AACA;AACA,MAAMK,eAAe,CAAC;AAEtBA,eAAe,CAACT,IAAI;EAAA,iBAAwFS,eAAe;AAAA,CAAkD;AAC7KA,eAAe,CAACC,IAAI,kBAhBgFzD,EAAE;EAAA,MAgBOwD;AAAe,EAAiD;AAC7KA,eAAe,CAACE,IAAI,kBAjBgF1D,EAAE;EAAA,WAiBmC,CACjI;IACI2D,OAAO,EAAEzD,eAAe;IACxB0D,UAAU,EAAEC,UAAU;IACtBC,IAAI,EAAE,CAACpC,iBAAiB,CAAC;IACzBqC,KAAK,EAAE;EACX,CAAC,CACJ;EAAA,UAAY,CAAChE,YAAY,EAAEM,mBAAmB,CAAC;AAAA,EAAI;AACxD;EAAA,mDAzBoGL,EAAE,mBAyBXwD,eAAe,EAAc,CAAC;IAC7GH,IAAI,EAAElD,QAAQ;IACdmD,IAAI,EAAE,CAAC;MACCU,OAAO,EAAE,CAACjE,YAAY,EAAEM,mBAAmB,CAAC;MAC5C4D,SAAS,EAAE,CACP;QACIN,OAAO,EAAEzD,eAAe;QACxB0D,UAAU,EAAEC,UAAU;QACtBC,IAAI,EAAE,CAACpC,iBAAiB,CAAC;QACzBqC,KAAK,EAAE;MACX,CAAC;IAET,CAAC;EACT,CAAC,CAAC;AAAA;AACV;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,UAAU,CAACK,iBAAiB,EAAE;EACnC,MAAMC,OAAO,GAAG,MAAM;IAClBD,iBAAiB,CAAClC,IAAI,EAAE;EAC5B,CAAC;EACD,OAAOmC,OAAO;AAClB;;AAEA;AACA;AACA;AACA,IAAIC,WAAW;AACf,CAAC,UAAUA,WAAW,EAAE;EACpBA,WAAW,CAAC,SAAS,CAAC,GAAG,SAAS;EAClCA,WAAW,CAAC,MAAM,CAAC,GAAG,MAAM;AAChC,CAAC,EAAEA,WAAW,KAAKA,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,SAAS9D,kBAAkB,CAAC;EACnDoB,WAAW,GAAG;IACV,KAAK,CAAC,GAAG2C,SAAS,CAAC;IACnB,IAAI,CAACC,aAAa,GAAG,IAAInD,eAAe,CAACgD,WAAW,CAACI,IAAI,CAAC;EAC9D;EACA;AACJ;AACA;AACA;AACA;EACIC,cAAc,GAAG;IACb,OAAO,IAAI,CAACF,aAAa;EAC7B;EACA;AACJ;AACA;AACA;AACA;EACIG,cAAc,CAACC,WAAW,EAAE;IACxB,IAAI,CAACJ,aAAa,CAACK,IAAI,CAACD,WAAW,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;EACIE,oBAAoB,GAAG;IACnB,OAAO,IAAI,CAACC,iBAAiB;EACjC;EACA;AACJ;AACA;AACA;AACA;EACIC,oBAAoB,CAACC,KAAK,EAAE;IACxB,IAAI,CAACF,iBAAiB,GAAGE,KAAK;EAClC;EACA;AACJ;AACA;EACIC,0BAA0B,GAAG;IACzB,IAAI,CAACV,aAAa,CAACK,IAAI,CAACR,WAAW,CAACc,OAAO,CAAC;EAChD;EACA;AACJ;AACA;EACIC,uBAAuB,GAAG;IACtB,IAAI,CAACZ,aAAa,CAACK,IAAI,CAACR,WAAW,CAACI,IAAI,CAAC;EAC7C;EACA;AACJ;AACA;AACA;EACIY,sBAAsB,GAAG;IACrB,IAAI,CAACN,iBAAiB,GAAGO,SAAS;EACtC;AACJ;AACAhB,qBAAqB,CAACtB,IAAI;EAAA;EAAA;IAAA,oFA3H0E/C,EAAE,uBA2HYqE,qBAAqB,SAArBA,qBAAqB;EAAA;AAAA,GAAsD;AAC7LA,qBAAqB,CAACjB,KAAK,kBA5HyEpD,EAAE;EAAA,OA4HgBqE,qBAAqB;EAAA,SAArBA,qBAAqB;EAAA,YAAc;AAAM,EAAG;AAClK;EAAA,mDA7HoGrE,EAAE,mBA6HXqE,qBAAqB,EAAc,CAAC;IACnHhB,IAAI,EAAEpD,UAAU;IAChBqD,IAAI,EAAE,CAAC;MACCC,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA;AACA,MAAM+B,kBAAkB,CAAC;EACrB3D,WAAW,CAAC4D,WAAW,EAAEC,kBAAkB,EAAEC,aAAa,EAAEC,sBAAsB,EAAEC,KAAK,EAAEC,WAAW,EAAE;IACpG,IAAI,CAACL,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,sBAAsB,GAAGA,sBAAsB;IACpD,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EACA;AACJ;AACA;AACA;AACA;EACIC,6BAA6B,CAACC,MAAM,EAAEC,QAAQ,EAAE;IAC5C,OAAO5E,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAI6E,SAAS;MACb,IAAI,CAACR,kBAAkB,CAClBS,QAAQ,EAAE,CACVpD,SAAS,CAAEmC,KAAK,IAAMgB,SAAS,GAAGhB,KAAM,CAAC,CACzCkB,WAAW,EAAE;MAClB,IAAI,CAACV,kBAAkB,CAACP,0BAA0B,EAAE;MACpD,IAAI;QACA,MAAM,IAAI,CAACS,sBAAsB,CAACS,yBAAyB,CAACL,MAAM,EAAEC,QAAQ,CAAC;QAC7E;QACA,IAAIK,UAAU;QACd,IAAI,CAACR,WAAW,CACXS,GAAG,EAAE,CACLxD,SAAS,CAAEyD,IAAI,IAAMF,UAAU,GAAGE,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACF,UAAW,CAAC,CAC/FF,WAAW,EAAE;QAClB,IAAI,CAACP,KAAK,CAACY,QAAQ,CAAC,IAAI/F,WAAW,CAACgG,MAAM,EAAE,CAAC;QAC7C,IAAIJ,UAAU,KAAKf,SAAS,IAAIW,SAAS,KAAKX,SAAS,EAAE;UACrD;UACA,IAAI,CAACI,aAAa,CAACgB,SAAS,CAACL,UAAU,CAAC;UACxC,IAAI,CAACZ,kBAAkB,CAACT,oBAAoB,CAACiB,SAAS,CAAC;UACvD,IAAI,CAACL,KAAK,CAACY,QAAQ,CAAC,IAAI/F,WAAW,CAACkG,KAAK,EAAE,CAAC;QAChD,CAAC,MACI;UACD;UACA,IAAI,CAACjB,aAAa,CAACgB,SAAS,CAAChG,qBAAqB,CAAC;UACnD,IAAI,CAAC+E,kBAAkB,CAACJ,sBAAsB,EAAE;QACpD;MACJ,CAAC,CACD,OAAOuB,EAAE,EAAE;QACP,IAAI,CAACnB,kBAAkB,CAACL,uBAAuB,EAAE;MACrD;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;EACIyB,6BAA6B,CAACR,UAAU,EAAE;IACtC,IAAI,CAACZ,kBAAkB,CAACJ,sBAAsB,EAAE;IAChD;IACA,IAAI,CAACO,KAAK,CAACY,QAAQ,CAAC,IAAI/F,WAAW,CAACgG,MAAM,EAAE,CAAC;IAC7C,IAAI,CAACf,aAAa,CAACgB,SAAS,CAACL,UAAU,CAAC;IACxC,IAAI,CAACT,KAAK,CAACY,QAAQ,CAAC,IAAI/F,WAAW,CAACkG,KAAK,EAAE,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;EACIG,8BAA8B,GAAG;IAC7B,OAAOxF,aAAa,CAAC,CACjB,IAAI,CAACmE,kBAAkB,CAACS,QAAQ,EAAE,EAClC,IAAI,CAACT,kBAAkB,CAACf,cAAc,EAAE,CAC3C,CAAC,CAACqC,IAAI,CAAC9F,GAAG,CAAC,CAAC,CAACgE,KAAK,EAAEL,WAAW,CAAC,KAAKoC,OAAO,CAAC,CAAC/B,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACgC,YAAY,KAAKrC,WAAW,KAAKP,WAAW,CAACc,OAAO,CAAC,CAAC,CAAC;EAC9J;EACA;AACJ;AACA;AACA;AACA;EACI+B,kBAAkB,GAAG;IACjB,OAAO,IAAI,CAACxB,aAAa,CAACyB,UAAU,EAAE;EAC1C;EACA;AACJ;AACA;EACIC,mCAAmC,GAAG;IAClC;IACA,OAAO7F,EAAE,CAAC,KAAK,CAAC;EACpB;EACA;AACJ;AACA;EACI8F,0BAA0B,GAAG;IACzB,OAAOjG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAMkG,aAAa,GAAG,IAAI,CAAC7B,kBAAkB,CAACX,oBAAoB,EAAE;MACpE,IAAIoC,kBAAkB;MACtB,IAAI,CAACxB,aAAa,CACbyB,UAAU,EAAE,CACZrE,SAAS,CAAEyE,QAAQ,IAAML,kBAAkB,GAAGK,QAAS,CAAC,CACxDpB,WAAW,EAAE;MAClB,MAAM,IAAI,CAACR,sBAAsB,CAAC6B,eAAe,EAAE;MACnD,IAAI,CAAC5B,KAAK,CAACY,QAAQ,CAAC;QAAElD,IAAI,EAAE;MAAuC,CAAC,CAAC;MACrE,IAAI,CAACmC,kBAAkB,CAACd,cAAc,CAACN,WAAW,CAACI,IAAI,CAAC;MACxD,IAAIyC,kBAAkB,IAAII,aAAa,EAAE;QACrC,IAAI,CAAC1B,KAAK,CAACY,QAAQ,CAAC,IAAI/F,WAAW,CAACgG,MAAM,EAAE,CAAC;QAC7C,IAAI,CAAChB,kBAAkB,CAACgC,QAAQ,CAACH,aAAa,CAAC;QAC/C,IAAI,CAAC5B,aAAa,CAACgB,SAAS,CAAC/F,mBAAmB,CAAC;QACjD,IAAI,CAAC8E,kBAAkB,CAACJ,sBAAsB,EAAE;QAChD,IAAI,CAACO,KAAK,CAACY,QAAQ,CAAC,IAAI/F,WAAW,CAACkG,KAAK,EAAE,CAAC;MAChD,CAAC,MACI;QACD,IAAI,CAACnB,WAAW,CAACkC,MAAM,EAAE;MAC7B;IACJ,CAAC,CAAC;EACN;AACJ;AACAnC,kBAAkB,CAACvC,IAAI;EAAA,iBAAwFuC,kBAAkB,EAzP7BtF,EAAE,UAyP6CM,IAAI,CAACS,WAAW,GAzP/Df,EAAE,UAyP0EqE,qBAAqB,GAzPjGrE,EAAE,UAyP4GM,IAAI,CAACoH,aAAa,GAzPhI1H,EAAE,UAyP2IM,IAAI,CAACqH,sBAAsB,GAzPxK3H,EAAE,UAyPmLwB,IAAI,CAACoG,KAAK,GAzP/L5H,EAAE,UAyP0MM,IAAI,CAACuH,WAAW;AAAA,CAA6C;AAC7WvC,kBAAkB,CAAClC,KAAK,kBA1P4EpD,EAAE;EAAA,OA0PasF,kBAAkB;EAAA,SAAlBA,kBAAkB;EAAA,YAAc;AAAM,EAAG;AAC5J;EAAA,mDA3PoGtF,EAAE,mBA2PXsF,kBAAkB,EAAc,CAAC;IAChHjC,IAAI,EAAEpD,UAAU;IAChBqD,IAAI,EAAE,CAAC;MACCC,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEF,IAAI,EAAE/C,IAAI,CAACS;IAAY,CAAC,EAAE;MAAEsC,IAAI,EAAEgB;IAAsB,CAAC,EAAE;MAAEhB,IAAI,EAAE/C,IAAI,CAACoH;IAAc,CAAC,EAAE;MAAErE,IAAI,EAAE/C,IAAI,CAACqH;IAAuB,CAAC,EAAE;MAAEtE,IAAI,EAAE7B,IAAI,CAACoG;IAAM,CAAC,EAAE;MAAEvE,IAAI,EAAE/C,IAAI,CAACuH;IAAY,CAAC,CAAC;EAAE,CAAC;AAAA;;AAExO;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,SAASnH,qBAAqB,CAAC;EACzDgB,WAAW,CAAC4D,WAAW,EAAEC,kBAAkB,EAAEuC,kBAAkB,EAAErC,sBAAsB,EAAEsC,cAAc,EAAEC,oBAAoB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAE;IACrK,KAAK,CAAC5C,WAAW,EAAEC,kBAAkB,EAAEE,sBAAsB,EAAEsC,cAAc,EAAEE,mBAAmB,EAAED,oBAAoB,EAAEE,mBAAmB,CAAC;IAC9I,IAAI,CAAC5C,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACuC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACrC,sBAAsB,GAAGA,sBAAsB;IACpD,IAAI,CAACsC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;EAClD;EACA;AACJ;AACA;AACA;AACA;EACIC,4BAA4B,CAACC,OAAO,EAAE;IAClC,OAAQ,KAAK,CAACD,4BAA4B,CAACC,OAAO,CAAC,IAC/C,IAAI,CAACC,qBAAqB,CAACD,OAAO,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;EACIE,gBAAgB,CAACF,OAAO,EAAE;IACtB,OAAQ,KAAK,CAACE,gBAAgB,CAACF,OAAO,CAAC,IAAI,IAAI,CAACC,qBAAqB,CAACD,OAAO,CAAC;EAClF;EACA;AACJ;AACA;AACA;AACA;AACA;EACIG,YAAY,CAACH,OAAO,EAAErD,KAAK,EAAE;IACzB,MAAMyD,sBAAsB,GAAG,CAAC,CAAC,IAAI,CAACC,sBAAsB,CAACL,OAAO,CAAC;IACrE,MAAMM,gBAAgB,GAAG,IAAI,CAACL,qBAAqB,CAACD,OAAO,CAAC;IAC5D,IAAIO,GAAG,GAAG,KAAK,CAACJ,YAAY,CAACH,OAAO,EAAErD,KAAK,CAAC;IAC5C,IAAI,CAACyD,sBAAsB,IAAIE,gBAAgB,EAAE;MAC7CC,GAAG,GAAGP,OAAO,CAACQ,KAAK,CAAC;QAChBC,UAAU,EAAEC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACC,yBAAyB,CAACjE,KAAK,CAAC;MACvE,CAAC,CAAC;MACF,OAAOpE,eAAe,CAACsI,YAAY,CAACrI,gCAAgC,EAAE+H,GAAG,CAAC;IAC9E;IACA,OAAOA,GAAG;EACd;EACAN,qBAAqB,CAACD,OAAO,EAAE;IAC3B,MAAMc,yBAAyB,GAAGvI,eAAe,CAACwI,mBAAmB,CAACvI,gCAAgC,EAAEwH,OAAO,CAACgB,OAAO,CAAC;IACxH,OAAOtC,OAAO,CAACoC,yBAAyB,CAAC;EAC7C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIG,yBAAyB,GAAG;IACxB,IAAI,CAACvB,kBAAkB,CAClBlB,8BAA8B,EAAE,CAChCC,IAAI,CAAC7F,IAAI,CAAC,CAAC,CAAC,CAAC,CACb4B,SAAS,CAAE0G,eAAe,IAAK;MAChC,IAAIA,eAAe,EAAE;QACjB,IAAI,CAAChE,WAAW,CAACiE,iBAAiB,CAAC,IAAI,CAAC;QACxC,IAAI,CAACzB,kBAAkB,CAACX,0BAA0B,EAAE;QACpD,IAAI,CAACa,oBAAoB,CAACwB,GAAG,CAAC;UAC1BC,GAAG,EAAE;QACT,CAAC,EAAE5I,iBAAiB,CAAC6I,cAAc,CAAC;MACxC,CAAC,MACI;QACD,KAAK,CAACL,yBAAyB,EAAE;MACrC;IACJ,CAAC,CAAC;EACN;AACJ;AACAxB,wBAAwB,CAAC/E,IAAI;EAAA,iBAAwF+E,wBAAwB,EAjVzC9H,EAAE,UAiVyDM,IAAI,CAACS,WAAW,GAjV3Ef,EAAE,UAiVsFM,IAAI,CAACC,kBAAkB,GAjV/GP,EAAE,UAiV0HsF,kBAAkB,GAjV9ItF,EAAE,UAiVyJM,IAAI,CAACqH,sBAAsB,GAjVtL3H,EAAE,UAiViMM,IAAI,CAACsJ,cAAc,GAjVtN5J,EAAE,UAiViOM,IAAI,CAACuJ,oBAAoB,GAjV5P7J,EAAE,UAiVuQM,IAAI,CAACwJ,mBAAmB,GAjVjS9J,EAAE,UAiV4SM,IAAI,CAACyJ,mBAAmB;AAAA,CAA6C;AACvdjC,wBAAwB,CAAC1E,KAAK,kBAlVsEpD,EAAE;EAAA,OAkVmB8H,wBAAwB;EAAA,SAAxBA,wBAAwB;EAAA,YAAc;AAAM,EAAG;AACxK;EAAA,mDAnVoG9H,EAAE,mBAmVX8H,wBAAwB,EAAc,CAAC;IACtHzE,IAAI,EAAEpD,UAAU;IAChBqD,IAAI,EAAE,CAAC;MACCC,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEF,IAAI,EAAE/C,IAAI,CAACS;IAAY,CAAC,EAAE;MAAEsC,IAAI,EAAE/C,IAAI,CAACC;IAAmB,CAAC,EAAE;MAAE8C,IAAI,EAAEiC;IAAmB,CAAC,EAAE;MAAEjC,IAAI,EAAE/C,IAAI,CAACqH;IAAuB,CAAC,EAAE;MAAEtE,IAAI,EAAE/C,IAAI,CAACsJ;IAAe,CAAC,EAAE;MAAEvG,IAAI,EAAE/C,IAAI,CAACuJ;IAAqB,CAAC,EAAE;MAAExG,IAAI,EAAE/C,IAAI,CAACwJ;IAAoB,CAAC,EAAE;MAAEzG,IAAI,EAAE/C,IAAI,CAACyJ;IAAoB,CAAC,CAAC;EAAE,CAAC;AAAA;;AAEpU;AACA;AACA;AACA;AACA,MAAMC,cAAc,SAASjJ,WAAW,CAAC;EACrCY,WAAW,CAACgE,KAAK,EAAEF,aAAa,EAAEC,sBAAsB,EAAEF,kBAAkB,EAAE2C,mBAAmB,EAAEF,oBAAoB,EAAED,cAAc,EAAE;IACrI,KAAK,CAACrC,KAAK,EAAEF,aAAa,EAAEC,sBAAsB,EAAEF,kBAAkB,EAAE2C,mBAAmB,EAAEH,cAAc,CAAC;IAC5G,IAAI,CAACrC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACF,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,sBAAsB,GAAGA,sBAAsB;IACpD,IAAI,CAACF,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAAC2C,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACF,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACD,cAAc,GAAGA,cAAc;EACxC;EACAiC,YAAY,GAAG;IACX,IAAItF,WAAW;IACf,IAAIK,KAAK;IACT,IAAI,CAACQ,kBAAkB,CAClBS,QAAQ,EAAE,CACVpD,SAAS,CAAEqH,GAAG,IAAMlF,KAAK,GAAGkF,GAAI,CAAC,CACjChE,WAAW,EAAE;IAClB,IAAI,CAACV,kBAAkB,CAClBf,cAAc,EAAE,CAChB5B,SAAS,CAAEsH,SAAS,IAAMxF,WAAW,GAAGwF,SAAU,CAAC,CACnDjE,WAAW,EAAE;IAClB,OAAO,EAAEa,OAAO,CAAC/B,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACgC,YAAY,CAAC,IAAIrC,WAAW,KAAKP,WAAW,CAACc,OAAO,CAAC;EAC9H;EACAkF,sBAAsB,GAAG;IACrB,IAAI,CAACnC,oBAAoB,CAACwB,GAAG,CAAC;MAC1BC,GAAG,EAAE;IACT,CAAC,EAAE5I,iBAAiB,CAAC6I,cAAc,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;EACIU,oBAAoB,CAACvE,MAAM,EAAEC,QAAQ,EAAE;IACnC,MAAMuE,MAAM,GAAGvB,MAAM,CAACwB,MAAM,CAAC,IAAI,EAAE;MAC/BF,oBAAoB,EAAE;QAAEhE,GAAG,EAAE,MAAM,KAAK,CAACgE;MAAqB;IAClE,CAAC,CAAC;IACF,OAAOlJ,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAI,IAAI,CAAC8I,YAAY,EAAE,EAAE;QACrB,MAAMK,MAAM,CAACD,oBAAoB,CAACG,IAAI,CAAC,IAAI,EAAE1E,MAAM,EAAEC,QAAQ,CAAC;MAClE,CAAC,MACI;QACD,IAAI,CAACqE,sBAAsB,EAAE;MACjC;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACIK,iBAAiB,GAAG;IAChB,IAAI,IAAI,CAACR,YAAY,EAAE,EAAE;MACrB,KAAK,CAACQ,iBAAiB,EAAE;MACzB,OAAO,IAAI;IACf,CAAC,MACI;MACD,IAAI,CAACL,sBAAsB,EAAE;MAC7B,OAAO,KAAK;IAChB;EACJ;EACA;AACJ;AACA;AACA;EACIM,UAAU,GAAG;IACT,OAAO,IAAI,CAACjF,aAAa,CACpByB,UAAU,EAAE,CACZJ,IAAI,CAAC7F,IAAI,CAAC,CAAC,CAAC,EAAEC,SAAS,CAAEgG,UAAU,IAAK;MACzC,IAAIA,UAAU,EAAE;QACZ,IAAI,CAAC1B,kBAAkB,CAACJ,sBAAsB,EAAE;QAChD,IAAI,CAACK,aAAa,CAACkF,WAAW,EAAE;QAChC,IAAI,CAAChF,KAAK,CAACY,QAAQ,CAAC,IAAI/F,WAAW,CAACgG,MAAM,EAAE,CAAC;QAC7C,OAAOlF,EAAE,CAAC,IAAI,CAAC;MACnB,CAAC,MACI;QACD,OAAOC,IAAI,CAAC,KAAK,CAACmJ,UAAU,EAAE,CAAC;MACnC;IACJ,CAAC,CAAC,CAAC,CACEE,SAAS,EAAE;EACpB;EACA;AACJ;AACA;EACIC,cAAc,GAAG;IACb,OAAOxJ,aAAa,CAAC,CACjB,IAAI,CAACmE,kBAAkB,CAACS,QAAQ,EAAE,EAClC,IAAI,CAACR,aAAa,CAACyB,UAAU,EAAE,EAC/B,IAAI,CAAC1B,kBAAkB,CAACf,cAAc,EAAE,CAC3C,CAAC,CAACqC,IAAI,CAAC9F,GAAG,CAAC,CAAC,CAACgE,KAAK,EAAEkC,UAAU,EAAEvC,WAAW,CAAC,KAAKoC,OAAO,CAAC/B,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACgC,YAAY,CAAC,KACtHrC,WAAW,KAAKP,WAAW,CAACI,IAAI,IAC5BG,WAAW,KAAKP,WAAW,CAACc,OAAO,IAAIgC,UAAW,CAAC,CAAC,CAAC;EAClE;AACJ;AACA8C,cAAc,CAACjH,IAAI;EAAA,iBAAwFiH,cAAc,EA3brBhK,EAAE,UA2bqCwB,IAAI,CAACoG,KAAK,GA3bjD5H,EAAE,UA2b4DM,IAAI,CAACoH,aAAa,GA3bhF1H,EAAE,UA2b2FM,IAAI,CAACqH,sBAAsB,GA3bxH3H,EAAE,UA2bmIqE,qBAAqB,GA3b1JrE,EAAE,UA2bqKM,IAAI,CAACyJ,mBAAmB,GA3b/L/J,EAAE,UA2b0MM,IAAI,CAACuJ,oBAAoB,GA3brO7J,EAAE,UA2bgPM,IAAI,CAACsJ,cAAc;AAAA,CAA6C;AACtZI,cAAc,CAAC5G,KAAK,kBA5bgFpD,EAAE;EAAA,OA4bSgK,cAAc;EAAA,SAAdA,cAAc;EAAA,YAAc;AAAM,EAAG;AACpJ;EAAA,mDA7boGhK,EAAE,mBA6bXgK,cAAc,EAAc,CAAC;IAC5G3G,IAAI,EAAEpD,UAAU;IAChBqD,IAAI,EAAE,CAAC;MACCC,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEF,IAAI,EAAE7B,IAAI,CAACoG;IAAM,CAAC,EAAE;MAAEvE,IAAI,EAAE/C,IAAI,CAACoH;IAAc,CAAC,EAAE;MAAErE,IAAI,EAAE/C,IAAI,CAACqH;IAAuB,CAAC,EAAE;MAAEtE,IAAI,EAAEgB;IAAsB,CAAC,EAAE;MAAEhB,IAAI,EAAE/C,IAAI,CAACyJ;IAAoB,CAAC,EAAE;MAAE1G,IAAI,EAAE/C,IAAI,CAACuJ;IAAqB,CAAC,EAAE;MAAExG,IAAI,EAAE/C,IAAI,CAACsJ;IAAe,CAAC,CAAC;EAAE,CAAC;AAAA;AAExR,MAAMkB,aAAa,CAAC;AAEpBA,aAAa,CAAC/H,IAAI;EAAA,iBAAwF+H,aAAa;AAAA,CAAkD;AACzKA,aAAa,CAACrH,IAAI,kBAvckFzD,EAAE;EAAA,MAucK8K;AAAa,EAA+B;AACvJA,aAAa,CAACpH,IAAI,kBAxckF1D,EAAE;EAAA,WAwc+B,CAC7H;IACI2D,OAAO,EAAEpD,kBAAkB;IAC3BwK,WAAW,EAAE1G;EACjB,CAAC,EACD;IACIV,OAAO,EAAE5C,WAAW;IACpBgK,WAAW,EAAEf;EACjB,CAAC,EACD;IACIrG,OAAO,EAAEhD,qBAAqB;IAC9BoK,WAAW,EAAEjD;EACjB,CAAC,CACJ;EAAA,UAAY,CAACtE,eAAe,CAAC;AAAA,EAAI;AACtC;EAAA,mDAtdoGxD,EAAE,mBAsdX8K,aAAa,EAAc,CAAC;IAC3GzH,IAAI,EAAElD,QAAQ;IACdmD,IAAI,EAAE,CAAC;MACCU,OAAO,EAAE,CAACR,eAAe,CAAC;MAC1BS,SAAS,EAAE,CACP;QACIN,OAAO,EAAEpD,kBAAkB;QAC3BwK,WAAW,EAAE1G;MACjB,CAAC,EACD;QACIV,OAAO,EAAE5C,WAAW;QACpBgK,WAAW,EAAEf;MACjB,CAAC,EACD;QACIrG,OAAO,EAAEhD,qBAAqB;QAC9BoK,WAAW,EAAEjD;MACjB,CAAC;IAET,CAAC;EACT,CAAC,CAAC;AAAA;AAEV,MAAMkD,WAAW,GAAG,KAAK;;AAEzB;AACA;AACA;;AAEA,SAASvJ,6BAA6B,EAAEuJ,WAAW,EAAElD,wBAAwB,EAAEkC,cAAc,EAAE3F,qBAAqB,EAAE3C,iBAAiB,EAAE8B,eAAe,EAAEsH,aAAa,EAAExF,kBAAkB,EAAElB,WAAW,EAAEP,UAAU"},"metadata":{},"sourceType":"module"}