{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, PLATFORM_ID, Inject, NgModule } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { Config, StateUtils, GlobalMessageType, SiteContextActions, normalizeHttpError, provideDefaultConfig } from '@spartacus/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i1 from '@ngrx/store';\nimport { createFeatureSelector, createSelector, select, StoreModule } from '@ngrx/store';\nimport { Subscription, of } from 'rxjs';\nimport { map, filter, withLatestFrom, mergeMap, catchError, switchMap } from 'rxjs/operators';\nimport * as i1$1 from '@ngrx/effects';\nimport { ofType, Effect, EffectsModule } from '@ngrx/effects';\nimport { __decorate } from 'tslib';\nlet StoreFinderConfig = /*#__PURE__*/(() => {\n  class StoreFinderConfig {}\n  StoreFinderConfig.ɵfac = function StoreFinderConfig_Factory(t) {\n    return new (t || StoreFinderConfig)();\n  };\n  StoreFinderConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StoreFinderConfig,\n    factory: function StoreFinderConfig_Factory(t) {\n      let r = null;\n      if (t) {\n        r = new (t || StoreFinderConfig)();\n      } else {\n        r = i0.ɵɵinject(Config);\n      }\n      return r;\n    },\n    providedIn: 'root'\n  });\n  return StoreFinderConfig;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass StoreFinderAdapter {}\nlet StoreFinderConnector = /*#__PURE__*/(() => {\n  class StoreFinderConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    search(query, searchConfig, longitudeLatitude, radius) {\n      return this.adapter.search(query, searchConfig, longitudeLatitude, radius);\n    }\n    getCounts() {\n      return this.adapter.loadCounts();\n    }\n    get(storeId) {\n      return this.adapter.load(storeId);\n    }\n  }\n  StoreFinderConnector.ɵfac = function StoreFinderConnector_Factory(t) {\n    return new (t || StoreFinderConnector)(i0.ɵɵinject(StoreFinderAdapter));\n  };\n  StoreFinderConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StoreFinderConnector,\n    factory: StoreFinderConnector.ɵfac,\n    providedIn: 'root'\n  });\n  return StoreFinderConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken('StoreFinderSearchPageNormalizer');\nconst STORE_COUNT_NORMALIZER = new InjectionToken('StoreCountNormalizer');\nconst STORE_FINDER_FEATURE = 'stores';\nconst STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\nconst FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nconst FIND_STORES = '[StoreFinder] Find Stores';\nconst FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nconst FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\nconst FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nconst FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nconst FIND_STORE_BY_ID_SUCCESS = '[StoreFinder] Find a Store by Id Success';\nclass FindStoresOnHold extends StateUtils.LoaderLoadAction {\n  constructor() {\n    super(STORE_FINDER_DATA);\n    this.type = FIND_STORES_ON_HOLD;\n  }\n}\nclass FindStores extends StateUtils.LoaderLoadAction {\n  constructor(payload) {\n    super(STORE_FINDER_DATA);\n    this.payload = payload;\n    this.type = FIND_STORES;\n  }\n}\nclass FindStoresFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(STORE_FINDER_DATA, payload);\n    this.payload = payload;\n    this.type = FIND_STORES_FAIL;\n  }\n}\nclass FindStoresSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(STORE_FINDER_DATA);\n    this.payload = payload;\n    this.type = FIND_STORES_SUCCESS;\n  }\n}\nclass FindStoreById extends StateUtils.LoaderLoadAction {\n  constructor(payload) {\n    super(STORE_FINDER_DATA);\n    this.payload = payload;\n    this.type = FIND_STORE_BY_ID;\n  }\n}\nclass FindStoreByIdFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(STORE_FINDER_DATA, payload);\n    this.payload = payload;\n    this.type = FIND_STORE_BY_ID_FAIL;\n  }\n}\nclass FindStoreByIdSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(STORE_FINDER_DATA);\n    this.payload = payload;\n    this.type = FIND_STORE_BY_ID_SUCCESS;\n  }\n}\nconst VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nconst VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nconst VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\nconst CLEAR_STORE_FINDER_DATA = '[StoreFinder] Clear Data';\nclass ViewAllStores extends StateUtils.LoaderLoadAction {\n  constructor() {\n    super(STORE_FINDER_DATA);\n    this.type = VIEW_ALL_STORES;\n  }\n}\nclass ViewAllStoresFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(STORE_FINDER_DATA, payload);\n    this.payload = payload;\n    this.type = VIEW_ALL_STORES_FAIL;\n  }\n}\nclass ViewAllStoresSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(STORE_FINDER_DATA);\n    this.payload = payload;\n    this.type = VIEW_ALL_STORES_SUCCESS;\n  }\n}\nclass ClearStoreFinderData {\n  constructor() {\n    this.type = CLEAR_STORE_FINDER_DATA;\n  }\n}\nvar storeFinderGroup_actions = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  FIND_STORES_ON_HOLD: FIND_STORES_ON_HOLD,\n  FIND_STORES: FIND_STORES,\n  FIND_STORES_FAIL: FIND_STORES_FAIL,\n  FIND_STORES_SUCCESS: FIND_STORES_SUCCESS,\n  FIND_STORE_BY_ID: FIND_STORE_BY_ID,\n  FIND_STORE_BY_ID_FAIL: FIND_STORE_BY_ID_FAIL,\n  FIND_STORE_BY_ID_SUCCESS: FIND_STORE_BY_ID_SUCCESS,\n  FindStoresOnHold: FindStoresOnHold,\n  FindStores: FindStores,\n  FindStoresFail: FindStoresFail,\n  FindStoresSuccess: FindStoresSuccess,\n  FindStoreById: FindStoreById,\n  FindStoreByIdFail: FindStoreByIdFail,\n  FindStoreByIdSuccess: FindStoreByIdSuccess,\n  VIEW_ALL_STORES: VIEW_ALL_STORES,\n  VIEW_ALL_STORES_FAIL: VIEW_ALL_STORES_FAIL,\n  VIEW_ALL_STORES_SUCCESS: VIEW_ALL_STORES_SUCCESS,\n  CLEAR_STORE_FINDER_DATA: CLEAR_STORE_FINDER_DATA,\n  ViewAllStores: ViewAllStores,\n  ViewAllStoresFail: ViewAllStoresFail,\n  ViewAllStoresSuccess: ViewAllStoresSuccess,\n  ClearStoreFinderData: ClearStoreFinderData\n});\nconst getStoreFinderState = createFeatureSelector(STORE_FINDER_FEATURE);\nconst getFindStoresState = createSelector(getStoreFinderState, storesState => storesState.findStores);\nconst getFindStoresEntities = createSelector(getFindStoresState, state => StateUtils.loaderValueSelector(state));\nconst getStoresLoading = createSelector(getFindStoresState, state => StateUtils.loaderLoadingSelector(state));\nconst getStoresSuccess = createSelector(getFindStoresState, state => StateUtils.loaderSuccessSelector(state));\nconst getViewAllStoresState = createSelector(getStoreFinderState, storesState => storesState.viewAllStores);\nconst getViewAllStoresEntities = createSelector(getViewAllStoresState, state => StateUtils.loaderValueSelector(state));\nconst getViewAllStoresLoading = createSelector(getViewAllStoresState, state => StateUtils.loaderLoadingSelector(state));\nvar storeFinderGroup_selectors = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getFindStoresState: getFindStoresState,\n  getFindStoresEntities: getFindStoresEntities,\n  getStoresLoading: getStoresLoading,\n  getStoresSuccess: getStoresSuccess,\n  getViewAllStoresState: getViewAllStoresState,\n  getViewAllStoresEntities: getViewAllStoresEntities,\n  getViewAllStoresLoading: getViewAllStoresLoading\n});\nlet StoreFinderService = /*#__PURE__*/(() => {\n  class StoreFinderService {\n    constructor(store, winRef, globalMessageService, routingService, platformId) {\n      this.store = store;\n      this.winRef = winRef;\n      this.globalMessageService = globalMessageService;\n      this.routingService = routingService;\n      this.platformId = platformId;\n      this.geolocationWatchId = null;\n      this.subscription = new Subscription();\n      this.reloadStoreEntitiesOnContextChange();\n    }\n    /**\n     * Returns boolean observable for store's loading state\n     */\n    getStoresLoading() {\n      return this.store.pipe(select(getStoresLoading));\n    }\n    /**\n     * Returns boolean observable for store's success state\n     */\n    getStoresLoaded() {\n      return this.store.pipe(select(getStoresSuccess));\n    }\n    /**\n     * Returns observable for store's entities\n     */\n    getFindStoresEntities() {\n      return this.store.pipe(select(getFindStoresEntities), map(data => data.findStoresEntities));\n    }\n    /**\n     * Returns observable for a single store by Id\n     */\n    getFindStoreEntityById() {\n      return this.store.pipe(select(getFindStoresEntities), map(data => data.findStoreEntityById));\n    }\n    /**\n     * Returns boolean observable for view all store's loading state\n     */\n    getViewAllStoresLoading() {\n      return this.store.pipe(select(getViewAllStoresLoading));\n    }\n    /**\n     * Returns observable for view all store's entities\n     */\n    getViewAllStoresEntities() {\n      return this.store.pipe(select(getViewAllStoresEntities), map(data => data.viewAllStoresEntities));\n    }\n    /**\n     * Store finding action functionality\n     * @param queryText text query\n     * @param searchConfig search configuration\n     * @param longitudeLatitude longitude and latitude coordinates\n     * @param countryIsoCode country ISO code\n     * @param useMyLocation current location coordinates\n     * @param radius radius of the scope from the center point\n     */\n    findStoresAction(queryText, searchConfig, longitudeLatitude, countryIsoCode, useMyLocation, radius) {\n      if (useMyLocation && this.winRef.nativeWindow) {\n        this.clearWatchGeolocation(new FindStoresOnHold());\n        this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(pos => {\n          const position = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude\n          };\n          this.clearWatchGeolocation(new FindStores({\n            queryText: queryText,\n            searchConfig: searchConfig,\n            longitudeLatitude: position,\n            countryIsoCode: countryIsoCode,\n            radius: radius\n          }));\n        }, () => {\n          this.globalMessageService.add({\n            key: 'storeFinder.geolocationNotEnabled'\n          }, GlobalMessageType.MSG_TYPE_ERROR);\n          this.routingService.go(['/store-finder']);\n        });\n      } else {\n        this.clearWatchGeolocation(new FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n          radius: radius\n        }));\n      }\n    }\n    /**\n     * View all stores\n     */\n    viewAllStores() {\n      this.clearWatchGeolocation(new ViewAllStores());\n    }\n    /**\n     * View all stores by id\n     * @param storeId store id\n     */\n    viewStoreById(storeId) {\n      this.clearWatchGeolocation(new FindStoreById({\n        storeId\n      }));\n    }\n    clearWatchGeolocation(callbackAction) {\n      var _a;\n      if (this.geolocationWatchId !== null) {\n        (_a = this.winRef.nativeWindow) === null || _a === void 0 ? void 0 : _a.navigator.geolocation.clearWatch(this.geolocationWatchId);\n        this.geolocationWatchId = null;\n      }\n      this.store.dispatch(callbackAction);\n    }\n    isEmpty(store) {\n      return !store || typeof store === 'object' && Object.keys(store).length === 0;\n    }\n    /**\n     * Reload store data when store entities are empty because of the context change\n     */\n    reloadStoreEntitiesOnContextChange() {\n      if (isPlatformBrowser(this.platformId) || !this.platformId) {\n        this.subscription = this.getFindStoresEntities().pipe(filter(data => this.isEmpty(data)), withLatestFrom(this.getStoresLoading(), this.getStoresLoaded(), this.routingService.getParams())).subscribe(([, loading, loaded, routeParams]) => {\n          if (!loading && !loaded) {\n            if (routeParams.country && !routeParams.store) {\n              this.callFindStoresAction(routeParams);\n            }\n            if (routeParams.store) {\n              this.viewStoreById(routeParams.store);\n            }\n          }\n        });\n      }\n    }\n    callFindStoresAction(routeParams) {\n      this.findStoresAction('', {\n        pageSize: -1\n      }, undefined, routeParams.country);\n    }\n    ngOnDestroy() {\n      var _a;\n      (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n    /**\n     * Returns store latitude\n     * @param location store location\n     */\n    getStoreLatitude(location) {\n      var _a;\n      return (_a = location === null || location === void 0 ? void 0 : location.geoPoint) === null || _a === void 0 ? void 0 : _a.latitude;\n    }\n    /**\n     * Returns store longitude\n     * @param location store location\n     */\n    getStoreLongitude(location) {\n      var _a;\n      return (_a = location === null || location === void 0 ? void 0 : location.geoPoint) === null || _a === void 0 ? void 0 : _a.longitude;\n    }\n  }\n  StoreFinderService.ɵfac = function StoreFinderService_Factory(t) {\n    return new (t || StoreFinderService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.WindowRef), i0.ɵɵinject(i2.GlobalMessageService), i0.ɵɵinject(i2.RoutingService), i0.ɵɵinject(PLATFORM_ID));\n  };\n  StoreFinderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StoreFinderService,\n    factory: StoreFinderService.ɵfac,\n    providedIn: 'root'\n  });\n  return StoreFinderService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/// <reference types=\"@types/googlemaps\" />\nlet GoogleMapRendererService = /*#__PURE__*/(() => {\n  class GoogleMapRendererService {\n    constructor(config, storeFinderService, scriptLoader) {\n      this.config = config;\n      this.storeFinderService = storeFinderService;\n      this.scriptLoader = scriptLoader;\n      this.googleMap = null;\n    }\n    /**\n     * Renders google map on the given element and draws markers on it.\n     * If map already exists it will use an existing map otherwise it will create one\n     * @param mapElement HTML element inside of which the map will be displayed\n     * @param locations array containign geo data to be displayed on the map\n     * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n     */\n    renderMap(mapElement, locations, selectMarkerHandler) {\n      if (Object.entries(locations[Object.keys(locations)[0]]).length > 0) if (this.googleMap === null) {\n        this.scriptLoader.embedScript({\n          src: this.config.googleMaps.apiUrl,\n          params: {\n            key: this.config.googleMaps.apiKey\n          },\n          attributes: {\n            type: 'text/javascript'\n          },\n          callback: () => {\n            this.drawMap(mapElement, locations, selectMarkerHandler);\n          }\n        });\n      } else {\n        this.drawMap(mapElement, locations, selectMarkerHandler);\n      }\n    }\n    /**\n     * Centers the map to the given point\n     * @param latitute latitude of the new center\n     * @param longitude longitude of the new center\n     */\n    centerMap(latitute, longitude) {\n      this.googleMap.panTo({\n        lat: latitute,\n        lng: longitude\n      });\n      this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n    }\n    /**\n     * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n     * @param locations list of locations\n     */\n    defineMapCenter(locations) {\n      return new google.maps.LatLng(this.storeFinderService.getStoreLatitude(locations[0]), this.storeFinderService.getStoreLongitude(locations[0]));\n    }\n    /**\n     * Creates google map inside if the given HTML element centered to the given point\n     * @param mapElement {@link HTMLElement} inside of which the map will be created\n     * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n     */\n    initMap(mapElement, mapCenter) {\n      const gestureOption = 'greedy';\n      const mapProp = {\n        center: mapCenter,\n        zoom: this.config.googleMaps.scale,\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        gestureHandling: gestureOption\n      };\n      this.googleMap = new google.maps.Map(mapElement, mapProp);\n    }\n    /**\n     * Erases the current map's markers and create a new one based on the given locations\n     * @param locations array of locations to be displayed on the map\n     * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n     */\n    createMarkers(locations, selectMarkerHandler) {\n      this.markers = [];\n      locations.forEach((element, index) => {\n        const marker = new google.maps.Marker({\n          position: new google.maps.LatLng(this.storeFinderService.getStoreLatitude(element), this.storeFinderService.getStoreLongitude(element)),\n          label: index + 1 + ''\n        });\n        this.markers.push(marker);\n        marker.setMap(this.googleMap);\n        marker.addListener('mouseover', function () {\n          marker.setAnimation(google.maps.Animation.BOUNCE);\n        });\n        marker.addListener('mouseout', function () {\n          marker.setAnimation(null);\n        });\n        if (selectMarkerHandler) {\n          marker.addListener('click', function () {\n            selectMarkerHandler(index);\n          });\n        }\n      });\n    }\n    /**\n     * Initialize and draw the map\n     * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n     * @param locations array of locations to be displayed on the map\n     * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n     */\n    drawMap(mapElement, locations, selectMarkerHandler) {\n      this.initMap(mapElement, this.defineMapCenter(locations));\n      this.createMarkers(locations, selectMarkerHandler);\n    }\n  }\n  GoogleMapRendererService.ɵfac = function GoogleMapRendererService_Factory(t) {\n    return new (t || GoogleMapRendererService)(i0.ɵɵinject(StoreFinderConfig), i0.ɵɵinject(StoreFinderService), i0.ɵɵinject(i2.ScriptLoader));\n  };\n  GoogleMapRendererService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: GoogleMapRendererService,\n    factory: GoogleMapRendererService.ɵfac,\n    providedIn: 'root'\n  });\n  return GoogleMapRendererService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst defaultStoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n    radius: 50000\n  }\n};\nconst initialState$1 = {\n  findStoresEntities: {},\n  findStoreEntityById: {}\n};\nfunction findStoresReducer(state = initialState$1, action) {\n  switch (action.type) {\n    case FIND_STORES_SUCCESS:\n      {\n        const findStoresEntities = action.payload;\n        return Object.assign(Object.assign({}, state), {\n          findStoresEntities\n        });\n      }\n    case FIND_STORE_BY_ID_SUCCESS:\n      {\n        const findStoreEntityById = action.payload;\n        return Object.assign(Object.assign({}, state), {\n          findStoreEntityById\n        });\n      }\n  }\n  return state;\n}\nconst initialState = {\n  viewAllStoresEntities: {}\n};\nfunction viewAllStoresReducer(state = initialState, action) {\n  switch (action.type) {\n    case VIEW_ALL_STORES_SUCCESS:\n      {\n        const viewAllStoresEntities = action.payload;\n        return Object.assign(Object.assign({}, state), {\n          viewAllStoresEntities\n        });\n      }\n  }\n  return state;\n}\nfunction getReducers() {\n  return {\n    findStores: StateUtils.loaderReducer(STORE_FINDER_DATA, findStoresReducer),\n    viewAllStores: StateUtils.loaderReducer(STORE_FINDER_DATA, viewAllStoresReducer)\n  };\n}\nconst reducerToken = new InjectionToken('StoreFinderReducers');\nconst reducerProvider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\nfunction clearStoreFinderState(reducer) {\n  return function (state, action) {\n    if (action.type === SiteContextActions.LANGUAGE_CHANGE) {\n      state = undefined;\n    }\n    if (action.type === CLEAR_STORE_FINDER_DATA) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\nconst metaReducers = [clearStoreFinderState];\nlet FindStoresEffect = /*#__PURE__*/(() => {\n  class FindStoresEffect {\n    constructor(actions$, storeFinderConnector) {\n      this.actions$ = actions$;\n      this.storeFinderConnector = storeFinderConnector;\n      this.findStores$ = this.actions$.pipe(ofType(FIND_STORES), map(action => action.payload), mergeMap(payload => this.storeFinderConnector.search(payload.queryText, payload.searchConfig, payload.longitudeLatitude, payload.radius).pipe(map(data => {\n        if (payload.countryIsoCode) {\n          data.stores = data.stores.filter(store => store.address.country.isocode === payload.countryIsoCode);\n          data.stores.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n        }\n        return new FindStoresSuccess(data);\n      }), catchError(error => of(new FindStoresFail(normalizeHttpError(error)))))));\n      this.findStoreById$ = this.actions$.pipe(ofType(FIND_STORE_BY_ID), map(action => action.payload), switchMap(payload => this.storeFinderConnector.get(payload.storeId).pipe(map(data => new FindStoreByIdSuccess(data)), catchError(error => of(new FindStoreByIdFail(normalizeHttpError(error)))))));\n    }\n  }\n  FindStoresEffect.ɵfac = function FindStoresEffect_Factory(t) {\n    return new (t || FindStoresEffect)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(StoreFinderConnector));\n  };\n  FindStoresEffect.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: FindStoresEffect,\n    factory: FindStoresEffect.ɵfac\n  });\n  __decorate([Effect()], FindStoresEffect.prototype, \"findStores$\", void 0);\n  __decorate([Effect()], FindStoresEffect.prototype, \"findStoreById$\", void 0);\n  return FindStoresEffect;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ViewAllStoresEffect = /*#__PURE__*/(() => {\n  class ViewAllStoresEffect {\n    constructor(actions$, storeFinderConnector) {\n      this.actions$ = actions$;\n      this.storeFinderConnector = storeFinderConnector;\n      this.viewAllStores$ = this.actions$.pipe(ofType(VIEW_ALL_STORES, CLEAR_STORE_FINDER_DATA), switchMap(() => {\n        return this.storeFinderConnector.getCounts().pipe(map(data => {\n          data.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0);\n          return new ViewAllStoresSuccess(data);\n        }), catchError(error => of(new ViewAllStoresFail(normalizeHttpError(error)))));\n      }));\n      this.clearStoreFinderData$ = this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE, SiteContextActions.CURRENCY_CHANGE), map(() => {\n        return new ClearStoreFinderData();\n      }));\n    }\n  }\n  ViewAllStoresEffect.ɵfac = function ViewAllStoresEffect_Factory(t) {\n    return new (t || ViewAllStoresEffect)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(StoreFinderConnector));\n  };\n  ViewAllStoresEffect.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ViewAllStoresEffect,\n    factory: ViewAllStoresEffect.ɵfac\n  });\n  __decorate([Effect()], ViewAllStoresEffect.prototype, \"viewAllStores$\", void 0);\n  __decorate([Effect()], ViewAllStoresEffect.prototype, \"clearStoreFinderData$\", void 0);\n  return ViewAllStoresEffect;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst effects = [FindStoresEffect, ViewAllStoresEffect];\nlet StoreFinderStoreModule = /*#__PURE__*/(() => {\n  class StoreFinderStoreModule {}\n  StoreFinderStoreModule.ɵfac = function StoreFinderStoreModule_Factory(t) {\n    return new (t || StoreFinderStoreModule)();\n  };\n  StoreFinderStoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StoreFinderStoreModule\n  });\n  StoreFinderStoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [reducerProvider],\n    imports: [[CommonModule, StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken, {\n      metaReducers\n    }), EffectsModule.forFeature(effects)]]\n  });\n  return StoreFinderStoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StoreFinderCoreModule = /*#__PURE__*/(() => {\n  class StoreFinderCoreModule {}\n  StoreFinderCoreModule.ɵfac = function StoreFinderCoreModule_Factory(t) {\n    return new (t || StoreFinderCoreModule)();\n  };\n  StoreFinderCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StoreFinderCoreModule\n  });\n  StoreFinderCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideDefaultConfig(defaultStoreFinderConfig), StoreFinderConnector],\n    imports: [[StoreFinderStoreModule]]\n  });\n  return StoreFinderCoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GoogleMapRendererService, STORE_COUNT_NORMALIZER, STORE_FINDER_DATA, STORE_FINDER_FEATURE, STORE_FINDER_SEARCH_PAGE_NORMALIZER, storeFinderGroup_actions as StoreFinderActions, StoreFinderAdapter, StoreFinderConfig, StoreFinderConnector, StoreFinderCoreModule, storeFinderGroup_selectors as StoreFinderSelectors, StoreFinderService };\n//# sourceMappingURL=spartacus-storefinder-core.js.map","map":null,"metadata":{},"sourceType":"module"}