{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, NgModule } from '@angular/core';\nimport { UserAccountChangedEvent, UserAccountFacade } from '@spartacus/user/account/root';\nimport * as i2 from '@spartacus/core';\nimport { LoginEvent, LogoutEvent } from '@spartacus/core';\nimport { switchMap } from 'rxjs/operators';\nconst USER_ACCOUNT_NORMALIZER = new InjectionToken('UserAccountNormalizer');\nconst USER_ACCOUNT_SERIALIZER = new InjectionToken('UserAccountSerializer');\nclass UserAccountAdapter {}\nlet UserAccountConnector = /*#__PURE__*/(() => {\n  class UserAccountConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    get(userId) {\n      return this.adapter.load(userId);\n    }\n  }\n  UserAccountConnector.ɵfac = function UserAccountConnector_Factory(t) {\n    return new (t || UserAccountConnector)(i0.ɵɵinject(UserAccountAdapter));\n  };\n  UserAccountConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserAccountConnector,\n    factory: UserAccountConnector.ɵfac\n  });\n  return UserAccountConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UserAccountService = /*#__PURE__*/(() => {\n  class UserAccountService {\n    constructor(userAccountConnector, userIdService, query) {\n      this.userAccountConnector = userAccountConnector;\n      this.userIdService = userIdService;\n      this.query = query;\n      this.userQuery = this.query.create(() => this.userIdService.takeUserId(true).pipe(switchMap(userId => this.userAccountConnector.get(userId))), {\n        reloadOn: [UserAccountChangedEvent],\n        resetOn: [LoginEvent, LogoutEvent]\n      });\n    }\n    /**\n     * Returns the current user.\n     */\n    get() {\n      return this.userQuery.get();\n    }\n  }\n  UserAccountService.ɵfac = function UserAccountService_Factory(t) {\n    return new (t || UserAccountService)(i0.ɵɵinject(UserAccountConnector), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.QueryService));\n  };\n  UserAccountService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserAccountService,\n    factory: UserAccountService.ɵfac\n  });\n  return UserAccountService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst facadeProviders = [UserAccountService, {\n  provide: UserAccountFacade,\n  useExisting: UserAccountService\n}];\nlet UserAccountCoreModule = /*#__PURE__*/(() => {\n  class UserAccountCoreModule {}\n  UserAccountCoreModule.ɵfac = function UserAccountCoreModule_Factory(t) {\n    return new (t || UserAccountCoreModule)();\n  };\n  UserAccountCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: UserAccountCoreModule\n  });\n  UserAccountCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [UserAccountConnector, ...facadeProviders]\n  });\n  return UserAccountCoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { USER_ACCOUNT_NORMALIZER, USER_ACCOUNT_SERIALIZER, UserAccountAdapter, UserAccountConnector, UserAccountCoreModule, UserAccountService };\n//# sourceMappingURL=spartacus-user-account-core.js.map","map":null,"metadata":{},"sourceType":"module"}