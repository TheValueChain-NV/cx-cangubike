{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, NgModule } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { CommandStrategy, LanguageSetEvent, UserActions } from '@spartacus/core';\nimport { switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i1 from '@spartacus/user/account/root';\nimport { UserAccountChangedEvent } from '@spartacus/user/account/root';\nimport * as i4 from '@ngrx/store';\nimport { UserEmailFacade, UserPasswordFacade, UserProfileFacade, UserRegisterFacade } from '@spartacus/user/profile/root';\nconst USER_PROFILE_NORMALIZER = new InjectionToken('UserProfileNormalizer');\nconst USER_PROFILE_SERIALIZER = new InjectionToken('UserProfileSerializer');\nconst USER_SERIALIZER = new InjectionToken('UserSerializer');\nconst USER_SIGN_UP_SERIALIZER = new InjectionToken('UserSignUpSerializer');\nconst TITLE_NORMALIZER = new InjectionToken('TitleNormalizer');\nclass UserProfileAdapter {}\nlet UserProfileConnector = /*#__PURE__*/(() => {\n  class UserProfileConnector {\n    constructor(userProfileAdapter) {\n      this.userProfileAdapter = userProfileAdapter;\n    }\n    update(username, user) {\n      return this.userProfileAdapter.update(username, user);\n    }\n    register(user) {\n      return this.userProfileAdapter.register(user);\n    }\n    registerGuest(guid, password) {\n      return this.userProfileAdapter.registerGuest(guid, password);\n    }\n    requestForgotPasswordEmail(userEmailAddress) {\n      return this.userProfileAdapter.requestForgotPasswordEmail(userEmailAddress);\n    }\n    resetPassword(token, newPassword) {\n      return this.userProfileAdapter.resetPassword(token, newPassword);\n    }\n    updateEmail(userId, currentPassword, newUserId) {\n      return this.userProfileAdapter.updateEmail(userId, currentPassword, newUserId);\n    }\n    updatePassword(userId, oldPassword, newPassword) {\n      return this.userProfileAdapter.updatePassword(userId, oldPassword, newPassword);\n    }\n    remove(userId) {\n      return this.userProfileAdapter.close(userId);\n    }\n    getTitles() {\n      return this.userProfileAdapter.loadTitles();\n    }\n  }\n  UserProfileConnector.ɵfac = function UserProfileConnector_Factory(t) {\n    return new (t || UserProfileConnector)(i0.ɵɵinject(UserProfileAdapter));\n  };\n  UserProfileConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserProfileConnector,\n    factory: UserProfileConnector.ɵfac\n  });\n  return UserProfileConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UserEmailService = /*#__PURE__*/(() => {\n  class UserEmailService {\n    constructor(userIdService, userProfileConnector, command) {\n      this.userIdService = userIdService;\n      this.userProfileConnector = userProfileConnector;\n      this.command = command;\n      this.updateCommand = this.command.create(payload => this.userIdService.takeUserId(true).pipe(switchMap(uid => this.userProfileConnector.updateEmail(uid, payload.password, payload.newUid))), {\n        strategy: CommandStrategy.Queue\n      });\n    }\n    /**\n     * Updates the user's email.\n     *\n     * @param password to users password to confirm the users\n     * @param newUid the new proposed email address.\n     */\n    update(password, newUid) {\n      return this.updateCommand.execute({\n        password,\n        newUid\n      });\n    }\n  }\n  UserEmailService.ɵfac = function UserEmailService_Factory(t) {\n    return new (t || UserEmailService)(i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(UserProfileConnector), i0.ɵɵinject(i2.CommandService));\n  };\n  UserEmailService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserEmailService,\n    factory: UserEmailService.ɵfac\n  });\n  return UserEmailService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UserPasswordService = /*#__PURE__*/(() => {\n  class UserPasswordService {\n    constructor(userProfileConnector, userIdService, command) {\n      this.userProfileConnector = userProfileConnector;\n      this.userIdService = userIdService;\n      this.command = command;\n      this.updateCommand = this.command.create(payload => this.userIdService.takeUserId(true).pipe(take(1), switchMap(uid => this.userProfileConnector.updatePassword(uid, payload.oldPassword, payload.newPassword))));\n      this.resetCommand = this.command.create(payload => this.userProfileConnector.resetPassword(payload.token, payload.password));\n      this.requestForgotPasswordEmailCommand = this.command.create(payload => this.userProfileConnector.requestForgotPasswordEmail(payload.email));\n    }\n    /**\n     * Updates the password for the user\n     *\n     * The method returns an observable with `LoaderState` information, including the\n     * actual user data.\n     *\n     * @param oldPassword the current password that will be changed\n     * @param newPassword the new password\n     */\n    update(oldPassword, newPassword) {\n      return this.updateCommand.execute({\n        oldPassword,\n        newPassword\n      });\n    }\n    /**\n     * Reset new password. Part of the forgot password flow.\n     *\n     * @param token\n     * @param password\n     */\n    reset(token, password) {\n      return this.resetCommand.execute({\n        token,\n        password\n      });\n    }\n    /*\n     * Request an email to reset a forgotten password.\n     */\n    requestForgotPasswordEmail(email) {\n      return this.requestForgotPasswordEmailCommand.execute({\n        email\n      });\n    }\n  }\n  UserPasswordService.ɵfac = function UserPasswordService_Factory(t) {\n    return new (t || UserPasswordService)(i0.ɵɵinject(UserProfileConnector), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.CommandService));\n  };\n  UserPasswordService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserPasswordService,\n    factory: UserPasswordService.ɵfac\n  });\n  return UserPasswordService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UserProfileService = /*#__PURE__*/(() => {\n  class UserProfileService {\n    constructor(userAccountService, authService, userProfileConnector, eventService, userIdService, query, command) {\n      this.userAccountService = userAccountService;\n      this.authService = authService;\n      this.userProfileConnector = userProfileConnector;\n      this.eventService = eventService;\n      this.userIdService = userIdService;\n      this.query = query;\n      this.command = command;\n      this.updateCommand = this.command.create(payload => this.userIdService.takeUserId(true).pipe(switchMap(uid => this.userProfileConnector.update(uid, payload.details).pipe(tap(() => {\n        this.eventService.dispatch({\n          user: payload.details\n        }, UserAccountChangedEvent);\n      })))), {\n        strategy: CommandStrategy.Queue\n      });\n      this.closeCommand = this.command.create(() => this.userIdService.takeUserId(true).pipe(switchMap(uid => this.userProfileConnector.remove(uid).pipe(tap(() => this.authService.logout())))));\n      this.titleQuery = this.query.create(() => this.userProfileConnector.getTitles(), {\n        reloadOn: [LanguageSetEvent]\n      });\n    }\n    get() {\n      return this.userAccountService.get();\n    }\n    /**\n     * Updates the user's details.\n     *\n     * @param details User details to be updated.\n     */\n    update(details) {\n      return this.updateCommand.execute({\n        details\n      });\n    }\n    /**\n     * Closes the user account.\n     */\n    close() {\n      return this.closeCommand.execute(undefined);\n    }\n    /**\n     * Returns titles that can be used for the user profiles.\n     */\n    getTitles() {\n      return this.titleQuery.get().pipe(map(titles => titles !== null && titles !== void 0 ? titles : []));\n    }\n  }\n  UserProfileService.ɵfac = function UserProfileService_Factory(t) {\n    return new (t || UserProfileService)(i0.ɵɵinject(i1.UserAccountFacade), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(UserProfileConnector), i0.ɵɵinject(i2.EventService), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.QueryService), i0.ɵɵinject(i2.CommandService));\n  };\n  UserProfileService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserProfileService,\n    factory: UserProfileService.ɵfac\n  });\n  return UserProfileService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet UserRegisterService = /*#__PURE__*/(() => {\n  class UserRegisterService {\n    constructor(userProfile, userConnector, authService, command, store) {\n      this.userProfile = userProfile;\n      this.userConnector = userConnector;\n      this.authService = authService;\n      this.command = command;\n      this.store = store;\n      this.registerCommand = this.command.create(({\n        user\n      }) => this.userConnector.register(user).pipe(tap(() => {\n        // this is a compatibility mechanism only, to make anonymous consents\n        // management work properly in transitional period (when we move logic\n        // to separate libraries)\n        this.store.dispatch(new UserActions.RegisterUserSuccess());\n      })));\n      this.registerGuestCommand = this.command.create(payload => this.userConnector.registerGuest(payload.guid, payload.password).pipe(tap(user => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.authService.loginWithCredentials(user.uid, payload.password);\n      })));\n    }\n    /**\n     * Register a new user.\n     *\n     * @param submitFormData as UserRegisterFormData\n     */\n    register(user) {\n      return this.registerCommand.execute({\n        user\n      });\n    }\n    /**\n     * Register a new user from guest.\n     *\n     * @param guid\n     * @param password\n     */\n    registerGuest(guid, password) {\n      return this.registerGuestCommand.execute({\n        guid,\n        password\n      });\n    }\n    /**\n     * Returns titles that can be used for the user profiles.\n     */\n    getTitles() {\n      return this.userProfile.getTitles();\n    }\n  }\n  UserRegisterService.ɵfac = function UserRegisterService_Factory(t) {\n    return new (t || UserRegisterService)(i0.ɵɵinject(UserProfileService), i0.ɵɵinject(UserProfileConnector), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i2.CommandService), i0.ɵɵinject(i4.Store));\n  };\n  UserRegisterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserRegisterService,\n    factory: UserRegisterService.ɵfac\n  });\n  return UserRegisterService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst facadeProviders = [UserEmailService, UserPasswordService, UserProfileService, UserRegisterService, {\n  provide: UserEmailFacade,\n  useExisting: UserEmailService\n}, {\n  provide: UserPasswordFacade,\n  useExisting: UserPasswordService\n}, {\n  provide: UserProfileFacade,\n  useExisting: UserProfileService\n}, {\n  provide: UserRegisterFacade,\n  useExisting: UserRegisterService\n}];\nlet UserProfileCoreModule = /*#__PURE__*/(() => {\n  class UserProfileCoreModule {}\n  UserProfileCoreModule.ɵfac = function UserProfileCoreModule_Factory(t) {\n    return new (t || UserProfileCoreModule)();\n  };\n  UserProfileCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: UserProfileCoreModule\n  });\n  UserProfileCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [UserProfileConnector, ...facadeProviders]\n  });\n  return UserProfileCoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TITLE_NORMALIZER, USER_PROFILE_NORMALIZER, USER_PROFILE_SERIALIZER, USER_SERIALIZER, USER_SIGN_UP_SERIALIZER, UserEmailService, UserPasswordService, UserProfileAdapter, UserProfileConnector, UserProfileCoreModule, UserProfileService, UserRegisterService };\n//# sourceMappingURL=spartacus-user-profile-core.js.map","map":null,"metadata":{},"sourceType":"module"}