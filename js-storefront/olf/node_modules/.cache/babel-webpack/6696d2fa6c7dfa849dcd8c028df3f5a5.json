{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1$1 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i1 from '@spartacus/core';\nimport { Config, facadeFactory, provideDefaultConfig, provideDefaultConfigFactory, CxEvent } from '@spartacus/core';\nimport { OrderEntriesSource, CmsPageGuard, PageLayoutComponent, ORDER_ENTRIES_CONTEXT } from '@spartacus/storefront';\nimport { HttpErrorResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { take, switchMap, catchError, map } from 'rxjs/operators';\nvar CheckoutStepType = /*#__PURE__*/(() => {\n  (function (CheckoutStepType) {\n    CheckoutStepType[\"SHIPPING_ADDRESS\"] = \"shippingAddress\";\n    CheckoutStepType[\"DELIVERY_MODE\"] = \"deliveryMode\";\n    CheckoutStepType[\"PAYMENT_DETAILS\"] = \"paymentDetails\";\n    CheckoutStepType[\"REVIEW_ORDER\"] = \"reviewOrder\";\n    CheckoutStepType[\"PAYMENT_TYPE\"] = \"paymentType\";\n  })(CheckoutStepType || (CheckoutStepType = {}));\n  return CheckoutStepType;\n})();\nconst checkoutShippingSteps = [CheckoutStepType.SHIPPING_ADDRESS, CheckoutStepType.DELIVERY_MODE];\nconst checkoutPaymentSteps = [CheckoutStepType.PAYMENT_DETAILS, CheckoutStepType.PAYMENT_TYPE, CheckoutStepType.SHIPPING_ADDRESS];\nvar DeliveryModePreferences = /*#__PURE__*/(() => {\n  (function (DeliveryModePreferences) {\n    DeliveryModePreferences[\"FREE\"] = \"FREE\";\n    DeliveryModePreferences[\"LEAST_EXPENSIVE\"] = \"LEAST_EXPENSIVE\";\n    DeliveryModePreferences[\"MOST_EXPENSIVE\"] = \"MOST_EXPENSIVE\";\n  })(DeliveryModePreferences || (DeliveryModePreferences = {}));\n  return DeliveryModePreferences;\n})();\nlet CheckoutConfig = /*#__PURE__*/(() => {\n  class CheckoutConfig {}\n  CheckoutConfig.ɵfac = function CheckoutConfig_Factory(t) {\n    return new (t || CheckoutConfig)();\n  };\n  CheckoutConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutConfig,\n    factory: function CheckoutConfig_Factory(t) {\n      let r = null;\n      if (t) {\n        r = new (t || CheckoutConfig)();\n      } else {\n        r = i0.ɵɵinject(Config);\n      }\n      return r;\n    },\n    providedIn: 'root'\n  });\n  return CheckoutConfig;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst defaultCheckoutConfig = {\n  checkout: {\n    steps: [{\n      id: 'shippingAddress',\n      name: 'checkoutProgress.shippingAddress',\n      routeName: 'checkoutShippingAddress',\n      type: [CheckoutStepType.SHIPPING_ADDRESS]\n    }, {\n      id: 'deliveryMode',\n      name: 'checkoutProgress.deliveryMode',\n      routeName: 'checkoutDeliveryMode',\n      type: [CheckoutStepType.DELIVERY_MODE]\n    }, {\n      id: 'paymentDetails',\n      name: 'checkoutProgress.paymentDetails',\n      routeName: 'checkoutPaymentDetails',\n      type: [CheckoutStepType.PAYMENT_DETAILS]\n    }, {\n      id: 'reviewOrder',\n      name: 'checkoutProgress.reviewOrder',\n      routeName: 'checkoutReviewOrder',\n      type: [CheckoutStepType.REVIEW_ORDER]\n    }],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false\n  }\n};\nconst defaultCheckoutRoutingConfig = {\n  routing: {\n    routes: {\n      checkoutLogin: {\n        paths: ['checkout-login'],\n        authFlow: true\n      },\n      checkout: {\n        paths: ['checkout']\n      },\n      checkoutPaymentType: {\n        paths: ['checkout/payment-type']\n      },\n      checkoutShippingAddress: {\n        paths: ['checkout/shipping-address']\n      },\n      checkoutDeliveryMode: {\n        paths: ['checkout/delivery-mode']\n      },\n      checkoutPaymentDetails: {\n        paths: ['checkout/payment-details']\n      },\n      checkoutReviewOrder: {\n        paths: ['checkout/review-order']\n      },\n      orderConfirmation: {\n        paths: ['order-confirmation']\n      },\n      replenishmentConfirmation: {\n        paths: ['replenishment/confirmation']\n      }\n    }\n  }\n};\nconst CHECKOUT_FEATURE = 'checkout';\nconst CHECKOUT_CORE_FEATURE = 'checkoutCore';\n\n/**\n * Interceptor that handles \"Cart not found\" errors while a user is in a checkout step.\n *\n * When a user doing a checkout has a \"Cart not found\" error, he is redirected to checkout and the cart is reloaded.\n * If a \"Cart not found\" error happens and the user is not on checkout, this interceptor does not perform any actions.\n */\nlet CheckoutCartInterceptor = /*#__PURE__*/(() => {\n  class CheckoutCartInterceptor {\n    constructor(routingService, multiCartService) {\n      this.routingService = routingService;\n      this.multiCartService = multiCartService;\n    }\n    intercept(request, next) {\n      return this.routingService.getRouterState().pipe(take(1), switchMap(state => {\n        return next.handle(request).pipe(catchError(response => {\n          var _a;\n          if (response instanceof HttpErrorResponse && this.isUserInCheckoutRoute((_a = state.state) === null || _a === void 0 ? void 0 : _a.semanticRoute)) {\n            if (this.isCartNotFoundError(response)) {\n              this.routingService.go({\n                cxRoute: 'cart'\n              });\n              const cartCode = this.getCartIdFromError(response);\n              if (cartCode) {\n                this.multiCartService.reloadCart(cartCode);\n              }\n            }\n          }\n          return throwError(response);\n        }));\n      }));\n    }\n    /**\n     * Returns true if the parameter semantic route is part of \"checkout\"\n     * Checkout semantic routes:\n     * checkout\n     * checkoutPaymentType\n     * CheckoutShippingAddress\n     * checkoutDeliveryMode\n     * checkoutPaymentDetails\n     * checkoutReviewOrder\n     * checkoutLogin\n     * @param semanticRoute\n     */\n    isUserInCheckoutRoute(semanticRoute) {\n      var _a;\n      return (_a = semanticRoute === null || semanticRoute === void 0 ? void 0 : semanticRoute.toLowerCase().startsWith('checkout')) !== null && _a !== void 0 ? _a : false;\n    }\n    /**\n     * Checks of the error is for a cart not found, i.e. the cart doesn't exist anymore\n     *\n     * @param response\n     */\n    isCartNotFoundError(response) {\n      var _a, _b, _c, _d, _e, _f;\n      return response.status === 400 && ((_c = (_b = (_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.type) === 'CartError' && ((_f = (_e = (_d = response.error) === null || _d === void 0 ? void 0 : _d.errors) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.reason) === 'notFound';\n    }\n    getCartIdFromError(response) {\n      var _a, _b, _c;\n      return (_c = (_b = (_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.subject;\n    }\n  }\n  CheckoutCartInterceptor.ɵfac = function CheckoutCartInterceptor_Factory(t) {\n    return new (t || CheckoutCartInterceptor)(i0.ɵɵinject(i1.RoutingService), i0.ɵɵinject(i1.MultiCartService));\n  };\n  CheckoutCartInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutCartInterceptor,\n    factory: CheckoutCartInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return CheckoutCartInterceptor;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst interceptors = [{\n  provide: HTTP_INTERCEPTORS,\n  useExisting: CheckoutCartInterceptor,\n  multi: true\n}];\nlet CheckoutFacade = /*#__PURE__*/(() => {\n  class CheckoutFacade {}\n  CheckoutFacade.ɵfac = function CheckoutFacade_Factory(t) {\n    return new (t || CheckoutFacade)();\n  };\n  CheckoutFacade.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutFacade,\n    factory: function () {\n      return (() => facadeFactory({\n        facade: CheckoutFacade,\n        feature: CHECKOUT_CORE_FEATURE,\n        methods: ['placeOrder', 'scheduleReplenishmentOrder', 'getPlaceOrderLoading', 'getPlaceOrderSuccess', 'getPlaceOrderError', 'clearPlaceOrderState', 'clearCheckoutData', 'clearCheckoutStep', 'loadCheckoutDetails', 'getCheckoutDetailsLoaded', 'isLoading', 'getOrderDetails', 'setOrderType', 'getCurrentOrderType'],\n        async: true\n      }))();\n    },\n    providedIn: 'root'\n  });\n  return CheckoutFacade;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OrderConfirmationOrderEntriesContext = /*#__PURE__*/(() => {\n  class OrderConfirmationOrderEntriesContext {\n    constructor(checkoutService) {\n      this.checkoutService = checkoutService;\n      this.type = OrderEntriesSource.ORDER_CONFIRMATION;\n    }\n    getEntries() {\n      return this.checkoutService.getOrderDetails().pipe(map(order => {\n        var _a;\n        return (_a = order === null || order === void 0 ? void 0 : order.entries) !== null && _a !== void 0 ? _a : [];\n      }));\n    }\n  }\n  OrderConfirmationOrderEntriesContext.ɵfac = function OrderConfirmationOrderEntriesContext_Factory(t) {\n    return new (t || OrderConfirmationOrderEntriesContext)(i0.ɵɵinject(CheckoutFacade));\n  };\n  OrderConfirmationOrderEntriesContext.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OrderConfirmationOrderEntriesContext,\n    factory: OrderConfirmationOrderEntriesContext.ɵfac,\n    providedIn: 'root'\n  });\n  return OrderConfirmationOrderEntriesContext;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction defaultCheckoutComponentsConfig() {\n  const config = {\n    featureModules: {\n      [CHECKOUT_FEATURE]: {\n        cmsComponents: ['CheckoutOrchestrator', 'CheckoutOrderSummary', 'CheckoutProgress', 'CheckoutProgressMobileBottom', 'CheckoutProgressMobileTop', 'CheckoutCostCenterComponent', 'CheckoutDeliveryMode', 'CheckoutPaymentDetails', 'CheckoutPaymentType', 'CheckoutPlaceOrder', 'CheckoutReviewOrder', 'CheckoutScheduleReplenishmentOrder', 'CheckoutShippingAddress', 'GuestCheckoutLoginComponent', 'OrderConfirmationThankMessageComponent', 'OrderConfirmationItemsComponent', 'OrderConfirmationTotalsComponent', 'OrderConfirmationOverviewComponent', 'ReplenishmentConfirmationMessageComponent', 'ReplenishmentConfirmationOverviewComponent', 'ReplenishmentConfirmationItemsComponent', 'ReplenishmentConfirmationTotalsComponent']\n      },\n      // by default core is bundled together with components\n      [CHECKOUT_CORE_FEATURE]: CHECKOUT_FEATURE\n    }\n  };\n  return config;\n}\nlet CheckoutRootModule = /*#__PURE__*/(() => {\n  class CheckoutRootModule {}\n  CheckoutRootModule.ɵfac = function CheckoutRootModule_Factory(t) {\n    return new (t || CheckoutRootModule)();\n  };\n  CheckoutRootModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CheckoutRootModule\n  });\n  CheckoutRootModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [...interceptors, provideDefaultConfig(defaultCheckoutRoutingConfig), provideDefaultConfig(defaultCheckoutConfig), provideDefaultConfigFactory(defaultCheckoutComponentsConfig)],\n    imports: [[RouterModule.forChild([{\n      // @ts-ignore\n      path: null,\n      canActivate: [CmsPageGuard],\n      component: PageLayoutComponent,\n      data: {\n        cxRoute: 'orderConfirmation',\n        cxContext: {\n          [ORDER_ENTRIES_CONTEXT]: OrderConfirmationOrderEntriesContext\n        }\n      }\n    }])]]\n  });\n  return CheckoutRootModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Indicates that a user has successfully placed an order\n */\nlet OrderPlacedEvent = /*#__PURE__*/(() => {\n  class OrderPlacedEvent extends CxEvent {}\n  /**\n   * Event's type\n   */\n  OrderPlacedEvent.type = 'OrderPlacedEvent';\n  return OrderPlacedEvent;\n})();\nlet CheckoutCostCenterFacade = /*#__PURE__*/(() => {\n  class CheckoutCostCenterFacade {}\n  CheckoutCostCenterFacade.ɵfac = function CheckoutCostCenterFacade_Factory(t) {\n    return new (t || CheckoutCostCenterFacade)();\n  };\n  CheckoutCostCenterFacade.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutCostCenterFacade,\n    factory: function () {\n      return (() => facadeFactory({\n        facade: CheckoutCostCenterFacade,\n        feature: CHECKOUT_CORE_FEATURE,\n        methods: ['setCostCenter', 'getCostCenter'],\n        async: true\n      }))();\n    },\n    providedIn: 'root'\n  });\n  return CheckoutCostCenterFacade;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CheckoutDeliveryFacade = /*#__PURE__*/(() => {\n  class CheckoutDeliveryFacade {}\n  CheckoutDeliveryFacade.ɵfac = function CheckoutDeliveryFacade_Factory(t) {\n    return new (t || CheckoutDeliveryFacade)();\n  };\n  CheckoutDeliveryFacade.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutDeliveryFacade,\n    factory: function () {\n      return (() => facadeFactory({\n        facade: CheckoutDeliveryFacade,\n        feature: CHECKOUT_CORE_FEATURE,\n        methods: ['getSupportedDeliveryModes', 'getSelectedDeliveryMode', 'getSelectedDeliveryModeCode', 'getDeliveryAddress', 'getSetDeliveryAddressProcess', 'resetSetDeliveryAddressProcess', 'getSetDeliveryModeProcess', 'resetSetDeliveryModeProcess', 'resetLoadSupportedDeliveryModesProcess', 'getLoadSupportedDeliveryModeProcess', 'clearCheckoutDeliveryModes', 'createAndSetAddress', 'loadSupportedDeliveryModes', 'setDeliveryMode', 'setDeliveryAddress', 'clearCheckoutDeliveryAddress', 'clearCheckoutDeliveryMode', 'clearCheckoutDeliveryDetails'],\n        async: true\n      }))();\n    },\n    providedIn: 'root'\n  });\n  return CheckoutDeliveryFacade;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CheckoutPaymentFacade = /*#__PURE__*/(() => {\n  class CheckoutPaymentFacade {}\n  CheckoutPaymentFacade.ɵfac = function CheckoutPaymentFacade_Factory(t) {\n    return new (t || CheckoutPaymentFacade)();\n  };\n  CheckoutPaymentFacade.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutPaymentFacade,\n    factory: function () {\n      return (() => facadeFactory({\n        facade: CheckoutPaymentFacade,\n        feature: CHECKOUT_CORE_FEATURE,\n        methods: ['getCardTypes', 'getPaymentDetails', 'getSetPaymentDetailsResultProcess', 'resetSetPaymentDetailsProcess', 'loadSupportedCardTypes', 'createPaymentDetails', 'setPaymentDetails', 'paymentProcessSuccess'],\n        async: true\n      }))();\n    },\n    providedIn: 'root'\n  });\n  return CheckoutPaymentFacade;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ClearCheckoutFacade = /*#__PURE__*/(() => {\n  class ClearCheckoutFacade {}\n  ClearCheckoutFacade.ɵfac = function ClearCheckoutFacade_Factory(t) {\n    return new (t || ClearCheckoutFacade)();\n  };\n  ClearCheckoutFacade.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ClearCheckoutFacade,\n    factory: function () {\n      return (() => facadeFactory({\n        facade: ClearCheckoutFacade,\n        feature: CHECKOUT_CORE_FEATURE,\n        methods: ['resetCheckoutProcesses'],\n        async: true\n      }))();\n    },\n    providedIn: 'root'\n  });\n  return ClearCheckoutFacade;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PaymentTypeFacade = /*#__PURE__*/(() => {\n  class PaymentTypeFacade {}\n  PaymentTypeFacade.ɵfac = function PaymentTypeFacade_Factory(t) {\n    return new (t || PaymentTypeFacade)();\n  };\n  PaymentTypeFacade.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PaymentTypeFacade,\n    factory: function () {\n      return (() => facadeFactory({\n        facade: PaymentTypeFacade,\n        feature: CHECKOUT_CORE_FEATURE,\n        methods: ['getPaymentTypes', 'loadPaymentTypes', 'setPaymentType', 'getSelectedPaymentType', 'isAccountPayment', 'getPoNumber'],\n        async: true\n      }))();\n    },\n    providedIn: 'root'\n  });\n  return PaymentTypeFacade;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CHECKOUT_CORE_FEATURE, CHECKOUT_FEATURE, CheckoutConfig, CheckoutCostCenterFacade, CheckoutDeliveryFacade, CheckoutFacade, CheckoutPaymentFacade, CheckoutRootModule, CheckoutStepType, ClearCheckoutFacade, DeliveryModePreferences, OrderConfirmationOrderEntriesContext, OrderPlacedEvent, PaymentTypeFacade, checkoutPaymentSteps, checkoutShippingSteps, defaultCheckoutComponentsConfig };\n//# sourceMappingURL=spartacus-checkout-root.js.map","map":null,"metadata":{},"sourceType":"module"}