{"ast":null,"code":"import * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, NgModule, Injectable } from '@angular/core';\nimport * as i5 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i2$1 from '@spartacus/core';\nimport { GlobalMessageType, UrlModule, I18nModule, provideDefaultConfig, AuthGuard, OAuthFlow, NotAuthGuard, RoutingService, AuthConfigService, GlobalMessageService, HttpErrorModel, AuthService, AuthRedirectService } from '@spartacus/core';\nimport * as i2 from '@spartacus/storefront';\nimport { ICON_TYPE, IconModule, SpinnerModule, CustomFormValidators, FormErrorsModule, sortTitles } from '@spartacus/storefront';\nimport { BehaviorSubject, Subscription, combineLatest } from 'rxjs';\nimport { first, tap, map, filter, switchMap } from 'rxjs/operators';\nimport * as i1 from '@spartacus/user/profile/root';\nimport { UserPasswordFacade, UserEmailFacade, UserProfileFacade } from '@spartacus/user/profile/root';\nimport * as i4 from '@angular/forms';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nfunction CloseAccountModalComponent_ng_container_0_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 8);\n    i0.ɵɵelement(2, \"cx-spinner\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CloseAccountModalComponent_ng_container_0_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"div\", 10);\n    i0.ɵɵelementStart(2, \"p\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 10);\n    i0.ɵɵelementStart(6, \"div\", 12);\n    i0.ɵɵelementStart(7, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function CloseAccountModalComponent_ng_container_0_ng_template_11_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return ctx_r4.closeAccount();\n    });\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function CloseAccountModalComponent_ng_container_0_ng_template_11_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.dismissModal();\n    });\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 3, \"closeAccount.confirmAccountClosureMessage\"), \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(9, 5, \"closeAccount.closeMyAccount\"), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(12, 7, \"common.cancel\"), \" \");\n  }\n}\nfunction CloseAccountModalComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵelementStart(2, \"h3\", 2);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function CloseAccountModalComponent_ng_container_0_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.dismissModal();\n    });\n    i0.ɵɵpipe(6, \"cxTranslate\");\n    i0.ɵɵelementStart(7, \"span\", 4);\n    i0.ɵɵelement(8, \"cx-icon\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, CloseAccountModalComponent_ng_container_0_div_9_Template, 3, 0, \"div\", 6);\n    i0.ɵɵpipe(10, \"async\");\n    i0.ɵɵtemplate(11, CloseAccountModalComponent_ng_container_0_ng_template_11_Template, 13, 9, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const _r2 = i0.ɵɵreference(12);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 5, \"closeAccount.confirmAccountClosure\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(6, 7, \"common.close\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"type\", ctx_r0.iconTypes.CLOSE);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 9, ctx_r0.isLoading$))(\"ngIfElse\", _r2);\n  }\n}\nconst _c0 = function () {\n  return {\n    cxRoute: \"home\"\n  };\n};\nfunction ForgotPasswordComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 7);\n  }\n}\nconst _c1 = function () {\n  return {\n    cxRoute: \"login\"\n  };\n};\nfunction RegisterComponent_section_0_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const title_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", title_r5.code);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", title_r5.name, \" \");\n  }\n}\nfunction RegisterComponent_section_0_label_58_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\");\n    i0.ɵɵelement(1, \"input\", 26);\n    i0.ɵɵelementStart(2, \"span\", 21);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const anonymousConsent_r6 = ctx.ngIf;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r4.isConsentGiven(anonymousConsent_r6.consent));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", anonymousConsent_r6.template, \" \");\n  }\n}\nconst _c2 = function () {\n  return {\n    cxRoute: \"termsAndConditions\"\n  };\n};\nfunction RegisterComponent_section_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\", 2);\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵelementStart(2, \"div\", 4);\n    i0.ɵɵelementStart(3, \"div\", 5);\n    i0.ɵɵelementStart(4, \"form\", 6);\n    i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_section_0_Template_form_ngSubmit_4_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.submitForm();\n    });\n    i0.ɵɵelementStart(5, \"div\", 7);\n    i0.ɵɵelementStart(6, \"label\");\n    i0.ɵɵelementStart(7, \"span\", 8);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"select\", 9);\n    i0.ɵɵelementStart(11, \"option\", 10);\n    i0.ɵɵtext(12);\n    i0.ɵɵpipe(13, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(14, RegisterComponent_section_0_option_14_Template, 2, 2, \"option\", 11);\n    i0.ɵɵpipe(15, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 7);\n    i0.ɵɵelementStart(17, \"label\");\n    i0.ɵɵelementStart(18, \"span\", 8);\n    i0.ɵɵtext(19);\n    i0.ɵɵpipe(20, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(21, \"input\", 12);\n    i0.ɵɵpipe(22, \"cxTranslate\");\n    i0.ɵɵelement(23, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"div\", 7);\n    i0.ɵɵelementStart(25, \"label\");\n    i0.ɵɵelementStart(26, \"span\", 8);\n    i0.ɵɵtext(27);\n    i0.ɵɵpipe(28, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(29, \"input\", 14);\n    i0.ɵɵpipe(30, \"cxTranslate\");\n    i0.ɵɵelement(31, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(32, \"div\", 7);\n    i0.ɵɵelementStart(33, \"label\");\n    i0.ɵɵelementStart(34, \"span\", 8);\n    i0.ɵɵtext(35);\n    i0.ɵɵpipe(36, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(37, \"input\", 15);\n    i0.ɵɵpipe(38, \"cxTranslate\");\n    i0.ɵɵelement(39, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(40, \"div\", 7);\n    i0.ɵɵelementStart(41, \"label\");\n    i0.ɵɵelementStart(42, \"span\", 8);\n    i0.ɵɵtext(43);\n    i0.ɵɵpipe(44, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(45, \"input\", 16);\n    i0.ɵɵpipe(46, \"cxTranslate\");\n    i0.ɵɵelement(47, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(48, \"div\", 7);\n    i0.ɵɵelementStart(49, \"label\");\n    i0.ɵɵelementStart(50, \"span\", 8);\n    i0.ɵɵtext(51);\n    i0.ɵɵpipe(52, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(53, \"input\", 17);\n    i0.ɵɵpipe(54, \"cxTranslate\");\n    i0.ɵɵelement(55, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(56, \"div\", 7);\n    i0.ɵɵelementStart(57, \"div\", 18);\n    i0.ɵɵtemplate(58, RegisterComponent_section_0_label_58_Template, 4, 2, \"label\", 19);\n    i0.ɵɵpipe(59, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(60, \"div\", 7);\n    i0.ɵɵelementStart(61, \"div\", 18);\n    i0.ɵɵelementStart(62, \"label\");\n    i0.ɵɵelement(63, \"input\", 20);\n    i0.ɵɵelementStart(64, \"span\", 21);\n    i0.ɵɵtext(65);\n    i0.ɵɵpipe(66, \"cxTranslate\");\n    i0.ɵɵelementStart(67, \"a\", 22);\n    i0.ɵɵpipe(68, \"cxUrl\");\n    i0.ɵɵtext(69);\n    i0.ɵɵpipe(70, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(71, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(72, \"button\", 23);\n    i0.ɵɵtext(73);\n    i0.ɵɵpipe(74, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(75, \"a\", 24);\n    i0.ɵɵpipe(76, \"cxUrl\");\n    i0.ɵɵtext(77);\n    i0.ɵɵpipe(78, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.registerForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 27, \"register.title\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(13, 29, \"register.selectTitle\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(15, 31, ctx_r0.titles$));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 33, \"register.firstName.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(22, 35, \"register.firstName.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"firstName\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(28, 37, \"register.lastName.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(30, 39, \"register.lastName.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"lastName\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(36, 41, \"register.emailAddress.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(38, 43, \"register.emailAddress.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"email\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(44, 45, \"register.password.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(46, 47, \"register.password.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"password\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(52, 49, \"register.confirmPassword.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(54, 51, \"register.confirmPassword.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"passwordconf\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(59, 53, ctx_r0.anonymousConsent$));\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(66, 55, \"register.confirmThatRead\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(68, 57, i0.ɵɵpureFunction0(67, _c2)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(70, 59, \"register.termsAndConditions\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"termsandconditions\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(74, 61, \"register.register\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(76, 63, i0.ɵɵpureFunction0(68, _c1)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(78, 65, \"register.signIn\"));\n  }\n}\nfunction RegisterComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelement(1, \"cx-spinner\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 2);\n  }\n}\nfunction ResetPasswordComponent_form_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 3);\n    i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_form_2_Template_form_ngSubmit_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const token_r2 = restoredCtx.ngIf;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onSubmit(token_r2);\n    });\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵelementStart(2, \"span\", 4);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 5);\n    i0.ɵɵpipe(6, \"cxTranslate\");\n    i0.ɵɵelement(7, \"cx-form-errors\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"label\");\n    i0.ɵɵelementStart(9, \"span\", 4);\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"input\", 7);\n    i0.ɵɵpipe(13, \"cxTranslate\");\n    i0.ɵɵelement(14, \"cx-form-errors\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 8);\n    i0.ɵɵtext(16);\n    i0.ɵɵpipe(17, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.form);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 9, \"register.newPassword\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(6, 11, \"register.password.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r1.form.get(\"password\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(11, 13, \"register.passwordMinRequirements\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(13, 15, \"register.confirmPassword.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r1.form.get(\"passwordConfirm\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.form.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(17, 17, \"register.resetPassword\"), \" \");\n  }\n}\nfunction UpdateEmailComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 9);\n  }\n}\nfunction UpdatePasswordComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 9);\n  }\n}\nfunction UpdateProfileComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 12);\n  }\n}\nfunction UpdateProfileComponent_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const title_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", title_r2.code);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", title_r2.name, \" \");\n  }\n}\nclass CloseAccountModalComponent {\n  constructor(modalService, authService, globalMessageService, routingService, translationService, userProfile) {\n    this.modalService = modalService;\n    this.authService = authService;\n    this.globalMessageService = globalMessageService;\n    this.routingService = routingService;\n    this.translationService = translationService;\n    this.userProfile = userProfile;\n    this.iconTypes = ICON_TYPE;\n    this.isLoading$ = new BehaviorSubject(false);\n  }\n  ngOnInit() {\n    this.isLoggedIn$ = this.authService.isUserLoggedIn();\n  }\n  onSuccess() {\n    this.dismissModal();\n    this.translationService.translate('closeAccount.accountClosedSuccessfully').pipe(first()).subscribe(text => {\n      this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    });\n    this.routingService.go({\n      cxRoute: 'home'\n    });\n  }\n  onError() {\n    this.dismissModal();\n    this.translationService.translate('closeAccount.accountClosedFailure').pipe(first()).subscribe(text => {\n      this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n    });\n  }\n  dismissModal(reason) {\n    this.modalService.dismissActiveModal(reason);\n  }\n  closeAccount() {\n    this.isLoading$.next(true);\n    this.userProfile.close().subscribe({\n      next: () => {\n        this.onSuccess();\n        this.isLoading$.next(false);\n      },\n      error: () => {\n        this.onError();\n        this.isLoading$.next(false);\n      }\n    });\n  }\n}\nCloseAccountModalComponent.ɵfac = function CloseAccountModalComponent_Factory(t) {\n  return new (t || CloseAccountModalComponent)(i0.ɵɵdirectiveInject(i2.ModalService), i0.ɵɵdirectiveInject(i2$1.AuthService), i0.ɵɵdirectiveInject(i2$1.GlobalMessageService), i0.ɵɵdirectiveInject(i2$1.RoutingService), i0.ɵɵdirectiveInject(i2$1.TranslationService), i0.ɵɵdirectiveInject(i1.UserProfileFacade));\n};\nCloseAccountModalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CloseAccountModalComponent,\n  selectors: [[\"cx-close-account-modal\"]],\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [1, \"modal-header\", \"cx-dialog-header\"], [1, \"modal-title\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [\"aria-hidden\", \"true\"], [3, \"type\"], [4, \"ngIf\", \"ngIfElse\"], [\"loaded\", \"\"], [1, \"cx-spinner\"], [1, \"modal-body\"], [1, \"cx-row\"], [1, \"cx-confirmation\"], [1, \"cx-btn-group\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"click\"]],\n  template: function CloseAccountModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CloseAccountModalComponent_ng_container_0_Template, 13, 11, \"ng-container\", 0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.isLoggedIn$));\n    }\n  },\n  directives: [i3.NgIf, i2.IconComponent, i2.SpinnerComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CloseAccountModalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-close-account-modal',\n      templateUrl: './close-account-modal.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i2.ModalService\n    }, {\n      type: i2$1.AuthService\n    }, {\n      type: i2$1.GlobalMessageService\n    }, {\n      type: i2$1.RoutingService\n    }, {\n      type: i2$1.TranslationService\n    }, {\n      type: i1.UserProfileFacade\n    }];\n  }, null);\n})();\nclass CloseAccountComponent {\n  constructor(modalService) {\n    this.modalService = modalService;\n  }\n  openModal() {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true\n    }).componentInstance;\n  }\n}\nCloseAccountComponent.ɵfac = function CloseAccountComponent_Factory(t) {\n  return new (t || CloseAccountComponent)(i0.ɵɵdirectiveInject(i2.ModalService));\n};\nCloseAccountComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CloseAccountComponent,\n  selectors: [[\"cx-close-account\"]],\n  decls: 11,\n  vars: 10,\n  consts: [[1, \"col-lg-8\", \"col-md-9\"], [1, \"row\", \"cx-btn-group\"], [1, \"col-sm-3\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"col-sm-6\"], [1, \"btn\", \"btn-primary\", 3, \"click\"]],\n  template: function CloseAccountComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"a\", 3);\n      i0.ɵɵpipe(4, \"cxUrl\");\n      i0.ɵɵtext(5);\n      i0.ɵɵpipe(6, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 4);\n      i0.ɵɵelementStart(8, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function CloseAccountComponent_Template_button_click_8_listener() {\n        return ctx.openModal();\n      });\n      i0.ɵɵtext(9);\n      i0.ɵɵpipe(10, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(4, 3, i0.ɵɵpureFunction0(9, _c0)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 5, \"common.cancel\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(10, 7, \"closeAccount.closeMyAccount\"), \" \");\n    }\n  },\n  directives: [i5.RouterLinkWithHref],\n  pipes: [i2$1.UrlPipe, i2$1.TranslatePipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CloseAccountComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-close-account',\n      templateUrl: './close-account.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i2.ModalService\n    }];\n  }, null);\n})();\nclass CloseAccountModule {}\nCloseAccountModule.ɵfac = function CloseAccountModule_Factory(t) {\n  return new (t || CloseAccountModule)();\n};\nCloseAccountModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CloseAccountModule\n});\nCloseAccountModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      CloseAccountComponent: {\n        component: CloseAccountComponent,\n        guards: [AuthGuard]\n      }\n    }\n  })],\n  imports: [[CommonModule, RouterModule, UrlModule, I18nModule, IconModule, SpinnerModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CloseAccountModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, RouterModule, UrlModule, I18nModule, IconModule, SpinnerModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          CloseAccountComponent: {\n            component: CloseAccountComponent,\n            guards: [AuthGuard]\n          }\n        }\n      })],\n      declarations: [CloseAccountComponent, CloseAccountModalComponent]\n    }]\n  }], null, null);\n})();\nclass ForgotPasswordComponentService {\n  constructor(userPasswordService, routingService, authConfigService, globalMessage) {\n    this.userPasswordService = userPasswordService;\n    this.routingService = routingService;\n    this.authConfigService = authConfigService;\n    this.globalMessage = globalMessage;\n    this.busy$ = new BehaviorSubject(false);\n    this.isUpdating$ = this.busy$.pipe(tap(state => state === true ? this.form.disable() : this.form.enable()));\n    this.form = new FormGroup({\n      userEmail: new FormControl('', [Validators.required, CustomFormValidators.emailValidator])\n    });\n  }\n  /**\n   * Sends an email to the user to reset the password.\n   *\n   * When the `ResourceOwnerPasswordFlow` is used, the user is routed\n   * to the login page.\n   */\n  requestEmail() {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n    this.busy$.next(true);\n    this.userPasswordService.requestForgotPasswordEmail(this.form.value.userEmail).subscribe({\n      next: () => this.onSuccess(),\n      error: error => this.onError(error)\n    });\n  }\n  onSuccess() {\n    this.globalMessage.add({\n      key: 'forgottenPassword.passwordResetEmailSent'\n    }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    this.busy$.next(false);\n    this.form.reset();\n    this.redirect();\n  }\n  onError(_error) {\n    this.busy$.next(false);\n  }\n  /**\n   * Redirects the user back to the login page.\n   *\n   * This only happens in case of the `ResourceOwnerPasswordFlow` OAuth flow.\n   */\n  redirect() {\n    if (this.authConfigService.getOAuthFlow() === OAuthFlow.ResourceOwnerPasswordFlow) {\n      this.routingService.go({\n        cxRoute: 'login'\n      });\n    }\n  }\n}\nForgotPasswordComponentService.ɵfac = function ForgotPasswordComponentService_Factory(t) {\n  return new (t || ForgotPasswordComponentService)(i0.ɵɵinject(i1.UserPasswordFacade), i0.ɵɵinject(i2$1.RoutingService), i0.ɵɵinject(i2$1.AuthConfigService), i0.ɵɵinject(i2$1.GlobalMessageService));\n};\nForgotPasswordComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ForgotPasswordComponentService,\n  factory: ForgotPasswordComponentService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ForgotPasswordComponentService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.UserPasswordFacade\n    }, {\n      type: i2$1.RoutingService\n    }, {\n      type: i2$1.AuthConfigService\n    }, {\n      type: i2$1.GlobalMessageService\n    }];\n  }, null);\n})();\nclass ForgotPasswordComponent {\n  constructor(service) {\n    this.service = service;\n    this.form = this.service.form;\n    this.isUpdating$ = this.service.isUpdating$;\n  }\n  onSubmit() {\n    this.service.requestEmail();\n  }\n}\nForgotPasswordComponent.ɵfac = function ForgotPasswordComponent_Factory(t) {\n  return new (t || ForgotPasswordComponent)(i0.ɵɵdirectiveInject(ForgotPasswordComponentService));\n};\nForgotPasswordComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ForgotPasswordComponent,\n  selectors: [[\"cx-forgot-password\"]],\n  decls: 17,\n  vars: 22,\n  consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"aria-required\", \"true\", \"type\", \"email\", \"formControlName\", \"userEmail\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"], [1, \"overlay\"]],\n  template: function ForgotPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ForgotPasswordComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function ForgotPasswordComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\");\n      i0.ɵɵelementStart(4, \"span\", 2);\n      i0.ɵɵtext(5);\n      i0.ɵɵpipe(6, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 3);\n      i0.ɵɵpipe(8, \"cxTranslate\");\n      i0.ɵɵelement(9, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"a\", 5);\n      i0.ɵɵpipe(11, \"cxUrl\");\n      i0.ɵɵtext(12);\n      i0.ɵɵpipe(13, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"button\", 6);\n      i0.ɵɵtext(15);\n      i0.ɵɵpipe(16, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 9, ctx.isUpdating$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 11, \"forgottenPassword.emailAddress.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(8, 13, \"forgottenPassword.emailAddress.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"userEmail\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(11, 15, i0.ɵɵpureFunction0(21, _c1)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 17, \"common.cancel\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.form.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(16, 19, \"common.submit\"), \" \");\n    }\n  },\n  directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i2.FormErrorsComponent, i5.RouterLinkWithHref, i2.SpinnerComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ForgotPasswordComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-forgot-password',\n      templateUrl: './forgot-password.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ForgotPasswordComponentService\n    }];\n  }, null);\n})();\nclass ForgotPasswordModule {}\nForgotPasswordModule.ɵfac = function ForgotPasswordModule_Factory(t) {\n  return new (t || ForgotPasswordModule)();\n};\nForgotPasswordModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ForgotPasswordModule\n});\nForgotPasswordModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      ForgotPasswordComponent: {\n        component: ForgotPasswordComponent,\n        guards: [NotAuthGuard],\n        providers: [{\n          provide: ForgotPasswordComponentService,\n          useClass: ForgotPasswordComponentService,\n          deps: [UserPasswordFacade, RoutingService, AuthConfigService, GlobalMessageService]\n        }]\n      }\n    }\n  })],\n  imports: [[CommonModule, ReactiveFormsModule, RouterModule, UrlModule, I18nModule, FormErrorsModule, SpinnerModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ForgotPasswordModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ReactiveFormsModule, RouterModule, UrlModule, I18nModule, FormErrorsModule, SpinnerModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          ForgotPasswordComponent: {\n            component: ForgotPasswordComponent,\n            guards: [NotAuthGuard],\n            providers: [{\n              provide: ForgotPasswordComponentService,\n              useClass: ForgotPasswordComponentService,\n              deps: [UserPasswordFacade, RoutingService, AuthConfigService, GlobalMessageService]\n            }]\n          }\n        }\n      })],\n      declarations: [ForgotPasswordComponent]\n    }]\n  }], null, null);\n})();\nclass RegisterComponent {\n  constructor(userRegister, globalMessageService, fb, router, anonymousConsentsService, anonymousConsentsConfig, authConfigService) {\n    this.userRegister = userRegister;\n    this.globalMessageService = globalMessageService;\n    this.fb = fb;\n    this.router = router;\n    this.anonymousConsentsService = anonymousConsentsService;\n    this.anonymousConsentsConfig = anonymousConsentsConfig;\n    this.authConfigService = authConfigService;\n    this.isLoading$ = new BehaviorSubject(false);\n    this.subscription = new Subscription();\n    this.registerForm = this.fb.group({\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', [Validators.required, CustomFormValidators.passwordValidator]],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired()\n      }),\n      termsandconditions: [false, Validators.requiredTrue]\n    }, {\n      validators: CustomFormValidators.passwordsMustMatch('password', 'passwordconf')\n    });\n  }\n  ngOnInit() {\n    var _a, _b, _c;\n    this.titles$ = this.userRegister.getTitles().pipe(map(titles => {\n      return titles.sort(sortTitles);\n    }));\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(this.globalMessageService.get().pipe(filter(messages => !!Object.keys(messages).length)).subscribe(globalMessageEntities => {\n      const messages = globalMessageEntities && globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n      if (messages && messages.some(message => message === 'This field is required.')) {\n        this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n        this.globalMessageService.add({\n          key: 'register.titleRequired'\n        }, GlobalMessageType.MSG_TYPE_ERROR);\n      }\n    }));\n    const registerConsent = (_c = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.registerConsent) !== null && _c !== void 0 ? _c : '';\n    this.anonymousConsent$ = combineLatest([this.anonymousConsentsService.getConsent(registerConsent), this.anonymousConsentsService.getTemplate(registerConsent)]).pipe(map(([consent, template]) => {\n      return {\n        consent,\n        template: (template === null || template === void 0 ? void 0 : template.description) ? template.description : ''\n      };\n    }));\n    this.subscription.add(\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n      this.toggleAnonymousConsent();\n    }));\n  }\n  submitForm() {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n  registerUser() {\n    this.isLoading$.next(true);\n    this.userRegister.register(this.collectDataFromRegisterForm(this.registerForm.value)).subscribe({\n      next: () => this.onRegisterUserSuccess(),\n      complete: () => this.isLoading$.next(false)\n    });\n  }\n  titleSelected(title) {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n  collectDataFromRegisterForm(formData) {\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      titleCode\n    } = formData;\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode\n    };\n  }\n  isConsentGiven(consent) {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n  isConsentRequired() {\n    var _a, _b, _c, _d;\n    const requiredConsents = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.requiredConsents;\n    const registerConsent = (_d = (_c = this.anonymousConsentsConfig) === null || _c === void 0 ? void 0 : _c.anonymousConsents) === null || _d === void 0 ? void 0 : _d.registerConsent;\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n    return false;\n  }\n  onRegisterUserSuccess() {\n    if (this.authConfigService.getOAuthFlow() === OAuthFlow.ResourceOwnerPasswordFlow) {\n      this.router.go('login');\n    }\n    this.globalMessageService.add({\n      key: 'register.postRegisterMessage'\n    }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n  }\n  toggleAnonymousConsent() {\n    var _a, _b;\n    const registerConsent = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.registerConsent;\n    if (registerConsent) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (Boolean(this.registerForm.get('newsletter').value)) {\n        this.anonymousConsentsService.giveConsent(registerConsent);\n      } else {\n        this.anonymousConsentsService.withdrawConsent(registerConsent);\n      }\n    }\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.UserRegisterFacade), i0.ɵɵdirectiveInject(i2$1.GlobalMessageService), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i2$1.RoutingService), i0.ɵɵdirectiveInject(i2$1.AnonymousConsentsService), i0.ɵɵdirectiveInject(i2$1.AnonymousConsentsConfig), i0.ɵɵdirectiveInject(i2$1.AuthConfigService));\n};\nRegisterComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"cx-register\"]],\n  decls: 4,\n  vars: 4,\n  consts: [[\"class\", \"cx-page-section container\", 4, \"ngIf\", \"ngIfElse\"], [\"loading\", \"\"], [1, \"cx-page-section\", \"container\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-6\"], [1, \"cx-section\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [1, \"label-content\"], [\"formControlName\", \"titleCode\", 1, \"form-control\"], [\"selected\", \"\", \"value\", \"\", \"disabled\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"firstname\", \"formControlName\", \"firstName\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"lastname\", \"formControlName\", \"lastName\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"email\", \"name\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"confirmpassword\", \"formControlName\", \"passwordconf\", 1, \"form-control\", 3, \"placeholder\"], [1, \"form-check\"], [4, \"ngIf\"], [\"aria-required\", \"true\", \"type\", \"checkbox\", \"name\", \"termsandconditions\", \"formControlName\", \"termsandconditions\"], [1, \"form-check-label\"], [\"target\", \"_blank\", 3, \"routerLink\"], [\"type\", \"submit\", 1, \"btn\", \"btn-block\", \"btn-primary\"], [1, \"cx-login-link\", \"btn-link\", 3, \"routerLink\"], [3, \"value\"], [\"type\", \"checkbox\", \"name\", \"newsletter\", \"formControlName\", \"newsletter\", 1, \"form-check-input\", 3, \"checked\"], [1, \"cx-spinner\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RegisterComponent_section_0_Template, 79, 69, \"section\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵtemplate(2, RegisterComponent_ng_template_2_Template, 2, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(3);\n      i0.ɵɵproperty(\"ngIf\", !i0.ɵɵpipeBind1(1, 2, ctx.isLoading$))(\"ngIfElse\", _r1);\n    }\n  },\n  directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.FormControlName, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i3.NgForOf, i4.DefaultValueAccessor, i2.FormErrorsComponent, i4.CheckboxControlValueAccessor, i5.RouterLinkWithHref, i2.SpinnerComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RegisterComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-register',\n      templateUrl: './register.component.html'\n    }]\n  }], function () {\n    return [{\n      type: i1.UserRegisterFacade\n    }, {\n      type: i2$1.GlobalMessageService\n    }, {\n      type: i4.FormBuilder\n    }, {\n      type: i2$1.RoutingService\n    }, {\n      type: i2$1.AnonymousConsentsService\n    }, {\n      type: i2$1.AnonymousConsentsConfig\n    }, {\n      type: i2$1.AuthConfigService\n    }];\n  }, null);\n})();\nclass RegisterComponentModule {}\nRegisterComponentModule.ɵfac = function RegisterComponentModule_Factory(t) {\n  return new (t || RegisterComponentModule)();\n};\nRegisterComponentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RegisterComponentModule\n});\nRegisterComponentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      RegisterCustomerComponent: {\n        component: RegisterComponent,\n        guards: [NotAuthGuard]\n      }\n    }\n  })],\n  imports: [[CommonModule, ReactiveFormsModule, RouterModule, UrlModule, I18nModule, SpinnerModule, FormErrorsModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RegisterComponentModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ReactiveFormsModule, RouterModule, UrlModule, I18nModule, SpinnerModule, FormErrorsModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          RegisterCustomerComponent: {\n            component: RegisterComponent,\n            guards: [NotAuthGuard]\n          }\n        }\n      })],\n      declarations: [RegisterComponent]\n    }]\n  }], null, null);\n})();\nclass ResetPasswordComponentService {\n  constructor(userPasswordService, routingService, globalMessage) {\n    this.userPasswordService = userPasswordService;\n    this.routingService = routingService;\n    this.globalMessage = globalMessage;\n    this.busy$ = new BehaviorSubject(false);\n    this.isUpdating$ = this.busy$.pipe(tap(state => state === true ? this.form.disable() : this.form.enable()));\n    this.resetToken$ = this.routingService.getRouterState().pipe(map(routerState => routerState.state.queryParams['token']));\n    this.form = new FormGroup({\n      password: new FormControl('', [Validators.required, CustomFormValidators.passwordValidator]),\n      passwordConfirm: new FormControl('', Validators.required)\n    }, {\n      validators: CustomFormValidators.passwordsMustMatch('password', 'passwordConfirm')\n    });\n  }\n  /**\n   * Resets the password by the given token.\n   *\n   * The token has been provided during the request password flow.\n   * The token is not validated on the client.\n   */\n  resetPassword(token) {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n    this.busy$.next(true);\n    const password = this.form.get('password').value;\n    this.userPasswordService.reset(token, password).subscribe({\n      next: () => this.onSuccess(),\n      error: error => this.onError(error)\n    });\n  }\n  onSuccess() {\n    this.globalMessage.add({\n      key: 'forgottenPassword.passwordResetSuccess'\n    }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    this.busy$.next(false);\n    this.form.reset();\n    this.redirect();\n  }\n  onError(error) {\n    var _a;\n    this.busy$.next(false);\n    if (error instanceof HttpErrorModel) {\n      ((_a = error.details) !== null && _a !== void 0 ? _a : []).forEach(err => {\n        if (err.message) {\n          this.globalMessage.add({\n            raw: err.message\n          }, GlobalMessageType.MSG_TYPE_ERROR);\n        }\n      });\n    }\n  }\n  /**\n   * Redirects the user to the login page.\n   */\n  redirect() {\n    this.routingService.go({\n      cxRoute: 'login'\n    });\n  }\n}\nResetPasswordComponentService.ɵfac = function ResetPasswordComponentService_Factory(t) {\n  return new (t || ResetPasswordComponentService)(i0.ɵɵinject(i1.UserPasswordFacade), i0.ɵɵinject(i2$1.RoutingService), i0.ɵɵinject(i2$1.GlobalMessageService));\n};\nResetPasswordComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ResetPasswordComponentService,\n  factory: ResetPasswordComponentService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ResetPasswordComponentService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.UserPasswordFacade\n    }, {\n      type: i2$1.RoutingService\n    }, {\n      type: i2$1.GlobalMessageService\n    }];\n  }, null);\n})();\nclass ResetPasswordComponent {\n  constructor(service) {\n    this.service = service;\n    this.form = this.service.form;\n    this.isUpdating$ = this.service.isUpdating$;\n    this.token$ = this.service.resetToken$;\n  }\n  onSubmit(token) {\n    this.service.resetPassword(token);\n  }\n}\nResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n  return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(ResetPasswordComponentService));\n};\nResetPasswordComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ResetPasswordComponent,\n  selectors: [[\"cx-reset-password\"]],\n  hostAttrs: [1, \"user-form\"],\n  decls: 4,\n  vars: 6,\n  consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [1, \"overlay\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"aria-required\", \"true\", \"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"password\", \"formControlName\", \"passwordConfirm\", 1, \"form-control\", 3, \"placeholder\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"]],\n  template: function ResetPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ResetPasswordComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵtemplate(2, ResetPasswordComponent_form_2_Template, 18, 19, \"form\", 1);\n      i0.ɵɵpipe(3, \"async\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 2, ctx.isUpdating$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(3, 4, ctx.token$));\n    }\n  },\n  directives: [i3.NgIf, i2.SpinnerComponent, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i2.FormErrorsComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ResetPasswordComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-reset-password',\n      templateUrl: './reset-password.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'user-form'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ResetPasswordComponentService\n    }];\n  }, null);\n})();\nclass ResetPasswordModule {}\nResetPasswordModule.ɵfac = function ResetPasswordModule_Factory(t) {\n  return new (t || ResetPasswordModule)();\n};\nResetPasswordModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ResetPasswordModule\n});\nResetPasswordModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      ResetPasswordComponent: {\n        component: ResetPasswordComponent,\n        guards: [NotAuthGuard],\n        providers: [{\n          provide: ResetPasswordComponentService,\n          useClass: ResetPasswordComponentService,\n          deps: [UserPasswordFacade, RoutingService, GlobalMessageService]\n        }]\n      }\n    }\n  })],\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule, RouterModule, I18nModule, FormErrorsModule, SpinnerModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ResetPasswordModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule, RouterModule, I18nModule, FormErrorsModule, SpinnerModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          ResetPasswordComponent: {\n            component: ResetPasswordComponent,\n            guards: [NotAuthGuard],\n            providers: [{\n              provide: ResetPasswordComponentService,\n              useClass: ResetPasswordComponentService,\n              deps: [UserPasswordFacade, RoutingService, GlobalMessageService]\n            }]\n          }\n        }\n      })],\n      declarations: [ResetPasswordComponent]\n    }]\n  }], null, null);\n})();\nclass UpdateEmailComponentService {\n  constructor(userEmail, routingService, globalMessageService, authService, authRedirectService) {\n    this.userEmail = userEmail;\n    this.routingService = routingService;\n    this.globalMessageService = globalMessageService;\n    this.authService = authService;\n    this.authRedirectService = authRedirectService;\n    this.busy$ = new BehaviorSubject(false);\n    this.isUpdating$ = this.busy$.pipe(tap(state => state === true ? this.form.disable() : this.form.enable()));\n    this.form = new FormGroup({\n      email: new FormControl('', [Validators.required, CustomFormValidators.emailValidator]),\n      confirmEmail: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required])\n    }, {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail')\n    });\n  }\n  save() {\n    var _a, _b;\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n    this.busy$.next(true);\n    const newEmail = (_a = this.form.get('confirmEmail')) === null || _a === void 0 ? void 0 : _a.value;\n    const password = (_b = this.form.get('password')) === null || _b === void 0 ? void 0 : _b.value;\n    this.userEmail.update(password, newEmail).subscribe({\n      next: () => this.onSuccess(newEmail),\n      error: error => this.onError(error)\n    });\n  }\n  /**\n   * Handles successful updating of the user email.\n   */\n  onSuccess(newUid) {\n    this.globalMessageService.add({\n      key: 'updateEmailForm.emailUpdateSuccess',\n      params: {\n        newUid\n      }\n    }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    this.busy$.next(false);\n    this.form.reset();\n    // sets the redirect url after login\n    this.authRedirectService.setRedirectUrl(this.routingService.getUrl({\n      cxRoute: 'home'\n    }));\n    // TODO(#9638): Use logout route when it will support passing redirect url\n    this.authService.coreLogout().then(() => {\n      this.routingService.go({\n        cxRoute: 'login'\n      }, {\n        state: {\n          newUid\n        }\n      });\n    });\n  }\n  onError(_error) {\n    this.busy$.next(false);\n  }\n}\nUpdateEmailComponentService.ɵfac = function UpdateEmailComponentService_Factory(t) {\n  return new (t || UpdateEmailComponentService)(i0.ɵɵinject(i1.UserEmailFacade), i0.ɵɵinject(i2$1.RoutingService), i0.ɵɵinject(i2$1.GlobalMessageService), i0.ɵɵinject(i2$1.AuthService), i0.ɵɵinject(i2$1.AuthRedirectService));\n};\nUpdateEmailComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UpdateEmailComponentService,\n  factory: UpdateEmailComponentService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdateEmailComponentService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.UserEmailFacade\n    }, {\n      type: i2$1.RoutingService\n    }, {\n      type: i2$1.GlobalMessageService\n    }, {\n      type: i2$1.AuthService\n    }, {\n      type: i2$1.AuthRedirectService\n    }];\n  }, null);\n})();\nclass UpdateEmailComponent {\n  constructor(service) {\n    this.service = service;\n    this.form = this.service.form;\n    this.isUpdating$ = this.service.isUpdating$;\n  }\n  onSubmit() {\n    this.service.save();\n  }\n}\nUpdateEmailComponent.ɵfac = function UpdateEmailComponent_Factory(t) {\n  return new (t || UpdateEmailComponent)(i0.ɵɵdirectiveInject(UpdateEmailComponentService));\n};\nUpdateEmailComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: UpdateEmailComponent,\n  selectors: [[\"cx-update-email\"]],\n  hostAttrs: [1, \"user-form\"],\n  decls: 31,\n  vars: 36,\n  consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"aria-required\", \"true\", \"type\", \"email\", \"name\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"email\", \"name\", \"confirmEmail\", \"formControlName\", \"confirmEmail\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"password\", \"formControlName\", \"password\", \"autocomplete\", \"new-password\", 1, \"form-control\", 3, \"placeholder\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"], [1, \"overlay\"]],\n  template: function UpdateEmailComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, UpdateEmailComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdateEmailComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\");\n      i0.ɵɵelementStart(4, \"span\", 2);\n      i0.ɵɵtext(5);\n      i0.ɵɵpipe(6, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 3);\n      i0.ɵɵpipe(8, \"cxTranslate\");\n      i0.ɵɵelement(9, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"label\");\n      i0.ɵɵelementStart(11, \"span\", 2);\n      i0.ɵɵtext(12);\n      i0.ɵɵpipe(13, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 5);\n      i0.ɵɵpipe(15, \"cxTranslate\");\n      i0.ɵɵelement(16, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"label\");\n      i0.ɵɵelementStart(18, \"span\", 2);\n      i0.ɵɵtext(19);\n      i0.ɵɵpipe(20, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"input\", 6);\n      i0.ɵɵpipe(22, \"cxTranslate\");\n      i0.ɵɵelement(23, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"a\", 7);\n      i0.ɵɵpipe(25, \"cxUrl\");\n      i0.ɵɵtext(26);\n      i0.ɵɵpipe(27, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"button\", 8);\n      i0.ɵɵtext(29);\n      i0.ɵɵpipe(30, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 15, ctx.isUpdating$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 17, \"updateEmailForm.newEmailAddress.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(8, 19, \"updateEmailForm.newEmailAddress.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"email\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 21, \"updateEmailForm.confirmNewEmailAddress.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(15, 23, \"updateEmailForm.confirmNewEmailAddress.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"confirmEmail\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 25, \"updateEmailForm.password.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(22, 27, \"updateEmailForm.password.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"password\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(25, 29, i0.ɵɵpureFunction0(35, _c0)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(27, 31, \"common.cancel\"), \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.form.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(30, 33, \"common.save\"), \" \");\n    }\n  },\n  directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i2.FormErrorsComponent, i5.RouterLinkWithHref, i2.SpinnerComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdateEmailComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-update-email',\n      templateUrl: './update-email.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'user-form'\n      }\n    }]\n  }], function () {\n    return [{\n      type: UpdateEmailComponentService\n    }];\n  }, null);\n})();\nclass UpdateEmailModule {}\nUpdateEmailModule.ɵfac = function UpdateEmailModule_Factory(t) {\n  return new (t || UpdateEmailModule)();\n};\nUpdateEmailModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UpdateEmailModule\n});\nUpdateEmailModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      UpdateEmailComponent: {\n        component: UpdateEmailComponent,\n        guards: [AuthGuard],\n        providers: [{\n          provide: UpdateEmailComponentService,\n          useClass: UpdateEmailComponentService,\n          deps: [UserEmailFacade, RoutingService, GlobalMessageService, AuthService, AuthRedirectService]\n        }]\n      }\n    }\n  })],\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, UrlModule, RouterModule, I18nModule, FormErrorsModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdateEmailModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, UrlModule, RouterModule, I18nModule, FormErrorsModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          UpdateEmailComponent: {\n            component: UpdateEmailComponent,\n            guards: [AuthGuard],\n            providers: [{\n              provide: UpdateEmailComponentService,\n              useClass: UpdateEmailComponentService,\n              deps: [UserEmailFacade, RoutingService, GlobalMessageService, AuthService, AuthRedirectService]\n            }]\n          }\n        }\n      })],\n      declarations: [UpdateEmailComponent]\n    }]\n  }], null, null);\n})();\nclass UpdatePasswordComponentService {\n  constructor(userPasswordService, routingService, globalMessageService) {\n    this.userPasswordService = userPasswordService;\n    this.routingService = routingService;\n    this.globalMessageService = globalMessageService;\n    this.busy$ = new BehaviorSubject(false);\n    this.isUpdating$ = this.busy$.pipe(tap(state => state === true ? this.form.disable() : this.form.enable()));\n    this.form = new FormGroup({\n      oldPassword: new FormControl('', Validators.required),\n      newPassword: new FormControl('', [Validators.required, CustomFormValidators.passwordValidator]),\n      newPasswordConfirm: new FormControl('', Validators.required)\n    }, {\n      validators: CustomFormValidators.passwordsMustMatch('newPassword', 'newPasswordConfirm')\n    });\n  }\n  /**\n   * Updates the password for the user.\n   */\n  updatePassword() {\n    var _a, _b;\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n    this.busy$.next(true);\n    const oldPassword = (_a = this.form.get('oldPassword')) === null || _a === void 0 ? void 0 : _a.value;\n    const newPassword = (_b = this.form.get('newPassword')) === null || _b === void 0 ? void 0 : _b.value;\n    this.userPasswordService.update(oldPassword, newPassword).subscribe({\n      next: () => this.onSuccess(),\n      error: error => this.onError(error)\n    });\n  }\n  onSuccess() {\n    this.globalMessageService.add({\n      key: 'updatePasswordForm.passwordUpdateSuccess'\n    }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    this.busy$.next(false);\n    this.form.reset();\n    this.routingService.go({\n      cxRoute: 'home'\n    });\n  }\n  onError(_error) {\n    this.busy$.next(false);\n    this.form.reset();\n  }\n}\nUpdatePasswordComponentService.ɵfac = function UpdatePasswordComponentService_Factory(t) {\n  return new (t || UpdatePasswordComponentService)(i0.ɵɵinject(i1.UserPasswordFacade), i0.ɵɵinject(i2$1.RoutingService), i0.ɵɵinject(i2$1.GlobalMessageService));\n};\nUpdatePasswordComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UpdatePasswordComponentService,\n  factory: UpdatePasswordComponentService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdatePasswordComponentService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.UserPasswordFacade\n    }, {\n      type: i2$1.RoutingService\n    }, {\n      type: i2$1.GlobalMessageService\n    }];\n  }, null);\n})();\nclass UpdatePasswordComponent {\n  constructor(service) {\n    this.service = service;\n    this.form = this.service.form;\n    this.isUpdating$ = this.service.isUpdating$;\n  }\n  onSubmit() {\n    this.service.updatePassword();\n  }\n}\nUpdatePasswordComponent.ɵfac = function UpdatePasswordComponent_Factory(t) {\n  return new (t || UpdatePasswordComponent)(i0.ɵɵdirectiveInject(UpdatePasswordComponentService));\n};\nUpdatePasswordComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: UpdatePasswordComponent,\n  selectors: [[\"cx-update-password\"]],\n  hostAttrs: [1, \"user-form\"],\n  decls: 31,\n  vars: 36,\n  consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"oldPassword\", \"formControlName\", \"oldPassword\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"newPassword\", \"formControlName\", \"newPassword\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"newPasswordConfirm\", \"formControlName\", \"newPasswordConfirm\", 1, \"form-control\", 3, \"placeholder\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"], [1, \"overlay\"]],\n  template: function UpdatePasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, UpdatePasswordComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdatePasswordComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\");\n      i0.ɵɵelementStart(4, \"span\", 2);\n      i0.ɵɵtext(5);\n      i0.ɵɵpipe(6, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 3);\n      i0.ɵɵpipe(8, \"cxTranslate\");\n      i0.ɵɵelement(9, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"label\");\n      i0.ɵɵelementStart(11, \"span\", 2);\n      i0.ɵɵtext(12);\n      i0.ɵɵpipe(13, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 5);\n      i0.ɵɵpipe(15, \"cxTranslate\");\n      i0.ɵɵelement(16, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"label\");\n      i0.ɵɵelementStart(18, \"span\", 2);\n      i0.ɵɵtext(19);\n      i0.ɵɵpipe(20, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"input\", 6);\n      i0.ɵɵpipe(22, \"cxTranslate\");\n      i0.ɵɵelement(23, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"a\", 7);\n      i0.ɵɵpipe(25, \"cxUrl\");\n      i0.ɵɵtext(26);\n      i0.ɵɵpipe(27, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"button\", 8);\n      i0.ɵɵtext(29);\n      i0.ɵɵpipe(30, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 15, ctx.isUpdating$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 17, \"updatePasswordForm.oldPassword.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(8, 19, \"updatePasswordForm.oldPassword.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"oldPassword\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 21, \"updatePasswordForm.newPassword.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(15, 23, \"updatePasswordForm.newPassword.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"newPassword\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 25, \"updatePasswordForm.confirmPassword.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(22, 27, \"updatePasswordForm.confirmPassword.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"newPasswordConfirm\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(25, 29, i0.ɵɵpureFunction0(35, _c0)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(27, 31, \"common.cancel\"), \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.form.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(30, 33, \"common.save\"), \" \");\n    }\n  },\n  directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i2.FormErrorsComponent, i5.RouterLinkWithHref, i2.SpinnerComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdatePasswordComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-update-password',\n      templateUrl: './update-password.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'user-form'\n      }\n    }]\n  }], function () {\n    return [{\n      type: UpdatePasswordComponentService\n    }];\n  }, null);\n})();\nclass UpdatePasswordModule {}\nUpdatePasswordModule.ɵfac = function UpdatePasswordModule_Factory(t) {\n  return new (t || UpdatePasswordModule)();\n};\nUpdatePasswordModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UpdatePasswordModule\n});\nUpdatePasswordModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      UpdatePasswordComponent: {\n        component: UpdatePasswordComponent,\n        guards: [AuthGuard],\n        providers: [{\n          provide: UpdatePasswordComponentService,\n          useClass: UpdatePasswordComponentService,\n          deps: [UserPasswordFacade, RoutingService, GlobalMessageService]\n        }]\n      }\n    }\n  })],\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, I18nModule, FormErrorsModule, UrlModule, RouterModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdatePasswordModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, I18nModule, FormErrorsModule, UrlModule, RouterModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          UpdatePasswordComponent: {\n            component: UpdatePasswordComponent,\n            guards: [AuthGuard],\n            providers: [{\n              provide: UpdatePasswordComponentService,\n              useClass: UpdatePasswordComponentService,\n              deps: [UserPasswordFacade, RoutingService, GlobalMessageService]\n            }]\n          }\n        }\n      })],\n      declarations: [UpdatePasswordComponent]\n    }]\n  }], null, null);\n})();\nclass UpdateProfileComponentService {\n  constructor(userProfile, globalMessageService) {\n    this.userProfile = userProfile;\n    this.globalMessageService = globalMessageService;\n    this.user$ = this.userProfile.get().pipe(filter(user => Boolean(user)));\n    this.busy$ = new BehaviorSubject(false);\n    this.isUpdating$ = this.user$.pipe(tap(user => this.form.patchValue(user)), switchMap(_user => this.busy$), tap(state => state === true ? this.form.disable() : this.form.enable()));\n    this.titles$ = this.userProfile.getTitles();\n    this.form = new FormGroup({\n      customerId: new FormControl(''),\n      titleCode: new FormControl(''),\n      firstName: new FormControl('', Validators.required),\n      lastName: new FormControl('', Validators.required)\n    });\n  }\n  /**\n   * Updates the user's details and handles the UI.\n   */\n  updateProfile() {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n    this.busy$.next(true);\n    this.userProfile.update(this.form.value).subscribe({\n      next: () => this.onSuccess(),\n      error: error => this.onError(error)\n    });\n  }\n  onSuccess() {\n    this.globalMessageService.add({\n      key: 'updateProfileForm.profileUpdateSuccess'\n    }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    this.busy$.next(false);\n    this.form.reset();\n  }\n  onError(_error) {\n    this.busy$.next(false);\n  }\n}\nUpdateProfileComponentService.ɵfac = function UpdateProfileComponentService_Factory(t) {\n  return new (t || UpdateProfileComponentService)(i0.ɵɵinject(i1.UserProfileFacade), i0.ɵɵinject(i2$1.GlobalMessageService));\n};\nUpdateProfileComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UpdateProfileComponentService,\n  factory: UpdateProfileComponentService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdateProfileComponentService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.UserProfileFacade\n    }, {\n      type: i2$1.GlobalMessageService\n    }];\n  }, null);\n})();\nclass UpdateProfileComponent {\n  constructor(service) {\n    this.service = service;\n    this.form = this.service.form;\n    this.isUpdating$ = this.service.isUpdating$;\n    this.titles$ = this.service.titles$;\n  }\n  onSubmit() {\n    this.service.updateProfile();\n  }\n}\nUpdateProfileComponent.ɵfac = function UpdateProfileComponent_Factory(t) {\n  return new (t || UpdateProfileComponent)(i0.ɵɵdirectiveInject(UpdateProfileComponentService));\n};\nUpdateProfileComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: UpdateProfileComponent,\n  selectors: [[\"cx-update-profile\"]],\n  hostAttrs: [1, \"user-form\"],\n  decls: 40,\n  vars: 42,\n  consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"formControlName\", \"titleCode\", 1, \"form-control\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"firstName\", \"formControlName\", \"firstName\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"lastName\", \"formControlName\", \"lastName\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"customerId\", \"formControlName\", \"customerId\", \"readonly\", \"\", 1, \"form-control\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"], [1, \"overlay\"], [3, \"value\"]],\n  template: function UpdateProfileComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, UpdateProfileComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdateProfileComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\");\n      i0.ɵɵelementStart(4, \"span\", 2);\n      i0.ɵɵtext(5);\n      i0.ɵɵpipe(6, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"select\", 3);\n      i0.ɵɵelementStart(8, \"option\", 4);\n      i0.ɵɵtext(9);\n      i0.ɵɵpipe(10, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, UpdateProfileComponent_option_11_Template, 2, 2, \"option\", 5);\n      i0.ɵɵpipe(12, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"label\");\n      i0.ɵɵelementStart(14, \"span\", 2);\n      i0.ɵɵtext(15);\n      i0.ɵɵpipe(16, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 6);\n      i0.ɵɵpipe(18, \"cxTranslate\");\n      i0.ɵɵelement(19, \"cx-form-errors\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"label\");\n      i0.ɵɵelementStart(21, \"span\", 2);\n      i0.ɵɵtext(22);\n      i0.ɵɵpipe(23, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(24, \"input\", 8);\n      i0.ɵɵpipe(25, \"cxTranslate\");\n      i0.ɵɵelement(26, \"cx-form-errors\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"label\");\n      i0.ɵɵelementStart(28, \"span\", 2);\n      i0.ɵɵtext(29);\n      i0.ɵɵpipe(30, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(31, \"input\", 9);\n      i0.ɵɵelement(32, \"cx-form-errors\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"a\", 10);\n      i0.ɵɵpipe(34, \"cxUrl\");\n      i0.ɵɵtext(35);\n      i0.ɵɵpipe(36, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"button\", 11);\n      i0.ɵɵtext(38);\n      i0.ɵɵpipe(39, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 17, ctx.isUpdating$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 19, \"updateProfileForm.title\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(10, 21, \"updateProfileForm.none\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(12, 23, ctx.titles$));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(16, 25, \"updateProfileForm.firstName.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(18, 27, \"updateProfileForm.firstName.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"firstName\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(23, 29, \"updateProfileForm.lastName.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(25, 31, \"updateProfileForm.lastName.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"lastName\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(30, 33, \"updateProfileForm.customerId\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"lastName\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(34, 35, i0.ɵɵpureFunction0(41, _c0)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(36, 37, \"common.cancel\"), \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.form.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(39, 39, \"common.save\"), \" \");\n    }\n  },\n  directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.FormControlName, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i3.NgForOf, i4.DefaultValueAccessor, i2.FormErrorsComponent, i5.RouterLinkWithHref, i2.SpinnerComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdateProfileComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-update-profile',\n      templateUrl: './update-profile.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'user-form'\n      }\n    }]\n  }], function () {\n    return [{\n      type: UpdateProfileComponentService\n    }];\n  }, null);\n})();\nclass UpdateProfileModule {}\nUpdateProfileModule.ɵfac = function UpdateProfileModule_Factory(t) {\n  return new (t || UpdateProfileModule)();\n};\nUpdateProfileModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UpdateProfileModule\n});\nUpdateProfileModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      UpdateProfileComponent: {\n        component: UpdateProfileComponent,\n        guards: [AuthGuard],\n        providers: [{\n          provide: UpdateProfileComponentService,\n          useClass: UpdateProfileComponentService,\n          deps: [UserProfileFacade, GlobalMessageService]\n        }]\n      }\n    }\n  })],\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, I18nModule, FormErrorsModule, RouterModule, UrlModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdateProfileModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, I18nModule, FormErrorsModule, RouterModule, UrlModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          UpdateProfileComponent: {\n            component: UpdateProfileComponent,\n            guards: [AuthGuard],\n            providers: [{\n              provide: UpdateProfileComponentService,\n              useClass: UpdateProfileComponentService,\n              deps: [UserProfileFacade, GlobalMessageService]\n            }]\n          }\n        }\n      })],\n      declarations: [UpdateProfileComponent]\n    }]\n  }], null, null);\n})();\nclass UserProfileComponentsModule {}\nUserProfileComponentsModule.ɵfac = function UserProfileComponentsModule_Factory(t) {\n  return new (t || UserProfileComponentsModule)();\n};\nUserProfileComponentsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UserProfileComponentsModule\n});\nUserProfileComponentsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[RegisterComponentModule, UpdateProfileModule, UpdateEmailModule, UpdatePasswordModule, ForgotPasswordModule, ResetPasswordModule, CloseAccountModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserProfileComponentsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [RegisterComponentModule, UpdateProfileModule, UpdateEmailModule, UpdatePasswordModule, ForgotPasswordModule, ResetPasswordModule, CloseAccountModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CloseAccountComponent, CloseAccountModalComponent, CloseAccountModule, ForgotPasswordComponent, ForgotPasswordComponentService, ForgotPasswordModule, RegisterComponent, RegisterComponentModule, ResetPasswordComponent, ResetPasswordComponentService, ResetPasswordModule, UpdateEmailComponent, UpdateEmailComponentService, UpdateEmailModule, UpdatePasswordComponent, UpdatePasswordComponentService, UpdatePasswordModule, UpdateProfileComponent, UpdateProfileComponentService, UpdateProfileModule, UserProfileComponentsModule };","map":{"version":3,"names":["i3","CommonModule","i0","Component","ChangeDetectionStrategy","NgModule","Injectable","i5","RouterModule","i2$1","GlobalMessageType","UrlModule","I18nModule","provideDefaultConfig","AuthGuard","OAuthFlow","NotAuthGuard","RoutingService","AuthConfigService","GlobalMessageService","HttpErrorModel","AuthService","AuthRedirectService","i2","ICON_TYPE","IconModule","SpinnerModule","CustomFormValidators","FormErrorsModule","sortTitles","BehaviorSubject","Subscription","combineLatest","first","tap","map","filter","switchMap","i1","UserPasswordFacade","UserEmailFacade","UserProfileFacade","i4","FormGroup","FormControl","Validators","ReactiveFormsModule","FormsModule","CloseAccountModalComponent","constructor","modalService","authService","globalMessageService","routingService","translationService","userProfile","iconTypes","isLoading$","ngOnInit","isLoggedIn$","isUserLoggedIn","onSuccess","dismissModal","translate","pipe","subscribe","text","add","MSG_TYPE_CONFIRMATION","go","cxRoute","onError","MSG_TYPE_ERROR","reason","dismissActiveModal","closeAccount","next","close","error","ɵfac","ModalService","TranslationService","ɵcmp","NgIf","IconComponent","SpinnerComponent","AsyncPipe","TranslatePipe","type","args","selector","templateUrl","changeDetection","OnPush","CloseAccountComponent","openModal","modal","open","centered","componentInstance","RouterLinkWithHref","UrlPipe","CloseAccountModule","ɵmod","ɵinj","cmsComponents","component","guards","imports","providers","declarations","ForgotPasswordComponentService","userPasswordService","authConfigService","globalMessage","busy$","isUpdating$","state","form","disable","enable","userEmail","required","emailValidator","requestEmail","valid","markAllAsTouched","requestForgotPasswordEmail","value","key","reset","redirect","_error","getOAuthFlow","ResourceOwnerPasswordFlow","ɵprov","ForgotPasswordComponent","service","onSubmit","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","DefaultValueAccessor","NgControlStatus","FormControlName","FormErrorsComponent","ForgotPasswordModule","provide","useClass","deps","RegisterComponent","userRegister","fb","router","anonymousConsentsService","anonymousConsentsConfig","subscription","registerForm","group","titleCode","firstName","lastName","email","password","passwordValidator","passwordconf","newsletter","disabled","isConsentRequired","termsandconditions","requiredTrue","validators","passwordsMustMatch","_a","_b","_c","titles$","getTitles","titles","sort","get","messages","Object","keys","length","globalMessageEntities","some","message","remove","registerConsent","anonymousConsents","anonymousConsent$","getConsent","getTemplate","consent","template","description","valueChanges","toggleAnonymousConsent","submitForm","registerUser","register","collectDataFromRegisterForm","onRegisterUserSuccess","complete","titleSelected","title","setValue","code","formData","uid","toLowerCase","isConsentGiven","_d","requiredConsents","includes","Boolean","giveConsent","withdrawConsent","ngOnDestroy","unsubscribe","UserRegisterFacade","FormBuilder","AnonymousConsentsService","AnonymousConsentsConfig","SelectControlValueAccessor","NgSelectOption","ɵNgSelectMultipleOption","NgForOf","CheckboxControlValueAccessor","RegisterComponentModule","RegisterCustomerComponent","ResetPasswordComponentService","resetToken$","getRouterState","routerState","queryParams","passwordConfirm","resetPassword","token","details","forEach","err","raw","ResetPasswordComponent","token$","host","class","ResetPasswordModule","UpdateEmailComponentService","authRedirectService","confirmEmail","emailsMustMatch","save","newEmail","update","newUid","params","setRedirectUrl","getUrl","coreLogout","then","UpdateEmailComponent","UpdateEmailModule","UpdatePasswordComponentService","oldPassword","newPassword","newPasswordConfirm","updatePassword","UpdatePasswordComponent","UpdatePasswordModule","UpdateProfileComponentService","user$","user","patchValue","_user","customerId","updateProfile","UpdateProfileComponent","UpdateProfileModule","UserProfileComponentsModule"],"sources":["/home/hamid/learning/cx-cangubike/js-storefront/olf/node_modules/@spartacus/user/fesm2015/spartacus-user-profile-components.js"],"sourcesContent":["import * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, NgModule, Injectable } from '@angular/core';\nimport * as i5 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i2$1 from '@spartacus/core';\nimport { GlobalMessageType, UrlModule, I18nModule, provideDefaultConfig, AuthGuard, OAuthFlow, NotAuthGuard, RoutingService, AuthConfigService, GlobalMessageService, HttpErrorModel, AuthService, AuthRedirectService } from '@spartacus/core';\nimport * as i2 from '@spartacus/storefront';\nimport { ICON_TYPE, IconModule, SpinnerModule, CustomFormValidators, FormErrorsModule, sortTitles } from '@spartacus/storefront';\nimport { BehaviorSubject, Subscription, combineLatest } from 'rxjs';\nimport { first, tap, map, filter, switchMap } from 'rxjs/operators';\nimport * as i1 from '@spartacus/user/profile/root';\nimport { UserPasswordFacade, UserEmailFacade, UserProfileFacade } from '@spartacus/user/profile/root';\nimport * as i4 from '@angular/forms';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\n\nclass CloseAccountModalComponent {\n    constructor(modalService, authService, globalMessageService, routingService, translationService, userProfile) {\n        this.modalService = modalService;\n        this.authService = authService;\n        this.globalMessageService = globalMessageService;\n        this.routingService = routingService;\n        this.translationService = translationService;\n        this.userProfile = userProfile;\n        this.iconTypes = ICON_TYPE;\n        this.isLoading$ = new BehaviorSubject(false);\n    }\n    ngOnInit() {\n        this.isLoggedIn$ = this.authService.isUserLoggedIn();\n    }\n    onSuccess() {\n        this.dismissModal();\n        this.translationService\n            .translate('closeAccount.accountClosedSuccessfully')\n            .pipe(first())\n            .subscribe((text) => {\n            this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        });\n        this.routingService.go({ cxRoute: 'home' });\n    }\n    onError() {\n        this.dismissModal();\n        this.translationService\n            .translate('closeAccount.accountClosedFailure')\n            .pipe(first())\n            .subscribe((text) => {\n            this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n    dismissModal(reason) {\n        this.modalService.dismissActiveModal(reason);\n    }\n    closeAccount() {\n        this.isLoading$.next(true);\n        this.userProfile.close().subscribe({\n            next: () => {\n                this.onSuccess();\n                this.isLoading$.next(false);\n            },\n            error: () => {\n                this.onError();\n                this.isLoading$.next(false);\n            },\n        });\n    }\n}\nCloseAccountModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountModalComponent, deps: [{ token: i2.ModalService }, { token: i2$1.AuthService }, { token: i2$1.GlobalMessageService }, { token: i2$1.RoutingService }, { token: i2$1.TranslationService }, { token: i1.UserProfileFacade }], target: i0.ɵɵFactoryTarget.Component });\nCloseAccountModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: CloseAccountModalComponent, selector: \"cx-close-account-modal\", ngImport: i0, template: \"<ng-container *ngIf=\\\"isLoggedIn$ | async\\\">\\n  <div class=\\\"modal-header cx-dialog-header\\\">\\n    <h3 class=\\\"modal-title\\\">\\n      {{ 'closeAccount.confirmAccountClosure' | cxTranslate }}\\n    </h3>\\n    <button\\n      type=\\\"button\\\"\\n      class=\\\"close\\\"\\n      [attr.aria-label]=\\\"'common.close' | cxTranslate\\\"\\n      (click)=\\\"dismissModal()\\\"\\n    >\\n      <span aria-hidden=\\\"true\\\">\\n        <cx-icon [type]=\\\"iconTypes.CLOSE\\\"></cx-icon>\\n      </span>\\n    </button>\\n  </div>\\n\\n  <div *ngIf=\\\"isLoading$ | async; else loaded\\\">\\n    <div class=\\\"cx-spinner\\\">\\n      <cx-spinner> </cx-spinner>\\n    </div>\\n  </div>\\n\\n  <ng-template #loaded>\\n    <div class=\\\"modal-body\\\">\\n      <div class=\\\"cx-row\\\">\\n        <p class=\\\"cx-confirmation\\\">\\n          {{ 'closeAccount.confirmAccountClosureMessage' | cxTranslate }}\\n        </p>\\n      </div>\\n      <div class=\\\"cx-row\\\">\\n        <div class=\\\"cx-btn-group\\\">\\n          <button class=\\\"btn btn-primary\\\" (click)=\\\"closeAccount()\\\">\\n            {{ 'closeAccount.closeMyAccount' | cxTranslate }}\\n          </button>\\n          <button (click)=\\\"dismissModal()\\\" class=\\\"btn btn-block btn-secondary\\\">\\n            {{ 'common.cancel' | cxTranslate }}\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </ng-template>\\n</ng-container>\\n\", components: [{ type: i2.IconComponent, selector: \"cx-icon,[cxIcon]\", inputs: [\"cxIcon\", \"type\"] }, { type: i2.SpinnerComponent, selector: \"cx-spinner\" }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountModalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-close-account-modal',\n                    templateUrl: './close-account-modal.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i2.ModalService }, { type: i2$1.AuthService }, { type: i2$1.GlobalMessageService }, { type: i2$1.RoutingService }, { type: i2$1.TranslationService }, { type: i1.UserProfileFacade }]; } });\n\nclass CloseAccountComponent {\n    constructor(modalService) {\n        this.modalService = modalService;\n    }\n    openModal() {\n        this.modal = this.modalService.open(CloseAccountModalComponent, {\n            centered: true,\n        }).componentInstance;\n    }\n}\nCloseAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountComponent, deps: [{ token: i2.ModalService }], target: i0.ɵɵFactoryTarget.Component });\nCloseAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: CloseAccountComponent, selector: \"cx-close-account\", ngImport: i0, template: \"<div class=\\\"col-lg-8 col-md-9\\\">\\n  <div class=\\\"row cx-btn-group\\\">\\n    <div class=\\\"col-sm-3\\\">\\n      <a\\n        [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n        class=\\\"btn btn-block btn-secondary\\\"\\n        >{{ 'common.cancel' | cxTranslate }}</a\\n      >\\n    </div>\\n    <div class=\\\"col-sm-6\\\">\\n      <button class=\\\"btn btn-primary\\\" (click)=\\\"openModal()\\\">\\n        {{ 'closeAccount.closeMyAccount' | cxTranslate }}\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", directives: [{ type: i5.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }], pipes: { \"cxUrl\": i2$1.UrlPipe, \"cxTranslate\": i2$1.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-close-account',\n                    templateUrl: './close-account.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i2.ModalService }]; } });\n\nclass CloseAccountModule {\n}\nCloseAccountModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCloseAccountModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountModule, declarations: [CloseAccountComponent, CloseAccountModalComponent], imports: [CommonModule,\n        RouterModule,\n        UrlModule,\n        I18nModule,\n        IconModule,\n        SpinnerModule] });\nCloseAccountModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                CloseAccountComponent: {\n                    component: CloseAccountComponent,\n                    guards: [AuthGuard],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            RouterModule,\n            UrlModule,\n            I18nModule,\n            IconModule,\n            SpinnerModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        RouterModule,\n                        UrlModule,\n                        I18nModule,\n                        IconModule,\n                        SpinnerModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                CloseAccountComponent: {\n                                    component: CloseAccountComponent,\n                                    guards: [AuthGuard],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [CloseAccountComponent, CloseAccountModalComponent],\n                }]\n        }] });\n\nclass ForgotPasswordComponentService {\n    constructor(userPasswordService, routingService, authConfigService, globalMessage) {\n        this.userPasswordService = userPasswordService;\n        this.routingService = routingService;\n        this.authConfigService = authConfigService;\n        this.globalMessage = globalMessage;\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.busy$.pipe(tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.form = new FormGroup({\n            userEmail: new FormControl('', [\n                Validators.required,\n                CustomFormValidators.emailValidator,\n            ]),\n        });\n    }\n    /**\n     * Sends an email to the user to reset the password.\n     *\n     * When the `ResourceOwnerPasswordFlow` is used, the user is routed\n     * to the login page.\n     */\n    requestEmail() {\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        this.userPasswordService\n            .requestForgotPasswordEmail(this.form.value.userEmail)\n            .subscribe({\n            next: () => this.onSuccess(),\n            error: (error) => this.onError(error),\n        });\n    }\n    onSuccess() {\n        this.globalMessage.add({ key: 'forgottenPassword.passwordResetEmailSent' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n        this.redirect();\n    }\n    onError(_error) {\n        this.busy$.next(false);\n    }\n    /**\n     * Redirects the user back to the login page.\n     *\n     * This only happens in case of the `ResourceOwnerPasswordFlow` OAuth flow.\n     */\n    redirect() {\n        if (this.authConfigService.getOAuthFlow() ===\n            OAuthFlow.ResourceOwnerPasswordFlow) {\n            this.routingService.go({ cxRoute: 'login' });\n        }\n    }\n}\nForgotPasswordComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordComponentService, deps: [{ token: i1.UserPasswordFacade }, { token: i2$1.RoutingService }, { token: i2$1.AuthConfigService }, { token: i2$1.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });\nForgotPasswordComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserPasswordFacade }, { type: i2$1.RoutingService }, { type: i2$1.AuthConfigService }, { type: i2$1.GlobalMessageService }]; } });\n\nclass ForgotPasswordComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n    }\n    onSubmit() {\n        this.service.requestEmail();\n    }\n}\nForgotPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordComponent, deps: [{ token: ForgotPasswordComponentService }], target: i0.ɵɵFactoryTarget.Component });\nForgotPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: ForgotPasswordComponent, selector: \"cx-forgot-password\", ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'forgottenPassword.emailAddress.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"email\\\"\\n      class=\\\"form-control\\\"\\n      placeholder=\\\"{{\\n        'forgottenPassword.emailAddress.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"userEmail\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('userEmail')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'login' } | cxUrl\\\"\\n    >{{ 'common.cancel' | cxTranslate }}</a\\n  >\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.submit' | cxTranslate }}\\n  </button>\\n</form>\\n\", components: [{ type: i2.SpinnerComponent, selector: \"cx-spinner\" }, { type: i2.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i5.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe, \"cxUrl\": i2$1.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-forgot-password',\n                    templateUrl: './forgot-password.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: ForgotPasswordComponentService }]; } });\n\nclass ForgotPasswordModule {\n}\nForgotPasswordModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nForgotPasswordModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordModule, declarations: [ForgotPasswordComponent], imports: [CommonModule,\n        ReactiveFormsModule,\n        RouterModule,\n        UrlModule,\n        I18nModule,\n        FormErrorsModule,\n        SpinnerModule] });\nForgotPasswordModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                ForgotPasswordComponent: {\n                    component: ForgotPasswordComponent,\n                    guards: [NotAuthGuard],\n                    providers: [\n                        {\n                            provide: ForgotPasswordComponentService,\n                            useClass: ForgotPasswordComponentService,\n                            deps: [\n                                UserPasswordFacade,\n                                RoutingService,\n                                AuthConfigService,\n                                GlobalMessageService,\n                            ],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            RouterModule,\n            UrlModule,\n            I18nModule,\n            FormErrorsModule,\n            SpinnerModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        RouterModule,\n                        UrlModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        SpinnerModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                ForgotPasswordComponent: {\n                                    component: ForgotPasswordComponent,\n                                    guards: [NotAuthGuard],\n                                    providers: [\n                                        {\n                                            provide: ForgotPasswordComponentService,\n                                            useClass: ForgotPasswordComponentService,\n                                            deps: [\n                                                UserPasswordFacade,\n                                                RoutingService,\n                                                AuthConfigService,\n                                                GlobalMessageService,\n                                            ],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [ForgotPasswordComponent],\n                }]\n        }] });\n\nclass RegisterComponent {\n    constructor(userRegister, globalMessageService, fb, router, anonymousConsentsService, anonymousConsentsConfig, authConfigService) {\n        this.userRegister = userRegister;\n        this.globalMessageService = globalMessageService;\n        this.fb = fb;\n        this.router = router;\n        this.anonymousConsentsService = anonymousConsentsService;\n        this.anonymousConsentsConfig = anonymousConsentsConfig;\n        this.authConfigService = authConfigService;\n        this.isLoading$ = new BehaviorSubject(false);\n        this.subscription = new Subscription();\n        this.registerForm = this.fb.group({\n            titleCode: [''],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n            password: [\n                '',\n                [Validators.required, CustomFormValidators.passwordValidator],\n            ],\n            passwordconf: ['', Validators.required],\n            newsletter: new FormControl({\n                value: false,\n                disabled: this.isConsentRequired(),\n            }),\n            termsandconditions: [false, Validators.requiredTrue],\n        }, {\n            validators: CustomFormValidators.passwordsMustMatch('password', 'passwordconf'),\n        });\n    }\n    ngOnInit() {\n        var _a, _b, _c;\n        this.titles$ = this.userRegister.getTitles().pipe(map((titles) => {\n            return titles.sort(sortTitles);\n        }));\n        // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n        this.subscription.add(this.globalMessageService\n            .get()\n            .pipe(filter((messages) => !!Object.keys(messages).length))\n            .subscribe((globalMessageEntities) => {\n            const messages = globalMessageEntities &&\n                globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n            if (messages &&\n                messages.some((message) => message === 'This field is required.')) {\n                this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n                this.globalMessageService.add({ key: 'register.titleRequired' }, GlobalMessageType.MSG_TYPE_ERROR);\n            }\n        }));\n        const registerConsent = (_c = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.registerConsent) !== null && _c !== void 0 ? _c : '';\n        this.anonymousConsent$ = combineLatest([\n            this.anonymousConsentsService.getConsent(registerConsent),\n            this.anonymousConsentsService.getTemplate(registerConsent),\n        ]).pipe(map(([consent, template]) => {\n            return {\n                consent,\n                template: (template === null || template === void 0 ? void 0 : template.description) ? template.description : '',\n            };\n        }));\n        this.subscription.add(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n            this.toggleAnonymousConsent();\n        }));\n    }\n    submitForm() {\n        if (this.registerForm.valid) {\n            this.registerUser();\n        }\n        else {\n            this.registerForm.markAllAsTouched();\n        }\n    }\n    registerUser() {\n        this.isLoading$.next(true);\n        this.userRegister\n            .register(this.collectDataFromRegisterForm(this.registerForm.value))\n            .subscribe({\n            next: () => this.onRegisterUserSuccess(),\n            complete: () => this.isLoading$.next(false),\n        });\n    }\n    titleSelected(title) {\n        this.registerForm['controls'].titleCode.setValue(title.code);\n    }\n    collectDataFromRegisterForm(formData) {\n        const { firstName, lastName, email, password, titleCode } = formData;\n        return {\n            firstName,\n            lastName,\n            uid: email.toLowerCase(),\n            password,\n            titleCode,\n        };\n    }\n    isConsentGiven(consent) {\n        return this.anonymousConsentsService.isConsentGiven(consent);\n    }\n    isConsentRequired() {\n        var _a, _b, _c, _d;\n        const requiredConsents = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.requiredConsents;\n        const registerConsent = (_d = (_c = this.anonymousConsentsConfig) === null || _c === void 0 ? void 0 : _c.anonymousConsents) === null || _d === void 0 ? void 0 : _d.registerConsent;\n        if (requiredConsents && registerConsent) {\n            return requiredConsents.includes(registerConsent);\n        }\n        return false;\n    }\n    onRegisterUserSuccess() {\n        if (this.authConfigService.getOAuthFlow() ===\n            OAuthFlow.ResourceOwnerPasswordFlow) {\n            this.router.go('login');\n        }\n        this.globalMessageService.add({ key: 'register.postRegisterMessage' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n    toggleAnonymousConsent() {\n        var _a, _b;\n        const registerConsent = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.registerConsent;\n        if (registerConsent) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            if (Boolean(this.registerForm.get('newsletter').value)) {\n                this.anonymousConsentsService.giveConsent(registerConsent);\n            }\n            else {\n                this.anonymousConsentsService.withdrawConsent(registerConsent);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\nRegisterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: RegisterComponent, deps: [{ token: i1.UserRegisterFacade }, { token: i2$1.GlobalMessageService }, { token: i4.FormBuilder }, { token: i2$1.RoutingService }, { token: i2$1.AnonymousConsentsService }, { token: i2$1.AnonymousConsentsConfig }, { token: i2$1.AuthConfigService }], target: i0.ɵɵFactoryTarget.Component });\nRegisterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: RegisterComponent, selector: \"cx-register\", ngImport: i0, template: \"<section\\n  class=\\\"cx-page-section container\\\"\\n  *ngIf=\\\"!(isLoading$ | async); else loading\\\"\\n>\\n  <div class=\\\"row justify-content-center\\\">\\n    <div class=\\\"col-md-6\\\">\\n      <div class=\\\"cx-section\\\">\\n        <form (ngSubmit)=\\\"submitForm()\\\" [formGroup]=\\\"registerForm\\\">\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.title' | cxTranslate\\n              }}</span>\\n              <select formControlName=\\\"titleCode\\\" class=\\\"form-control\\\">\\n                <option selected value=\\\"\\\" disabled>\\n                  {{ 'register.selectTitle' | cxTranslate }}\\n                </option>\\n                <option\\n                  *ngFor=\\\"let title of titles$ | async\\\"\\n                  [value]=\\\"title.code\\\"\\n                >\\n                  {{ title.name }}\\n                </option>\\n              </select>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.firstName.label' | cxTranslate\\n              }}</span>\\n              <input\\n                aria-required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"text\\\"\\n                name=\\\"firstname\\\"\\n                placeholder=\\\"{{\\n                  'register.firstName.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"firstName\\\"\\n              />\\n              <cx-form-errors\\n                aria-live=\\\"assertive\\\"\\n                aria-atomic=\\\"true\\\"\\n                [control]=\\\"registerForm.get('firstName')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.lastName.label' | cxTranslate\\n              }}</span>\\n              <input\\n                aria-required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"text\\\"\\n                name=\\\"lastname\\\"\\n                placeholder=\\\"{{\\n                  'register.lastName.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"lastName\\\"\\n              />\\n              <cx-form-errors\\n                aria-live=\\\"assertive\\\"\\n                aria-atomic=\\\"true\\\"\\n                [control]=\\\"registerForm.get('lastName')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.emailAddress.label' | cxTranslate\\n              }}</span>\\n              <input\\n                aria-required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"email\\\"\\n                name=\\\"email\\\"\\n                placeholder=\\\"{{\\n                  'register.emailAddress.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"email\\\"\\n              />\\n              <cx-form-errors\\n                aria-live=\\\"assertive\\\"\\n                aria-atomic=\\\"true\\\"\\n                [control]=\\\"registerForm.get('email')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.password.label' | cxTranslate\\n              }}</span>\\n              <input\\n                aria-required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"password\\\"\\n                name=\\\"password\\\"\\n                placeholder=\\\"{{\\n                  'register.password.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"password\\\"\\n              />\\n              <cx-form-errors\\n                aria-live=\\\"assertive\\\"\\n                aria-atomic=\\\"true\\\"\\n                [control]=\\\"registerForm.get('password')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.confirmPassword.label' | cxTranslate\\n              }}</span>\\n              <input\\n                aria-required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"password\\\"\\n                name=\\\"confirmpassword\\\"\\n                placeholder=\\\"{{\\n                  'register.confirmPassword.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"passwordconf\\\"\\n              />\\n              <cx-form-errors\\n                aria-live=\\\"assertive\\\"\\n                aria-atomic=\\\"true\\\"\\n                [control]=\\\"registerForm.get('passwordconf')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"form-check\\\">\\n              <label *ngIf=\\\"anonymousConsent$ | async as anonymousConsent\\\">\\n                <input\\n                  type=\\\"checkbox\\\"\\n                  name=\\\"newsletter\\\"\\n                  class=\\\"form-check-input\\\"\\n                  formControlName=\\\"newsletter\\\"\\n                  [checked]=\\\"isConsentGiven(anonymousConsent.consent)\\\"\\n                />\\n                <span class=\\\"form-check-label\\\">\\n                  {{ anonymousConsent.template }}\\n                </span>\\n              </label>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"form-check\\\">\\n              <label>\\n                <input\\n                  aria-required=\\\"true\\\"\\n                  type=\\\"checkbox\\\"\\n                  name=\\\"termsandconditions\\\"\\n                  formControlName=\\\"termsandconditions\\\"\\n                />\\n                <span class=\\\"form-check-label\\\">\\n                  {{ 'register.confirmThatRead' | cxTranslate }}\\n                  <a\\n                    [routerLink]=\\\"{ cxRoute: 'termsAndConditions' } | cxUrl\\\"\\n                    target=\\\"_blank\\\"\\n                  >\\n                    {{ 'register.termsAndConditions' | cxTranslate }}\\n                  </a>\\n                </span>\\n                <cx-form-errors\\n                  aria-live=\\\"assertive\\\"\\n                  aria-atomic=\\\"true\\\"\\n                  [control]=\\\"registerForm.get('termsandconditions')\\\"\\n                ></cx-form-errors>\\n              </label>\\n            </div>\\n          </div>\\n          <button type=\\\"submit\\\" class=\\\"btn btn-block btn-primary\\\">\\n            {{ 'register.register' | cxTranslate }}\\n          </button>\\n          <a\\n            class=\\\"cx-login-link btn-link\\\"\\n            [routerLink]=\\\"{ cxRoute: 'login' } | cxUrl\\\"\\n            >{{ 'register.signIn' | cxTranslate }}</a\\n          >\\n        </form>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\\n<ng-template #loading>\\n  <div class=\\\"cx-spinner\\\"><cx-spinner></cx-spinner></div>\\n</ng-template>\\n\", components: [{ type: i2.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }, { type: i2.SpinnerComponent, selector: \"cx-spinner\" }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i4.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i4.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { type: i5.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe, \"cxUrl\": i2$1.UrlPipe } });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: RegisterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-register',\n                    templateUrl: './register.component.html',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.UserRegisterFacade }, { type: i2$1.GlobalMessageService }, { type: i4.FormBuilder }, { type: i2$1.RoutingService }, { type: i2$1.AnonymousConsentsService }, { type: i2$1.AnonymousConsentsConfig }, { type: i2$1.AuthConfigService }]; } });\n\nclass RegisterComponentModule {\n}\nRegisterComponentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: RegisterComponentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRegisterComponentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: RegisterComponentModule, declarations: [RegisterComponent], imports: [CommonModule,\n        ReactiveFormsModule,\n        RouterModule,\n        UrlModule,\n        I18nModule,\n        SpinnerModule,\n        FormErrorsModule] });\nRegisterComponentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: RegisterComponentModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                RegisterCustomerComponent: {\n                    component: RegisterComponent,\n                    guards: [NotAuthGuard],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            RouterModule,\n            UrlModule,\n            I18nModule,\n            SpinnerModule,\n            FormErrorsModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: RegisterComponentModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        RouterModule,\n                        UrlModule,\n                        I18nModule,\n                        SpinnerModule,\n                        FormErrorsModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                RegisterCustomerComponent: {\n                                    component: RegisterComponent,\n                                    guards: [NotAuthGuard],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [RegisterComponent],\n                }]\n        }] });\n\nclass ResetPasswordComponentService {\n    constructor(userPasswordService, routingService, globalMessage) {\n        this.userPasswordService = userPasswordService;\n        this.routingService = routingService;\n        this.globalMessage = globalMessage;\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.busy$.pipe(tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.resetToken$ = this.routingService\n            .getRouterState()\n            .pipe(map((routerState) => routerState.state.queryParams['token']));\n        this.form = new FormGroup({\n            password: new FormControl('', [\n                Validators.required,\n                CustomFormValidators.passwordValidator,\n            ]),\n            passwordConfirm: new FormControl('', Validators.required),\n        }, {\n            validators: CustomFormValidators.passwordsMustMatch('password', 'passwordConfirm'),\n        });\n    }\n    /**\n     * Resets the password by the given token.\n     *\n     * The token has been provided during the request password flow.\n     * The token is not validated on the client.\n     */\n    resetPassword(token) {\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        const password = this.form.get('password').value;\n        this.userPasswordService.reset(token, password).subscribe({\n            next: () => this.onSuccess(),\n            error: (error) => this.onError(error),\n        });\n    }\n    onSuccess() {\n        this.globalMessage.add({ key: 'forgottenPassword.passwordResetSuccess' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n        this.redirect();\n    }\n    onError(error) {\n        var _a;\n        this.busy$.next(false);\n        if (error instanceof HttpErrorModel) {\n            ((_a = error.details) !== null && _a !== void 0 ? _a : []).forEach((err) => {\n                if (err.message) {\n                    this.globalMessage.add({ raw: err.message }, GlobalMessageType.MSG_TYPE_ERROR);\n                }\n            });\n        }\n    }\n    /**\n     * Redirects the user to the login page.\n     */\n    redirect() {\n        this.routingService.go({ cxRoute: 'login' });\n    }\n}\nResetPasswordComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordComponentService, deps: [{ token: i1.UserPasswordFacade }, { token: i2$1.RoutingService }, { token: i2$1.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });\nResetPasswordComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserPasswordFacade }, { type: i2$1.RoutingService }, { type: i2$1.GlobalMessageService }]; } });\n\nclass ResetPasswordComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n        this.token$ = this.service.resetToken$;\n    }\n    onSubmit(token) {\n        this.service.resetPassword(token);\n    }\n}\nResetPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordComponent, deps: [{ token: ResetPasswordComponentService }], target: i0.ɵɵFactoryTarget.Component });\nResetPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: ResetPasswordComponent, selector: \"cx-reset-password\", host: { classAttribute: \"user-form\" }, ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form\\n  *ngIf=\\\"token$ | async as token\\\"\\n  (ngSubmit)=\\\"onSubmit(token)\\\"\\n  [formGroup]=\\\"form\\\"\\n>\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'register.newPassword' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      placeholder=\\\"{{ 'register.password.placeholder' | cxTranslate }}\\\"\\n      formControlName=\\\"password\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('password')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'register.passwordMinRequirements' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      placeholder=\\\"{{ 'register.confirmPassword.placeholder' | cxTranslate }}\\\"\\n      formControlName=\\\"passwordConfirm\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('passwordConfirm')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'register.resetPassword' | cxTranslate }}\\n  </button>\\n</form>\\n\", components: [{ type: i2.SpinnerComponent, selector: \"cx-spinner\" }, { type: i2.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-reset-password',\n                    templateUrl: './reset-password.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: { class: 'user-form' },\n                }]\n        }], ctorParameters: function () { return [{ type: ResetPasswordComponentService }]; } });\n\nclass ResetPasswordModule {\n}\nResetPasswordModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nResetPasswordModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordModule, declarations: [ResetPasswordComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule,\n        I18nModule,\n        FormErrorsModule,\n        SpinnerModule] });\nResetPasswordModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                ResetPasswordComponent: {\n                    component: ResetPasswordComponent,\n                    guards: [NotAuthGuard],\n                    providers: [\n                        {\n                            provide: ResetPasswordComponentService,\n                            useClass: ResetPasswordComponentService,\n                            deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            RouterModule,\n            I18nModule,\n            FormErrorsModule,\n            SpinnerModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        RouterModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        SpinnerModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                ResetPasswordComponent: {\n                                    component: ResetPasswordComponent,\n                                    guards: [NotAuthGuard],\n                                    providers: [\n                                        {\n                                            provide: ResetPasswordComponentService,\n                                            useClass: ResetPasswordComponentService,\n                                            deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [ResetPasswordComponent],\n                }]\n        }] });\n\nclass UpdateEmailComponentService {\n    constructor(userEmail, routingService, globalMessageService, authService, authRedirectService) {\n        this.userEmail = userEmail;\n        this.routingService = routingService;\n        this.globalMessageService = globalMessageService;\n        this.authService = authService;\n        this.authRedirectService = authRedirectService;\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.busy$.pipe(tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.form = new FormGroup({\n            email: new FormControl('', [\n                Validators.required,\n                CustomFormValidators.emailValidator,\n            ]),\n            confirmEmail: new FormControl('', [Validators.required]),\n            password: new FormControl('', [Validators.required]),\n        }, {\n            validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n        });\n    }\n    save() {\n        var _a, _b;\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        const newEmail = (_a = this.form.get('confirmEmail')) === null || _a === void 0 ? void 0 : _a.value;\n        const password = (_b = this.form.get('password')) === null || _b === void 0 ? void 0 : _b.value;\n        this.userEmail.update(password, newEmail).subscribe({\n            next: () => this.onSuccess(newEmail),\n            error: (error) => this.onError(error),\n        });\n    }\n    /**\n     * Handles successful updating of the user email.\n     */\n    onSuccess(newUid) {\n        this.globalMessageService.add({\n            key: 'updateEmailForm.emailUpdateSuccess',\n            params: { newUid },\n        }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n        // sets the redirect url after login\n        this.authRedirectService.setRedirectUrl(this.routingService.getUrl({ cxRoute: 'home' }));\n        // TODO(#9638): Use logout route when it will support passing redirect url\n        this.authService.coreLogout().then(() => {\n            this.routingService.go({ cxRoute: 'login' }, {\n                state: {\n                    newUid,\n                },\n            });\n        });\n    }\n    onError(_error) {\n        this.busy$.next(false);\n    }\n}\nUpdateEmailComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailComponentService, deps: [{ token: i1.UserEmailFacade }, { token: i2$1.RoutingService }, { token: i2$1.GlobalMessageService }, { token: i2$1.AuthService }, { token: i2$1.AuthRedirectService }], target: i0.ɵɵFactoryTarget.Injectable });\nUpdateEmailComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserEmailFacade }, { type: i2$1.RoutingService }, { type: i2$1.GlobalMessageService }, { type: i2$1.AuthService }, { type: i2$1.AuthRedirectService }]; } });\n\nclass UpdateEmailComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n    }\n    onSubmit() {\n        this.service.save();\n    }\n}\nUpdateEmailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailComponent, deps: [{ token: UpdateEmailComponentService }], target: i0.ɵɵFactoryTarget.Component });\nUpdateEmailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: UpdateEmailComponent, selector: \"cx-update-email\", host: { classAttribute: \"user-form\" }, ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateEmailForm.newEmailAddress.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"email\\\"\\n      name=\\\"email\\\"\\n      formControlName=\\\"email\\\"\\n      placeholder=\\\"{{\\n        'updateEmailForm.newEmailAddress.placeholder' | cxTranslate\\n      }}\\\"\\n      class=\\\"form-control\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('email')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateEmailForm.confirmNewEmailAddress.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"email\\\"\\n      name=\\\"confirmEmail\\\"\\n      formControlName=\\\"confirmEmail\\\"\\n      placeholder=\\\"{{\\n        'updateEmailForm.confirmNewEmailAddress.placeholder' | cxTranslate\\n      }}\\\"\\n      class=\\\"form-control\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('confirmEmail')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateEmailForm.password.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"password\\\"\\n      name=\\\"password\\\"\\n      formControlName=\\\"password\\\"\\n      placeholder=\\\"{{ 'updateEmailForm.password.placeholder' | cxTranslate }}\\\"\\n      class=\\\"form-control\\\"\\n      autocomplete=\\\"new-password\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('password')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n  >\\n    {{ 'common.cancel' | cxTranslate }}\\n  </a>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.save' | cxTranslate }}\\n  </button>\\n</form>\\n\", components: [{ type: i2.SpinnerComponent, selector: \"cx-spinner\" }, { type: i2.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i5.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe, \"cxUrl\": i2$1.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-update-email',\n                    templateUrl: './update-email.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: { class: 'user-form' },\n                }]\n        }], ctorParameters: function () { return [{ type: UpdateEmailComponentService }]; } });\n\nclass UpdateEmailModule {\n}\nUpdateEmailModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUpdateEmailModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailModule, declarations: [UpdateEmailComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SpinnerModule,\n        UrlModule,\n        RouterModule,\n        I18nModule,\n        FormErrorsModule] });\nUpdateEmailModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                UpdateEmailComponent: {\n                    component: UpdateEmailComponent,\n                    guards: [AuthGuard],\n                    providers: [\n                        {\n                            provide: UpdateEmailComponentService,\n                            useClass: UpdateEmailComponentService,\n                            deps: [\n                                UserEmailFacade,\n                                RoutingService,\n                                GlobalMessageService,\n                                AuthService,\n                                AuthRedirectService,\n                            ],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            SpinnerModule,\n            UrlModule,\n            RouterModule,\n            I18nModule,\n            FormErrorsModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        SpinnerModule,\n                        UrlModule,\n                        RouterModule,\n                        I18nModule,\n                        FormErrorsModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                UpdateEmailComponent: {\n                                    component: UpdateEmailComponent,\n                                    guards: [AuthGuard],\n                                    providers: [\n                                        {\n                                            provide: UpdateEmailComponentService,\n                                            useClass: UpdateEmailComponentService,\n                                            deps: [\n                                                UserEmailFacade,\n                                                RoutingService,\n                                                GlobalMessageService,\n                                                AuthService,\n                                                AuthRedirectService,\n                                            ],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [UpdateEmailComponent],\n                }]\n        }] });\n\nclass UpdatePasswordComponentService {\n    constructor(userPasswordService, routingService, globalMessageService) {\n        this.userPasswordService = userPasswordService;\n        this.routingService = routingService;\n        this.globalMessageService = globalMessageService;\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.busy$.pipe(tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.form = new FormGroup({\n            oldPassword: new FormControl('', Validators.required),\n            newPassword: new FormControl('', [\n                Validators.required,\n                CustomFormValidators.passwordValidator,\n            ]),\n            newPasswordConfirm: new FormControl('', Validators.required),\n        }, {\n            validators: CustomFormValidators.passwordsMustMatch('newPassword', 'newPasswordConfirm'),\n        });\n    }\n    /**\n     * Updates the password for the user.\n     */\n    updatePassword() {\n        var _a, _b;\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        const oldPassword = (_a = this.form.get('oldPassword')) === null || _a === void 0 ? void 0 : _a.value;\n        const newPassword = (_b = this.form.get('newPassword')) === null || _b === void 0 ? void 0 : _b.value;\n        this.userPasswordService.update(oldPassword, newPassword).subscribe({\n            next: () => this.onSuccess(),\n            error: (error) => this.onError(error),\n        });\n    }\n    onSuccess() {\n        this.globalMessageService.add({ key: 'updatePasswordForm.passwordUpdateSuccess' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n        this.routingService.go({ cxRoute: 'home' });\n    }\n    onError(_error) {\n        this.busy$.next(false);\n        this.form.reset();\n    }\n}\nUpdatePasswordComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordComponentService, deps: [{ token: i1.UserPasswordFacade }, { token: i2$1.RoutingService }, { token: i2$1.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });\nUpdatePasswordComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserPasswordFacade }, { type: i2$1.RoutingService }, { type: i2$1.GlobalMessageService }]; } });\n\nclass UpdatePasswordComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n    }\n    onSubmit() {\n        this.service.updatePassword();\n    }\n}\nUpdatePasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordComponent, deps: [{ token: UpdatePasswordComponentService }], target: i0.ɵɵFactoryTarget.Component });\nUpdatePasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: UpdatePasswordComponent, selector: \"cx-update-password\", host: { classAttribute: \"user-form\" }, ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updatePasswordForm.oldPassword.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      name=\\\"oldPassword\\\"\\n      placeholder=\\\"{{\\n        'updatePasswordForm.oldPassword.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"oldPassword\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('oldPassword')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updatePasswordForm.newPassword.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      name=\\\"newPassword\\\"\\n      placeholder=\\\"{{\\n        'updatePasswordForm.newPassword.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"newPassword\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('newPassword')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updatePasswordForm.confirmPassword.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      name=\\\"newPasswordConfirm\\\"\\n      placeholder=\\\"{{\\n        'updatePasswordForm.confirmPassword.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"newPasswordConfirm\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('newPasswordConfirm')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n  >\\n    {{ 'common.cancel' | cxTranslate }}\\n  </a>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.save' | cxTranslate }}\\n  </button>\\n</form>\\n\", components: [{ type: i2.SpinnerComponent, selector: \"cx-spinner\" }, { type: i2.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i5.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe, \"cxUrl\": i2$1.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-update-password',\n                    templateUrl: './update-password.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: { class: 'user-form' },\n                }]\n        }], ctorParameters: function () { return [{ type: UpdatePasswordComponentService }]; } });\n\nclass UpdatePasswordModule {\n}\nUpdatePasswordModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUpdatePasswordModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordModule, declarations: [UpdatePasswordComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SpinnerModule,\n        I18nModule,\n        FormErrorsModule,\n        UrlModule,\n        RouterModule] });\nUpdatePasswordModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                UpdatePasswordComponent: {\n                    component: UpdatePasswordComponent,\n                    guards: [AuthGuard],\n                    providers: [\n                        {\n                            provide: UpdatePasswordComponentService,\n                            useClass: UpdatePasswordComponentService,\n                            deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            SpinnerModule,\n            I18nModule,\n            FormErrorsModule,\n            UrlModule,\n            RouterModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        SpinnerModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        UrlModule,\n                        RouterModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                UpdatePasswordComponent: {\n                                    component: UpdatePasswordComponent,\n                                    guards: [AuthGuard],\n                                    providers: [\n                                        {\n                                            provide: UpdatePasswordComponentService,\n                                            useClass: UpdatePasswordComponentService,\n                                            deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [UpdatePasswordComponent],\n                }]\n        }] });\n\nclass UpdateProfileComponentService {\n    constructor(userProfile, globalMessageService) {\n        this.userProfile = userProfile;\n        this.globalMessageService = globalMessageService;\n        this.user$ = this.userProfile\n            .get()\n            .pipe(filter((user) => Boolean(user)));\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.user$.pipe(tap((user) => this.form.patchValue(user)), switchMap((_user) => this.busy$), tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.titles$ = this.userProfile.getTitles();\n        this.form = new FormGroup({\n            customerId: new FormControl(''),\n            titleCode: new FormControl(''),\n            firstName: new FormControl('', Validators.required),\n            lastName: new FormControl('', Validators.required),\n        });\n    }\n    /**\n     * Updates the user's details and handles the UI.\n     */\n    updateProfile() {\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        this.userProfile.update(this.form.value).subscribe({\n            next: () => this.onSuccess(),\n            error: (error) => this.onError(error),\n        });\n    }\n    onSuccess() {\n        this.globalMessageService.add({\n            key: 'updateProfileForm.profileUpdateSuccess',\n        }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n    }\n    onError(_error) {\n        this.busy$.next(false);\n    }\n}\nUpdateProfileComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileComponentService, deps: [{ token: i1.UserProfileFacade }, { token: i2$1.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });\nUpdateProfileComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserProfileFacade }, { type: i2$1.GlobalMessageService }]; } });\n\nclass UpdateProfileComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n        this.titles$ = this.service.titles$;\n    }\n    onSubmit() {\n        this.service.updateProfile();\n    }\n}\nUpdateProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileComponent, deps: [{ token: UpdateProfileComponentService }], target: i0.ɵɵFactoryTarget.Component });\nUpdateProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: UpdateProfileComponent, selector: \"cx-update-profile\", host: { classAttribute: \"user-form\" }, ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.title' | cxTranslate\\n    }}</span>\\n    <select formControlName=\\\"titleCode\\\" class=\\\"form-control\\\">\\n      <option value=\\\"\\\">{{ 'updateProfileForm.none' | cxTranslate }}</option>\\n      <option *ngFor=\\\"let title of titles$ | async\\\" [value]=\\\"title.code\\\">\\n        {{ title.name }}\\n      </option>\\n    </select>\\n  </label>\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.firstName.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      name=\\\"firstName\\\"\\n      placeholder=\\\"{{\\n        'updateProfileForm.firstName.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"firstName\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('firstName')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.lastName.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      name=\\\"lastName\\\"\\n      placeholder=\\\"{{ 'updateProfileForm.lastName.placeholder' | cxTranslate }}\\\"\\n      formControlName=\\\"lastName\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('lastName')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.customerId' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      name=\\\"customerId\\\"\\n      formControlName=\\\"customerId\\\"\\n      readonly\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('lastName')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n  >\\n    {{ 'common.cancel' | cxTranslate }}\\n  </a>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.save' | cxTranslate }}\\n  </button>\\n</form>\\n\", components: [{ type: i2.SpinnerComponent, selector: \"cx-spinner\" }, { type: i2.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i4.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i4.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i5.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe, \"cxUrl\": i2$1.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-update-profile',\n                    templateUrl: './update-profile.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: { class: 'user-form' },\n                }]\n        }], ctorParameters: function () { return [{ type: UpdateProfileComponentService }]; } });\n\nclass UpdateProfileModule {\n}\nUpdateProfileModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUpdateProfileModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileModule, declarations: [UpdateProfileComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SpinnerModule,\n        I18nModule,\n        FormErrorsModule,\n        RouterModule,\n        UrlModule] });\nUpdateProfileModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                UpdateProfileComponent: {\n                    component: UpdateProfileComponent,\n                    guards: [AuthGuard],\n                    providers: [\n                        {\n                            provide: UpdateProfileComponentService,\n                            useClass: UpdateProfileComponentService,\n                            deps: [UserProfileFacade, GlobalMessageService],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            SpinnerModule,\n            I18nModule,\n            FormErrorsModule,\n            RouterModule,\n            UrlModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        SpinnerModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        RouterModule,\n                        UrlModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                UpdateProfileComponent: {\n                                    component: UpdateProfileComponent,\n                                    guards: [AuthGuard],\n                                    providers: [\n                                        {\n                                            provide: UpdateProfileComponentService,\n                                            useClass: UpdateProfileComponentService,\n                                            deps: [UserProfileFacade, GlobalMessageService],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [UpdateProfileComponent],\n                }]\n        }] });\n\nclass UserProfileComponentsModule {\n}\nUserProfileComponentsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileComponentsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUserProfileComponentsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileComponentsModule, imports: [RegisterComponentModule,\n        UpdateProfileModule,\n        UpdateEmailModule,\n        UpdatePasswordModule,\n        ForgotPasswordModule,\n        ResetPasswordModule,\n        CloseAccountModule] });\nUserProfileComponentsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileComponentsModule, imports: [[\n            RegisterComponentModule,\n            UpdateProfileModule,\n            UpdateEmailModule,\n            UpdatePasswordModule,\n            ForgotPasswordModule,\n            ResetPasswordModule,\n            CloseAccountModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileComponentsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        RegisterComponentModule,\n                        UpdateProfileModule,\n                        UpdateEmailModule,\n                        UpdatePasswordModule,\n                        ForgotPasswordModule,\n                        ResetPasswordModule,\n                        CloseAccountModule,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CloseAccountComponent, CloseAccountModalComponent, CloseAccountModule, ForgotPasswordComponent, ForgotPasswordComponentService, ForgotPasswordModule, RegisterComponent, RegisterComponentModule, ResetPasswordComponent, ResetPasswordComponentService, ResetPasswordModule, UpdateEmailComponent, UpdateEmailComponentService, UpdateEmailModule, UpdatePasswordComponent, UpdatePasswordComponentService, UpdatePasswordModule, UpdateProfileComponent, UpdateProfileComponentService, UpdateProfileModule, UserProfileComponentsModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}