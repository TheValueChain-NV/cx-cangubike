{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig, provideDefaultConfigFactory, HttpErrorHandler } from '@spartacus/core';\nimport { OrganizationConflictHandler, OrganizationBadRequestHandler } from '@spartacus/organization/administration/core';\n\n/**\n * Names of the route params used in the organization administration feature\n */\nconst ROUTE_PARAMS = {\n  budgetCode: 'budgetCode',\n  unitCode: 'unitCode',\n  costCenterCode: 'costCenterCode',\n  userCode: 'userCode',\n  userGroupCode: 'userGroupCode',\n  permissionCode: 'permissionCode',\n  addressCode: 'addressId'\n};\nconst listPath$5 = `organization/budgets/:${ROUTE_PARAMS.budgetCode}`;\nconst paramsMapping$5 = {\n  budgetCode: 'code'\n};\nconst defaultBudgetRoutingConfig = {\n  routing: {\n    routes: {\n      orgBudget: {\n        paths: ['organization/budgets']\n      },\n      orgBudgetCreate: {\n        paths: ['organization/budgets/create']\n      },\n      orgBudgetDetails: {\n        paths: [`${listPath$5}`],\n        paramsMapping: paramsMapping$5\n      },\n      orgBudgetCostCenters: {\n        paths: [`${listPath$5}/cost-centers`],\n        paramsMapping: paramsMapping$5\n      },\n      orgBudgetEdit: {\n        paths: [`${listPath$5}/edit`],\n        paramsMapping: paramsMapping$5\n      }\n    }\n  }\n};\nconst listPath$4 = `organization/cost-centers/:${ROUTE_PARAMS.costCenterCode}`;\nconst paramsMapping$4 = {\n  costCenterCode: 'code'\n};\nconst defaultCostCenterRoutingConfig = {\n  routing: {\n    routes: {\n      orgCostCenter: {\n        paths: ['organization/cost-centers']\n      },\n      orgCostCenterCreate: {\n        paths: ['organization/cost-centers/create']\n      },\n      orgCostCenterDetails: {\n        paths: [`${listPath$4}`],\n        paramsMapping: paramsMapping$4\n      },\n      orgCostCenterBudgets: {\n        paths: [`${listPath$4}/budgets`],\n        paramsMapping: paramsMapping$4\n      },\n      orgCostCenterAssignBudgets: {\n        paths: [`${listPath$4}/budgets/assign`],\n        paramsMapping: paramsMapping$4\n      },\n      orgCostCenterEdit: {\n        paths: [`${listPath$4}/edit`],\n        paramsMapping: paramsMapping$4\n      }\n    }\n  }\n};\nconst defaultOrganizationLayoutConfig = {\n  layoutSlots: {\n    CompanyPageTemplate: {\n      slots: ['BodyContent']\n    }\n  }\n};\nconst listPath$3 = `organization/purchase-limits/:${ROUTE_PARAMS.permissionCode}`;\nconst paramsMapping$3 = {\n  permissionCode: 'code'\n};\nconst defaultPermissionRoutingConfig = {\n  routing: {\n    routes: {\n      orgPurchaseLimit: {\n        paths: ['organization/purchase-limits']\n      },\n      orgPurchaseLimitCreate: {\n        paths: ['organization/purchase-limits/create']\n      },\n      orgPurchaseLimitDetails: {\n        paths: [listPath$3],\n        paramsMapping: paramsMapping$3\n      },\n      orgPurchaseLimitEdit: {\n        paths: [`${listPath$3}/edit`],\n        paramsMapping: paramsMapping$3\n      }\n    }\n  }\n};\nconst listPath$2 = `organization/units/:${ROUTE_PARAMS.unitCode}`;\nconst paramsMapping$2 = {\n  unitCode: 'uid',\n  addressId: 'id',\n  userCode: 'customerId'\n};\nconst defaultUnitsRoutingConfig = {\n  routing: {\n    routes: {\n      orgUnits: {\n        paths: ['organization/units']\n      },\n      orgUnitCreate: {\n        paths: ['organization/units/create']\n      },\n      orgUnitDetails: {\n        paths: [listPath$2],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitEdit: {\n        paths: [`${listPath$2}/edit`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitChildren: {\n        paths: [`${listPath$2}/children`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitCreateChild: {\n        paths: [`${listPath$2}/children/create`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitUserList: {\n        paths: [`${listPath$2}/users`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitCreateUser: {\n        paths: [`${listPath$2}/users/create`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitUserRoles: {\n        paths: [`${listPath$2}/users/:userCode/roles`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitApprovers: {\n        paths: [`${listPath$2}/approvers`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitAssignApprovers: {\n        paths: [`${listPath$2}/approvers/assign`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitAddressList: {\n        paths: [`${listPath$2}/addresses`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitAddressCreate: {\n        paths: [`${listPath$2}/addresses/create`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitAddressDetails: {\n        paths: [`${listPath$2}/addresses/:addressId`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitAddressEdit: {\n        paths: [`${listPath$2}/addresses/:addressId/edit`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitCostCenters: {\n        paths: [`${listPath$2}/cost-centers`],\n        paramsMapping: paramsMapping$2\n      },\n      orgUnitCreateCostCenter: {\n        paths: [`${listPath$2}/cost-centers/create`],\n        paramsMapping: paramsMapping$2\n      }\n    }\n  }\n};\nconst listPath$1 = `organization/user-groups/:${ROUTE_PARAMS.userGroupCode}`;\nconst paramsMapping$1 = {\n  userGroupCode: 'uid'\n};\n// TODO: this doesn't work with lazy loaded feature\nconst defaultUserGroupRoutingConfig = {\n  routing: {\n    routes: {\n      orgUserGroup: {\n        paths: ['organization/user-groups']\n      },\n      orgUserGroupCreate: {\n        paths: ['organization/user-groups/create']\n      },\n      orgUserGroupDetails: {\n        paths: [listPath$1],\n        paramsMapping: paramsMapping$1\n      },\n      orgUserGroupEdit: {\n        paths: [`${listPath$1}/edit`],\n        paramsMapping: paramsMapping$1\n      },\n      orgUserGroupUsers: {\n        paths: [`${listPath$1}/users`],\n        paramsMapping: paramsMapping$1\n      },\n      orgUserGroupAssignUsers: {\n        paths: [`${listPath$1}/users/assign`],\n        paramsMapping: paramsMapping$1\n      },\n      orgUserGroupPermissions: {\n        paths: [`${listPath$1}/purchase-limits`],\n        paramsMapping: paramsMapping$1\n      },\n      orgUserGroupAssignPermissions: {\n        paths: [`${listPath$1}/purchase-limits/assign`],\n        paramsMapping: paramsMapping$1\n      }\n    }\n  }\n};\nconst listPath = `organization/users/:${ROUTE_PARAMS.userCode}`;\nconst paramsMapping = {\n  userCode: 'customerId'\n};\nconst defaultUserRoutingConfig = {\n  routing: {\n    routes: {\n      orgUser: {\n        paths: ['organization/users']\n      },\n      orgUserCreate: {\n        paths: ['organization/users/create']\n      },\n      orgUserDetails: {\n        paths: [listPath],\n        paramsMapping\n      },\n      orgUserEdit: {\n        paths: [`${listPath}/edit`],\n        paramsMapping\n      },\n      orgUserChangePassword: {\n        paths: [`${listPath}/change-password`],\n        paramsMapping\n      },\n      orgUserApprovers: {\n        paths: [`${listPath}/approvers`],\n        paramsMapping\n      },\n      orgUserAssignApprovers: {\n        paths: [`${listPath}/approvers/assign`],\n        paramsMapping\n      },\n      orgUserPermissions: {\n        paths: [`${listPath}/purchase-limits`],\n        paramsMapping\n      },\n      orgUserAssignPermissions: {\n        paths: [`${listPath}/purchase-limits/assign`],\n        paramsMapping\n      },\n      orgUserUserGroups: {\n        paths: [`${listPath}/user-groups`],\n        paramsMapping\n      },\n      orgUserAssignUserGroups: {\n        paths: [`${listPath}/user-groups/assign`],\n        paramsMapping\n      }\n    }\n  }\n};\nconst ORGANIZATION_ADMINISTRATION_FEATURE = 'organizationAdministration';\n\n// TODO: Inline this factory when we start releasing Ivy compiled libraries\nfunction defaultOrganizationAdministrationComponentsConfig() {\n  const config = {\n    featureModules: {\n      [ORGANIZATION_ADMINISTRATION_FEATURE]: {\n        cmsComponents: ['ManageBudgetsListComponent', 'ManageCostCentersListComponent', 'ManagePermissionsListComponent', 'ManageUnitsListComponent', 'ManageUsersListComponent', 'ManageUserGroupsListComponent']\n      }\n    }\n  };\n  return config;\n}\nlet AdministrationRootModule = /*#__PURE__*/(() => {\n  class AdministrationRootModule {}\n  AdministrationRootModule.ɵfac = function AdministrationRootModule_Factory(t) {\n    return new (t || AdministrationRootModule)();\n  };\n  AdministrationRootModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AdministrationRootModule\n  });\n  AdministrationRootModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideDefaultConfig(defaultOrganizationLayoutConfig), provideDefaultConfig({\n      routing: {\n        routes: {\n          organization: {\n            paths: ['organization']\n          }\n        }\n      }\n    }), provideDefaultConfig(defaultBudgetRoutingConfig), provideDefaultConfig(defaultCostCenterRoutingConfig), provideDefaultConfig(defaultPermissionRoutingConfig), provideDefaultConfig(defaultUnitsRoutingConfig), provideDefaultConfig(defaultUserRoutingConfig), provideDefaultConfig(defaultUserGroupRoutingConfig), provideDefaultConfigFactory(defaultOrganizationAdministrationComponentsConfig), {\n      provide: HttpErrorHandler,\n      useExisting: OrganizationConflictHandler,\n      multi: true\n    }, {\n      provide: HttpErrorHandler,\n      useExisting: OrganizationBadRequestHandler,\n      multi: true\n    }]\n  });\n  return AdministrationRootModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AdministrationRootModule, ORGANIZATION_ADMINISTRATION_FEATURE, ROUTE_PARAMS, defaultBudgetRoutingConfig, defaultCostCenterRoutingConfig, defaultOrganizationAdministrationComponentsConfig, defaultOrganizationLayoutConfig, defaultPermissionRoutingConfig, defaultUnitsRoutingConfig, defaultUserGroupRoutingConfig, defaultUserRoutingConfig };\n//# sourceMappingURL=spartacus-organization-administration-root.js.map","map":null,"metadata":{},"sourceType":"module"}