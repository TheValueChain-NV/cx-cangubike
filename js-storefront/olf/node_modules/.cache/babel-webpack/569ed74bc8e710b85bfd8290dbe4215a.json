{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, isDevMode, NgModule } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { Config, facadeFactory, provideDefaultConfigFactory, provideDefaultConfig } from '@spartacus/core';\nimport { Subject, forkJoin, of, from } from 'rxjs';\nimport { take, catchError, switchMap, filter, tap } from 'rxjs/operators';\nimport { OrderEntriesSource, ProductImportStatus, CmsPageGuard, PageLayoutComponent, ORDER_ENTRIES_CONTEXT } from '@spartacus/storefront';\nimport * as i1 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nconst defaultQuickOrderConfig = {\n  quickOrder: {\n    searchForm: {\n      displayProductImages: true,\n      maxProducts: 5,\n      minCharactersBeforeRequest: 3\n    }\n  }\n};\nlet QuickOrderConfig = /*#__PURE__*/(() => {\n  class QuickOrderConfig {}\n  QuickOrderConfig.ɵfac = function QuickOrderConfig_Factory(t) {\n    return new (t || QuickOrderConfig)();\n  };\n  QuickOrderConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: QuickOrderConfig,\n    factory: function QuickOrderConfig_Factory(t) {\n      let r = null;\n      if (t) {\n        r = new (t || QuickOrderConfig)();\n      } else {\n        r = i0.ɵɵinject(Config);\n      }\n      return r;\n    },\n    providedIn: 'root'\n  });\n  return QuickOrderConfig;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst CART_QUICK_ORDER_FEATURE = 'cartQuickOrder';\nconst CART_QUICK_ORDER_CORE_FEATURE = 'cartQuickOrderCore';\nfunction quickOrderFacadeFactory() {\n  return facadeFactory({\n    facade: QuickOrderFacade,\n    feature: CART_QUICK_ORDER_CORE_FEATURE,\n    methods: ['addProduct', 'addToCart', 'clearList', 'canAdd', 'setListLimit', 'getEntries', 'getProductAdded', 'loadEntries', 'softDeleteEntry', 'search', 'searchProducts', 'setProductAdded', 'updateEntryQuantity', 'getSoftDeletedEntries', 'restoreSoftDeletedEntry', 'hardDeleteEntry', 'clearDeletedEntries', 'getNonPurchasableProductError', 'setNonPurchasableProductError', 'clearNonPurchasableProductError']\n  });\n}\nlet QuickOrderFacade = /*#__PURE__*/(() => {\n  class QuickOrderFacade {}\n  QuickOrderFacade.ɵfac = function QuickOrderFacade_Factory(t) {\n    return new (t || QuickOrderFacade)();\n  };\n  QuickOrderFacade.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: QuickOrderFacade,\n    factory: function () {\n      return quickOrderFacadeFactory();\n    },\n    providedIn: 'root'\n  });\n  return QuickOrderFacade;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet QuickOrderOrderEntriesContext = /*#__PURE__*/(() => {\n  class QuickOrderOrderEntriesContext {\n    constructor(quickOrderService, productConnector) {\n      this.quickOrderService = quickOrderService;\n      this.productConnector = productConnector;\n      this.type = OrderEntriesSource.QUICK_ORDER;\n    }\n    getEntries() {\n      return this.quickOrderService.getEntries();\n    }\n    addEntries(productsData) {\n      const results$ = new Subject();\n      forkJoin(productsData.map(productData => this.productConnector.get(productData.productCode).pipe(take(1), catchError(response => {\n        this.handleErrors(response, productData.productCode, results$);\n        return of(null);\n      })))).pipe(switchMap(products => from(products).pipe(filter(product => !!product), switchMap(product => this.quickOrderService.canAdd(product.code).pipe(take(1), tap(canAdd => {\n        const productData = productsData.find(p => p.productCode === product.code);\n        if (canAdd) {\n          this.handleResults(product, productData, results$);\n          this.quickOrderService.addProduct(product, productData.quantity);\n        } else {\n          results$.next({\n            productCode: productData.productCode,\n            statusCode: ProductImportStatus.LIMIT_EXCEEDED\n          });\n        }\n      })))))).subscribe();\n      return results$.pipe(take(productsData.length));\n    }\n    handleResults(product, productData, results$) {\n      var _a, _b;\n      if (((_a = product.stock) === null || _a === void 0 ? void 0 : _a.stockLevel) && productData.quantity >= product.stock.stockLevel) {\n        results$.next({\n          productCode: productData.productCode,\n          productName: product === null || product === void 0 ? void 0 : product.name,\n          statusCode: ProductImportStatus.LOW_STOCK,\n          quantity: productData.quantity,\n          quantityAdded: product.stock.stockLevel\n        });\n      } else if (((_b = product.stock) === null || _b === void 0 ? void 0 : _b.stockLevelStatus) === 'outOfStock') {\n        results$.next({\n          productCode: productData.productCode,\n          statusCode: ProductImportStatus.NO_STOCK,\n          productName: product === null || product === void 0 ? void 0 : product.name\n        });\n      } else {\n        results$.next({\n          productCode: productData.productCode,\n          statusCode: ProductImportStatus.SUCCESS\n        });\n      }\n    }\n    handleErrors(response, productCode, results$) {\n      var _a;\n      if (((_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.errors[0].type) === 'UnknownIdentifierError') {\n        results$.next({\n          productCode,\n          statusCode: ProductImportStatus.UNKNOWN_IDENTIFIER\n        });\n      } else {\n        if (isDevMode()) {\n          console.warn('Unrecognized cart add entry action type while mapping messages', response);\n        }\n        results$.next({\n          productCode,\n          statusCode: ProductImportStatus.UNKNOWN_ERROR\n        });\n      }\n    }\n  }\n  QuickOrderOrderEntriesContext.ɵfac = function QuickOrderOrderEntriesContext_Factory(t) {\n    return new (t || QuickOrderOrderEntriesContext)(i0.ɵɵinject(QuickOrderFacade), i0.ɵɵinject(i2.ProductConnector));\n  };\n  QuickOrderOrderEntriesContext.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: QuickOrderOrderEntriesContext,\n    factory: QuickOrderOrderEntriesContext.ɵfac,\n    providedIn: 'root'\n  });\n  return QuickOrderOrderEntriesContext;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction defaultQuickOrderComponentsConfig() {\n  const config = {\n    featureModules: {\n      [CART_QUICK_ORDER_FEATURE]: {\n        cmsComponents: ['QuickOrderComponent', 'CartQuickOrderFormComponent']\n      },\n      // by default core is bundled together with components\n      [CART_QUICK_ORDER_CORE_FEATURE]: CART_QUICK_ORDER_FEATURE\n    }\n  };\n  return config;\n}\nconst defaultQuickOrderRoutingConfig = {\n  routing: {\n    routes: {\n      quickOrder: {\n        paths: ['my-account/quick-order']\n      }\n    }\n  }\n};\nlet QuickOrderRootModule = /*#__PURE__*/(() => {\n  class QuickOrderRootModule {}\n  QuickOrderRootModule.ɵfac = function QuickOrderRootModule_Factory(t) {\n    return new (t || QuickOrderRootModule)();\n  };\n  QuickOrderRootModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: QuickOrderRootModule\n  });\n  QuickOrderRootModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideDefaultConfigFactory(defaultQuickOrderComponentsConfig), provideDefaultConfig(defaultQuickOrderRoutingConfig), provideDefaultConfig(defaultQuickOrderConfig)],\n    imports: [[RouterModule.forChild([{\n      // @ts-ignore\n      path: null,\n      canActivate: [CmsPageGuard],\n      component: PageLayoutComponent,\n      data: {\n        cxRoute: 'quickOrder',\n        cxContext: {\n          [ORDER_ENTRIES_CONTEXT]: QuickOrderOrderEntriesContext\n        }\n      }\n    }])]]\n  });\n  return QuickOrderRootModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CART_QUICK_ORDER_CORE_FEATURE, CART_QUICK_ORDER_FEATURE, QuickOrderConfig, QuickOrderFacade, QuickOrderOrderEntriesContext, QuickOrderRootModule, defaultQuickOrderComponentsConfig, defaultQuickOrderConfig, defaultQuickOrderRoutingConfig, quickOrderFacadeFactory };\n//# sourceMappingURL=spartacus-cart-quick-order-root.js.map","map":null,"metadata":{},"sourceType":"module"}