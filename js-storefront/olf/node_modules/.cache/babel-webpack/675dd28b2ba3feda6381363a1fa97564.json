{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { NgModule, isDevMode, Injectable } from '@angular/core';\nimport { EMPTY } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport * as i1 from '@spartacus/tracking/personalization/root';\nimport * as i2 from '@spartacus/core';\nlet PersonalizationCoreModule = /*#__PURE__*/(() => {\n  class PersonalizationCoreModule {}\n  PersonalizationCoreModule.ɵfac = function PersonalizationCoreModule_Factory(t) {\n    return new (t || PersonalizationCoreModule)();\n  };\n  PersonalizationCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: PersonalizationCoreModule\n  });\n  PersonalizationCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return PersonalizationCoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PersonalizationContextService = /*#__PURE__*/(() => {\n  class PersonalizationContextService {\n    constructor(config, cmsService) {\n      this.config = config;\n      this.cmsService = cmsService;\n    }\n    getPersonalizationContext() {\n      var _a;\n      if (!((_a = this.config.personalization) === null || _a === void 0 ? void 0 : _a.context)) {\n        if (isDevMode()) {\n          console.warn(`There is no context configured in Personalization.`);\n        }\n        return EMPTY;\n      } else {\n        const context = this.config.personalization.context;\n        return this.cmsService.getCurrentPage().pipe(filter(Boolean), map(page => {\n          var _a;\n          return (_a = page.slots) === null || _a === void 0 ? void 0 : _a[context.slotPosition];\n        }), filter(Boolean), map(slot => {\n          var _a, _b, _c;\n          const scriptComponent = (_a = slot.components) === null || _a === void 0 ? void 0 : _a.find(i => i.uid === context.componentId);\n          return this.buildPersonalizationContext((_c = (_b = scriptComponent === null || scriptComponent === void 0 ? void 0 : scriptComponent.properties) === null || _b === void 0 ? void 0 : _b.script) === null || _c === void 0 ? void 0 : _c.data);\n        }));\n      }\n    }\n    buildPersonalizationContext(data) {\n      if (data) {\n        const context = JSON.parse(atob(data));\n        context.actions.forEach(action => {\n          Object.keys(action).forEach(key => {\n            action[key] = atob(action[key]);\n          });\n        });\n        for (let i = 0; i < context.segments.length; i++) {\n          context.segments[i] = atob(context.segments[i]);\n        }\n        return context;\n      }\n    }\n  }\n  PersonalizationContextService.ɵfac = function PersonalizationContextService_Factory(t) {\n    return new (t || PersonalizationContextService)(i0.ɵɵinject(i1.PersonalizationConfig), i0.ɵɵinject(i2.CmsService));\n  };\n  PersonalizationContextService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PersonalizationContextService,\n    factory: PersonalizationContextService.ɵfac,\n    providedIn: 'root'\n  });\n  return PersonalizationContextService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { PersonalizationContextService, PersonalizationCoreModule };\n//# sourceMappingURL=spartacus-tracking-personalization-core.js.map","map":null,"metadata":{},"sourceType":"module"}