{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1$1 from '@ngrx/effects';\nimport { ofType, Effect, EffectsModule } from '@ngrx/effects';\nimport { RestoreSavedCartEvent, RestoreSavedCartSuccessEvent, RestoreSavedCartFailEvent, DeleteSavedCartEvent, DeleteSavedCartSuccessEvent, DeleteSavedCartFailEvent, SaveCartSuccessEvent, SaveCartFailEvent, SaveCartEvent, EditSavedCartSuccessEvent, EditSavedCartFailEvent, EditSavedCartEvent, CloneSavedCartEvent, CloneSavedCartSuccessEvent, CloneSavedCartFailEvent, SavedCartFacade } from '@spartacus/cart/saved-cart/root';\nimport * as i2 from '@spartacus/core';\nimport { StateUtils, MULTI_CART_DATA, PROCESS_FEATURE, CartActions, createFrom, normalizeHttpError, GlobalMessageType, getWishlistName, isSelectiveCart, ProcessSelectors } from '@spartacus/core';\nimport { of, queueScheduler, EMPTY, combineLatest } from 'rxjs';\nimport { switchMap, withLatestFrom, map, filter, catchError, observeOn, startWith, tap, pluck, shareReplay, distinctUntilChanged } from 'rxjs/operators';\nimport * as i1 from '@ngrx/store';\nimport { select } from '@ngrx/store';\nimport { __decorate } from 'tslib';\nclass SavedCartAdapter {}\nlet SavedCartConnector = /*#__PURE__*/(() => {\n  class SavedCartConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    get(userId, cartId) {\n      return this.adapter.load(userId, cartId);\n    }\n    getList(userId) {\n      return this.adapter.loadList(userId);\n    }\n    restoreSavedCart(userId, cartId) {\n      return this.adapter.restoreSavedCart(userId, cartId);\n    }\n    saveCart(userId, cartId, saveCartName, saveCartDescription) {\n      return this.adapter.saveCart(userId, cartId, saveCartName, saveCartDescription);\n    }\n    cloneSavedCart(userId, cartId, saveCartName) {\n      return this.adapter.cloneSavedCart(userId, cartId, saveCartName);\n    }\n  }\n  SavedCartConnector.ɵfac = function SavedCartConnector_Factory(t) {\n    return new (t || SavedCartConnector)(i0.ɵɵinject(SavedCartAdapter));\n  };\n  SavedCartConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SavedCartConnector,\n    factory: SavedCartConnector.ɵfac\n  });\n  return SavedCartConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst SAVED_CART_LIST_PROCESS_ID = 'saved-cart-list';\nconst SAVED_CART_RESTORE_CART_PROCESS_ID = 'saved-cart-restore-cart';\nconst SAVED_CART_SAVE_CART_PROCESS_ID = 'saved-cart-save-cart';\nconst SAVED_CART_CLONE_CART_PROCESS_ID = 'saved-cart-clone-cart';\nconst LOAD_SAVED_CART = '[Saved Cart] Load Saved Cart';\nconst LOAD_SAVED_CART_SUCCESS = '[Saved Cart] Load Saved Cart Success';\nconst LOAD_SAVED_CART_FAIL = '[Saved Cart] Load Saved Cart Fail';\nconst LOAD_SAVED_CARTS = '[Saved Cart] Load Saved Carts';\nconst LOAD_SAVED_CARTS_SUCCESS = '[Saved Cart] Load Saved Carts Success';\nconst LOAD_SAVED_CARTS_FAIL = '[Saved Cart] Load Saved Carts Fail';\nconst CLEAR_SAVED_CARTS = '[Saved Cart] Clear Saved Carts';\nconst RESTORE_SAVED_CART = '[Saved Cart] Restore Saved Cart';\nconst RESTORE_SAVED_CART_SUCCESS = '[Saved Cart] Restore Saved Cart Success';\nconst RESTORE_SAVED_CART_FAIL = '[Saved Cart] Restore Saved Cart Fail';\nconst CLEAR_RESTORE_SAVED_CART = '[Saved Cart] Clear Restore Saved Cart';\nconst SAVE_CART = '[Saved Cart] Save Cart';\nconst SAVE_CART_SUCCESS = '[Saved Cart] Save Cart Success';\nconst SAVE_CART_FAIL = '[Saved Cart] Save Cart Fail';\nconst CLEAR_SAVE_CART = '[Saved Cart] Clear Save Cart';\nconst EDIT_SAVED_CART = '[Saved Cart] Edit Saved Cart';\nconst EDIT_SAVED_CART_SUCCESS = '[Saved Cart] Edit Saved Cart Success';\nconst EDIT_SAVED_CART_FAIL = '[Saved Cart] Edit Saved Cart Fail';\nconst CLONE_SAVED_CART = '[Saved Cart] Clone Saved Cart';\nconst CLONE_SAVED_CART_SUCCESS = '[Saved Cart] Clone Saved Cart Success';\nconst CLONE_SAVED_CART_FAIL = '[Saved Cart] Clone Saved Cart Fail';\nconst CLEAR_CLONE_SAVED_CART = '[Saved Cart] Clear Clone Saved Cart';\nclass LoadSavedCart extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = LOAD_SAVED_CART;\n  }\n}\nclass LoadSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = LOAD_SAVED_CART_SUCCESS;\n  }\n}\nclass LoadSavedCartFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId, payload === null || payload === void 0 ? void 0 : payload.error);\n    this.payload = payload;\n    this.type = LOAD_SAVED_CART_FAIL;\n  }\n}\nclass LoadSavedCarts extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n    this.payload = payload;\n    this.type = LOAD_SAVED_CARTS;\n  }\n}\nclass LoadSavedCartsSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n    this.payload = payload;\n    this.type = LOAD_SAVED_CARTS_SUCCESS;\n  }\n}\nclass LoadSavedCartsFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID, payload.error);\n    this.payload = payload;\n    this.type = LOAD_SAVED_CARTS_FAIL;\n  }\n}\nclass ClearSavedCarts extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n    this.type = CLEAR_SAVED_CARTS;\n  }\n}\nclass RestoreSavedCart extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = RESTORE_SAVED_CART;\n  }\n}\nclass RestoreSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = RESTORE_SAVED_CART_SUCCESS;\n  }\n}\nclass RestoreSavedCartFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID, payload.error);\n    this.payload = payload;\n    this.type = RESTORE_SAVED_CART_FAIL;\n  }\n}\nclass ClearRestoreSavedCart extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n    this.type = CLEAR_RESTORE_SAVED_CART;\n  }\n}\nclass SaveCart extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = SAVE_CART;\n  }\n}\nclass SaveCartSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = SAVE_CART_SUCCESS;\n  }\n}\nclass SaveCartFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID, payload.error);\n    this.payload = payload;\n    this.type = SAVE_CART_FAIL;\n  }\n}\nclass ClearSaveCart extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n    this.type = CLEAR_SAVE_CART;\n  }\n}\nclass EditSavedCart extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = EDIT_SAVED_CART;\n  }\n}\nclass EditSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = EDIT_SAVED_CART_SUCCESS;\n  }\n}\nclass EditSavedCartFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID, payload.error);\n    this.payload = payload;\n    this.type = EDIT_SAVED_CART_FAIL;\n  }\n}\nclass CloneSavedCart extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = CLONE_SAVED_CART;\n  }\n}\nclass CloneSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = CLONE_SAVED_CART_SUCCESS;\n  }\n}\nclass CloneSavedCartFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID, payload.error);\n    this.payload = payload;\n    this.type = CLONE_SAVED_CART_FAIL;\n  }\n}\nclass ClearCloneSavedCart extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n    this.type = CLEAR_CLONE_SAVED_CART;\n  }\n}\nvar savedCart_action = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LOAD_SAVED_CART: LOAD_SAVED_CART,\n  LOAD_SAVED_CART_SUCCESS: LOAD_SAVED_CART_SUCCESS,\n  LOAD_SAVED_CART_FAIL: LOAD_SAVED_CART_FAIL,\n  LOAD_SAVED_CARTS: LOAD_SAVED_CARTS,\n  LOAD_SAVED_CARTS_SUCCESS: LOAD_SAVED_CARTS_SUCCESS,\n  LOAD_SAVED_CARTS_FAIL: LOAD_SAVED_CARTS_FAIL,\n  CLEAR_SAVED_CARTS: CLEAR_SAVED_CARTS,\n  RESTORE_SAVED_CART: RESTORE_SAVED_CART,\n  RESTORE_SAVED_CART_SUCCESS: RESTORE_SAVED_CART_SUCCESS,\n  RESTORE_SAVED_CART_FAIL: RESTORE_SAVED_CART_FAIL,\n  CLEAR_RESTORE_SAVED_CART: CLEAR_RESTORE_SAVED_CART,\n  SAVE_CART: SAVE_CART,\n  SAVE_CART_SUCCESS: SAVE_CART_SUCCESS,\n  SAVE_CART_FAIL: SAVE_CART_FAIL,\n  CLEAR_SAVE_CART: CLEAR_SAVE_CART,\n  EDIT_SAVED_CART: EDIT_SAVED_CART,\n  EDIT_SAVED_CART_SUCCESS: EDIT_SAVED_CART_SUCCESS,\n  EDIT_SAVED_CART_FAIL: EDIT_SAVED_CART_FAIL,\n  CLONE_SAVED_CART: CLONE_SAVED_CART,\n  CLONE_SAVED_CART_SUCCESS: CLONE_SAVED_CART_SUCCESS,\n  CLONE_SAVED_CART_FAIL: CLONE_SAVED_CART_FAIL,\n  CLEAR_CLONE_SAVED_CART: CLEAR_CLONE_SAVED_CART,\n  LoadSavedCart: LoadSavedCart,\n  LoadSavedCartSuccess: LoadSavedCartSuccess,\n  LoadSavedCartFail: LoadSavedCartFail,\n  LoadSavedCarts: LoadSavedCarts,\n  LoadSavedCartsSuccess: LoadSavedCartsSuccess,\n  LoadSavedCartsFail: LoadSavedCartsFail,\n  ClearSavedCarts: ClearSavedCarts,\n  RestoreSavedCart: RestoreSavedCart,\n  RestoreSavedCartSuccess: RestoreSavedCartSuccess,\n  RestoreSavedCartFail: RestoreSavedCartFail,\n  ClearRestoreSavedCart: ClearRestoreSavedCart,\n  SaveCart: SaveCart,\n  SaveCartSuccess: SaveCartSuccess,\n  SaveCartFail: SaveCartFail,\n  ClearSaveCart: ClearSaveCart,\n  EditSavedCart: EditSavedCart,\n  EditSavedCartSuccess: EditSavedCartSuccess,\n  EditSavedCartFail: EditSavedCartFail,\n  CloneSavedCart: CloneSavedCart,\n  CloneSavedCartSuccess: CloneSavedCartSuccess,\n  CloneSavedCartFail: CloneSavedCartFail,\n  ClearCloneSavedCart: ClearCloneSavedCart\n});\nlet SavedCartEventBuilder = /*#__PURE__*/(() => {\n  class SavedCartEventBuilder {\n    constructor(actionsSubject, eventService, stateEventService, multiCartService) {\n      this.actionsSubject = actionsSubject;\n      this.eventService = eventService;\n      this.stateEventService = stateEventService;\n      this.multiCartService = multiCartService;\n      this.register();\n    }\n    /**\n     * Registers events for the saved cart\n     */\n    register() {\n      this.registerRestoreSavedCartEvents();\n      this.registerDeleteSavedCartEvents();\n      this.registerSaveCartEvents();\n      this.registerEditSavedCartEvents();\n      this.registerCloneSavedCartEvents();\n    }\n    /**\n     * Registers restore saved cart events\n     */\n    registerRestoreSavedCartEvents() {\n      this.buildRestoreSavedCartEvents({\n        action: RESTORE_SAVED_CART,\n        event: RestoreSavedCartEvent\n      });\n      this.buildRestoreSavedCartEvents({\n        action: RESTORE_SAVED_CART_SUCCESS,\n        event: RestoreSavedCartSuccessEvent\n      });\n      this.buildRestoreSavedCartEvents({\n        action: RESTORE_SAVED_CART_FAIL,\n        event: RestoreSavedCartFailEvent\n      });\n    }\n    /**\n     * Registers delete saved cart events\n     */\n    registerDeleteSavedCartEvents() {\n      this.stateEventService.register({\n        action: CartActions.DELETE_CART,\n        event: DeleteSavedCartEvent,\n        factory: action => createFrom(DeleteSavedCartEvent, Object.assign(Object.assign({}, action.payload), {\n          cartCode: action.payload.cartId\n        }))\n      });\n      this.stateEventService.register({\n        action: CartActions.DELETE_CART_SUCCESS,\n        event: DeleteSavedCartSuccessEvent,\n        factory: action => createFrom(DeleteSavedCartSuccessEvent, Object.assign(Object.assign({}, action.payload), {\n          cartCode: action.payload.cartId\n        }))\n      });\n      this.stateEventService.register({\n        action: CartActions.DELETE_CART_FAIL,\n        event: DeleteSavedCartFailEvent,\n        factory: action => createFrom(DeleteSavedCartFailEvent, Object.assign(Object.assign({}, action.payload), {\n          cartCode: action.payload.cartId\n        }))\n      });\n    }\n    /**\n     * Registers save cart events\n     */\n    registerSaveCartEvents() {\n      this.buildSaveCartSuccessEvent({\n        action: SAVE_CART_SUCCESS,\n        event: SaveCartSuccessEvent\n      });\n      this.stateEventService.register({\n        action: SAVE_CART_FAIL,\n        event: SaveCartFailEvent,\n        factory: action => createFrom(SaveCartFailEvent, Object.assign(Object.assign({}, action.payload), {\n          cartCode: action.payload.cartId\n        }))\n      });\n      this.stateEventService.register({\n        action: SAVE_CART,\n        event: SaveCartEvent,\n        factory: action => {\n          return createFrom(SaveCartEvent, Object.assign(Object.assign({}, action.payload), {\n            cartCode: action.payload.cartId\n          }));\n        }\n      });\n    }\n    /**\n     * Registers edit saved cart events\n     */\n    registerEditSavedCartEvents() {\n      this.buildSaveCartSuccessEvent({\n        action: EDIT_SAVED_CART_SUCCESS,\n        event: EditSavedCartSuccessEvent\n      });\n      this.stateEventService.register({\n        action: EDIT_SAVED_CART_FAIL,\n        event: EditSavedCartFailEvent,\n        factory: action => createFrom(EditSavedCartFailEvent, Object.assign(Object.assign({}, action.payload), {\n          cartCode: action.payload.cartId\n        }))\n      });\n      this.stateEventService.register({\n        action: EDIT_SAVED_CART,\n        event: EditSavedCartEvent,\n        factory: action => {\n          return createFrom(EditSavedCartEvent, Object.assign(Object.assign({}, action.payload), {\n            cartCode: action.payload.cartId\n          }));\n        }\n      });\n    }\n    /**\n     * Registers clone saved cart events\n     */\n    registerCloneSavedCartEvents() {\n      this.buildRestoreSavedCartEvents({\n        action: CLONE_SAVED_CART,\n        event: CloneSavedCartEvent\n      });\n      this.buildRestoreSavedCartEvents({\n        action: CLONE_SAVED_CART_SUCCESS,\n        event: CloneSavedCartSuccessEvent\n      });\n      this.buildRestoreSavedCartEvents({\n        action: CLONE_SAVED_CART_FAIL,\n        event: CloneSavedCartFailEvent\n      });\n    }\n    /**\n     * Builds the restore save cart events from the action and cart\n     *\n     * @param mapping mapping declaration from `action` string type to `event` class type\n     * @param saveTime should the saveTime attribute be added to the event\n     * @returns\n     */\n    buildRestoreSavedCartEvents(mapping) {\n      const eventStream$ = this.getAction(mapping.action).pipe(switchMap(action => of(action).pipe(withLatestFrom(this.multiCartService.getCart(action.payload.cartId)))), map(([action, cart]) => createFrom(mapping.event, Object.assign(Object.assign(Object.assign({}, action.payload), {\n        cartCode: cart.code,\n        saveCartName: cart.name,\n        saveCartDescription: cart.description\n      }), cart.saveTime && {\n        saveTime: cart.saveTime\n      }))));\n      return this.eventService.register(mapping.event, eventStream$);\n    }\n    /**\n     * Builds save cart event by adding the saveTime from the cart\n     *\n     * @param mapping mapping declaration from `action` string type to `event` class type\n     * @returns events register function\n     */\n    buildSaveCartSuccessEvent(mapping) {\n      const eventStream$ = this.getAction(mapping.action).pipe(switchMap(action => of(action).pipe(withLatestFrom(this.multiCartService.getCart(action.payload.cartId)))), filter(([, cart]) => Boolean(cart)), map(([action, cart]) => createFrom(mapping.event, Object.assign(Object.assign({}, action.payload), {\n        cartCode: cart.code,\n        saveTime: cart.saveTime\n      }))));\n      return this.eventService.register(mapping.event, eventStream$);\n    }\n    /**\n     * Returns a stream of actions only of a given type(s)\n     *\n     * @param actionType type(s) of actions\n     */\n    getAction(actionType) {\n      return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n    }\n  }\n  SavedCartEventBuilder.ɵfac = function SavedCartEventBuilder_Factory(t) {\n    return new (t || SavedCartEventBuilder)(i0.ɵɵinject(i1.ActionsSubject), i0.ɵɵinject(i2.EventService), i0.ɵɵinject(i2.StateEventService), i0.ɵɵinject(i2.MultiCartService));\n  };\n  SavedCartEventBuilder.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SavedCartEventBuilder,\n    factory: SavedCartEventBuilder.ɵfac,\n    providedIn: 'root'\n  });\n  return SavedCartEventBuilder;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SavedCartEventsModule = /*#__PURE__*/(() => {\n  class SavedCartEventsModule {\n    constructor(_savedCartEventBuilder) {}\n  }\n  SavedCartEventsModule.ɵfac = function SavedCartEventsModule_Factory(t) {\n    return new (t || SavedCartEventsModule)(i0.ɵɵinject(SavedCartEventBuilder));\n  };\n  SavedCartEventsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SavedCartEventsModule\n  });\n  SavedCartEventsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return SavedCartEventsModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SavedCartEffects = /*#__PURE__*/(() => {\n  class SavedCartEffects {\n    constructor(actions$, savedCartConnector, activeCartService, globalMessageService) {\n      this.actions$ = actions$;\n      this.savedCartConnector = savedCartConnector;\n      this.activeCartService = activeCartService;\n      this.globalMessageService = globalMessageService;\n      this.loadSavedCart$ = this.actions$.pipe(ofType(LOAD_SAVED_CART), map(action => action.payload), switchMap(({\n        userId,\n        cartId\n      }) => this.savedCartConnector.get(userId, cartId).pipe(switchMap(savedCart => {\n        return [new CartActions.LoadCartSuccess({\n          userId,\n          cartId,\n          cart: savedCart\n        }), new LoadSavedCartSuccess({\n          userId,\n          cartId\n        })];\n      }), catchError(error => of(new LoadSavedCartFail({\n        userId,\n        cartId,\n        error: normalizeHttpError(error)\n      }))))));\n      this.loadSavedCarts$ = this.actions$.pipe(ofType(LOAD_SAVED_CARTS), map(action => action.payload), switchMap(({\n        userId\n      }) => this.savedCartConnector.getList(userId).pipe(switchMap(savedCarts => {\n        return [new CartActions.LoadCartsSuccess(savedCarts), new LoadSavedCartsSuccess({\n          userId\n        })];\n      }), catchError(error => of(new LoadSavedCartsFail({\n        userId,\n        error: normalizeHttpError(error)\n      }))))));\n      this.restoreSavedCart$ = this.actions$.pipe(ofType(RESTORE_SAVED_CART), map(action => action.payload), withLatestFrom(this.activeCartService.getActive()), switchMap(([{\n        userId,\n        cartId\n      }, activeCart]) => {\n        var _a;\n        const actions = [];\n        if (((_a = activeCart === null || activeCart === void 0 ? void 0 : activeCart.entries) !== null && _a !== void 0 ? _a : []).length > 0) {\n          if (activeCart.code) {\n            /**\n             * Instead of calling the SaveCartAction, we are calling the edit saved cart\n             * because we do not want to clear the state when we swap carts between active and saved cart\n             */\n            actions.push(new EditSavedCart({\n              userId,\n              cartId: activeCart.code,\n              saveCartName: '',\n              saveCartDescription: ''\n            }));\n          }\n        }\n        return this.savedCartConnector.restoreSavedCart(userId, cartId).pipe(switchMap(savedCart => {\n          var _a;\n          this.globalMessageService.add({\n            key: ((_a = activeCart === null || activeCart === void 0 ? void 0 : activeCart.entries) !== null && _a !== void 0 ? _a : []).length > 0 ? 'savedCartList.swapCartWithActiveCart' : 'savedCartList.swapCartNoActiveCart',\n            params: {\n              cartName: cartId,\n              previousCartName: activeCart.code\n            }\n          }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n          return [...actions, new CartActions.SetActiveCartId(cartId), new CartActions.LoadCartSuccess({\n            userId,\n            cartId,\n            cart: savedCart\n          }), new RestoreSavedCartSuccess({\n            userId,\n            cartId\n          })];\n        }), catchError(error => of(new RestoreSavedCartFail({\n          userId,\n          cartId,\n          error: normalizeHttpError(error)\n        }))));\n      }));\n      this.saveCart$ = this.actions$.pipe(ofType(SAVE_CART), map(action => action.payload), switchMap(({\n        userId,\n        cartId,\n        saveCartName,\n        saveCartDescription\n      }) => {\n        return this.savedCartConnector.saveCart(userId, cartId, saveCartName, saveCartDescription).pipe(switchMap(savedCart => {\n          return [new CartActions.ClearCartState(), new CartActions.LoadCartSuccess({\n            userId,\n            cartId,\n            cart: savedCart\n          }), new SaveCartSuccess({\n            userId,\n            cartId,\n            saveCartName,\n            saveCartDescription\n          })];\n        }), catchError(error => of(new SaveCartFail({\n          userId,\n          cartId,\n          saveCartName,\n          saveCartDescription,\n          error: normalizeHttpError(error)\n        }))));\n      }));\n      this.editSavedCart$ = this.actions$.pipe(ofType(EDIT_SAVED_CART), map(action => action.payload), switchMap(({\n        userId,\n        cartId,\n        saveCartName,\n        saveCartDescription\n      }) => {\n        return this.savedCartConnector.saveCart(userId, cartId, saveCartName, saveCartDescription).pipe(switchMap(savedCart => {\n          return [new CartActions.LoadCartSuccess({\n            userId,\n            cartId,\n            cart: savedCart\n          }), new EditSavedCartSuccess({\n            userId,\n            cartId,\n            saveCartName,\n            saveCartDescription\n          })];\n        }), catchError(error => of(new EditSavedCartFail({\n          userId,\n          cartId,\n          saveCartName,\n          saveCartDescription,\n          error: normalizeHttpError(error)\n        }))));\n      }));\n      this.cloneSavedCart$ = this.actions$.pipe(ofType(CLONE_SAVED_CART), map(action => action.payload), switchMap(({\n        userId,\n        cartId,\n        saveCartName\n      }) => {\n        return this.savedCartConnector.cloneSavedCart(userId, cartId, saveCartName).pipe(switchMap(_ => {\n          return [new CloneSavedCartSuccess({\n            userId,\n            cartId,\n            saveCartName\n          }), new RestoreSavedCart({\n            userId,\n            cartId\n          }), new LoadSavedCarts({\n            userId\n          })];\n        }), catchError(error => of(new CloneSavedCartFail({\n          userId,\n          cartId,\n          saveCartName,\n          error: normalizeHttpError(error)\n        }))));\n      }));\n    }\n  }\n  SavedCartEffects.ɵfac = function SavedCartEffects_Factory(t) {\n    return new (t || SavedCartEffects)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(SavedCartConnector), i0.ɵɵinject(i2.ActiveCartService), i0.ɵɵinject(i2.GlobalMessageService));\n  };\n  SavedCartEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SavedCartEffects,\n    factory: SavedCartEffects.ɵfac\n  });\n  __decorate([Effect()], SavedCartEffects.prototype, \"loadSavedCart$\", void 0);\n  __decorate([Effect()], SavedCartEffects.prototype, \"loadSavedCarts$\", void 0);\n  __decorate([Effect()], SavedCartEffects.prototype, \"restoreSavedCart$\", void 0);\n  __decorate([Effect()], SavedCartEffects.prototype, \"saveCart$\", void 0);\n  __decorate([Effect()], SavedCartEffects.prototype, \"editSavedCart$\", void 0);\n  __decorate([Effect()], SavedCartEffects.prototype, \"cloneSavedCart$\", void 0);\n  return SavedCartEffects;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst effects = [SavedCartEffects];\nlet SavedCartStoreModule = /*#__PURE__*/(() => {\n  class SavedCartStoreModule {}\n  SavedCartStoreModule.ɵfac = function SavedCartStoreModule_Factory(t) {\n    return new (t || SavedCartStoreModule)();\n  };\n  SavedCartStoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SavedCartStoreModule\n  });\n  SavedCartStoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[EffectsModule.forFeature(effects)]]\n  });\n  return SavedCartStoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SavedCartService = /*#__PURE__*/(() => {\n  class SavedCartService {\n    constructor(store, userIdService, userService, multiCartService, eventService) {\n      this.store = store;\n      this.userIdService = userIdService;\n      this.userService = userService;\n      this.multiCartService = multiCartService;\n      this.eventService = eventService;\n    }\n    /**\n     * Loads a single saved cart\n     */\n    loadSavedCart(cartId) {\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        return this.store.dispatch(new LoadSavedCart({\n          userId,\n          cartId\n        }));\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Gets a single saved cart\n     * it won't emit if the delete saved cart event gets triggered to avoid race condition between actions\n     *\n     * @param cartId\n     * @returns observable with cart\n     */\n    get(cartId) {\n      return this.getSavedCart(cartId).pipe(observeOn(queueScheduler), withLatestFrom(this.eventService.get(DeleteSavedCartEvent).pipe(startWith({}))), filter(([state, _event]) => !!state), tap(([state, event]) => {\n        if (Object.keys(event).length > 0) {\n          return EMPTY;\n        }\n        if (!(state.loading || state.success || state.error)) {\n          this.loadSavedCart(cartId);\n        }\n      }), filter(([state]) => state.success || !!state.error), map(([state]) => state.value));\n    }\n    /**\n     * Gets the selected cart state\n     *\n     * @param cartId\n     * @returns observable of selected cart with loader state\n     */\n    getSavedCart(cartId) {\n      return this.multiCartService.getCartEntity(cartId);\n    }\n    /**\n     * Returns true when there are no operations on that in progress and it is not currently loading\n     *\n     * @param cartId\n     */\n    isStable(cartId) {\n      return this.multiCartService.isStable(cartId);\n    }\n    /**\n     * Loads a list of saved carts\n     */\n    loadSavedCarts() {\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        return this.store.dispatch(new LoadSavedCarts({\n          userId\n        }));\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Gets a list of saved carts\n     *\n     * @returns observable with list of saved carts\n     */\n    getList() {\n      return this.getSavedCartList().pipe(withLatestFrom(this.getSavedCartListProcess()), tap(([_, state]) => {\n        if (!(state.loading || state.success || state.error)) {\n          this.loadSavedCarts();\n        }\n      }), pluck(0), shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n    }\n    /**\n     * Gets a list of saved carts from all carts in the state\n     * by filtering through the carts that are not wishlist and not saved cart\n     *\n     * @returns observable with list of saved carts\n     */\n    getSavedCartList() {\n      return combineLatest([this.multiCartService.getCarts(), this.userService.get()]).pipe(distinctUntilChanged(), map(([carts, user]) => carts.filter(cart => ((user === null || user === void 0 ? void 0 : user.customerId) !== undefined ? (cart === null || cart === void 0 ? void 0 : cart.name) !== getWishlistName(user === null || user === void 0 ? void 0 : user.customerId) : true) && !isSelectiveCart(cart === null || cart === void 0 ? void 0 : cart.code) && (cart === null || cart === void 0 ? void 0 : cart.saveTime))));\n    }\n    /**\n     * Gets the loading flag of getting a list of saved carts\n     *\n     * @returns observable with boolean of the loading state\n     */\n    getSavedCartListProcessLoading() {\n      return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(SAVED_CART_LIST_PROCESS_ID)));\n    }\n    /**\n     * Gets the loading state of getting a list of saved carts\n     *\n     * @returns observable with boolean of the loader state\n     */\n    getSavedCartListProcess() {\n      return this.store.pipe(select(ProcessSelectors.getProcessStateFactory(SAVED_CART_LIST_PROCESS_ID)));\n    }\n    /**\n     * Clears the process state of performing a saved cart\n     */\n    clearSavedCarts() {\n      this.store.dispatch(new ClearSavedCarts());\n    }\n    /**\n     * Triggers a restore saved cart\n     *\n     * @param cartId\n     */\n    restoreSavedCart(cartId) {\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        return this.store.dispatch(new RestoreSavedCart({\n          userId,\n          cartId\n        }));\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Gets the loading state of restoring saved cart\n     *\n     * @returns observable with boolean of the loading state\n     */\n    getRestoreSavedCartProcessLoading() {\n      return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(SAVED_CART_RESTORE_CART_PROCESS_ID)));\n    }\n    /**\n     * Gets the success state of restoring saved cart\n     *\n     * @returns observable with boolean of the success state\n     */\n    getRestoreSavedCartProcessSuccess() {\n      return this.store.pipe(select(ProcessSelectors.getProcessSuccessFactory(SAVED_CART_RESTORE_CART_PROCESS_ID)));\n    }\n    /**\n     * Gets the error state of restoring saved cart\n     *\n     * @returns observable with boolean of the error state\n     */\n    getRestoreSavedCartProcessError() {\n      return this.store.pipe(select(ProcessSelectors.getProcessErrorFactory(SAVED_CART_RESTORE_CART_PROCESS_ID)));\n    }\n    /**\n     * Clears the process state of performing a restore saved cart\n     */\n    clearRestoreSavedCart() {\n      this.store.dispatch(new ClearRestoreSavedCart());\n    }\n    /**\n     * Triggers delete saved cart\n     * @param cartId\n     */\n    deleteSavedCart(cartId) {\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        return this.multiCartService.deleteCart(cartId, userId);\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Triggers a saved cart\n     *\n     */\n    saveCart({\n      cartId,\n      saveCartName,\n      saveCartDescription\n    }) {\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        return this.store.dispatch(new SaveCart({\n          userId,\n          cartId,\n          saveCartName,\n          saveCartDescription\n        }));\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Gets the loading state of saving a cart\n     *\n     * @returns observable with boolean of the loading state\n     */\n    getSaveCartProcessLoading() {\n      return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(SAVED_CART_SAVE_CART_PROCESS_ID)));\n    }\n    /**\n     * Gets the success state of saving a cart\n     *\n     * @returns observable with boolean of the success state\n     */\n    getSaveCartProcessSuccess() {\n      return this.store.pipe(select(ProcessSelectors.getProcessSuccessFactory(SAVED_CART_SAVE_CART_PROCESS_ID)));\n    }\n    /**\n     * Gets the error state of saving a cart\n     *\n     * @returns observable with boolean of the error state\n     */\n    getSaveCartProcessError() {\n      return this.store.pipe(select(ProcessSelectors.getProcessErrorFactory(SAVED_CART_SAVE_CART_PROCESS_ID)));\n    }\n    /**\n     * Clears the process state of performing a save cart\n     */\n    clearSaveCart() {\n      this.store.dispatch(new ClearSaveCart());\n    }\n    /**\n     * Triggers an edit saved cart\n     *\n     */\n    editSavedCart({\n      cartId,\n      saveCartName,\n      saveCartDescription\n    }) {\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        return this.store.dispatch(new EditSavedCart({\n          userId,\n          cartId,\n          saveCartName,\n          saveCartDescription\n        }));\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Triggers a clone saved cart\n     *\n     * @param cartId\n     */\n    cloneSavedCart(cartId, saveCartName) {\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        return this.store.dispatch(new CloneSavedCart({\n          userId,\n          cartId,\n          saveCartName\n        }));\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Gets the loading state of cloning a saved cart\n     *\n     * @returns observable with boolean of the loading state\n     */\n    getCloneSavedCartProcessLoading() {\n      return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(SAVED_CART_CLONE_CART_PROCESS_ID)));\n    }\n    /**\n     * Gets the success state of cloning a saved cart\n     *\n     * @returns observable with boolean of the success state\n     */\n    getCloneSavedCartProcessSuccess() {\n      return this.store.pipe(select(ProcessSelectors.getProcessSuccessFactory(SAVED_CART_CLONE_CART_PROCESS_ID)));\n    }\n    /**\n     * Gets the error state of cloning a saved cart\n     *\n     * @returns observable with boolean of the error state\n     */\n    getCloneSavedCartProcessError() {\n      return this.store.pipe(select(ProcessSelectors.getProcessErrorFactory(SAVED_CART_CLONE_CART_PROCESS_ID)));\n    }\n    /**\n     * Clears the process state of cloning a saved cart\n     */\n    clearCloneSavedCart() {\n      this.store.dispatch(new ClearCloneSavedCart());\n    }\n  }\n  SavedCartService.ɵfac = function SavedCartService_Factory(t) {\n    return new (t || SavedCartService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i2.MultiCartService), i0.ɵɵinject(i2.EventService));\n  };\n  SavedCartService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SavedCartService,\n    factory: SavedCartService.ɵfac\n  });\n  return SavedCartService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst facadeProviders = [SavedCartService, {\n  provide: SavedCartFacade,\n  useExisting: SavedCartService\n}];\nlet SavedCartCoreModule = /*#__PURE__*/(() => {\n  class SavedCartCoreModule {}\n  SavedCartCoreModule.ɵfac = function SavedCartCoreModule_Factory(t) {\n    return new (t || SavedCartCoreModule)();\n  };\n  SavedCartCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SavedCartCoreModule\n  });\n  SavedCartCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [SavedCartConnector, ...facadeProviders],\n    imports: [[SavedCartStoreModule, SavedCartEventsModule]]\n  });\n  return SavedCartCoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SAVED_CART_CLONE_CART_PROCESS_ID, SAVED_CART_LIST_PROCESS_ID, SAVED_CART_RESTORE_CART_PROCESS_ID, SAVED_CART_SAVE_CART_PROCESS_ID, savedCart_action as SavedCartActions, SavedCartAdapter, SavedCartConnector, SavedCartCoreModule, SavedCartEventBuilder, SavedCartEventsModule, SavedCartService };\n//# sourceMappingURL=spartacus-cart-saved-cart-core.js.map","map":null,"metadata":{},"sourceType":"module"}