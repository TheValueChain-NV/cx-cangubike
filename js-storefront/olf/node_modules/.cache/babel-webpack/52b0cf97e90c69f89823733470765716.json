{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule, InjectionToken } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { StateUtils, PROCESS_FEATURE, MULTI_CART_DATA, UserAddressEvent, UpdateUserAddressEvent, DeleteUserAddressEvent, ProcessSelectors, getLastValueSync, OCC_USER_ID_ANONYMOUS, B2BPaymentTypeEnum, PageMetaResolver, PageType, normalizeHttpError, SiteContextActions, UserActions, withdrawOn, AuthActions, CartActions, ORDER_TYPE } from '@spartacus/core';\nimport * as i1 from '@spartacus/checkout/root';\nimport { OrderPlacedEvent, CheckoutDeliveryFacade, CheckoutPaymentFacade, CheckoutFacade, PaymentTypeFacade, CheckoutCostCenterFacade, ClearCheckoutFacade } from '@spartacus/checkout/root';\nimport { SavedCartEvent, SaveCartSuccessEvent, RestoreSavedCartSuccessEvent } from '@spartacus/cart/saved-cart/root';\nimport { Subscription, combineLatest, of, from } from 'rxjs';\nimport { filter, take, map, withLatestFrom, tap, pluck, shareReplay, switchMap, catchError, mergeMap, concatMap } from 'rxjs/operators';\nimport * as i1$1 from '@ngrx/store';\nimport { createFeatureSelector, createSelector, select, StoreModule } from '@ngrx/store';\nimport { CommonModule } from '@angular/common';\nimport * as i1$2 from '@ngrx/effects';\nimport { ofType, Effect, EffectsModule } from '@ngrx/effects';\nimport { __decorate } from 'tslib';\nclass CheckoutAdapter {}\nlet CheckoutConnector = /*#__PURE__*/(() => {\n  class CheckoutConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    placeOrder(userId, cartId, termsChecked) {\n      return this.adapter.placeOrder(userId, cartId, termsChecked);\n    }\n    loadCheckoutDetails(userId, cartId) {\n      return this.adapter.loadCheckoutDetails(userId, cartId);\n    }\n    clearCheckoutDeliveryAddress(userId, cartId) {\n      return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n    }\n    clearCheckoutDeliveryMode(userId, cartId) {\n      return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n    }\n  }\n  CheckoutConnector.ɵfac = function CheckoutConnector_Factory(t) {\n    return new (t || CheckoutConnector)(i0.ɵɵinject(CheckoutAdapter));\n  };\n  CheckoutConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutConnector,\n    factory: CheckoutConnector.ɵfac\n  });\n  return CheckoutConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass CheckoutCostCenterAdapter {}\nlet CheckoutCostCenterConnector = /*#__PURE__*/(() => {\n  class CheckoutCostCenterConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    setCostCenter(userId, cartId, costCenterId) {\n      return this.adapter.setCostCenter(userId, cartId, costCenterId);\n    }\n  }\n  CheckoutCostCenterConnector.ɵfac = function CheckoutCostCenterConnector_Factory(t) {\n    return new (t || CheckoutCostCenterConnector)(i0.ɵɵinject(CheckoutCostCenterAdapter));\n  };\n  CheckoutCostCenterConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutCostCenterConnector,\n    factory: CheckoutCostCenterConnector.ɵfac\n  });\n  return CheckoutCostCenterConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass CheckoutDeliveryAdapter {}\nlet CheckoutDeliveryConnector = /*#__PURE__*/(() => {\n  class CheckoutDeliveryConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    createAddress(userId, cartId, address) {\n      return this.adapter.createAddress(userId, cartId, address);\n    }\n    setAddress(userId, cartId, addressId) {\n      return this.adapter.setAddress(userId, cartId, addressId);\n    }\n    setMode(userId, cartId, deliveryModeId) {\n      return this.adapter.setMode(userId, cartId, deliveryModeId);\n    }\n    getMode(userId, cartId) {\n      return this.adapter.getMode(userId, cartId);\n    }\n    getSupportedModes(userId, cartId) {\n      return this.adapter.getSupportedModes(userId, cartId);\n    }\n  }\n  CheckoutDeliveryConnector.ɵfac = function CheckoutDeliveryConnector_Factory(t) {\n    return new (t || CheckoutDeliveryConnector)(i0.ɵɵinject(CheckoutDeliveryAdapter));\n  };\n  CheckoutDeliveryConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutDeliveryConnector,\n    factory: CheckoutDeliveryConnector.ɵfac\n  });\n  return CheckoutDeliveryConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass PaymentTypeAdapter {}\nlet PaymentTypeConnector = /*#__PURE__*/(() => {\n  class PaymentTypeConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    getPaymentTypes() {\n      return this.adapter.loadPaymentTypes();\n    }\n    setPaymentType(userId, cartId, typeCode, poNumber) {\n      return this.adapter.setPaymentType(userId, cartId, typeCode, poNumber);\n    }\n  }\n  PaymentTypeConnector.ɵfac = function PaymentTypeConnector_Factory(t) {\n    return new (t || PaymentTypeConnector)(i0.ɵɵinject(PaymentTypeAdapter));\n  };\n  PaymentTypeConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PaymentTypeConnector,\n    factory: PaymentTypeConnector.ɵfac\n  });\n  return PaymentTypeConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass CheckoutPaymentAdapter {}\nlet CheckoutPaymentConnector = /*#__PURE__*/(() => {\n  class CheckoutPaymentConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    create(userId, cartId, paymentDetails) {\n      return this.adapter.create(userId, cartId, paymentDetails);\n    }\n    set(userId, cartId, paymentDetailsId) {\n      return this.adapter.set(userId, cartId, paymentDetailsId);\n    }\n    getCardTypes() {\n      return this.adapter.loadCardTypes();\n    }\n  }\n  CheckoutPaymentConnector.ɵfac = function CheckoutPaymentConnector_Factory(t) {\n    return new (t || CheckoutPaymentConnector)(i0.ɵɵinject(CheckoutPaymentAdapter));\n  };\n  CheckoutPaymentConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutPaymentConnector,\n    factory: CheckoutPaymentConnector.ɵfac\n  });\n  return CheckoutPaymentConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass CheckoutReplenishmentOrderAdapter {}\nlet CheckoutReplenishmentOrderConnector = /*#__PURE__*/(() => {\n  class CheckoutReplenishmentOrderConnector {\n    constructor(adapter) {\n      this.adapter = adapter;\n    }\n    scheduleReplenishmentOrder(cartId, scheduleReplenishmentForm, termsChecked, userId) {\n      return this.adapter.scheduleReplenishmentOrder(cartId, scheduleReplenishmentForm, termsChecked, userId);\n    }\n  }\n  CheckoutReplenishmentOrderConnector.ɵfac = function CheckoutReplenishmentOrderConnector_Factory(t) {\n    return new (t || CheckoutReplenishmentOrderConnector)(i0.ɵɵinject(CheckoutReplenishmentOrderAdapter));\n  };\n  CheckoutReplenishmentOrderConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutReplenishmentOrderConnector,\n    factory: CheckoutReplenishmentOrderConnector.ɵfac\n  });\n  return CheckoutReplenishmentOrderConnector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nconst LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nconst LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\nclass LoadCardTypes {\n  constructor() {\n    this.type = LOAD_CARD_TYPES;\n  }\n}\nclass LoadCardTypesFail {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = LOAD_CARD_TYPES_FAIL;\n  }\n}\nclass LoadCardTypesSuccess {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = LOAD_CARD_TYPES_SUCCESS;\n  }\n}\nconst CHECKOUT_FEATURE = 'checkout';\nconst CHECKOUT_DETAILS = '[Checkout] Checkout Details';\nconst SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nconst SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nconst SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID = 'setSupportedDeliveryMode';\nconst SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\nconst GET_PAYMENT_TYPES_PROCESS_ID = 'getPaymentTypes';\nconst SET_COST_CENTER_PROCESS_ID = 'setCostCenter';\nconst PLACED_ORDER_PROCESS_ID = 'placeOrder';\nconst CLEAR_CHECKOUT_DELIVERY_ADDRESS = '[Checkout] Clear Checkout Delivery Address';\nconst CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS = '[Checkout] Clear Checkout Delivery Address Success';\nconst CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL = '[Checkout] Clear Checkout Delivery Address Fail';\nconst CLEAR_CHECKOUT_DELIVERY_MODE = '[Checkout] Clear Checkout Delivery Mode';\nconst CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS = '[Checkout] Clear Checkout Delivery Mode Success';\nconst CLEAR_CHECKOUT_DELIVERY_MODE_FAIL = '[Checkout] Clear Checkout Delivery Mode Fail';\nconst ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nconst ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nconst ADD_DELIVERY_ADDRESS_SUCCESS = '[Checkout] Add Delivery Address Success';\nconst SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nconst SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nconst SET_DELIVERY_ADDRESS_SUCCESS = '[Checkout] Set Delivery Address Success';\nconst RESET_SET_DELIVERY_ADDRESS_PROCESS = '[Checkout] Reset Set Delivery Address Process';\nconst LOAD_SUPPORTED_DELIVERY_MODES = '[Checkout] Load Supported Delivery Modes';\nconst LOAD_SUPPORTED_DELIVERY_MODES_FAIL = '[Checkout] Load Supported Delivery Modes Fail';\nconst LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS = '[Checkout] Load Supported Delivery Modes Success';\nconst CLEAR_SUPPORTED_DELIVERY_MODES = '[Checkout] Clear Supported Delivery Modes';\nconst SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nconst SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nconst SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nconst RESET_SET_DELIVERY_MODE_PROCESS = '[Checkout] Reset Set Delivery Mode Process';\nconst SET_SUPPORTED_DELIVERY_MODES = '[Checkout] Set Supported Delivery Modes';\nconst SET_SUPPORTED_DELIVERY_MODES_FAIL = '[Checkout] Set Supported Delivery Modes Fail';\nconst SET_SUPPORTED_DELIVERY_MODES_SUCCESS = '[Checkout] Set Supported Delivery Modes Success';\nconst RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS = '[Checkout] Reset Set Supported Delivery Modes Process';\nconst CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nconst CREATE_PAYMENT_DETAILS_FAIL = '[Checkout] Create Payment Details Fail';\nconst CREATE_PAYMENT_DETAILS_SUCCESS = '[Checkout] Create Payment Details Success';\nconst SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nconst SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nconst SET_PAYMENT_DETAILS_SUCCESS = '[Checkout] Set Payment Details Success';\nconst RESET_SET_PAYMENT_DETAILS_PROCESS = '[Checkout] Reset Set Payment Details Process';\nconst PLACE_ORDER = '[Checkout] Place Order';\nconst PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nconst PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\nconst CLEAR_PLACE_ORDER = '[Checkout] Clear Place Order';\nconst CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nconst CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\nconst LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nconst LOAD_CHECKOUT_DETAILS_FAIL = '[Checkout] Load Checkout Details Fail';\nconst LOAD_CHECKOUT_DETAILS_SUCCESS = '[Checkout] Load Checkout Details Success';\nconst CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nconst PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\nconst SET_COST_CENTER = '[Checkout] Set Cost Center';\nconst SET_COST_CENTER_FAIL = '[Checkout] Set Cost Center Fail';\nconst SET_COST_CENTER_SUCCESS = '[Checkout] Set Cost Center Success';\nconst RESET_SET_COST_CENTER_PROCESS = '[Checkout] Reset Set Cost Center Process';\nclass AddDeliveryAddress {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = ADD_DELIVERY_ADDRESS;\n  }\n}\nclass AddDeliveryAddressFail {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = ADD_DELIVERY_ADDRESS_FAIL;\n  }\n}\nclass AddDeliveryAddressSuccess {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  }\n}\nclass SetDeliveryAddress extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n    this.payload = payload;\n    this.type = SET_DELIVERY_ADDRESS;\n  }\n}\nclass SetDeliveryAddressFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n    this.payload = payload;\n    this.type = SET_DELIVERY_ADDRESS_FAIL;\n  }\n}\nclass SetDeliveryAddressSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n    this.payload = payload;\n    this.type = SET_DELIVERY_ADDRESS_SUCCESS;\n  }\n}\nclass ResetSetDeliveryAddressProcess extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n    this.type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  }\n}\nclass LoadSupportedDeliveryModes extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n    this.payload = payload;\n    this.type = LOAD_SUPPORTED_DELIVERY_MODES;\n  }\n}\nclass LoadSupportedDeliveryModesFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n    this.payload = payload;\n    this.type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  }\n}\nclass LoadSupportedDeliveryModesSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n    this.payload = payload;\n    this.type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  }\n}\nclass ResetLoadSupportedDeliveryModesProcess extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n    this.type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  }\n}\nclass SetDeliveryMode extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n    this.payload = payload;\n    this.type = SET_DELIVERY_MODE;\n  }\n}\nclass SetDeliveryModeFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n    this.payload = payload;\n    this.type = SET_DELIVERY_MODE_FAIL;\n  }\n}\nclass SetDeliveryModeSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n    this.payload = payload;\n    this.type = SET_DELIVERY_MODE_SUCCESS;\n  }\n}\nclass ResetSetDeliveryModeProcess extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n    this.type = RESET_SET_DELIVERY_MODE_PROCESS;\n  }\n}\nclass CreatePaymentDetails extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n    this.payload = payload;\n    this.type = CREATE_PAYMENT_DETAILS;\n  }\n}\nclass CreatePaymentDetailsFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n    this.payload = payload;\n    this.type = CREATE_PAYMENT_DETAILS_FAIL;\n  }\n}\nclass CreatePaymentDetailsSuccess {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  }\n}\nclass PaymentProcessSuccess extends StateUtils.EntitySuccessAction {\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n    this.type = PAYMENT_PROCESS_SUCCESS;\n  }\n}\nclass SetPaymentDetails extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n    this.payload = payload;\n    this.type = SET_PAYMENT_DETAILS;\n  }\n}\nclass SetPaymentDetailsFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n    this.payload = payload;\n    this.type = SET_PAYMENT_DETAILS_FAIL;\n  }\n}\nclass SetPaymentDetailsSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n    this.payload = payload;\n    this.type = SET_PAYMENT_DETAILS_SUCCESS;\n  }\n}\nclass ResetSetPaymentDetailsProcess extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n    this.type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  }\n}\nclass PlaceOrder extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID);\n    this.payload = payload;\n    this.type = PLACE_ORDER;\n  }\n}\nclass PlaceOrderFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID, payload);\n    this.payload = payload;\n    this.type = PLACE_ORDER_FAIL;\n  }\n}\nclass PlaceOrderSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID);\n    this.payload = payload;\n    this.type = PLACE_ORDER_SUCCESS;\n  }\n}\nclass ClearPlaceOrder extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID);\n    this.type = CLEAR_PLACE_ORDER;\n  }\n}\nclass ClearSupportedDeliveryModes {\n  constructor() {\n    this.type = CLEAR_SUPPORTED_DELIVERY_MODES;\n  }\n}\nclass ClearCheckoutStep {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = CLEAR_CHECKOUT_STEP;\n  }\n}\nclass ClearCheckoutData {\n  constructor() {\n    this.type = CLEAR_CHECKOUT_DATA;\n  }\n}\nclass LoadCheckoutDetails extends StateUtils.LoaderLoadAction {\n  constructor(payload) {\n    super(CHECKOUT_DETAILS);\n    this.payload = payload;\n    this.type = LOAD_CHECKOUT_DETAILS;\n  }\n}\nclass LoadCheckoutDetailsFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(CHECKOUT_DETAILS, payload);\n    this.payload = payload;\n    this.type = LOAD_CHECKOUT_DETAILS_FAIL;\n  }\n}\nclass LoadCheckoutDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(CHECKOUT_DETAILS);\n    this.payload = payload;\n    this.type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  }\n}\nclass CheckoutClearMiscsData {\n  constructor() {\n    this.type = CHECKOUT_CLEAR_MISCS_DATA;\n  }\n}\nclass ClearCheckoutDeliveryAddress {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  }\n}\nclass ClearCheckoutDeliveryAddressSuccess {\n  constructor() {\n    this.type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  }\n}\nclass ClearCheckoutDeliveryAddressFail {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  }\n}\nclass ClearCheckoutDeliveryMode extends StateUtils.EntityProcessesIncrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  }\n}\nclass ClearCheckoutDeliveryModeSuccess extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  }\n}\nclass ClearCheckoutDeliveryModeFail extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  }\n}\nclass SetCostCenter extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID);\n    this.payload = payload;\n    this.type = SET_COST_CENTER;\n  }\n}\nclass SetCostCenterFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID, payload);\n    this.payload = payload;\n    this.type = SET_COST_CENTER_FAIL;\n  }\n}\nclass SetCostCenterSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID);\n    this.payload = payload;\n    this.type = SET_COST_CENTER_SUCCESS;\n  }\n}\nclass ResetSetCostCenterProcess extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID);\n    this.type = RESET_SET_COST_CENTER_PROCESS;\n  }\n}\nconst SET_ORDER_TYPE = '[Checkout] Set Order Type';\nclass SetOrderType {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = SET_ORDER_TYPE;\n  }\n}\nconst LOAD_PAYMENT_TYPES = '[Checkout] Load Payment Types';\nconst LOAD_PAYMENT_TYPES_FAIL = '[Checkout] Load Payment Types Fail';\nconst LOAD_PAYMENT_TYPES_SUCCESS = '[Checkout] Load Payment Types Success';\nconst RESET_LOAD_PAYMENT_TYPES_PROCESS_ID = '[Checkout] Reset Load Payment Type Process';\nconst SET_PAYMENT_TYPE = '[Checkout] Set Payment Type';\nconst SET_PAYMENT_TYPE_FAIL = '[Checkout] Set Payment Type Fail';\nconst SET_PAYMENT_TYPE_SUCCESS = '[Checkout] Set Payment Type Success';\nclass LoadPaymentTypes extends StateUtils.EntityLoadAction {\n  constructor() {\n    super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);\n    this.type = LOAD_PAYMENT_TYPES;\n  }\n}\nclass LoadPaymentTypesFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);\n    this.payload = payload;\n    this.type = LOAD_PAYMENT_TYPES_FAIL;\n  }\n}\nclass LoadPaymentTypesSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);\n    this.payload = payload;\n    this.type = LOAD_PAYMENT_TYPES_SUCCESS;\n  }\n}\nclass ResetLoadPaymentTypesProcess extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);\n    this.type = RESET_LOAD_PAYMENT_TYPES_PROCESS_ID;\n  }\n}\nclass SetPaymentType {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = SET_PAYMENT_TYPE;\n  }\n}\nclass SetPaymentTypeFail {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = SET_PAYMENT_TYPE_FAIL;\n  }\n}\nclass SetPaymentTypeSuccess {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = SET_PAYMENT_TYPE_SUCCESS;\n  }\n}\nconst SCHEDULE_REPLENISHMENT_ORDER = '[Checkout] Schedule Replenishment Order';\nconst SCHEDULE_REPLENISHMENT_ORDER_SUCCESS = '[Checkout] Schedule Replenishment Order Success';\nconst SCHEDULE_REPLENISHMENT_ORDER_FAIL = '[Checkout] Schedule Replenishment Order Fail';\nconst CLEAR_SCHEDULE_REPLENISHMENT_ORDER = '[Checkout] Clear Schedule Replenishment Data';\nclass ScheduleReplenishmentOrder extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID);\n    this.payload = payload;\n    this.type = SCHEDULE_REPLENISHMENT_ORDER;\n  }\n}\nclass ScheduleReplenishmentOrderSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID);\n    this.payload = payload;\n    this.type = SCHEDULE_REPLENISHMENT_ORDER_SUCCESS;\n  }\n}\nclass ScheduleReplenishmentOrderFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID, payload);\n    this.payload = payload;\n    this.type = SCHEDULE_REPLENISHMENT_ORDER_FAIL;\n  }\n}\nclass ClearScheduleReplenishmentOrderAction extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID);\n    this.type = CLEAR_SCHEDULE_REPLENISHMENT_ORDER;\n  }\n}\nvar checkoutGroup_actions = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LOAD_CARD_TYPES: LOAD_CARD_TYPES,\n  LOAD_CARD_TYPES_FAIL: LOAD_CARD_TYPES_FAIL,\n  LOAD_CARD_TYPES_SUCCESS: LOAD_CARD_TYPES_SUCCESS,\n  LoadCardTypes: LoadCardTypes,\n  LoadCardTypesFail: LoadCardTypesFail,\n  LoadCardTypesSuccess: LoadCardTypesSuccess,\n  CLEAR_CHECKOUT_DELIVERY_ADDRESS: CLEAR_CHECKOUT_DELIVERY_ADDRESS,\n  CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS: CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS,\n  CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL: CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL,\n  CLEAR_CHECKOUT_DELIVERY_MODE: CLEAR_CHECKOUT_DELIVERY_MODE,\n  CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS: CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS,\n  CLEAR_CHECKOUT_DELIVERY_MODE_FAIL: CLEAR_CHECKOUT_DELIVERY_MODE_FAIL,\n  ADD_DELIVERY_ADDRESS: ADD_DELIVERY_ADDRESS,\n  ADD_DELIVERY_ADDRESS_FAIL: ADD_DELIVERY_ADDRESS_FAIL,\n  ADD_DELIVERY_ADDRESS_SUCCESS: ADD_DELIVERY_ADDRESS_SUCCESS,\n  SET_DELIVERY_ADDRESS: SET_DELIVERY_ADDRESS,\n  SET_DELIVERY_ADDRESS_FAIL: SET_DELIVERY_ADDRESS_FAIL,\n  SET_DELIVERY_ADDRESS_SUCCESS: SET_DELIVERY_ADDRESS_SUCCESS,\n  RESET_SET_DELIVERY_ADDRESS_PROCESS: RESET_SET_DELIVERY_ADDRESS_PROCESS,\n  LOAD_SUPPORTED_DELIVERY_MODES: LOAD_SUPPORTED_DELIVERY_MODES,\n  LOAD_SUPPORTED_DELIVERY_MODES_FAIL: LOAD_SUPPORTED_DELIVERY_MODES_FAIL,\n  LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS,\n  CLEAR_SUPPORTED_DELIVERY_MODES: CLEAR_SUPPORTED_DELIVERY_MODES,\n  SET_DELIVERY_MODE: SET_DELIVERY_MODE,\n  SET_DELIVERY_MODE_FAIL: SET_DELIVERY_MODE_FAIL,\n  SET_DELIVERY_MODE_SUCCESS: SET_DELIVERY_MODE_SUCCESS,\n  RESET_SET_DELIVERY_MODE_PROCESS: RESET_SET_DELIVERY_MODE_PROCESS,\n  SET_SUPPORTED_DELIVERY_MODES: SET_SUPPORTED_DELIVERY_MODES,\n  SET_SUPPORTED_DELIVERY_MODES_FAIL: SET_SUPPORTED_DELIVERY_MODES_FAIL,\n  SET_SUPPORTED_DELIVERY_MODES_SUCCESS: SET_SUPPORTED_DELIVERY_MODES_SUCCESS,\n  RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS: RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS,\n  CREATE_PAYMENT_DETAILS: CREATE_PAYMENT_DETAILS,\n  CREATE_PAYMENT_DETAILS_FAIL: CREATE_PAYMENT_DETAILS_FAIL,\n  CREATE_PAYMENT_DETAILS_SUCCESS: CREATE_PAYMENT_DETAILS_SUCCESS,\n  SET_PAYMENT_DETAILS: SET_PAYMENT_DETAILS,\n  SET_PAYMENT_DETAILS_FAIL: SET_PAYMENT_DETAILS_FAIL,\n  SET_PAYMENT_DETAILS_SUCCESS: SET_PAYMENT_DETAILS_SUCCESS,\n  RESET_SET_PAYMENT_DETAILS_PROCESS: RESET_SET_PAYMENT_DETAILS_PROCESS,\n  PLACE_ORDER: PLACE_ORDER,\n  PLACE_ORDER_FAIL: PLACE_ORDER_FAIL,\n  PLACE_ORDER_SUCCESS: PLACE_ORDER_SUCCESS,\n  CLEAR_PLACE_ORDER: CLEAR_PLACE_ORDER,\n  CLEAR_CHECKOUT_STEP: CLEAR_CHECKOUT_STEP,\n  CLEAR_CHECKOUT_DATA: CLEAR_CHECKOUT_DATA,\n  LOAD_CHECKOUT_DETAILS: LOAD_CHECKOUT_DETAILS,\n  LOAD_CHECKOUT_DETAILS_FAIL: LOAD_CHECKOUT_DETAILS_FAIL,\n  LOAD_CHECKOUT_DETAILS_SUCCESS: LOAD_CHECKOUT_DETAILS_SUCCESS,\n  CHECKOUT_CLEAR_MISCS_DATA: CHECKOUT_CLEAR_MISCS_DATA,\n  PAYMENT_PROCESS_SUCCESS: PAYMENT_PROCESS_SUCCESS,\n  SET_COST_CENTER: SET_COST_CENTER,\n  SET_COST_CENTER_FAIL: SET_COST_CENTER_FAIL,\n  SET_COST_CENTER_SUCCESS: SET_COST_CENTER_SUCCESS,\n  RESET_SET_COST_CENTER_PROCESS: RESET_SET_COST_CENTER_PROCESS,\n  AddDeliveryAddress: AddDeliveryAddress,\n  AddDeliveryAddressFail: AddDeliveryAddressFail,\n  AddDeliveryAddressSuccess: AddDeliveryAddressSuccess,\n  SetDeliveryAddress: SetDeliveryAddress,\n  SetDeliveryAddressFail: SetDeliveryAddressFail,\n  SetDeliveryAddressSuccess: SetDeliveryAddressSuccess,\n  ResetSetDeliveryAddressProcess: ResetSetDeliveryAddressProcess,\n  LoadSupportedDeliveryModes: LoadSupportedDeliveryModes,\n  LoadSupportedDeliveryModesFail: LoadSupportedDeliveryModesFail,\n  LoadSupportedDeliveryModesSuccess: LoadSupportedDeliveryModesSuccess,\n  ResetLoadSupportedDeliveryModesProcess: ResetLoadSupportedDeliveryModesProcess,\n  SetDeliveryMode: SetDeliveryMode,\n  SetDeliveryModeFail: SetDeliveryModeFail,\n  SetDeliveryModeSuccess: SetDeliveryModeSuccess,\n  ResetSetDeliveryModeProcess: ResetSetDeliveryModeProcess,\n  CreatePaymentDetails: CreatePaymentDetails,\n  CreatePaymentDetailsFail: CreatePaymentDetailsFail,\n  CreatePaymentDetailsSuccess: CreatePaymentDetailsSuccess,\n  PaymentProcessSuccess: PaymentProcessSuccess,\n  SetPaymentDetails: SetPaymentDetails,\n  SetPaymentDetailsFail: SetPaymentDetailsFail,\n  SetPaymentDetailsSuccess: SetPaymentDetailsSuccess,\n  ResetSetPaymentDetailsProcess: ResetSetPaymentDetailsProcess,\n  PlaceOrder: PlaceOrder,\n  PlaceOrderFail: PlaceOrderFail,\n  PlaceOrderSuccess: PlaceOrderSuccess,\n  ClearPlaceOrder: ClearPlaceOrder,\n  ClearSupportedDeliveryModes: ClearSupportedDeliveryModes,\n  ClearCheckoutStep: ClearCheckoutStep,\n  ClearCheckoutData: ClearCheckoutData,\n  LoadCheckoutDetails: LoadCheckoutDetails,\n  LoadCheckoutDetailsFail: LoadCheckoutDetailsFail,\n  LoadCheckoutDetailsSuccess: LoadCheckoutDetailsSuccess,\n  CheckoutClearMiscsData: CheckoutClearMiscsData,\n  ClearCheckoutDeliveryAddress: ClearCheckoutDeliveryAddress,\n  ClearCheckoutDeliveryAddressSuccess: ClearCheckoutDeliveryAddressSuccess,\n  ClearCheckoutDeliveryAddressFail: ClearCheckoutDeliveryAddressFail,\n  ClearCheckoutDeliveryMode: ClearCheckoutDeliveryMode,\n  ClearCheckoutDeliveryModeSuccess: ClearCheckoutDeliveryModeSuccess,\n  ClearCheckoutDeliveryModeFail: ClearCheckoutDeliveryModeFail,\n  SetCostCenter: SetCostCenter,\n  SetCostCenterFail: SetCostCenterFail,\n  SetCostCenterSuccess: SetCostCenterSuccess,\n  ResetSetCostCenterProcess: ResetSetCostCenterProcess,\n  SET_ORDER_TYPE: SET_ORDER_TYPE,\n  SetOrderType: SetOrderType,\n  LOAD_PAYMENT_TYPES: LOAD_PAYMENT_TYPES,\n  LOAD_PAYMENT_TYPES_FAIL: LOAD_PAYMENT_TYPES_FAIL,\n  LOAD_PAYMENT_TYPES_SUCCESS: LOAD_PAYMENT_TYPES_SUCCESS,\n  RESET_LOAD_PAYMENT_TYPES_PROCESS_ID: RESET_LOAD_PAYMENT_TYPES_PROCESS_ID,\n  SET_PAYMENT_TYPE: SET_PAYMENT_TYPE,\n  SET_PAYMENT_TYPE_FAIL: SET_PAYMENT_TYPE_FAIL,\n  SET_PAYMENT_TYPE_SUCCESS: SET_PAYMENT_TYPE_SUCCESS,\n  LoadPaymentTypes: LoadPaymentTypes,\n  LoadPaymentTypesFail: LoadPaymentTypesFail,\n  LoadPaymentTypesSuccess: LoadPaymentTypesSuccess,\n  ResetLoadPaymentTypesProcess: ResetLoadPaymentTypesProcess,\n  SetPaymentType: SetPaymentType,\n  SetPaymentTypeFail: SetPaymentTypeFail,\n  SetPaymentTypeSuccess: SetPaymentTypeSuccess,\n  SCHEDULE_REPLENISHMENT_ORDER: SCHEDULE_REPLENISHMENT_ORDER,\n  SCHEDULE_REPLENISHMENT_ORDER_SUCCESS: SCHEDULE_REPLENISHMENT_ORDER_SUCCESS,\n  SCHEDULE_REPLENISHMENT_ORDER_FAIL: SCHEDULE_REPLENISHMENT_ORDER_FAIL,\n  CLEAR_SCHEDULE_REPLENISHMENT_ORDER: CLEAR_SCHEDULE_REPLENISHMENT_ORDER,\n  ScheduleReplenishmentOrder: ScheduleReplenishmentOrder,\n  ScheduleReplenishmentOrderSuccess: ScheduleReplenishmentOrderSuccess,\n  ScheduleReplenishmentOrderFail: ScheduleReplenishmentOrderFail,\n  ClearScheduleReplenishmentOrderAction: ClearScheduleReplenishmentOrderAction\n});\nlet CheckoutEventBuilder = /*#__PURE__*/(() => {\n  class CheckoutEventBuilder {\n    constructor(stateEventService) {\n      this.stateEventService = stateEventService;\n      this.register();\n    }\n    /**\n     * Registers checkout events\n     */\n    register() {\n      this.orderPlacedEvent();\n    }\n    /**\n     * Register an order successfully placed event\n     */\n    orderPlacedEvent() {\n      this.stateEventService.register({\n        action: PLACE_ORDER_SUCCESS,\n        event: OrderPlacedEvent\n      });\n    }\n  }\n  CheckoutEventBuilder.ɵfac = function CheckoutEventBuilder_Factory(t) {\n    return new (t || CheckoutEventBuilder)(i0.ɵɵinject(i2.StateEventService));\n  };\n  CheckoutEventBuilder.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutEventBuilder,\n    factory: CheckoutEventBuilder.ɵfac\n  });\n  return CheckoutEventBuilder;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CheckoutEventListener = /*#__PURE__*/(() => {\n  class CheckoutEventListener {\n    constructor(checkoutDeliveryFacade, clearCheckoutFacade, eventService) {\n      this.checkoutDeliveryFacade = checkoutDeliveryFacade;\n      this.clearCheckoutFacade = clearCheckoutFacade;\n      this.eventService = eventService;\n      this.subscription = new Subscription();\n      this.onUserAddressChange();\n      this.onSavedCartChange();\n    }\n    /**\n     * Clears the checkout delivery info when an address in the address book is\n     * changed ( updated, set as default or deleted )\n     *\n     * Listens for UpdateUserAddressEvent or DeleteUserAddressEvent\n     */\n    onUserAddressChange() {\n      this.subscription.add(this.eventService.get(UserAddressEvent).pipe(filter(event => {\n        return event instanceof UpdateUserAddressEvent || event instanceof DeleteUserAddressEvent;\n      })).subscribe(_event => {\n        this.checkoutDeliveryFacade.clearCheckoutDeliveryDetails();\n      }));\n    }\n    /**\n     * What te active cart is saved for later or when a saved card is restored,\n     * the whole checkout state is reset.\n     *\n     * Listens for SaveCartSuccessEvent or RestoreSavedCartSuccessEvent\n     */\n    onSavedCartChange() {\n      this.subscription.add(this.eventService.get(SavedCartEvent).pipe(filter(event => {\n        return event instanceof SaveCartSuccessEvent || event instanceof RestoreSavedCartSuccessEvent;\n      })).subscribe(_event => {\n        this.clearCheckoutFacade.resetCheckoutProcesses();\n      }));\n    }\n    ngOnDestroy() {\n      var _a;\n      (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n  }\n  CheckoutEventListener.ɵfac = function CheckoutEventListener_Factory(t) {\n    return new (t || CheckoutEventListener)(i0.ɵɵinject(i1.CheckoutDeliveryFacade), i0.ɵɵinject(i1.ClearCheckoutFacade), i0.ɵɵinject(i2.EventService));\n  };\n  CheckoutEventListener.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutEventListener,\n    factory: CheckoutEventListener.ɵfac,\n    providedIn: 'root'\n  });\n  return CheckoutEventListener;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CheckoutEventModule = /*#__PURE__*/(() => {\n  class CheckoutEventModule {\n    constructor(_checkoutEventBuilder, _checkoutEventListener) {}\n  }\n  CheckoutEventModule.ɵfac = function CheckoutEventModule_Factory(t) {\n    return new (t || CheckoutEventModule)(i0.ɵɵinject(CheckoutEventBuilder), i0.ɵɵinject(CheckoutEventListener));\n  };\n  CheckoutEventModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CheckoutEventModule\n  });\n  CheckoutEventModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return CheckoutEventModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst initialState$3 = {\n  entities: {}\n};\nfunction reducer$3(state = initialState$3, action) {\n  switch (action.type) {\n    case LOAD_CARD_TYPES_SUCCESS:\n      {\n        const cardTypes = action.payload;\n        const entities = cardTypes.reduce((cardTypesEntities, name) => {\n          return Object.assign(Object.assign({}, cardTypesEntities), {\n            [name.code]: name\n          });\n        }, Object.assign({}, state.entities));\n        return Object.assign(Object.assign({}, state), {\n          entities\n        });\n      }\n    case CHECKOUT_CLEAR_MISCS_DATA:\n      {\n        return initialState$3;\n      }\n  }\n  return state;\n}\nconst getCardTypesEntites$1 = state => state.entities;\nconst getDeliveryAddressSelector = state => state.address;\nconst getDeliveryModeSelector = state => state.deliveryMode;\nconst getPaymentDetailsSelector = state => state.paymentDetails;\nconst getOrderDetailsSelector = state => state.orderDetails;\nconst getCheckoutState = createFeatureSelector(CHECKOUT_FEATURE);\nconst getCheckoutStepsState = createSelector(getCheckoutState, checkoutState => checkoutState.steps);\nconst getCheckoutSteps = createSelector(getCheckoutStepsState, state => StateUtils.loaderValueSelector(state));\nconst getDeliveryAddress = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\nconst getDeliveryMode = createSelector(getCheckoutSteps, getDeliveryModeSelector);\nconst getSupportedDeliveryModes = createSelector(getDeliveryMode, deliveryMode => {\n  return deliveryMode && Object.keys(deliveryMode.supported).map(code => deliveryMode.supported[code]);\n});\nconst getSelectedDeliveryModeCode = createSelector(getDeliveryMode, deliveryMode => {\n  return deliveryMode && deliveryMode.selected;\n});\nconst getSelectedDeliveryMode = createSelector(getDeliveryMode, deliveryMode => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\nconst getPaymentDetails = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\nconst getCheckoutOrderDetails = createSelector(getCheckoutSteps, getOrderDetailsSelector);\nconst getCheckoutDetailsLoaded = createSelector(getCheckoutStepsState, state => StateUtils.loaderSuccessSelector(state) && !StateUtils.loaderLoadingSelector(state));\nconst getCheckoutLoading = createSelector(getCheckoutStepsState, state => StateUtils.loaderLoadingSelector(state));\nconst getPoNumer = createSelector(getCheckoutSteps, state => state.poNumber.po);\nconst getCostCenter = createSelector(getCheckoutSteps, state => state.poNumber.costCenter);\nconst getCardTypesState = createSelector(getCheckoutState, state => state.cardTypes);\nconst getCardTypesEntites = createSelector(getCardTypesState, getCardTypesEntites$1);\nconst getAllCardTypes = createSelector(getCardTypesEntites, entites => {\n  return Object.keys(entites).map(code => entites[code]);\n});\nconst getSelectedOrderTypeSelector = state => state.selected;\nconst getOrderTypesState = createSelector(getCheckoutState, state => state.orderType);\nconst getSelectedOrderType = createSelector(getOrderTypesState, getSelectedOrderTypeSelector);\nconst initialState$2 = {\n  entities: {},\n  selected: undefined\n};\nfunction reducer$2(state = initialState$2, action) {\n  var _a;\n  switch (action.type) {\n    case LOAD_PAYMENT_TYPES_SUCCESS:\n      {\n        const paymentTypes = action.payload;\n        const entities = paymentTypes.reduce((paymentTypesEntities, name) => {\n          return Object.assign(Object.assign({}, paymentTypesEntities), {\n            [name.code]: name\n          });\n        }, Object.assign({}, state.entities));\n        return Object.assign(Object.assign({}, state), {\n          entities\n        });\n      }\n    case SET_PAYMENT_TYPE_SUCCESS:\n      {\n        return Object.assign(Object.assign({}, state), {\n          selected: (_a = action.payload.paymentType) === null || _a === void 0 ? void 0 : _a.code\n        });\n      }\n    case CLEAR_CHECKOUT_DATA:\n      {\n        return Object.assign(Object.assign({}, state), {\n          selected: undefined\n        });\n      }\n    case CHECKOUT_CLEAR_MISCS_DATA:\n      {\n        return initialState$2;\n      }\n  }\n  return state;\n}\nconst getPaymentTypesEntites$1 = state => state.entities;\nconst getSelectedPaymentType$1 = state => state.selected;\nconst getPaymentTypesState = createSelector(getCheckoutState, state => state.paymentTypes);\nconst getPaymentTypesEntites = createSelector(getPaymentTypesState, getPaymentTypesEntites$1);\nconst getAllPaymentTypes = createSelector(getPaymentTypesEntites, entites => {\n  return Object.keys(entites).map(code => entites[code]);\n});\nconst getSelectedPaymentType = createSelector(getPaymentTypesState, getSelectedPaymentType$1);\nvar checkoutGroup_selectors = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getCardTypesState: getCardTypesState,\n  getCardTypesEntites: getCardTypesEntites,\n  getAllCardTypes: getAllCardTypes,\n  getCheckoutState: getCheckoutState,\n  getCheckoutStepsState: getCheckoutStepsState,\n  getCheckoutSteps: getCheckoutSteps,\n  getDeliveryAddress: getDeliveryAddress,\n  getDeliveryMode: getDeliveryMode,\n  getSupportedDeliveryModes: getSupportedDeliveryModes,\n  getSelectedDeliveryModeCode: getSelectedDeliveryModeCode,\n  getSelectedDeliveryMode: getSelectedDeliveryMode,\n  getPaymentDetails: getPaymentDetails,\n  getCheckoutOrderDetails: getCheckoutOrderDetails,\n  getCheckoutDetailsLoaded: getCheckoutDetailsLoaded,\n  getCheckoutLoading: getCheckoutLoading,\n  getPoNumer: getPoNumer,\n  getCostCenter: getCostCenter,\n  getSelectedOrderTypeSelector: getSelectedOrderTypeSelector,\n  getOrderTypesState: getOrderTypesState,\n  getSelectedOrderType: getSelectedOrderType,\n  getPaymentTypesState: getPaymentTypesState,\n  getPaymentTypesEntites: getPaymentTypesEntites,\n  getAllPaymentTypes: getAllPaymentTypes,\n  getSelectedPaymentType: getSelectedPaymentType\n});\nlet CheckoutCostCenterService = /*#__PURE__*/(() => {\n  class CheckoutCostCenterService {\n    constructor(checkoutStore, activeCartService, userIdService) {\n      this.checkoutStore = checkoutStore;\n      this.activeCartService = activeCartService;\n      this.userIdService = userIdService;\n    }\n    /**\n     * Set cost center to cart\n     * @param costCenterId : cost center id\n     */\n    setCostCenter(costCenterId) {\n      let cartId;\n      this.activeCartService.getActiveCartId().pipe(take(1)).subscribe(activeCartId => cartId = activeCartId);\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        if (cartId) {\n          this.checkoutStore.dispatch(new SetCostCenter({\n            userId: userId,\n            cartId: cartId,\n            costCenterId: costCenterId\n          }));\n        }\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Get cost center id from cart\n     */\n    getCostCenter() {\n      return combineLatest([this.activeCartService.getActive(), this.checkoutStore.pipe(select(getCostCenter))]).pipe(filter(([cart]) => Boolean(cart)), map(([cart, costCenterId]) => {\n        if (costCenterId === undefined && cart.costCenter) {\n          costCenterId = cart.costCenter.code;\n          this.checkoutStore.dispatch(new SetCostCenterSuccess(cart.costCenter.code));\n        }\n        return costCenterId;\n      }));\n    }\n  }\n  CheckoutCostCenterService.ɵfac = function CheckoutCostCenterService_Factory(t) {\n    return new (t || CheckoutCostCenterService)(i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i2.ActiveCartService), i0.ɵɵinject(i2.UserIdService));\n  };\n  CheckoutCostCenterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutCostCenterService,\n    factory: CheckoutCostCenterService.ɵfac\n  });\n  return CheckoutCostCenterService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CheckoutDeliveryService = /*#__PURE__*/(() => {\n  class CheckoutDeliveryService {\n    constructor(checkoutStore, processStateStore, activeCartService, userIdService) {\n      this.checkoutStore = checkoutStore;\n      this.processStateStore = processStateStore;\n      this.activeCartService = activeCartService;\n      this.userIdService = userIdService;\n    }\n    /**\n     * Get supported delivery modes\n     */\n    getSupportedDeliveryModes() {\n      return this.checkoutStore.pipe(select(getSupportedDeliveryModes), withLatestFrom(this.processStateStore.pipe(select(ProcessSelectors.getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID)))), tap(([, loadingState]) => {\n        if (!(loadingState.loading || loadingState.success || loadingState.error)) {\n          this.loadSupportedDeliveryModes();\n        }\n      }), pluck(0), shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n    }\n    /**\n     * Get selected delivery mode\n     */\n    getSelectedDeliveryMode() {\n      return this.checkoutStore.pipe(select(getSelectedDeliveryMode));\n    }\n    /**\n     * Get selected delivery mode code\n     */\n    getSelectedDeliveryModeCode() {\n      return this.checkoutStore.pipe(select(getSelectedDeliveryModeCode));\n    }\n    /**\n     * Get delivery address\n     */\n    getDeliveryAddress() {\n      return this.checkoutStore.pipe(select(getDeliveryAddress));\n    }\n    /**\n     * Get status about successfully set Delivery Address\n     */\n    getSetDeliveryAddressProcess() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID)));\n    }\n    /**\n     * Clear info about process of setting Delivery Address\n     */\n    resetSetDeliveryAddressProcess() {\n      this.checkoutStore.dispatch(new ResetSetDeliveryAddressProcess());\n    }\n    /**\n     * Get status about of set Delivery Mode process\n     */\n    getSetDeliveryModeProcess() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID)));\n    }\n    /**\n     * Clear info about process of setting Delivery Mode\n     */\n    resetSetDeliveryModeProcess() {\n      this.checkoutStore.dispatch(new ResetSetDeliveryModeProcess());\n    }\n    /**\n     * Clear info about process of setting Supported Delivery Modes\n     */\n    resetLoadSupportedDeliveryModesProcess() {\n      this.checkoutStore.dispatch(new ResetLoadSupportedDeliveryModesProcess());\n    }\n    /**\n     * Get status about of set supported Delivery Modes process\n     */\n    getLoadSupportedDeliveryModeProcess() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID)));\n    }\n    /**\n     * Clear supported delivery modes loaded in last checkout process\n     */\n    clearCheckoutDeliveryModes() {\n      this.checkoutStore.dispatch(new ClearSupportedDeliveryModes());\n    }\n    /**\n     * Create and set a delivery address using the address param\n     * @param address : the Address to be created and set\n     */\n    createAndSetAddress(address) {\n      if (this.actionAllowed()) {\n        let userId;\n        this.userIdService.getUserId().subscribe(occUserId => userId = occUserId).unsubscribe();\n        let cartId;\n        this.activeCartService.getActiveCartId().subscribe(activeCartId => cartId = activeCartId).unsubscribe();\n        if (userId && cartId) {\n          this.checkoutStore.dispatch(new AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address\n          }));\n        }\n      }\n    }\n    /**\n     * Load supported delivery modes\n     */\n    loadSupportedDeliveryModes() {\n      if (this.actionAllowed()) {\n        let userId;\n        this.userIdService.getUserId().subscribe(occUserId => userId = occUserId).unsubscribe();\n        let cartId;\n        this.activeCartService.getActiveCartId().subscribe(activeCartId => cartId = activeCartId).unsubscribe();\n        if (userId && cartId) {\n          this.checkoutStore.dispatch(new LoadSupportedDeliveryModes({\n            userId,\n            cartId\n          }));\n        }\n      }\n    }\n    /**\n     * Set delivery mode\n     * @param mode : The delivery mode to be set\n     */\n    setDeliveryMode(mode) {\n      if (this.actionAllowed()) {\n        const userId = getLastValueSync(this.userIdService.getUserId());\n        const cartId = getLastValueSync(this.activeCartService.getActiveCartId());\n        if (userId && cartId) {\n          combineLatest([this.activeCartService.isStable(), this.checkoutStore.pipe(select(getCheckoutLoading))]).pipe(filter(([isStable, isLoading]) => isStable && !isLoading), take(1)).subscribe(() => {\n            this.checkoutStore.dispatch(new SetDeliveryMode({\n              userId,\n              cartId,\n              selectedModeId: mode\n            }));\n          });\n        }\n      }\n    }\n    /**\n     * Set delivery address\n     * @param address : The address to be set\n     */\n    setDeliveryAddress(address) {\n      if (this.actionAllowed()) {\n        let userId;\n        this.userIdService.getUserId().subscribe(occUserId => userId = occUserId).unsubscribe();\n        let cartId;\n        this.activeCartService.getActiveCartId().subscribe(activeCartId => cartId = activeCartId).unsubscribe();\n        if (cartId && userId) {\n          this.checkoutStore.dispatch(new SetDeliveryAddress({\n            userId,\n            cartId,\n            address: address\n          }));\n        }\n      }\n    }\n    /**\n     * Clear address already setup in last checkout process\n     */\n    clearCheckoutDeliveryAddress() {\n      let userId;\n      this.userIdService.getUserId().subscribe(occUserId => userId = occUserId).unsubscribe();\n      let cartId;\n      this.activeCartService.getActiveCartId().subscribe(activeCartId => cartId = activeCartId).unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(new ClearCheckoutDeliveryAddress({\n          userId,\n          cartId\n        }));\n      }\n    }\n    /**\n     * Clear selected delivery mode setup in last checkout process\n     */\n    clearCheckoutDeliveryMode() {\n      let userId;\n      this.userIdService.getUserId().subscribe(occUserId => userId = occUserId).unsubscribe();\n      let cartId;\n      this.activeCartService.getActiveCartId().subscribe(activeCartId => cartId = activeCartId).unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(new ClearCheckoutDeliveryMode({\n          userId,\n          cartId\n        }));\n      }\n    }\n    /**\n     * Clear address and delivery mode already setup in last checkout process\n     */\n    clearCheckoutDeliveryDetails() {\n      this.clearCheckoutDeliveryAddress();\n      this.clearCheckoutDeliveryMode();\n      this.clearCheckoutDeliveryModes();\n    }\n    actionAllowed() {\n      let userId;\n      this.userIdService.getUserId().subscribe(occUserId => userId = occUserId).unsubscribe();\n      return userId && userId !== OCC_USER_ID_ANONYMOUS || this.activeCartService.isGuestCart();\n    }\n  }\n  CheckoutDeliveryService.ɵfac = function CheckoutDeliveryService_Factory(t) {\n    return new (t || CheckoutDeliveryService)(i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i2.ActiveCartService), i0.ɵɵinject(i2.UserIdService));\n  };\n  CheckoutDeliveryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutDeliveryService,\n    factory: CheckoutDeliveryService.ɵfac\n  });\n  return CheckoutDeliveryService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CheckoutPaymentService = /*#__PURE__*/(() => {\n  class CheckoutPaymentService {\n    constructor(checkoutStore, processStateStore, activeCartService, userIdService) {\n      this.checkoutStore = checkoutStore;\n      this.processStateStore = processStateStore;\n      this.activeCartService = activeCartService;\n      this.userIdService = userIdService;\n    }\n    /**\n     * Get card types\n     */\n    getCardTypes() {\n      return this.checkoutStore.pipe(select(getAllCardTypes));\n    }\n    /**\n     * Get payment details\n     */\n    getPaymentDetails() {\n      return this.checkoutStore.pipe(select(getPaymentDetails));\n    }\n    /**\n     * Get status about set Payment Details process\n     */\n    getSetPaymentDetailsResultProcess() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID)));\n    }\n    /**\n     * Clear info about process of setting Payment Details\n     */\n    resetSetPaymentDetailsProcess() {\n      this.checkoutStore.dispatch(new ResetSetPaymentDetailsProcess());\n    }\n    /**\n     * Load the supported card types\n     */\n    loadSupportedCardTypes() {\n      this.checkoutStore.dispatch(new LoadCardTypes());\n    }\n    /**\n     * Create payment details using the given paymentDetails param\n     * @param paymentDetails: the PaymentDetails to be created\n     */\n    createPaymentDetails(paymentDetails) {\n      if (this.actionAllowed()) {\n        let userId;\n        this.userIdService.getUserId().subscribe(occUserId => userId = occUserId).unsubscribe();\n        let cartId;\n        this.activeCartService.getActiveCartId().subscribe(activeCartId => cartId = activeCartId).unsubscribe();\n        if (userId && cartId) {\n          this.checkoutStore.dispatch(new CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails\n          }));\n        }\n      }\n    }\n    /**\n     * Set payment details\n     * @param paymentDetails : the PaymentDetails to be set\n     */\n    setPaymentDetails(paymentDetails) {\n      if (this.actionAllowed()) {\n        const userId = getLastValueSync(this.userIdService.getUserId());\n        const cartId = getLastValueSync(this.activeCartService.getActiveCartId());\n        if (userId && cartId) {\n          combineLatest([this.activeCartService.isStable(), this.checkoutStore.pipe(select(getCheckoutLoading))]).pipe(filter(([isStable, isLoading]) => isStable && !isLoading), take(1)).subscribe(() => {\n            this.checkoutStore.dispatch(new SetPaymentDetails({\n              userId,\n              cartId,\n              paymentDetails: paymentDetails\n            }));\n          });\n        }\n      }\n    }\n    /**\n     * Sets payment loading to true without having the flicker issue (GH-3102)\n     */\n    paymentProcessSuccess() {\n      this.checkoutStore.dispatch(new PaymentProcessSuccess());\n    }\n    actionAllowed() {\n      let userId;\n      this.userIdService.getUserId().subscribe(occUserId => userId = occUserId).unsubscribe();\n      return userId && userId !== OCC_USER_ID_ANONYMOUS || this.activeCartService.isGuestCart();\n    }\n  }\n  CheckoutPaymentService.ɵfac = function CheckoutPaymentService_Factory(t) {\n    return new (t || CheckoutPaymentService)(i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i2.ActiveCartService), i0.ɵɵinject(i2.UserIdService));\n  };\n  CheckoutPaymentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutPaymentService,\n    factory: CheckoutPaymentService.ɵfac\n  });\n  return CheckoutPaymentService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CheckoutService = /*#__PURE__*/(() => {\n  class CheckoutService {\n    constructor(checkoutStore, processStateStore, activeCartService, userIdService) {\n      this.checkoutStore = checkoutStore;\n      this.processStateStore = processStateStore;\n      this.activeCartService = activeCartService;\n      this.userIdService = userIdService;\n    }\n    /**\n     * Places an order\n     */\n    placeOrder(termsChecked) {\n      if (this.actionAllowed()) {\n        let userId;\n        this.userIdService.getUserId().subscribe(occUserId => userId = occUserId).unsubscribe();\n        let cartId;\n        this.activeCartService.getActiveCartId().subscribe(activeCartId => cartId = activeCartId).unsubscribe();\n        if (userId && cartId) {\n          this.checkoutStore.dispatch(new PlaceOrder({\n            userId,\n            cartId,\n            termsChecked\n          }));\n        }\n      }\n    }\n    /**\n     * Schedule a replenishment order\n     */\n    scheduleReplenishmentOrder(scheduleReplenishmentForm, termsChecked) {\n      let cartId;\n      this.activeCartService.getActiveCartId().pipe(take(1)).subscribe(activeCartId => cartId = activeCartId);\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        if (Boolean(cartId) && Boolean(userId)) {\n          this.checkoutStore.dispatch(new ScheduleReplenishmentOrder({\n            cartId,\n            scheduleReplenishmentForm,\n            termsChecked,\n            userId\n          }));\n        }\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Returns the place or schedule replenishment order's loading flag\n     */\n    getPlaceOrderLoading() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessLoadingFactory(PLACED_ORDER_PROCESS_ID)));\n    }\n    /**\n     * Returns the place or schedule replenishment order's success flag\n     */\n    getPlaceOrderSuccess() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessSuccessFactory(PLACED_ORDER_PROCESS_ID)));\n    }\n    /**\n     * Returns the place or schedule replenishment order's error flag\n     */\n    getPlaceOrderError() {\n      return this.processStateStore.pipe(select(ProcessSelectors.getProcessErrorFactory(PLACED_ORDER_PROCESS_ID)));\n    }\n    /**\n     * Resets the place or schedule replenishment order's processing state\n     */\n    clearPlaceOrderState() {\n      this.checkoutStore.dispatch(new ClearPlaceOrder());\n    }\n    /**\n     * Clear checkout data\n     */\n    clearCheckoutData() {\n      this.checkoutStore.dispatch(new ClearCheckoutData());\n    }\n    /**\n     * Clear checkout step\n     * @param stepNumber : the step number to be cleared\n     */\n    clearCheckoutStep(stepNumber) {\n      this.checkoutStore.dispatch(new ClearCheckoutStep(stepNumber));\n    }\n    /**\n     * Load checkout details data\n     * @param cartId : string Cart ID of loaded cart\n     */\n    loadCheckoutDetails(cartId) {\n      let userId;\n      this.userIdService.getUserId().subscribe(occUserId => userId = occUserId).unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(new LoadCheckoutDetails({\n          userId,\n          cartId\n        }));\n      }\n    }\n    /**\n     * Get status of checkout details loaded\n     */\n    getCheckoutDetailsLoaded() {\n      return this.checkoutStore.pipe(select(getCheckoutDetailsLoaded));\n    }\n    /**\n     * Check if checkout details are stable (no longer loading)\n     */\n    isLoading() {\n      return this.checkoutStore.pipe(select(getCheckoutLoading));\n    }\n    /**\n     * Get order details\n     */\n    getOrderDetails() {\n      return this.checkoutStore.pipe(select(getCheckoutOrderDetails));\n    }\n    /**\n     * Set checkout order type\n     * @param orderType : an enum of types of order we are placing\n     */\n    setOrderType(orderType) {\n      this.checkoutStore.dispatch(new SetOrderType(orderType));\n    }\n    /**\n     * Get current checkout order type\n     */\n    getCurrentOrderType() {\n      return this.checkoutStore.pipe(select(getSelectedOrderType));\n    }\n    actionAllowed() {\n      let userId;\n      this.userIdService.getUserId().subscribe(occUserId => userId = occUserId).unsubscribe();\n      return userId && userId !== OCC_USER_ID_ANONYMOUS || this.activeCartService.isGuestCart();\n    }\n  }\n  CheckoutService.ɵfac = function CheckoutService_Factory(t) {\n    return new (t || CheckoutService)(i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i2.ActiveCartService), i0.ɵɵinject(i2.UserIdService));\n  };\n  CheckoutService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutService,\n    factory: CheckoutService.ɵfac\n  });\n  return CheckoutService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ClearCheckoutService = /*#__PURE__*/(() => {\n  class ClearCheckoutService {\n    constructor(checkoutDeliveryFacade, checkoutPaymentFacade) {\n      this.checkoutDeliveryFacade = checkoutDeliveryFacade;\n      this.checkoutPaymentFacade = checkoutPaymentFacade;\n    }\n    /**\n     * Use it to clear checkout state\n     */\n    resetCheckoutProcesses() {\n      this.checkoutDeliveryFacade.resetSetDeliveryAddressProcess();\n      this.checkoutDeliveryFacade.resetSetDeliveryModeProcess();\n      this.checkoutPaymentFacade.resetSetPaymentDetailsProcess();\n    }\n  }\n  ClearCheckoutService.ɵfac = function ClearCheckoutService_Factory(t) {\n    return new (t || ClearCheckoutService)(i0.ɵɵinject(i1.CheckoutDeliveryFacade), i0.ɵɵinject(i1.CheckoutPaymentFacade));\n  };\n  ClearCheckoutService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ClearCheckoutService,\n    factory: ClearCheckoutService.ɵfac\n  });\n  return ClearCheckoutService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PaymentTypeService = /*#__PURE__*/(() => {\n  class PaymentTypeService {\n    constructor(checkoutStore, processStateStore, activeCartService, userIdService) {\n      this.checkoutStore = checkoutStore;\n      this.processStateStore = processStateStore;\n      this.activeCartService = activeCartService;\n      this.userIdService = userIdService;\n    }\n    /**\n     * Get payment types\n     */\n    getPaymentTypes() {\n      return this.checkoutStore.pipe(select(getAllPaymentTypes), withLatestFrom(this.processStateStore.pipe(select(ProcessSelectors.getProcessStateFactory(GET_PAYMENT_TYPES_PROCESS_ID)))), tap(([_, loadingState]) => {\n        if (!(loadingState.loading || loadingState.success || loadingState.error)) {\n          this.loadPaymentTypes();\n        }\n      }), pluck(0), shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n    }\n    /**\n     * Load the supported payment types\n     */\n    loadPaymentTypes() {\n      this.checkoutStore.dispatch(new LoadPaymentTypes());\n    }\n    /**\n     * Set payment type to cart\n     * @param typeCode\n     * @param poNumber : purchase order number\n     */\n    setPaymentType(typeCode, poNumber) {\n      let cartId;\n      this.activeCartService.getActiveCartId().pipe(take(1)).subscribe(activeCartId => cartId = activeCartId);\n      this.userIdService.takeUserId(true).subscribe(userId => {\n        if (cartId) {\n          this.checkoutStore.dispatch(new SetPaymentType({\n            userId: userId,\n            cartId: cartId,\n            typeCode: typeCode,\n            poNumber: poNumber\n          }));\n        }\n      }, () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      });\n    }\n    /**\n     * Get the selected payment type\n     */\n    getSelectedPaymentType() {\n      return combineLatest([this.activeCartService.getActive(), this.checkoutStore.pipe(select(getSelectedPaymentType))]).pipe(tap(([cart, selected]) => {\n        if (selected === undefined) {\n          // in b2b, cart always has paymentType (default value 'CARD')\n          if (cart && cart.paymentType) {\n            this.checkoutStore.dispatch(new SetPaymentTypeSuccess(cart));\n          }\n        }\n      }), map(([, selected]) => selected));\n    }\n    /**\n     * Get whether the selected payment type is \"ACCOUNT\" payment\n     */\n    isAccountPayment() {\n      return this.getSelectedPaymentType().pipe(map(selected => selected === B2BPaymentTypeEnum.ACCOUNT_PAYMENT));\n    }\n    /**\n     * Get PO Number\n     */\n    getPoNumber() {\n      return combineLatest([this.activeCartService.getActive(), this.checkoutStore.pipe(select(getPoNumer))]).pipe(tap(([cart, po]) => {\n        if (po === undefined && cart && cart.purchaseOrderNumber) {\n          this.checkoutStore.dispatch(new SetPaymentTypeSuccess(cart));\n        }\n      }), map(([_, po]) => po));\n    }\n  }\n  PaymentTypeService.ɵfac = function PaymentTypeService_Factory(t) {\n    return new (t || PaymentTypeService)(i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i2.ActiveCartService), i0.ɵɵinject(i2.UserIdService));\n  };\n  PaymentTypeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PaymentTypeService,\n    factory: PaymentTypeService.ɵfac\n  });\n  return PaymentTypeService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst facadeProviders = [CheckoutDeliveryService, {\n  provide: CheckoutDeliveryFacade,\n  useExisting: CheckoutDeliveryService\n}, CheckoutPaymentService, {\n  provide: CheckoutPaymentFacade,\n  useExisting: CheckoutPaymentService\n}, CheckoutService, {\n  provide: CheckoutFacade,\n  useExisting: CheckoutService\n}, PaymentTypeService, {\n  provide: PaymentTypeFacade,\n  useExisting: PaymentTypeService\n}, CheckoutCostCenterService, {\n  provide: CheckoutCostCenterFacade,\n  useExisting: CheckoutCostCenterService\n}, ClearCheckoutService, {\n  provide: ClearCheckoutFacade,\n  useExisting: ClearCheckoutService\n}];\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overridden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\nlet CheckoutPageMetaResolver = /*#__PURE__*/(() => {\n  class CheckoutPageMetaResolver extends PageMetaResolver {\n    constructor(translation, activeCartService, basePageMetaResolver) {\n      super();\n      this.translation = translation;\n      this.activeCartService = activeCartService;\n      this.basePageMetaResolver = basePageMetaResolver;\n      this.cart$ = this.activeCartService.getActive();\n      this.pageType = PageType.CONTENT_PAGE;\n      this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n    }\n    /**\n     * @override\n     * Resolves the page title from the translation `pageMetaResolver.checkout.title`. The\n     * cart total item `count` is passed to the translation, so it can be used in the title.\n     *\n     * The title from the page data is ignored for this page title.\n     */\n    resolveTitle() {\n      return this.cart$.pipe(switchMap(c => this.translation.translate('pageMetaResolver.checkout.title', {\n        count: c.totalItems\n      })));\n    }\n    resolveDescription() {\n      return this.basePageMetaResolver.resolveDescription();\n    }\n    resolveRobots() {\n      return this.basePageMetaResolver.resolveRobots();\n    }\n  }\n  CheckoutPageMetaResolver.ɵfac = function CheckoutPageMetaResolver_Factory(t) {\n    return new (t || CheckoutPageMetaResolver)(i0.ɵɵinject(i2.TranslationService), i0.ɵɵinject(i2.ActiveCartService), i0.ɵɵinject(i2.BasePageMetaResolver));\n  };\n  CheckoutPageMetaResolver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutPageMetaResolver,\n    factory: CheckoutPageMetaResolver.ɵfac,\n    providedIn: 'root'\n  });\n  return CheckoutPageMetaResolver;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CardTypesEffects = /*#__PURE__*/(() => {\n  class CardTypesEffects {\n    constructor(actions$, checkoutPaymentConnector) {\n      this.actions$ = actions$;\n      this.checkoutPaymentConnector = checkoutPaymentConnector;\n      this.loadCardTypes$ = this.actions$.pipe(ofType(LOAD_CARD_TYPES), switchMap(() => {\n        return this.checkoutPaymentConnector.getCardTypes().pipe(map(cardTypes => new LoadCardTypesSuccess(cardTypes)), catchError(error => of(new LoadCardTypesFail(normalizeHttpError(error)))));\n      }));\n    }\n  }\n  CardTypesEffects.ɵfac = function CardTypesEffects_Factory(t) {\n    return new (t || CardTypesEffects)(i0.ɵɵinject(i1$2.Actions), i0.ɵɵinject(CheckoutPaymentConnector));\n  };\n  CardTypesEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CardTypesEffects,\n    factory: CardTypesEffects.ɵfac\n  });\n  __decorate([Effect()], CardTypesEffects.prototype, \"loadCardTypes$\", void 0);\n  return CardTypesEffects;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CheckoutEffects = /*#__PURE__*/(() => {\n  class CheckoutEffects {\n    constructor(actions$, checkoutDeliveryConnector, checkoutPaymentConnector, checkoutCostCenterConnector, checkoutConnector) {\n      this.actions$ = actions$;\n      this.checkoutDeliveryConnector = checkoutDeliveryConnector;\n      this.checkoutPaymentConnector = checkoutPaymentConnector;\n      this.checkoutCostCenterConnector = checkoutCostCenterConnector;\n      this.checkoutConnector = checkoutConnector;\n      this.contextChange$ = this.actions$.pipe(ofType(SiteContextActions.CURRENCY_CHANGE, SiteContextActions.LANGUAGE_CHANGE));\n      this.addDeliveryAddress$ = this.actions$.pipe(ofType(ADD_DELIVERY_ADDRESS), map(action => action.payload), mergeMap(payload => this.checkoutDeliveryConnector.createAddress(payload.userId, payload.cartId, payload.address).pipe(mergeMap(address => {\n        address['titleCode'] = payload.address.titleCode;\n        if (payload.address.region && payload.address.region.isocodeShort) {\n          Object.assign(address.region, {\n            isocodeShort: payload.address.region.isocodeShort\n          });\n        }\n        if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n          return [new SetDeliveryAddress({\n            userId: payload.userId,\n            cartId: payload.cartId,\n            address: address\n          })];\n        } else {\n          return [new UserActions.LoadUserAddresses(payload.userId), new SetDeliveryAddress({\n            userId: payload.userId,\n            cartId: payload.cartId,\n            address: address\n          })];\n        }\n      }), catchError(error => of(new AddDeliveryAddressFail(normalizeHttpError(error)))))), withdrawOn(this.contextChange$));\n      this.setDeliveryAddress$ = this.actions$.pipe(ofType(SET_DELIVERY_ADDRESS), map(action => action.payload), mergeMap(payload => {\n        return this.checkoutDeliveryConnector.setAddress(payload.userId, payload.cartId, payload.address.id).pipe(mergeMap(() => [new SetDeliveryAddressSuccess(payload.address), new ClearCheckoutDeliveryMode({\n          userId: payload.userId,\n          cartId: payload.cartId\n        }), new ClearSupportedDeliveryModes(), new ResetLoadSupportedDeliveryModesProcess(), new LoadSupportedDeliveryModes({\n          userId: payload.userId,\n          cartId: payload.cartId\n        })]), catchError(error => of(new SetDeliveryAddressFail(normalizeHttpError(error)))));\n      }), withdrawOn(this.contextChange$));\n      this.loadSupportedDeliveryModes$ = this.actions$.pipe(ofType(LOAD_SUPPORTED_DELIVERY_MODES), map(action => action.payload), mergeMap(payload => {\n        return this.checkoutDeliveryConnector.getSupportedModes(payload.userId, payload.cartId).pipe(map(data => {\n          return new LoadSupportedDeliveryModesSuccess(data);\n        }), catchError(error => of(new LoadSupportedDeliveryModesFail(normalizeHttpError(error)))));\n      }), withdrawOn(this.contextChange$));\n      this.clearCheckoutMiscsDataOnLanguageChange$ = this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE), mergeMap(() => [new ResetLoadSupportedDeliveryModesProcess(), new ResetLoadPaymentTypesProcess(), new CheckoutClearMiscsData()]));\n      this.clearDeliveryModesOnCurrencyChange$ = this.actions$.pipe(ofType(SiteContextActions.CURRENCY_CHANGE), map(() => new ClearSupportedDeliveryModes()));\n      this.clearCheckoutDataOnLogout$ = this.actions$.pipe(ofType(AuthActions.LOGOUT), mergeMap(() => [new ClearCheckoutData(), new ResetLoadSupportedDeliveryModesProcess(), new ResetLoadPaymentTypesProcess()]));\n      this.clearCheckoutDataOnLogin$ = this.actions$.pipe(ofType(AuthActions.LOGIN), map(() => new ClearCheckoutData()));\n      this.setDeliveryMode$ = this.actions$.pipe(ofType(SET_DELIVERY_MODE), map(action => action.payload), mergeMap(payload => {\n        return this.checkoutDeliveryConnector.setMode(payload.userId, payload.cartId, payload.selectedModeId).pipe(mergeMap(() => {\n          return [new SetDeliveryModeSuccess(payload.selectedModeId), new CartActions.LoadCart({\n            userId: payload.userId,\n            cartId: payload.cartId\n          })];\n        }), catchError(error => of(new SetDeliveryModeFail(normalizeHttpError(error)))));\n      }), withdrawOn(this.contextChange$));\n      this.createPaymentDetails$ = this.actions$.pipe(ofType(CREATE_PAYMENT_DETAILS), map(action => action.payload), mergeMap(payload => {\n        // get information for creating a subscription directly with payment provider\n        return this.checkoutPaymentConnector.create(payload.userId, payload.cartId, payload.paymentDetails).pipe(mergeMap(details => {\n          if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n            return [new CreatePaymentDetailsSuccess(details)];\n          } else {\n            return [new UserActions.LoadUserPaymentMethods(payload.userId), new CreatePaymentDetailsSuccess(details)];\n          }\n        }), catchError(error => of(new CreatePaymentDetailsFail(normalizeHttpError(error)))));\n      }), withdrawOn(this.contextChange$));\n      this.setPaymentDetails$ = this.actions$.pipe(ofType(SET_PAYMENT_DETAILS), map(action => action.payload), mergeMap(payload => {\n        return this.checkoutPaymentConnector.set(payload.userId, payload.cartId, payload.paymentDetails.id).pipe(map(() => new SetPaymentDetailsSuccess(payload.paymentDetails)), catchError(error => of(new SetPaymentDetailsFail(normalizeHttpError(error)))));\n      }), withdrawOn(this.contextChange$));\n      this.placeOrder$ = this.actions$.pipe(ofType(PLACE_ORDER), map(action => action.payload), mergeMap(payload => {\n        return this.checkoutConnector.placeOrder(payload.userId, payload.cartId, payload.termsChecked).pipe(switchMap(data => [new CartActions.RemoveCart({\n          cartId: payload.cartId\n        }), new PlaceOrderSuccess(data)]), catchError(error => of(new PlaceOrderFail(normalizeHttpError(error)))));\n      }), withdrawOn(this.contextChange$));\n      this.loadCheckoutDetails$ = this.actions$.pipe(ofType(LOAD_CHECKOUT_DETAILS), map(action => action.payload), mergeMap(payload => {\n        return this.checkoutConnector.loadCheckoutDetails(payload.userId, payload.cartId).pipe(map(data => new LoadCheckoutDetailsSuccess(data)), catchError(error => of(new LoadCheckoutDetailsFail(normalizeHttpError(error)))));\n      }), withdrawOn(this.contextChange$));\n      this.reloadDetailsOnMergeCart$ = this.actions$.pipe(ofType(CartActions.MERGE_CART_SUCCESS), map(action => action.payload), map(payload => {\n        return new LoadCheckoutDetails({\n          userId: payload.userId,\n          cartId: payload.cartId\n        });\n      }));\n      this.clearCheckoutDeliveryAddress$ = this.actions$.pipe(ofType(CLEAR_CHECKOUT_DELIVERY_ADDRESS), map(action => action.payload), filter(payload => Boolean(payload.cartId)), switchMap(payload => {\n        return this.checkoutConnector.clearCheckoutDeliveryAddress(payload.userId, payload.cartId).pipe(map(() => new ClearCheckoutDeliveryAddressSuccess()), catchError(error => of(new ClearCheckoutDeliveryAddressFail(normalizeHttpError(error)))));\n      }), withdrawOn(this.contextChange$));\n      this.clearCheckoutDeliveryMode$ = this.actions$.pipe(ofType(CLEAR_CHECKOUT_DELIVERY_MODE), map(action => action.payload), filter(payload => Boolean(payload.cartId)), concatMap(payload => {\n        return this.checkoutConnector.clearCheckoutDeliveryMode(payload.userId, payload.cartId).pipe(mergeMap(() => [new ClearCheckoutDeliveryModeSuccess(Object.assign({}, payload)), new CartActions.LoadCart({\n          cartId: payload.cartId,\n          userId: payload.userId\n        })]), catchError(error => from([new ClearCheckoutDeliveryModeFail(Object.assign(Object.assign({}, payload), {\n          error: normalizeHttpError(error)\n        })), new CartActions.LoadCart({\n          cartId: payload.cartId,\n          userId: payload.userId\n        })])));\n      }), withdrawOn(this.contextChange$));\n      this.setCostCenter$ = this.actions$.pipe(ofType(SET_COST_CENTER), map(action => action.payload), switchMap(payload => {\n        return this.checkoutCostCenterConnector.setCostCenter(payload.userId, payload.cartId, payload.costCenterId).pipe(mergeMap(_data => [new CartActions.LoadCart({\n          cartId: payload.cartId,\n          userId: payload.userId\n        }), new SetCostCenterSuccess(payload.costCenterId), new ClearCheckoutDeliveryAddress({\n          userId: payload.userId,\n          cartId: payload.cartId\n        })]), catchError(error => of(new SetCostCenterFail(normalizeHttpError(error)))));\n      }), withdrawOn(this.contextChange$));\n    }\n  }\n  CheckoutEffects.ɵfac = function CheckoutEffects_Factory(t) {\n    return new (t || CheckoutEffects)(i0.ɵɵinject(i1$2.Actions), i0.ɵɵinject(CheckoutDeliveryConnector), i0.ɵɵinject(CheckoutPaymentConnector), i0.ɵɵinject(CheckoutCostCenterConnector), i0.ɵɵinject(CheckoutConnector));\n  };\n  CheckoutEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CheckoutEffects,\n    factory: CheckoutEffects.ɵfac\n  });\n  __decorate([Effect()], CheckoutEffects.prototype, \"addDeliveryAddress$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"setDeliveryAddress$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"loadSupportedDeliveryModes$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"clearCheckoutMiscsDataOnLanguageChange$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"clearDeliveryModesOnCurrencyChange$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"clearCheckoutDataOnLogout$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"clearCheckoutDataOnLogin$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"setDeliveryMode$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"createPaymentDetails$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"setPaymentDetails$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"placeOrder$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"loadCheckoutDetails$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"reloadDetailsOnMergeCart$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"clearCheckoutDeliveryAddress$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"clearCheckoutDeliveryMode$\", void 0);\n  __decorate([Effect()], CheckoutEffects.prototype, \"setCostCenter$\", void 0);\n  return CheckoutEffects;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PaymentTypesEffects = /*#__PURE__*/(() => {\n  class PaymentTypesEffects {\n    constructor(actions$, paymentTypeConnector) {\n      this.actions$ = actions$;\n      this.paymentTypeConnector = paymentTypeConnector;\n      this.loadPaymentTypes$ = this.actions$.pipe(ofType(LOAD_PAYMENT_TYPES), switchMap(() => {\n        return this.paymentTypeConnector.getPaymentTypes().pipe(map(paymentTypes => new LoadPaymentTypesSuccess(paymentTypes)), catchError(error => of(new LoadPaymentTypesFail(normalizeHttpError(error)))));\n      }));\n      this.setPaymentType$ = this.actions$.pipe(ofType(SET_PAYMENT_TYPE), map(action => action.payload), switchMap(payload => {\n        return this.paymentTypeConnector.setPaymentType(payload.userId, payload.cartId, payload.typeCode, payload.poNumber).pipe(mergeMap(data => {\n          return [new CartActions.LoadCartSuccess({\n            cart: data,\n            userId: payload.userId,\n            cartId: payload.cartId\n          }), new ClearCheckoutData(), new SetPaymentTypeSuccess(data)];\n        }), catchError(error => of(new SetPaymentTypeFail(normalizeHttpError(error)))));\n      }));\n    }\n  }\n  PaymentTypesEffects.ɵfac = function PaymentTypesEffects_Factory(t) {\n    return new (t || PaymentTypesEffects)(i0.ɵɵinject(i1$2.Actions), i0.ɵɵinject(PaymentTypeConnector));\n  };\n  PaymentTypesEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PaymentTypesEffects,\n    factory: PaymentTypesEffects.ɵfac\n  });\n  __decorate([Effect()], PaymentTypesEffects.prototype, \"loadPaymentTypes$\", void 0);\n  __decorate([Effect()], PaymentTypesEffects.prototype, \"setPaymentType$\", void 0);\n  return PaymentTypesEffects;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst DELIVERY_MODE_NORMALIZER = new InjectionToken('DeliveryModeNormalizer');\nconst PAYMENT_TYPE_NORMALIZER = new InjectionToken('PaymentTypeNormalizer');\nconst PAYMENT_DETAILS_SERIALIZER = new InjectionToken('PaymentDetailsSerializer');\nconst CARD_TYPE_NORMALIZER = new InjectionToken('CardTypeNormalizer');\nconst REPLENISHMENT_ORDER_FORM_SERIALIZER = new InjectionToken('ReplenishmentOrderFormSerializer');\nlet ReplenishmentOrderEffects = /*#__PURE__*/(() => {\n  class ReplenishmentOrderEffects {\n    constructor(actions$, checkoutReplOrderConnector) {\n      this.actions$ = actions$;\n      this.checkoutReplOrderConnector = checkoutReplOrderConnector;\n      this.scheduleReplenishmentOrder$ = this.actions$.pipe(ofType(SCHEDULE_REPLENISHMENT_ORDER), map(action => action.payload), mergeMap(payload => {\n        return this.checkoutReplOrderConnector.scheduleReplenishmentOrder(payload.cartId, payload.scheduleReplenishmentForm, payload.termsChecked, payload.userId).pipe(switchMap(data => [new CartActions.RemoveCart({\n          cartId: payload.cartId\n        }), new ScheduleReplenishmentOrderSuccess(data)]), catchError(error => of(new ScheduleReplenishmentOrderFail(normalizeHttpError(error)))));\n      }));\n    }\n  }\n  ReplenishmentOrderEffects.ɵfac = function ReplenishmentOrderEffects_Factory(t) {\n    return new (t || ReplenishmentOrderEffects)(i0.ɵɵinject(i1$2.Actions), i0.ɵɵinject(CheckoutReplenishmentOrderConnector));\n  };\n  ReplenishmentOrderEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ReplenishmentOrderEffects,\n    factory: ReplenishmentOrderEffects.ɵfac\n  });\n  __decorate([Effect()], ReplenishmentOrderEffects.prototype, \"scheduleReplenishmentOrder$\", void 0);\n  return ReplenishmentOrderEffects;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst effects = [CheckoutEffects, CardTypesEffects, PaymentTypesEffects, ReplenishmentOrderEffects];\nconst initialState$1 = {\n  poNumber: {\n    po: undefined,\n    costCenter: undefined\n  },\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: ''\n  },\n  paymentDetails: {},\n  orderDetails: {}\n};\nfunction reducer$1(state = initialState$1, action) {\n  switch (action.type) {\n    case SET_PAYMENT_TYPE_SUCCESS:\n      {\n        const cart = action.payload;\n        return Object.assign(Object.assign({}, state), {\n          poNumber: Object.assign(Object.assign({}, state.poNumber), {\n            po: cart.purchaseOrderNumber\n          })\n        });\n      }\n    case SET_COST_CENTER_SUCCESS:\n      {\n        return Object.assign(Object.assign({}, state), {\n          poNumber: Object.assign(Object.assign({}, state.poNumber), {\n            costCenter: action.payload\n          })\n        });\n      }\n    case ADD_DELIVERY_ADDRESS_SUCCESS:\n    case SET_DELIVERY_ADDRESS_SUCCESS:\n      {\n        const address = action.payload;\n        return Object.assign(Object.assign({}, state), {\n          address\n        });\n      }\n    case LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS:\n      {\n        const supportedModes = action.payload;\n        if (!supportedModes) {\n          return state;\n        }\n        const supported = supportedModes.reduce((modes, mode) => {\n          return Object.assign(Object.assign({}, modes), {\n            [mode.code]: mode\n          });\n        }, Object.assign({}, state.deliveryMode.supported));\n        return Object.assign(Object.assign({}, state), {\n          deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), {\n            supported\n          })\n        });\n      }\n    case SET_DELIVERY_MODE_SUCCESS:\n      {\n        const selected = action.payload;\n        return Object.assign(Object.assign({}, state), {\n          deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), {\n            selected\n          })\n        });\n      }\n    case CREATE_PAYMENT_DETAILS_SUCCESS:\n    case SET_PAYMENT_DETAILS_SUCCESS:\n      {\n        return Object.assign(Object.assign({}, state), {\n          paymentDetails: action.payload\n        });\n      }\n    case CREATE_PAYMENT_DETAILS_FAIL:\n      {\n        const paymentDetails = action.payload;\n        if (paymentDetails['hasError']) {\n          return Object.assign(Object.assign({}, state), {\n            paymentDetails\n          });\n        }\n        return state;\n      }\n    case PLACE_ORDER_SUCCESS:\n    case SCHEDULE_REPLENISHMENT_ORDER_SUCCESS:\n      {\n        const orderDetails = action.payload;\n        return Object.assign(Object.assign({}, state), {\n          orderDetails\n        });\n      }\n    case CLEAR_CHECKOUT_DATA:\n      {\n        return initialState$1;\n      }\n    case CLEAR_CHECKOUT_STEP:\n      {\n        const stepNumber = action.payload;\n        switch (stepNumber) {\n          case 1:\n            {\n              return Object.assign(Object.assign({}, state), {\n                address: {}\n              });\n            }\n          case 2:\n            {\n              return Object.assign(Object.assign({}, state), {\n                deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), {\n                  supported: {},\n                  selected: ''\n                })\n              });\n            }\n          case 3:\n            {\n              return Object.assign(Object.assign({}, state), {\n                paymentDetails: {}\n              });\n            }\n        }\n        return state;\n      }\n    case CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CHECKOUT_CLEAR_MISCS_DATA:\n      {\n        return Object.assign(Object.assign({}, state), {\n          deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), {\n            supported: {}\n          })\n        });\n      }\n    case LOAD_CHECKOUT_DETAILS_SUCCESS:\n      {\n        return Object.assign(Object.assign({}, state), {\n          address: action.payload.deliveryAddress,\n          deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), {\n            selected: action.payload.deliveryMode && action.payload.deliveryMode.code\n          }),\n          paymentDetails: action.payload.paymentInfo\n        });\n      }\n    case CLEAR_CHECKOUT_DELIVERY_ADDRESS:\n      {\n        return Object.assign(Object.assign({}, state), {\n          address: {}\n        });\n      }\n    case CLEAR_CHECKOUT_DELIVERY_MODE:\n      {\n        return Object.assign(Object.assign({}, state), {\n          deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), {\n            selected: ''\n          })\n        });\n      }\n  }\n  return state;\n}\nconst initialState = {\n  selected: ORDER_TYPE.PLACE_ORDER\n};\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_ORDER_TYPE:\n      {\n        return Object.assign(Object.assign({}, state), {\n          selected: action.payload\n        });\n      }\n    case CLEAR_CHECKOUT_DATA:\n      {\n        return initialState;\n      }\n    default:\n      {\n        return state;\n      }\n  }\n}\nfunction getReducers() {\n  return {\n    steps: StateUtils.loaderReducer(CHECKOUT_DETAILS, reducer$1),\n    cardTypes: reducer$3,\n    paymentTypes: reducer$2,\n    orderType: reducer\n  };\n}\nconst reducerToken = new InjectionToken('CheckoutReducers');\nconst reducerProvider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\nlet CheckoutStoreModule = /*#__PURE__*/(() => {\n  class CheckoutStoreModule {}\n  CheckoutStoreModule.ɵfac = function CheckoutStoreModule_Factory(t) {\n    return new (t || CheckoutStoreModule)();\n  };\n  CheckoutStoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CheckoutStoreModule\n  });\n  CheckoutStoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [reducerProvider],\n    imports: [[CommonModule, StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken), EffectsModule.forFeature(effects)]]\n  });\n  return CheckoutStoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CheckoutCoreModule = /*#__PURE__*/(() => {\n  class CheckoutCoreModule {}\n  CheckoutCoreModule.ɵfac = function CheckoutCoreModule_Factory(t) {\n    return new (t || CheckoutCoreModule)();\n  };\n  CheckoutCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CheckoutCoreModule\n  });\n  CheckoutCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [...facadeProviders, CheckoutDeliveryConnector, CheckoutCostCenterConnector, CheckoutConnector, CheckoutPaymentConnector, PaymentTypeConnector, CheckoutReplenishmentOrderConnector, CheckoutEventBuilder, CheckoutPageMetaResolver, {\n      provide: PageMetaResolver,\n      useExisting: CheckoutPageMetaResolver,\n      multi: true\n    }],\n    imports: [[CheckoutStoreModule, CheckoutEventModule]]\n  });\n  return CheckoutCoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CARD_TYPE_NORMALIZER, CHECKOUT_DETAILS, CHECKOUT_FEATURE, checkoutGroup_actions as CheckoutActions, CheckoutAdapter, CheckoutConnector, CheckoutCoreModule, CheckoutCostCenterAdapter, CheckoutCostCenterConnector, CheckoutCostCenterService, CheckoutDeliveryAdapter, CheckoutDeliveryConnector, CheckoutDeliveryService, CheckoutEventBuilder, CheckoutEventListener, CheckoutEventModule, CheckoutPageMetaResolver, CheckoutPaymentAdapter, CheckoutPaymentConnector, CheckoutPaymentService, CheckoutReplenishmentOrderAdapter, CheckoutReplenishmentOrderConnector, checkoutGroup_selectors as CheckoutSelectors, CheckoutService, ClearCheckoutService, DELIVERY_MODE_NORMALIZER, GET_PAYMENT_TYPES_PROCESS_ID, PAYMENT_DETAILS_SERIALIZER, PAYMENT_TYPE_NORMALIZER, PLACED_ORDER_PROCESS_ID, PaymentTypeAdapter, PaymentTypeConnector, PaymentTypeService, REPLENISHMENT_ORDER_FORM_SERIALIZER, SET_COST_CENTER_PROCESS_ID, SET_DELIVERY_ADDRESS_PROCESS_ID, SET_DELIVERY_MODE_PROCESS_ID, SET_PAYMENT_DETAILS_PROCESS_ID, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID };\n//# sourceMappingURL=spartacus-checkout-core.js.map","map":null,"metadata":{},"sourceType":"module"}