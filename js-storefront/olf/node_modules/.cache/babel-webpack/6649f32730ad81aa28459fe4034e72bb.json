{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, isDevMode, NgModule } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { Config, provideDefaultConfig, provideDefaultConfigFactory } from '@spartacus/core';\nimport { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nlet PersonalizationConfig = /*#__PURE__*/(() => {\n  class PersonalizationConfig {}\n  PersonalizationConfig.ɵfac = function PersonalizationConfig_Factory(t) {\n    return new (t || PersonalizationConfig)();\n  };\n  PersonalizationConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PersonalizationConfig,\n    factory: function PersonalizationConfig_Factory(t) {\n      let r = null;\n      if (t) {\n        r = new (t || PersonalizationConfig)();\n      } else {\n        r = i0.ɵɵinject(Config);\n      }\n      return r;\n    },\n    providedIn: 'root'\n  });\n  return PersonalizationConfig;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst PERSONALIZATION_FEATURE = 'personalization';\nconst defaultPersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time'\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent'\n    }\n  }\n};\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\nlet OccPersonalizationIdInterceptor = /*#__PURE__*/(() => {\n  class OccPersonalizationIdInterceptor {\n    constructor(config, occEndpoints, winRef) {\n      var _a, _b, _c, _d, _e, _f;\n      this.config = config;\n      this.occEndpoints = occEndpoints;\n      this.winRef = winRef;\n      this.enabled = false;\n      if (this.winRef.isBrowser()) {\n        this.enabled = this.winRef.localStorage && ((_a = this.config.personalization) === null || _a === void 0 ? void 0 : _a.enabled) || false;\n        if (this.enabled) {\n          if (!((_b = this.config.personalization) === null || _b === void 0 ? void 0 : _b.httpHeaderName) && isDevMode()) {\n            console.warn(`There is no httpHeaderName configured in Personalization`);\n          }\n          this.requestHeader = (_d = (_c = this.config.personalization) === null || _c === void 0 ? void 0 : _c.httpHeaderName) === null || _d === void 0 ? void 0 : _d.id.toLowerCase();\n          this.personalizationId = (_e = this.winRef.localStorage) === null || _e === void 0 ? void 0 : _e.getItem(PERSONALIZATION_ID_KEY);\n        } else if ((_f = this.winRef.localStorage) === null || _f === void 0 ? void 0 : _f.getItem(PERSONALIZATION_ID_KEY)) {\n          this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n        }\n      }\n    }\n    intercept(request, next) {\n      if (!this.enabled) {\n        return next.handle(request);\n      }\n      if (this.requestHeader && this.personalizationId && request.url.includes(this.occEndpoints.getBaseUrl())) {\n        request = request.clone({\n          setHeaders: {\n            [this.requestHeader]: this.personalizationId\n          }\n        });\n      }\n      return next.handle(request).pipe(tap(event => {\n        var _a;\n        if (event instanceof HttpResponse) {\n          if (this.requestHeader && event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              if (this.personalizationId) {\n                (_a = this.winRef.localStorage) === null || _a === void 0 ? void 0 : _a.setItem(PERSONALIZATION_ID_KEY, this.personalizationId);\n              }\n            }\n          }\n        }\n      }));\n    }\n  }\n  OccPersonalizationIdInterceptor.ɵfac = function OccPersonalizationIdInterceptor_Factory(t) {\n    return new (t || OccPersonalizationIdInterceptor)(i0.ɵɵinject(PersonalizationConfig), i0.ɵɵinject(i2.OccEndpointsService), i0.ɵɵinject(i2.WindowRef));\n  };\n  OccPersonalizationIdInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OccPersonalizationIdInterceptor,\n    factory: OccPersonalizationIdInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return OccPersonalizationIdInterceptor;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\nlet OccPersonalizationTimeInterceptor = /*#__PURE__*/(() => {\n  class OccPersonalizationTimeInterceptor {\n    constructor(config, occEndpoints, winRef) {\n      var _a, _b, _c, _d, _e, _f;\n      this.config = config;\n      this.occEndpoints = occEndpoints;\n      this.winRef = winRef;\n      this.enabled = false;\n      if (this.winRef.isBrowser()) {\n        this.enabled = this.winRef.localStorage && ((_a = this.config.personalization) === null || _a === void 0 ? void 0 : _a.enabled) || false;\n        if (this.enabled) {\n          if (!((_b = this.config.personalization) === null || _b === void 0 ? void 0 : _b.httpHeaderName) && isDevMode()) {\n            console.warn(`There is no httpHeaderName configured in Personalization`);\n          }\n          this.requestHeader = (_d = (_c = this.config.personalization) === null || _c === void 0 ? void 0 : _c.httpHeaderName) === null || _d === void 0 ? void 0 : _d.timestamp.toLowerCase();\n          this.timestamp = (_e = this.winRef.localStorage) === null || _e === void 0 ? void 0 : _e.getItem(PERSONALIZATION_TIME_KEY);\n        } else if ((_f = this.winRef.localStorage) === null || _f === void 0 ? void 0 : _f.getItem(PERSONALIZATION_TIME_KEY)) {\n          this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n        }\n      }\n    }\n    intercept(request, next) {\n      if (!this.enabled) {\n        return next.handle(request);\n      }\n      if (this.requestHeader && this.timestamp && request.url.includes(this.occEndpoints.getBaseUrl())) {\n        request = request.clone({\n          setHeaders: {\n            [this.requestHeader]: this.timestamp\n          }\n        });\n      }\n      return next.handle(request).pipe(tap(event => {\n        var _a;\n        if (event instanceof HttpResponse) {\n          if (this.requestHeader && event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              if (this.timestamp) {\n                (_a = this.winRef.localStorage) === null || _a === void 0 ? void 0 : _a.setItem(PERSONALIZATION_TIME_KEY, this.timestamp);\n              }\n            }\n          }\n        }\n      }));\n    }\n  }\n  OccPersonalizationTimeInterceptor.ɵfac = function OccPersonalizationTimeInterceptor_Factory(t) {\n    return new (t || OccPersonalizationTimeInterceptor)(i0.ɵɵinject(PersonalizationConfig), i0.ɵɵinject(i2.OccEndpointsService), i0.ɵɵinject(i2.WindowRef));\n  };\n  OccPersonalizationTimeInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OccPersonalizationTimeInterceptor,\n    factory: OccPersonalizationTimeInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return OccPersonalizationTimeInterceptor;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst interceptors = [{\n  provide: HTTP_INTERCEPTORS,\n  useExisting: OccPersonalizationIdInterceptor,\n  multi: true\n}, {\n  provide: HTTP_INTERCEPTORS,\n  useExisting: OccPersonalizationTimeInterceptor,\n  multi: true\n}];\n\n// TODO: Inline this factory when we start releasing Ivy compiled libraries\nfunction defaultPersonalizationComponentsConfig() {\n  const config = {\n    featureModules: {\n      [PERSONALIZATION_FEATURE]: {\n        cmsComponents: ['PersonalizationScriptComponent']\n      }\n    }\n  };\n  return config;\n}\nlet PersonalizationRootModule = /*#__PURE__*/(() => {\n  class PersonalizationRootModule {}\n  PersonalizationRootModule.ɵfac = function PersonalizationRootModule_Factory(t) {\n    return new (t || PersonalizationRootModule)();\n  };\n  PersonalizationRootModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: PersonalizationRootModule\n  });\n  PersonalizationRootModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [...interceptors, provideDefaultConfig(defaultPersonalizationConfig), provideDefaultConfigFactory(defaultPersonalizationComponentsConfig)]\n  });\n  return PersonalizationRootModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { PERSONALIZATION_FEATURE, PersonalizationConfig, PersonalizationRootModule, defaultPersonalizationComponentsConfig };\n//# sourceMappingURL=spartacus-tracking-personalization-root.js.map","map":null,"metadata":{},"sourceType":"module"}