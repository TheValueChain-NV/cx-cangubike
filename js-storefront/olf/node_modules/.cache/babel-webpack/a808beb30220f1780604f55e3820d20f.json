{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1$1 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i2 from '@spartacus/core';\nimport { facadeFactory, provideDefaultConfigFactory, provideDefaultConfig, AuthGuard, CartEvent } from '@spartacus/core';\nimport { CartOrderEntriesContext, OrderEntriesSource, CmsPageGuard, PageLayoutComponent, ORDER_ENTRIES_CONTEXT } from '@spartacus/storefront';\nimport { combineLatest, queueScheduler } from 'rxjs';\nimport { map, distinctUntilChanged, switchMap, tap, take, filter, observeOn, delayWhen } from 'rxjs/operators';\nimport * as i1 from '@ngrx/store';\nconst CART_SAVED_CART_FEATURE = 'cartSavedCart';\nconst CART_SAVED_CART_CORE_FEATURE = 'cartSavedCartCore';\nlet SavedCartFacade = /*#__PURE__*/(() => {\n  class SavedCartFacade {}\n  SavedCartFacade.ɵfac = function SavedCartFacade_Factory(t) {\n    return new (t || SavedCartFacade)();\n  };\n  SavedCartFacade.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SavedCartFacade,\n    factory: function () {\n      return (() => facadeFactory({\n        facade: SavedCartFacade,\n        feature: CART_SAVED_CART_CORE_FEATURE,\n        methods: ['editSavedCart', 'deleteSavedCart', 'getSavedCart', 'getSavedCartList', 'loadSavedCart', 'clearCloneSavedCart', 'clearRestoreSavedCart', 'clearSaveCart', 'clearSavedCarts', 'get', 'getList', 'getCloneSavedCartProcessError', 'getCloneSavedCartProcessLoading', 'getCloneSavedCartProcessSuccess', 'getRestoreSavedCartProcessError', 'getRestoreSavedCartProcessLoading', 'getRestoreSavedCartProcessSuccess', 'getSaveCartProcessError', 'getSaveCartProcessLoading', 'getSaveCartProcessSuccess', 'getSavedCartListProcess', 'getSavedCartListProcessLoading', 'isStable', 'cloneSavedCart', 'loadSavedCarts', 'restoreSavedCart', 'saveCart'],\n        async: true\n      }))();\n    },\n    providedIn: 'root'\n  });\n  return SavedCartFacade;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SavedCartOrderEntriesContext = /*#__PURE__*/(() => {\n  class SavedCartOrderEntriesContext extends CartOrderEntriesContext {\n    constructor(actionsSubject, userIdService, multiCartService, savedCartService, routingService) {\n      super(actionsSubject);\n      this.actionsSubject = actionsSubject;\n      this.userIdService = userIdService;\n      this.multiCartService = multiCartService;\n      this.savedCartService = savedCartService;\n      this.routingService = routingService;\n      this.type = OrderEntriesSource.SAVED_CART;\n      this.savedCartId$ = this.routingService.getRouterState().pipe(map(routingData => routingData.state.params.savedCartId), distinctUntilChanged());\n    }\n    getEntries() {\n      return this.savedCartId$.pipe(switchMap(cartId => this.savedCartService.get(cartId)), map(cart => {\n        var _a;\n        return (_a = cart === null || cart === void 0 ? void 0 : cart.entries) !== null && _a !== void 0 ? _a : [];\n      }));\n    }\n    add(products) {\n      return combineLatest([this.userIdService.takeUserId(), this.savedCartId$]).pipe(tap(([userId, cartId]) => this.multiCartService.addEntries(userId, cartId, products)), map(([_userId, cartId]) => cartId));\n    }\n  }\n  SavedCartOrderEntriesContext.ɵfac = function SavedCartOrderEntriesContext_Factory(t) {\n    return new (t || SavedCartOrderEntriesContext)(i0.ɵɵinject(i1.ActionsSubject), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.MultiCartService), i0.ɵɵinject(SavedCartFacade), i0.ɵɵinject(i2.RoutingService));\n  };\n  SavedCartOrderEntriesContext.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SavedCartOrderEntriesContext,\n    factory: SavedCartOrderEntriesContext.ɵfac,\n    providedIn: 'root'\n  });\n  return SavedCartOrderEntriesContext;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NewSavedCartOrderEntriesContext = /*#__PURE__*/(() => {\n  class NewSavedCartOrderEntriesContext extends CartOrderEntriesContext {\n    constructor(actionsSubject, userIdService, multiCartService, savedCartService) {\n      super(actionsSubject);\n      this.actionsSubject = actionsSubject;\n      this.userIdService = userIdService;\n      this.multiCartService = multiCartService;\n      this.savedCartService = savedCartService;\n      this.type = OrderEntriesSource.NEW_SAVED_CART;\n    }\n    addEntries(products, savedCartInfo) {\n      return this.add(products, savedCartInfo).pipe(switchMap(cartId => this.getResults(cartId)), take(products.length));\n    }\n    add(products, savedCartInfo) {\n      return this.userIdService.takeUserId().pipe(switchMap(userId => this.multiCartService.createCart({\n        userId,\n        extraData: {\n          active: false\n        }\n      }).pipe(filter(cartData => {\n        var _a;\n        return Boolean((_a = cartData.value) === null || _a === void 0 ? void 0 : _a.code);\n      }), map(cartData => {\n        var _a;\n        return (_a = cartData.value) === null || _a === void 0 ? void 0 : _a.code;\n      }), tap(cartId => {\n        this.savedCartService.saveCart({\n          cartId,\n          saveCartName: savedCartInfo === null || savedCartInfo === void 0 ? void 0 : savedCartInfo.name,\n          saveCartDescription: savedCartInfo === null || savedCartInfo === void 0 ? void 0 : savedCartInfo.description\n        });\n        this.savedCartService.loadSavedCarts();\n      }), observeOn(queueScheduler), delayWhen(() => this.savedCartService.getSaveCartProcessLoading().pipe(filter(loading => !loading))), tap(cartId => this.multiCartService.addEntries(userId, cartId, products)))));\n    }\n  }\n  NewSavedCartOrderEntriesContext.ɵfac = function NewSavedCartOrderEntriesContext_Factory(t) {\n    return new (t || NewSavedCartOrderEntriesContext)(i0.ɵɵinject(i1.ActionsSubject), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.MultiCartService), i0.ɵɵinject(SavedCartFacade));\n  };\n  NewSavedCartOrderEntriesContext.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NewSavedCartOrderEntriesContext,\n    factory: NewSavedCartOrderEntriesContext.ɵfac,\n    providedIn: 'root'\n  });\n  return NewSavedCartOrderEntriesContext;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// TODO: Inline this factory when we start releasing Ivy compiled libraries\nfunction defaultCartSavedCartComponentsConfig() {\n  const config = {\n    featureModules: {\n      [CART_SAVED_CART_FEATURE]: {\n        cmsComponents: ['AddToSavedCartsComponent', 'AccountSavedCartHistoryComponent', 'SavedCartDetailsOverviewComponent', 'SavedCartDetailsItemsComponent', 'SavedCartDetailsActionComponent']\n      },\n      // by default core is bundled together with components\n      [CART_SAVED_CART_CORE_FEATURE]: CART_SAVED_CART_FEATURE\n    }\n  };\n  return config;\n}\nlet SavedCartRootModule = /*#__PURE__*/(() => {\n  class SavedCartRootModule {}\n  SavedCartRootModule.ɵfac = function SavedCartRootModule_Factory(t) {\n    return new (t || SavedCartRootModule)();\n  };\n  SavedCartRootModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SavedCartRootModule\n  });\n  SavedCartRootModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideDefaultConfigFactory(defaultCartSavedCartComponentsConfig), provideDefaultConfig({\n      routing: {\n        routes: {\n          savedCarts: {\n            paths: ['my-account/saved-carts']\n          },\n          savedCartsDetails: {\n            paths: ['my-account/saved-cart/:savedCartId'],\n            paramsMapping: {\n              savedCartId: 'savedCartId'\n            }\n          }\n        }\n      }\n    })],\n    imports: [[RouterModule.forChild([{\n      // @ts-ignore\n      path: null,\n      canActivate: [AuthGuard, CmsPageGuard],\n      component: PageLayoutComponent,\n      data: {\n        cxRoute: 'savedCartsDetails',\n        cxContext: {\n          [ORDER_ENTRIES_CONTEXT]: SavedCartOrderEntriesContext\n        }\n      }\n    }, {\n      // @ts-ignore\n      path: null,\n      canActivate: [AuthGuard, CmsPageGuard],\n      component: PageLayoutComponent,\n      data: {\n        cxRoute: 'savedCarts',\n        cxContext: {\n          [ORDER_ENTRIES_CONTEXT]: NewSavedCartOrderEntriesContext\n        }\n      }\n    }])]]\n  });\n  return SavedCartRootModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Base saved cart event. Most cart events should have these properties.\n */\nclass SavedCartEvent extends CartEvent {}\n// =====================================================================\nlet DeleteSavedCartEvent = /*#__PURE__*/(() => {\n  class DeleteSavedCartEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  DeleteSavedCartEvent.type = 'DeleteSavedCartEvent';\n  return DeleteSavedCartEvent;\n})();\nlet DeleteSavedCartSuccessEvent = /*#__PURE__*/(() => {\n  class DeleteSavedCartSuccessEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  DeleteSavedCartSuccessEvent.type = 'DeleteSavedCartSuccessEvent';\n  return DeleteSavedCartSuccessEvent;\n})();\nlet DeleteSavedCartFailEvent = /*#__PURE__*/(() => {\n  class DeleteSavedCartFailEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  DeleteSavedCartFailEvent.type = 'DeleteSavedCartFailEvent';\n  return DeleteSavedCartFailEvent;\n})();\nlet SaveCartEvent = /*#__PURE__*/(() => {\n  class SaveCartEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  SaveCartEvent.type = 'SaveCartEvent';\n  return SaveCartEvent;\n})();\nlet SaveCartSuccessEvent = /*#__PURE__*/(() => {\n  class SaveCartSuccessEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  SaveCartSuccessEvent.type = 'SaveCartSuccessEvent';\n  return SaveCartSuccessEvent;\n})();\nlet SaveCartFailEvent = /*#__PURE__*/(() => {\n  class SaveCartFailEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  SaveCartFailEvent.type = 'SaveCartEvent';\n  return SaveCartFailEvent;\n})();\nlet RestoreSavedCartEvent = /*#__PURE__*/(() => {\n  class RestoreSavedCartEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  RestoreSavedCartEvent.type = 'RestoreSavedCartEvent';\n  return RestoreSavedCartEvent;\n})();\nlet RestoreSavedCartSuccessEvent = /*#__PURE__*/(() => {\n  class RestoreSavedCartSuccessEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  RestoreSavedCartSuccessEvent.type = 'RestoreSavedCartSuccessEvent';\n  return RestoreSavedCartSuccessEvent;\n})();\nlet RestoreSavedCartFailEvent = /*#__PURE__*/(() => {\n  class RestoreSavedCartFailEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  RestoreSavedCartFailEvent.type = 'RestoreSavedCartFailEvent';\n  return RestoreSavedCartFailEvent;\n})();\nlet EditSavedCartEvent = /*#__PURE__*/(() => {\n  class EditSavedCartEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  EditSavedCartEvent.type = 'EditSavedCartEvent';\n  return EditSavedCartEvent;\n})();\nlet EditSavedCartSuccessEvent = /*#__PURE__*/(() => {\n  class EditSavedCartSuccessEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  EditSavedCartSuccessEvent.type = 'EditSavedCartSuccessEvent';\n  return EditSavedCartSuccessEvent;\n})();\nlet EditSavedCartFailEvent = /*#__PURE__*/(() => {\n  class EditSavedCartFailEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  EditSavedCartFailEvent.type = 'EditSavedCartFailEvent';\n  return EditSavedCartFailEvent;\n})();\nlet CloneSavedCartEvent = /*#__PURE__*/(() => {\n  class CloneSavedCartEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  CloneSavedCartEvent.type = 'CloneSavedCartEvent';\n  return CloneSavedCartEvent;\n})();\nlet CloneSavedCartSuccessEvent = /*#__PURE__*/(() => {\n  class CloneSavedCartSuccessEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  CloneSavedCartSuccessEvent.type = 'CloneSavedCartSuccessEvent';\n  return CloneSavedCartSuccessEvent;\n})();\nlet CloneSavedCartFailEvent = /*#__PURE__*/(() => {\n  class CloneSavedCartFailEvent extends SavedCartEvent {}\n  /**\n   * Event's type\n   */\n  CloneSavedCartFailEvent.type = 'CloneSavedCartFailEvent';\n  return CloneSavedCartFailEvent;\n})();\nvar SavedCartFormType = /*#__PURE__*/(() => {\n  (function (SavedCartFormType) {\n    SavedCartFormType[\"EDIT\"] = \"edit\";\n    SavedCartFormType[\"DELETE\"] = \"delete\";\n    SavedCartFormType[\"SAVE\"] = \"save\";\n    SavedCartFormType[\"RESTORE\"] = \"restore\";\n  })(SavedCartFormType || (SavedCartFormType = {}));\n  return SavedCartFormType;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CART_SAVED_CART_CORE_FEATURE, CART_SAVED_CART_FEATURE, CloneSavedCartEvent, CloneSavedCartFailEvent, CloneSavedCartSuccessEvent, DeleteSavedCartEvent, DeleteSavedCartFailEvent, DeleteSavedCartSuccessEvent, EditSavedCartEvent, EditSavedCartFailEvent, EditSavedCartSuccessEvent, NewSavedCartOrderEntriesContext, RestoreSavedCartEvent, RestoreSavedCartFailEvent, RestoreSavedCartSuccessEvent, SaveCartEvent, SaveCartFailEvent, SaveCartSuccessEvent, SavedCartEvent, SavedCartFacade, SavedCartFormType, SavedCartOrderEntriesContext, SavedCartRootModule, defaultCartSavedCartComponentsConfig };\n//# sourceMappingURL=spartacus-cart-saved-cart-root.js.map","map":null,"metadata":{},"sourceType":"module"}