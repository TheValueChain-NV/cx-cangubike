{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, NgModule } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { CommandStrategy, LanguageSetEvent, UserActions } from '@spartacus/core';\nimport { switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i1 from '@spartacus/user/account/root';\nimport { UserAccountChangedEvent } from '@spartacus/user/account/root';\nimport * as i4 from '@ngrx/store';\nimport { UserEmailFacade, UserPasswordFacade, UserProfileFacade, UserRegisterFacade } from '@spartacus/user/profile/root';\nconst USER_PROFILE_NORMALIZER = new InjectionToken('UserProfileNormalizer');\nconst USER_PROFILE_SERIALIZER = new InjectionToken('UserProfileSerializer');\nconst USER_SERIALIZER = new InjectionToken('UserSerializer');\nconst USER_SIGN_UP_SERIALIZER = new InjectionToken('UserSignUpSerializer');\nconst TITLE_NORMALIZER = new InjectionToken('TitleNormalizer');\nclass UserProfileAdapter {}\nclass UserProfileConnector {\n  constructor(userProfileAdapter) {\n    this.userProfileAdapter = userProfileAdapter;\n  }\n  update(username, user) {\n    return this.userProfileAdapter.update(username, user);\n  }\n  register(user) {\n    return this.userProfileAdapter.register(user);\n  }\n  registerGuest(guid, password) {\n    return this.userProfileAdapter.registerGuest(guid, password);\n  }\n  requestForgotPasswordEmail(userEmailAddress) {\n    return this.userProfileAdapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n  resetPassword(token, newPassword) {\n    return this.userProfileAdapter.resetPassword(token, newPassword);\n  }\n  updateEmail(userId, currentPassword, newUserId) {\n    return this.userProfileAdapter.updateEmail(userId, currentPassword, newUserId);\n  }\n  updatePassword(userId, oldPassword, newPassword) {\n    return this.userProfileAdapter.updatePassword(userId, oldPassword, newPassword);\n  }\n  remove(userId) {\n    return this.userProfileAdapter.close(userId);\n  }\n  getTitles() {\n    return this.userProfileAdapter.loadTitles();\n  }\n}\nUserProfileConnector.ɵfac = function UserProfileConnector_Factory(t) {\n  return new (t || UserProfileConnector)(i0.ɵɵinject(UserProfileAdapter));\n};\nUserProfileConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserProfileConnector,\n  factory: UserProfileConnector.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserProfileConnector, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: UserProfileAdapter\n    }];\n  }, null);\n})();\nclass UserEmailService {\n  constructor(userIdService, userProfileConnector, command) {\n    this.userIdService = userIdService;\n    this.userProfileConnector = userProfileConnector;\n    this.command = command;\n    this.updateCommand = this.command.create(payload => this.userIdService.takeUserId(true).pipe(switchMap(uid => this.userProfileConnector.updateEmail(uid, payload.password, payload.newUid))), {\n      strategy: CommandStrategy.Queue\n    });\n  }\n  /**\n   * Updates the user's email.\n   *\n   * @param password to users password to confirm the users\n   * @param newUid the new proposed email address.\n   */\n  update(password, newUid) {\n    return this.updateCommand.execute({\n      password,\n      newUid\n    });\n  }\n}\nUserEmailService.ɵfac = function UserEmailService_Factory(t) {\n  return new (t || UserEmailService)(i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(UserProfileConnector), i0.ɵɵinject(i2.CommandService));\n};\nUserEmailService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserEmailService,\n  factory: UserEmailService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserEmailService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i2.UserIdService\n    }, {\n      type: UserProfileConnector\n    }, {\n      type: i2.CommandService\n    }];\n  }, null);\n})();\nclass UserPasswordService {\n  constructor(userProfileConnector, userIdService, command) {\n    this.userProfileConnector = userProfileConnector;\n    this.userIdService = userIdService;\n    this.command = command;\n    this.updateCommand = this.command.create(payload => this.userIdService.takeUserId(true).pipe(take(1), switchMap(uid => this.userProfileConnector.updatePassword(uid, payload.oldPassword, payload.newPassword))));\n    this.resetCommand = this.command.create(payload => this.userProfileConnector.resetPassword(payload.token, payload.password));\n    this.requestForgotPasswordEmailCommand = this.command.create(payload => this.userProfileConnector.requestForgotPasswordEmail(payload.email));\n  }\n  /**\n   * Updates the password for the user\n   *\n   * The method returns an observable with `LoaderState` information, including the\n   * actual user data.\n   *\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  update(oldPassword, newPassword) {\n    return this.updateCommand.execute({\n      oldPassword,\n      newPassword\n    });\n  }\n  /**\n   * Reset new password. Part of the forgot password flow.\n   *\n   * @param token\n   * @param password\n   */\n  reset(token, password) {\n    return this.resetCommand.execute({\n      token,\n      password\n    });\n  }\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(email) {\n    return this.requestForgotPasswordEmailCommand.execute({\n      email\n    });\n  }\n}\nUserPasswordService.ɵfac = function UserPasswordService_Factory(t) {\n  return new (t || UserPasswordService)(i0.ɵɵinject(UserProfileConnector), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.CommandService));\n};\nUserPasswordService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserPasswordService,\n  factory: UserPasswordService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserPasswordService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: UserProfileConnector\n    }, {\n      type: i2.UserIdService\n    }, {\n      type: i2.CommandService\n    }];\n  }, null);\n})();\nclass UserProfileService {\n  constructor(userAccountService, authService, userProfileConnector, eventService, userIdService, query, command) {\n    this.userAccountService = userAccountService;\n    this.authService = authService;\n    this.userProfileConnector = userProfileConnector;\n    this.eventService = eventService;\n    this.userIdService = userIdService;\n    this.query = query;\n    this.command = command;\n    this.updateCommand = this.command.create(payload => this.userIdService.takeUserId(true).pipe(switchMap(uid => this.userProfileConnector.update(uid, payload.details).pipe(tap(() => {\n      this.eventService.dispatch({\n        user: payload.details\n      }, UserAccountChangedEvent);\n    })))), {\n      strategy: CommandStrategy.Queue\n    });\n    this.closeCommand = this.command.create(() => this.userIdService.takeUserId(true).pipe(switchMap(uid => this.userProfileConnector.remove(uid).pipe(tap(() => this.authService.logout())))));\n    this.titleQuery = this.query.create(() => this.userProfileConnector.getTitles(), {\n      reloadOn: [LanguageSetEvent]\n    });\n  }\n  get() {\n    return this.userAccountService.get();\n  }\n  /**\n   * Updates the user's details.\n   *\n   * @param details User details to be updated.\n   */\n  update(details) {\n    return this.updateCommand.execute({\n      details\n    });\n  }\n  /**\n   * Closes the user account.\n   */\n  close() {\n    return this.closeCommand.execute(undefined);\n  }\n  /**\n   * Returns titles that can be used for the user profiles.\n   */\n  getTitles() {\n    return this.titleQuery.get().pipe(map(titles => titles !== null && titles !== void 0 ? titles : []));\n  }\n}\nUserProfileService.ɵfac = function UserProfileService_Factory(t) {\n  return new (t || UserProfileService)(i0.ɵɵinject(i1.UserAccountFacade), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(UserProfileConnector), i0.ɵɵinject(i2.EventService), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.QueryService), i0.ɵɵinject(i2.CommandService));\n};\nUserProfileService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserProfileService,\n  factory: UserProfileService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserProfileService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.UserAccountFacade\n    }, {\n      type: i2.AuthService\n    }, {\n      type: UserProfileConnector\n    }, {\n      type: i2.EventService\n    }, {\n      type: i2.UserIdService\n    }, {\n      type: i2.QueryService\n    }, {\n      type: i2.CommandService\n    }];\n  }, null);\n})();\nclass UserRegisterService {\n  constructor(userProfile, userConnector, authService, command, store) {\n    this.userProfile = userProfile;\n    this.userConnector = userConnector;\n    this.authService = authService;\n    this.command = command;\n    this.store = store;\n    this.registerCommand = this.command.create(({\n      user\n    }) => this.userConnector.register(user).pipe(tap(() => {\n      // this is a compatibility mechanism only, to make anonymous consents\n      // management work properly in transitional period (when we move logic\n      // to separate libraries)\n      this.store.dispatch(new UserActions.RegisterUserSuccess());\n    })));\n    this.registerGuestCommand = this.command.create(payload => this.userConnector.registerGuest(payload.guid, payload.password).pipe(tap(user => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.authService.loginWithCredentials(user.uid, payload.password);\n    })));\n  }\n  /**\n   * Register a new user.\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(user) {\n    return this.registerCommand.execute({\n      user\n    });\n  }\n  /**\n   * Register a new user from guest.\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid, password) {\n    return this.registerGuestCommand.execute({\n      guid,\n      password\n    });\n  }\n  /**\n   * Returns titles that can be used for the user profiles.\n   */\n  getTitles() {\n    return this.userProfile.getTitles();\n  }\n}\nUserRegisterService.ɵfac = function UserRegisterService_Factory(t) {\n  return new (t || UserRegisterService)(i0.ɵɵinject(UserProfileService), i0.ɵɵinject(UserProfileConnector), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i2.CommandService), i0.ɵɵinject(i4.Store));\n};\nUserRegisterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserRegisterService,\n  factory: UserRegisterService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserRegisterService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: UserProfileService\n    }, {\n      type: UserProfileConnector\n    }, {\n      type: i2.AuthService\n    }, {\n      type: i2.CommandService\n    }, {\n      type: i4.Store\n    }];\n  }, null);\n})();\nconst facadeProviders = [UserEmailService, UserPasswordService, UserProfileService, UserRegisterService, {\n  provide: UserEmailFacade,\n  useExisting: UserEmailService\n}, {\n  provide: UserPasswordFacade,\n  useExisting: UserPasswordService\n}, {\n  provide: UserProfileFacade,\n  useExisting: UserProfileService\n}, {\n  provide: UserRegisterFacade,\n  useExisting: UserRegisterService\n}];\nclass UserProfileCoreModule {}\nUserProfileCoreModule.ɵfac = function UserProfileCoreModule_Factory(t) {\n  return new (t || UserProfileCoreModule)();\n};\nUserProfileCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UserProfileCoreModule\n});\nUserProfileCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [UserProfileConnector, ...facadeProviders]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserProfileCoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [UserProfileConnector, ...facadeProviders]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TITLE_NORMALIZER, USER_PROFILE_NORMALIZER, USER_PROFILE_SERIALIZER, USER_SERIALIZER, USER_SIGN_UP_SERIALIZER, UserEmailService, UserPasswordService, UserProfileAdapter, UserProfileConnector, UserProfileCoreModule, UserProfileService, UserRegisterService };","map":{"version":3,"names":["i0","InjectionToken","Injectable","NgModule","i2","CommandStrategy","LanguageSetEvent","UserActions","switchMap","take","tap","map","i1","UserAccountChangedEvent","i4","UserEmailFacade","UserPasswordFacade","UserProfileFacade","UserRegisterFacade","USER_PROFILE_NORMALIZER","USER_PROFILE_SERIALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","UserProfileAdapter","UserProfileConnector","constructor","userProfileAdapter","update","username","user","register","registerGuest","guid","password","requestForgotPasswordEmail","userEmailAddress","resetPassword","token","newPassword","updateEmail","userId","currentPassword","newUserId","updatePassword","oldPassword","remove","close","getTitles","loadTitles","ɵfac","ɵprov","type","UserEmailService","userIdService","userProfileConnector","command","updateCommand","create","payload","takeUserId","pipe","uid","newUid","strategy","Queue","execute","UserIdService","CommandService","UserPasswordService","resetCommand","requestForgotPasswordEmailCommand","email","reset","UserProfileService","userAccountService","authService","eventService","query","details","dispatch","closeCommand","logout","titleQuery","reloadOn","get","undefined","titles","UserAccountFacade","AuthService","EventService","QueryService","UserRegisterService","userProfile","userConnector","store","registerCommand","RegisterUserSuccess","registerGuestCommand","loginWithCredentials","Store","facadeProviders","provide","useExisting","UserProfileCoreModule","ɵmod","ɵinj","args","providers"],"sources":["/home/hamid/cangubike/js-storefront/olf/node_modules/@spartacus/user/fesm2015/spartacus-user-profile-core.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, NgModule } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { CommandStrategy, LanguageSetEvent, UserActions } from '@spartacus/core';\nimport { switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i1 from '@spartacus/user/account/root';\nimport { UserAccountChangedEvent } from '@spartacus/user/account/root';\nimport * as i4 from '@ngrx/store';\nimport { UserEmailFacade, UserPasswordFacade, UserProfileFacade, UserRegisterFacade } from '@spartacus/user/profile/root';\n\nconst USER_PROFILE_NORMALIZER = new InjectionToken('UserProfileNormalizer');\nconst USER_PROFILE_SERIALIZER = new InjectionToken('UserProfileSerializer');\nconst USER_SERIALIZER = new InjectionToken('UserSerializer');\nconst USER_SIGN_UP_SERIALIZER = new InjectionToken('UserSignUpSerializer');\nconst TITLE_NORMALIZER = new InjectionToken('TitleNormalizer');\n\nclass UserProfileAdapter {\n}\n\nclass UserProfileConnector {\n    constructor(userProfileAdapter) {\n        this.userProfileAdapter = userProfileAdapter;\n    }\n    update(username, user) {\n        return this.userProfileAdapter.update(username, user);\n    }\n    register(user) {\n        return this.userProfileAdapter.register(user);\n    }\n    registerGuest(guid, password) {\n        return this.userProfileAdapter.registerGuest(guid, password);\n    }\n    requestForgotPasswordEmail(userEmailAddress) {\n        return this.userProfileAdapter.requestForgotPasswordEmail(userEmailAddress);\n    }\n    resetPassword(token, newPassword) {\n        return this.userProfileAdapter.resetPassword(token, newPassword);\n    }\n    updateEmail(userId, currentPassword, newUserId) {\n        return this.userProfileAdapter.updateEmail(userId, currentPassword, newUserId);\n    }\n    updatePassword(userId, oldPassword, newPassword) {\n        return this.userProfileAdapter.updatePassword(userId, oldPassword, newPassword);\n    }\n    remove(userId) {\n        return this.userProfileAdapter.close(userId);\n    }\n    getTitles() {\n        return this.userProfileAdapter.loadTitles();\n    }\n}\nUserProfileConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileConnector, deps: [{ token: UserProfileAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\nUserProfileConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileConnector });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileConnector, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserProfileAdapter }]; } });\n\nclass UserEmailService {\n    constructor(userIdService, userProfileConnector, command) {\n        this.userIdService = userIdService;\n        this.userProfileConnector = userProfileConnector;\n        this.command = command;\n        this.updateCommand = this.command.create((payload) => this.userIdService\n            .takeUserId(true)\n            .pipe(switchMap((uid) => this.userProfileConnector.updateEmail(uid, payload.password, payload.newUid))), {\n            strategy: CommandStrategy.Queue,\n        });\n    }\n    /**\n     * Updates the user's email.\n     *\n     * @param password to users password to confirm the users\n     * @param newUid the new proposed email address.\n     */\n    update(password, newUid) {\n        return this.updateCommand.execute({ password, newUid });\n    }\n}\nUserEmailService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserEmailService, deps: [{ token: i2.UserIdService }, { token: UserProfileConnector }, { token: i2.CommandService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserEmailService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserEmailService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserEmailService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i2.UserIdService }, { type: UserProfileConnector }, { type: i2.CommandService }]; } });\n\nclass UserPasswordService {\n    constructor(userProfileConnector, userIdService, command) {\n        this.userProfileConnector = userProfileConnector;\n        this.userIdService = userIdService;\n        this.command = command;\n        this.updateCommand = this.command.create((payload) => this.userIdService.takeUserId(true).pipe(take(1), switchMap((uid) => this.userProfileConnector.updatePassword(uid, payload.oldPassword, payload.newPassword))));\n        this.resetCommand = this.command.create((payload) => this.userProfileConnector.resetPassword(payload.token, payload.password));\n        this.requestForgotPasswordEmailCommand = this.command.create((payload) => this.userProfileConnector.requestForgotPasswordEmail(payload.email));\n    }\n    /**\n     * Updates the password for the user\n     *\n     * The method returns an observable with `LoaderState` information, including the\n     * actual user data.\n     *\n     * @param oldPassword the current password that will be changed\n     * @param newPassword the new password\n     */\n    update(oldPassword, newPassword) {\n        return this.updateCommand.execute({ oldPassword, newPassword });\n    }\n    /**\n     * Reset new password. Part of the forgot password flow.\n     *\n     * @param token\n     * @param password\n     */\n    reset(token, password) {\n        return this.resetCommand.execute({ token, password });\n    }\n    /*\n     * Request an email to reset a forgotten password.\n     */\n    requestForgotPasswordEmail(email) {\n        return this.requestForgotPasswordEmailCommand.execute({ email });\n    }\n}\nUserPasswordService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserPasswordService, deps: [{ token: UserProfileConnector }, { token: i2.UserIdService }, { token: i2.CommandService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserPasswordService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserPasswordService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserPasswordService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserProfileConnector }, { type: i2.UserIdService }, { type: i2.CommandService }]; } });\n\nclass UserProfileService {\n    constructor(userAccountService, authService, userProfileConnector, eventService, userIdService, query, command) {\n        this.userAccountService = userAccountService;\n        this.authService = authService;\n        this.userProfileConnector = userProfileConnector;\n        this.eventService = eventService;\n        this.userIdService = userIdService;\n        this.query = query;\n        this.command = command;\n        this.updateCommand = this.command.create((payload) => this.userIdService.takeUserId(true).pipe(switchMap((uid) => this.userProfileConnector.update(uid, payload.details).pipe(tap(() => {\n            this.eventService.dispatch({ user: payload.details }, UserAccountChangedEvent);\n        })))), {\n            strategy: CommandStrategy.Queue,\n        });\n        this.closeCommand = this.command.create(() => this.userIdService\n            .takeUserId(true)\n            .pipe(switchMap((uid) => this.userProfileConnector\n            .remove(uid)\n            .pipe(tap(() => this.authService.logout())))));\n        this.titleQuery = this.query.create(() => this.userProfileConnector.getTitles(), {\n            reloadOn: [LanguageSetEvent],\n        });\n    }\n    get() {\n        return this.userAccountService.get();\n    }\n    /**\n     * Updates the user's details.\n     *\n     * @param details User details to be updated.\n     */\n    update(details) {\n        return this.updateCommand.execute({ details });\n    }\n    /**\n     * Closes the user account.\n     */\n    close() {\n        return this.closeCommand.execute(undefined);\n    }\n    /**\n     * Returns titles that can be used for the user profiles.\n     */\n    getTitles() {\n        return this.titleQuery.get().pipe(map((titles) => titles !== null && titles !== void 0 ? titles : []));\n    }\n}\nUserProfileService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileService, deps: [{ token: i1.UserAccountFacade }, { token: i2.AuthService }, { token: UserProfileConnector }, { token: i2.EventService }, { token: i2.UserIdService }, { token: i2.QueryService }, { token: i2.CommandService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserProfileService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserAccountFacade }, { type: i2.AuthService }, { type: UserProfileConnector }, { type: i2.EventService }, { type: i2.UserIdService }, { type: i2.QueryService }, { type: i2.CommandService }]; } });\n\nclass UserRegisterService {\n    constructor(userProfile, userConnector, authService, command, store) {\n        this.userProfile = userProfile;\n        this.userConnector = userConnector;\n        this.authService = authService;\n        this.command = command;\n        this.store = store;\n        this.registerCommand = this.command.create(({ user }) => this.userConnector.register(user).pipe(tap(() => {\n            // this is a compatibility mechanism only, to make anonymous consents\n            // management work properly in transitional period (when we move logic\n            // to separate libraries)\n            this.store.dispatch(new UserActions.RegisterUserSuccess());\n        })));\n        this.registerGuestCommand = this.command.create((payload) => this.userConnector.registerGuest(payload.guid, payload.password).pipe(tap((user) => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.authService.loginWithCredentials(user.uid, payload.password);\n        })));\n    }\n    /**\n     * Register a new user.\n     *\n     * @param submitFormData as UserRegisterFormData\n     */\n    register(user) {\n        return this.registerCommand.execute({ user });\n    }\n    /**\n     * Register a new user from guest.\n     *\n     * @param guid\n     * @param password\n     */\n    registerGuest(guid, password) {\n        return this.registerGuestCommand.execute({ guid, password });\n    }\n    /**\n     * Returns titles that can be used for the user profiles.\n     */\n    getTitles() {\n        return this.userProfile.getTitles();\n    }\n}\nUserRegisterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserRegisterService, deps: [{ token: UserProfileService }, { token: UserProfileConnector }, { token: i2.AuthService }, { token: i2.CommandService }, { token: i4.Store }], target: i0.ɵɵFactoryTarget.Injectable });\nUserRegisterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserRegisterService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserRegisterService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserProfileService }, { type: UserProfileConnector }, { type: i2.AuthService }, { type: i2.CommandService }, { type: i4.Store }]; } });\n\nconst facadeProviders = [\n    UserEmailService,\n    UserPasswordService,\n    UserProfileService,\n    UserRegisterService,\n    {\n        provide: UserEmailFacade,\n        useExisting: UserEmailService,\n    },\n    {\n        provide: UserPasswordFacade,\n        useExisting: UserPasswordService,\n    },\n    {\n        provide: UserProfileFacade,\n        useExisting: UserProfileService,\n    },\n    {\n        provide: UserRegisterFacade,\n        useExisting: UserRegisterService,\n    },\n];\n\nclass UserProfileCoreModule {\n}\nUserProfileCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUserProfileCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileCoreModule });\nUserProfileCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileCoreModule, providers: [UserProfileConnector, ...facadeProviders] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileCoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [UserProfileConnector, ...facadeProviders],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TITLE_NORMALIZER, USER_PROFILE_NORMALIZER, USER_PROFILE_SERIALIZER, USER_SERIALIZER, USER_SIGN_UP_SERIALIZER, UserEmailService, UserPasswordService, UserProfileAdapter, UserProfileConnector, UserProfileCoreModule, UserProfileService, UserRegisterService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}