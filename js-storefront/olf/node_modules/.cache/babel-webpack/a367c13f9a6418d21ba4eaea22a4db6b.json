{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { TimeUtils, CART_NORMALIZER, ADDRESS_SERIALIZER, ADDRESS_NORMALIZER, PAYMENT_DETAILS_NORMALIZER, HttpParamsURIEncoder, REPLENISHMENT_ORDER_NORMALIZER, OCC_USER_ID_ANONYMOUS, InterceptorUtil, USE_CLIENT_TOKEN, ORDER_NORMALIZER, provideDefaultConfig } from '@spartacus/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { DELIVERY_MODE_NORMALIZER, PAYMENT_TYPE_NORMALIZER, PAYMENT_DETAILS_SERIALIZER, CARD_TYPE_NORMALIZER, REPLENISHMENT_ORDER_FORM_SERIALIZER, CheckoutAdapter, CheckoutDeliveryAdapter, CheckoutPaymentAdapter, PaymentTypeAdapter, CheckoutCostCenterAdapter, CheckoutReplenishmentOrderAdapter } from '@spartacus/checkout/core';\nimport { pluck, map, mergeMap } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nlet OccReplenishmentOrderFormSerializer = /*#__PURE__*/(() => {\n  class OccReplenishmentOrderFormSerializer {\n    convert(source, target) {\n      if (target === undefined) {\n        target = Object.assign({}, source);\n      }\n      if (source.replenishmentStartDate) {\n        target.replenishmentStartDate = this.convertDate(source.replenishmentStartDate);\n      }\n      return target;\n    }\n    /**\n     * Adds the current timestamp (including timezone offset) to a date string in the format YYYY-mm-dd\n     * @Example\n     * Converts 2021-10-15 to 2021-10-15T15:38:05-05:00\n     */\n    convertDate(date) {\n      const localTime = new Date().toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n        hourCycle: 'h23'\n      });\n      return `${date}T${localTime}:00${TimeUtils.getLocalTimezoneOffset()}`;\n    }\n  }\n  OccReplenishmentOrderFormSerializer.ɵfac = function OccReplenishmentOrderFormSerializer_Factory(t) {\n    return new (t || OccReplenishmentOrderFormSerializer)();\n  };\n  OccReplenishmentOrderFormSerializer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OccReplenishmentOrderFormSerializer,\n    factory: OccReplenishmentOrderFormSerializer.ɵfac\n  });\n  return OccReplenishmentOrderFormSerializer;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OccCheckoutCostCenterAdapter = /*#__PURE__*/(() => {\n  class OccCheckoutCostCenterAdapter {\n    constructor(http, occEndpoints, converter) {\n      this.http = http;\n      this.occEndpoints = occEndpoints;\n      this.converter = converter;\n    }\n    setCostCenter(userId, cartId, costCenterId) {\n      return this.http.put(this.getSetCartCostCenterEndpoint(userId, cartId, costCenterId), {}).pipe(this.converter.pipeable(CART_NORMALIZER));\n    }\n    getSetCartCostCenterEndpoint(userId, cartId, costCenterId) {\n      return this.occEndpoints.buildUrl('setCartCostCenter', {\n        urlParams: {\n          userId,\n          cartId\n        },\n        queryParams: {\n          costCenterId\n        }\n      });\n    }\n  }\n  OccCheckoutCostCenterAdapter.ɵfac = function OccCheckoutCostCenterAdapter_Factory(t) {\n    return new (t || OccCheckoutCostCenterAdapter)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.OccEndpointsService), i0.ɵɵinject(i2.ConverterService));\n  };\n  OccCheckoutCostCenterAdapter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OccCheckoutCostCenterAdapter,\n    factory: OccCheckoutCostCenterAdapter.ɵfac\n  });\n  return OccCheckoutCostCenterAdapter;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OccCheckoutDeliveryAdapter = /*#__PURE__*/(() => {\n  class OccCheckoutDeliveryAdapter {\n    constructor(http, occEndpoints, converter) {\n      this.http = http;\n      this.occEndpoints = occEndpoints;\n      this.converter = converter;\n    }\n    getCreateDeliveryAddressEndpoint(userId, cartId) {\n      return this.occEndpoints.buildUrl('createDeliveryAddress', {\n        urlParams: {\n          userId,\n          cartId\n        }\n      });\n    }\n    getSetDeliveryAddressEndpoint(userId, cartId, addressId) {\n      return this.occEndpoints.buildUrl('setDeliveryAddress', {\n        urlParams: {\n          userId,\n          cartId\n        },\n        queryParams: {\n          addressId\n        }\n      });\n    }\n    getDeliveryModeEndpoint(userId, cartId) {\n      return this.occEndpoints.buildUrl('deliveryMode', {\n        urlParams: {\n          userId,\n          cartId\n        }\n      });\n    }\n    getSetDeliveryModeEndpoint(userId, cartId, deliveryModeId) {\n      return this.occEndpoints.buildUrl('setDeliveryMode', {\n        urlParams: {\n          userId,\n          cartId\n        },\n        queryParams: {\n          deliveryModeId\n        }\n      });\n    }\n    getDeliveryModesEndpoint(userId, cartId) {\n      return this.occEndpoints.buildUrl('deliveryModes', {\n        urlParams: {\n          userId,\n          cartId\n        }\n      });\n    }\n    createAddress(userId, cartId, address) {\n      address = this.converter.convert(address, ADDRESS_SERIALIZER);\n      return this.http.post(this.getCreateDeliveryAddressEndpoint(userId, cartId), address, {\n        headers: new HttpHeaders().set('Content-Type', 'application/json')\n      }).pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n    }\n    setAddress(userId, cartId, addressId) {\n      return this.http.put(this.getSetDeliveryAddressEndpoint(userId, cartId, addressId), {});\n    }\n    setMode(userId, cartId, deliveryModeId) {\n      return this.http.put(this.getSetDeliveryModeEndpoint(userId, cartId, deliveryModeId), {});\n    }\n    getMode(userId, cartId) {\n      return this.http.get(this.getDeliveryModeEndpoint(userId, cartId)).pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n    }\n    getSupportedModes(userId, cartId) {\n      return this.http.get(this.getDeliveryModesEndpoint(userId, cartId)).pipe(pluck('deliveryModes'), map(modes => modes !== null && modes !== void 0 ? modes : []), this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER));\n    }\n  }\n  OccCheckoutDeliveryAdapter.ɵfac = function OccCheckoutDeliveryAdapter_Factory(t) {\n    return new (t || OccCheckoutDeliveryAdapter)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.OccEndpointsService), i0.ɵɵinject(i2.ConverterService));\n  };\n  OccCheckoutDeliveryAdapter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OccCheckoutDeliveryAdapter,\n    factory: OccCheckoutDeliveryAdapter.ɵfac\n  });\n  return OccCheckoutDeliveryAdapter;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OccCheckoutPaymentTypeAdapter = /*#__PURE__*/(() => {\n  class OccCheckoutPaymentTypeAdapter {\n    constructor(http, occEndpoints, converter) {\n      this.http = http;\n      this.occEndpoints = occEndpoints;\n      this.converter = converter;\n    }\n    loadPaymentTypes() {\n      return this.http.get(this.getPaymentTypesEndpoint()).pipe(map(paymentTypeList => {\n        var _a;\n        return (_a = paymentTypeList.paymentTypes) !== null && _a !== void 0 ? _a : [];\n      }), this.converter.pipeableMany(PAYMENT_TYPE_NORMALIZER));\n    }\n    setPaymentType(userId, cartId, paymentType, purchaseOrderNumber) {\n      return this.http.put(this.getSetCartPaymentTypeEndpoint(userId, cartId, paymentType, purchaseOrderNumber), {}).pipe(this.converter.pipeable(CART_NORMALIZER));\n    }\n    getPaymentTypesEndpoint() {\n      return this.occEndpoints.buildUrl('paymentTypes');\n    }\n    getSetCartPaymentTypeEndpoint(userId, cartId, paymentType, purchaseOrderNumber) {\n      const queryParams = purchaseOrderNumber ? {\n        paymentType,\n        purchaseOrderNumber\n      } : {\n        paymentType\n      };\n      return this.occEndpoints.buildUrl('setCartPaymentType', {\n        urlParams: {\n          userId,\n          cartId\n        },\n        queryParams\n      });\n    }\n  }\n  OccCheckoutPaymentTypeAdapter.ɵfac = function OccCheckoutPaymentTypeAdapter_Factory(t) {\n    return new (t || OccCheckoutPaymentTypeAdapter)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.OccEndpointsService), i0.ɵɵinject(i2.ConverterService));\n  };\n  OccCheckoutPaymentTypeAdapter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OccCheckoutPaymentTypeAdapter,\n    factory: OccCheckoutPaymentTypeAdapter.ɵfac\n  });\n  return OccCheckoutPaymentTypeAdapter;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OccCheckoutPaymentAdapter = /*#__PURE__*/(() => {\n  class OccCheckoutPaymentAdapter {\n    constructor(http, occEndpoints, converter) {\n      this.http = http;\n      this.occEndpoints = occEndpoints;\n      this.converter = converter;\n      if (typeof DOMParser !== 'undefined') {\n        this.domparser = new DOMParser();\n      }\n    }\n    getSetPaymentDetailsEndpoint(userId, cartId, paymentDetailsId) {\n      return this.occEndpoints.buildUrl('setCartPaymentDetails', {\n        urlParams: {\n          userId,\n          cartId\n        },\n        queryParams: {\n          paymentDetailsId\n        }\n      });\n    }\n    getPaymentProviderSubInfoEndpoint(userId, cartId) {\n      return this.occEndpoints.buildUrl('paymentProviderSubInfo', {\n        urlParams: {\n          userId,\n          cartId\n        }\n      });\n    }\n    getCreatePaymentDetailsEndpoint(userId, cartId) {\n      return this.occEndpoints.buildUrl('createPaymentDetails', {\n        urlParams: {\n          userId,\n          cartId\n        }\n      });\n    }\n    getCardTypesEndpoint() {\n      return this.occEndpoints.buildUrl('cardTypes');\n    }\n    create(userId, cartId, paymentDetails) {\n      paymentDetails = this.converter.convert(paymentDetails, PAYMENT_DETAILS_SERIALIZER);\n      return this.getProviderSubInfo(userId, cartId).pipe(map(data => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(paymentDetails, data.parameters.entry, labelsMap),\n          mappingLabels: labelsMap\n        };\n      }), mergeMap(sub => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(map(response => this.extractPaymentDetailsFromHtml(response)), mergeMap(fromPaymentProvider => {\n          var _a;\n          fromPaymentProvider['defaultPayment'] = (_a = paymentDetails.defaultPayment) !== null && _a !== void 0 ? _a : false;\n          fromPaymentProvider['savePaymentInfo'] = true;\n          return this.createDetailsWithParameters(userId, cartId, fromPaymentProvider).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n        }));\n      }));\n    }\n    set(userId, cartId, paymentDetailsId) {\n      return this.http.put(this.getSetPaymentDetailsEndpoint(userId, cartId, paymentDetailsId), {});\n    }\n    loadCardTypes() {\n      return this.http.get(this.getCardTypesEndpoint()).pipe(map(cardTypeList => {\n        var _a;\n        return (_a = cardTypeList.cardTypes) !== null && _a !== void 0 ? _a : [];\n      }), this.converter.pipeableMany(CARD_TYPE_NORMALIZER));\n    }\n    getProviderSubInfo(userId, cartId) {\n      return this.http.get(this.getPaymentProviderSubInfoEndpoint(userId, cartId));\n    }\n    createSubWithProvider(postUrl, parameters) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'text/html'\n      });\n      let httpParams = new HttpParams({\n        encoder: new HttpParamsURIEncoder()\n      });\n      Object.keys(parameters).forEach(key => {\n        httpParams = httpParams.append(key, parameters[key]);\n      });\n      return this.http.post(postUrl, httpParams, {\n        headers,\n        responseType: 'text'\n      });\n    }\n    createDetailsWithParameters(userId, cartId, parameters) {\n      let httpParams = new HttpParams({\n        encoder: new HttpParamsURIEncoder()\n      });\n      Object.keys(parameters).forEach(key => {\n        httpParams = httpParams.append(key, parameters[key]);\n      });\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      return this.http.post(this.getCreatePaymentDetailsEndpoint(userId, cartId), httpParams, {\n        headers\n      });\n    }\n    getParamsForPaymentProvider(paymentDetails, parameters, mappingLabels) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n      const params = this.convertToMap(parameters);\n      params[mappingLabels['hybris_account_holder_name']] = paymentDetails.accountHolderName;\n      params[mappingLabels['hybris_card_type']] = (_a = paymentDetails.cardType) === null || _a === void 0 ? void 0 : _a.code;\n      params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n      if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n        params[mappingLabels['hybris_card_expiry_date']] = paymentDetails.expiryMonth + mappingLabels['hybris_separator_expiry_date'] + paymentDetails.expiryYear;\n      } else {\n        params[mappingLabels['hybris_card_expiration_month']] = paymentDetails.expiryMonth;\n        params[mappingLabels['hybris_card_expiration_year']] = paymentDetails.expiryYear;\n      }\n      params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n      // billing address\n      params[mappingLabels['hybris_billTo_country']] = (_c = (_b = paymentDetails.billingAddress) === null || _b === void 0 ? void 0 : _b.country) === null || _c === void 0 ? void 0 : _c.isocode;\n      params[mappingLabels['hybris_billTo_firstname']] = (_d = paymentDetails.billingAddress) === null || _d === void 0 ? void 0 : _d.firstName;\n      params[mappingLabels['hybris_billTo_lastname']] = (_e = paymentDetails.billingAddress) === null || _e === void 0 ? void 0 : _e.lastName;\n      params[mappingLabels['hybris_billTo_street1']] = ((_f = paymentDetails.billingAddress) === null || _f === void 0 ? void 0 : _f.line1) + ' ' + ((_g = paymentDetails.billingAddress) === null || _g === void 0 ? void 0 : _g.line2);\n      params[mappingLabels['hybris_billTo_city']] = (_h = paymentDetails.billingAddress) === null || _h === void 0 ? void 0 : _h.town;\n      if ((_j = paymentDetails.billingAddress) === null || _j === void 0 ? void 0 : _j.region) {\n        params[mappingLabels['hybris_billTo_region']] = paymentDetails.billingAddress.region.isocodeShort;\n      } else {\n        params[mappingLabels['hybris_billTo_region']] = '';\n      }\n      params[mappingLabels['hybris_billTo_postalcode']] = (_k = paymentDetails.billingAddress) === null || _k === void 0 ? void 0 : _k.postalCode;\n      return params;\n    }\n    extractPaymentDetailsFromHtml(html) {\n      const domdoc = this.domparser.parseFromString(html, 'text/xml');\n      const responseForm = domdoc.getElementsByTagName('form')[0];\n      const inputs = responseForm.getElementsByTagName('input');\n      const values = {};\n      for (let i = 0; inputs[i]; i++) {\n        const input = inputs[i];\n        const name = input.getAttribute('name');\n        const value = input.getAttribute('value');\n        if (name && name !== '{}' && value && value !== '') {\n          values[name] = value;\n        }\n      }\n      return values;\n    }\n    convertToMap(paramList) {\n      return paramList.reduce(function (result, item) {\n        const key = item.key;\n        result[key] = item.value;\n        return result;\n      }, {});\n    }\n  }\n  OccCheckoutPaymentAdapter.ɵfac = function OccCheckoutPaymentAdapter_Factory(t) {\n    return new (t || OccCheckoutPaymentAdapter)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.OccEndpointsService), i0.ɵɵinject(i2.ConverterService));\n  };\n  OccCheckoutPaymentAdapter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OccCheckoutPaymentAdapter,\n    factory: OccCheckoutPaymentAdapter.ɵfac\n  });\n  return OccCheckoutPaymentAdapter;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OccCheckoutReplenishmentOrderAdapter = /*#__PURE__*/(() => {\n  class OccCheckoutReplenishmentOrderAdapter {\n    constructor(http, occEndpoints, converter) {\n      this.http = http;\n      this.occEndpoints = occEndpoints;\n      this.converter = converter;\n    }\n    getScheduleReplenishmentOrderEndpoint(userId, cartId, termsChecked) {\n      return this.occEndpoints.buildUrl('scheduleReplenishmentOrder', {\n        urlParams: {\n          userId\n        },\n        queryParams: {\n          cartId,\n          termsChecked\n        }\n      });\n    }\n    scheduleReplenishmentOrder(cartId, scheduleReplenishmentForm, termsChecked, userId) {\n      scheduleReplenishmentForm = this.converter.convert(scheduleReplenishmentForm, REPLENISHMENT_ORDER_FORM_SERIALIZER);\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\n      return this.http.post(this.getScheduleReplenishmentOrderEndpoint(userId, cartId, termsChecked.toString()), scheduleReplenishmentForm, {\n        headers\n      }).pipe(this.converter.pipeable(REPLENISHMENT_ORDER_NORMALIZER));\n    }\n  }\n  OccCheckoutReplenishmentOrderAdapter.ɵfac = function OccCheckoutReplenishmentOrderAdapter_Factory(t) {\n    return new (t || OccCheckoutReplenishmentOrderAdapter)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.OccEndpointsService), i0.ɵɵinject(i2.ConverterService));\n  };\n  OccCheckoutReplenishmentOrderAdapter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OccCheckoutReplenishmentOrderAdapter,\n    factory: OccCheckoutReplenishmentOrderAdapter.ɵfac\n  });\n  return OccCheckoutReplenishmentOrderAdapter;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet OccCheckoutAdapter = /*#__PURE__*/(() => {\n  class OccCheckoutAdapter {\n    constructor(http, occEndpoints, converter) {\n      this.http = http;\n      this.occEndpoints = occEndpoints;\n      this.converter = converter;\n    }\n    getPlaceOrderEndpoint(userId, cartId, termsChecked) {\n      return this.occEndpoints.buildUrl('placeOrder', {\n        urlParams: {\n          userId\n        },\n        queryParams: {\n          cartId,\n          termsChecked\n        }\n      });\n    }\n    getRemoveDeliveryAddressEndpoint(userId, cartId) {\n      return this.occEndpoints.buildUrl('removeDeliveryAddress', {\n        urlParams: {\n          userId,\n          cartId\n        }\n      });\n    }\n    getClearDeliveryModeEndpoint(userId, cartId) {\n      return this.occEndpoints.buildUrl('clearDeliveryMode', {\n        urlParams: {\n          userId,\n          cartId\n        }\n      });\n    }\n    getLoadCheckoutDetailsEndpoint(userId, cartId) {\n      return this.occEndpoints.buildUrl('loadCheckoutDetails', {\n        urlParams: {\n          userId,\n          cartId\n        }\n      });\n    }\n    placeOrder(userId, cartId, termsChecked) {\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      if (userId === OCC_USER_ID_ANONYMOUS) {\n        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n      }\n      return this.http.post(this.getPlaceOrderEndpoint(userId, cartId, termsChecked.toString()), {}, {\n        headers\n      }).pipe(this.converter.pipeable(ORDER_NORMALIZER));\n    }\n    loadCheckoutDetails(userId, cartId) {\n      return this.http.get(this.getLoadCheckoutDetailsEndpoint(userId, cartId));\n    }\n    clearCheckoutDeliveryAddress(userId, cartId) {\n      return this.http.delete(this.getRemoveDeliveryAddressEndpoint(userId, cartId));\n    }\n    clearCheckoutDeliveryMode(userId, cartId) {\n      return this.http.delete(this.getClearDeliveryModeEndpoint(userId, cartId));\n    }\n  }\n  OccCheckoutAdapter.ɵfac = function OccCheckoutAdapter_Factory(t) {\n    return new (t || OccCheckoutAdapter)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.OccEndpointsService), i0.ɵɵinject(i2.ConverterService));\n  };\n  OccCheckoutAdapter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OccCheckoutAdapter,\n    factory: OccCheckoutAdapter.ɵfac\n  });\n  return OccCheckoutAdapter;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst defaultOccCheckoutConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        /* eslint-disable max-len */\n        setDeliveryAddress: 'users/${userId}/carts/${cartId}/addresses/delivery',\n        placeOrder: 'users/${userId}/orders?fields=FULL',\n        cardTypes: 'cardtypes',\n        paymentTypes: 'paymenttypes',\n        createDeliveryAddress: 'users/${userId}/carts/${cartId}/addresses/delivery',\n        removeDeliveryAddress: 'users/${userId}/carts/${cartId}/addresses/delivery',\n        deliveryMode: 'users/${userId}/carts/${cartId}/deliverymode',\n        setDeliveryMode: 'users/${userId}/carts/${cartId}/deliverymode',\n        clearDeliveryMode: 'users/${userId}/carts/${cartId}/deliverymode',\n        deliveryModes: 'users/${userId}/carts/${cartId}/deliverymodes',\n        setCartCostCenter: 'users/${userId}/carts/${cartId}/costcenter?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        setCartPaymentType: 'users/${userId}/carts/${cartId}/paymenttype?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        setCartPaymentDetails: 'users/${userId}/carts/${cartId}/paymentdetails',\n        paymentProviderSubInfo: 'users/${userId}/carts/${cartId}/payment/sop/request?responseUrl=sampleUrl',\n        createPaymentDetails: 'users/${userId}/carts/${cartId}/payment/sop/response',\n        loadCheckoutDetails: 'users/${userId}/carts/${cartId}?fields=deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)'\n        /* eslint-enable */\n      }\n    }\n  }\n};\nlet CheckoutOccModule = /*#__PURE__*/(() => {\n  class CheckoutOccModule {}\n  CheckoutOccModule.ɵfac = function CheckoutOccModule_Factory(t) {\n    return new (t || CheckoutOccModule)();\n  };\n  CheckoutOccModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CheckoutOccModule\n  });\n  CheckoutOccModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideDefaultConfig(defaultOccCheckoutConfig), OccReplenishmentOrderFormSerializer, {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter\n    }, {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter\n    }, {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter\n    }, {\n      provide: PaymentTypeAdapter,\n      useClass: OccCheckoutPaymentTypeAdapter\n    }, {\n      provide: CheckoutCostCenterAdapter,\n      useClass: OccCheckoutCostCenterAdapter\n    }, {\n      provide: CheckoutReplenishmentOrderAdapter,\n      useClass: OccCheckoutReplenishmentOrderAdapter\n    }, {\n      provide: REPLENISHMENT_ORDER_FORM_SERIALIZER,\n      useExisting: OccReplenishmentOrderFormSerializer,\n      multi: true\n    }],\n    imports: [[CommonModule]]\n  });\n  return CheckoutOccModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CheckoutOccModule, OccCheckoutAdapter, OccCheckoutCostCenterAdapter, OccCheckoutDeliveryAdapter, OccCheckoutPaymentAdapter, OccCheckoutPaymentTypeAdapter, OccCheckoutReplenishmentOrderAdapter, OccReplenishmentOrderFormSerializer };\n//# sourceMappingURL=spartacus-checkout-occ.js.map","map":null,"metadata":{},"sourceType":"module"}