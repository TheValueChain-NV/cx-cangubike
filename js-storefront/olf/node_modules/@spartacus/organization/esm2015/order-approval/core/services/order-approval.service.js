import { Injectable } from '@angular/core';
import { select } from '@ngrx/store';
import { ProcessSelectors, } from '@spartacus/core';
import { queueScheduler } from 'rxjs';
import { filter, map, observeOn, pluck, tap } from 'rxjs/operators';
import { OrderApprovalActions } from '../store/actions/index';
import { ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID, } from '../store/order-approval-state';
import { OrderApprovalSelectors } from '../store/selectors';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class OrderApprovalService {
    constructor(store, userIdService) {
        this.store = store;
        this.userIdService = userIdService;
    }
    loadOrderApproval(orderApprovalCode) {
        this.userIdService.takeUserId().subscribe((userId) => this.store.dispatch(new OrderApprovalActions.LoadOrderApproval({
            userId,
            orderApprovalCode,
        })));
    }
    loadOrderApprovals(params) {
        this.userIdService
            .takeUserId()
            .subscribe((userId) => this.store.dispatch(new OrderApprovalActions.LoadOrderApprovals({ userId, params })));
    }
    getOrderApproval(orderApprovalCode) {
        return this.store.select(OrderApprovalSelectors.getOrderApproval(orderApprovalCode));
    }
    getOrderApprovalList(params) {
        return this.store.select(OrderApprovalSelectors.getOrderApprovalList(params));
    }
    get(orderApprovalCode) {
        return this.getOrderApproval(orderApprovalCode).pipe(observeOn(queueScheduler), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.loadOrderApproval(orderApprovalCode);
            }
        }), filter((state) => state.success || state.error), map((state) => state.value));
    }
    /**
     * Emits true if a request is currently fetching order approval data from
     * the server.
     *
     * @param orderApprovalCode The approval code for which we want the loading status.
     */
    getOrderApprovalLoading(orderApprovalCode) {
        return this.getOrderApproval(orderApprovalCode).pipe(pluck('loading'));
    }
    getList(params) {
        return this.getOrderApprovalList(params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadOrderApprovals(params);
            }
        }), filter((process) => process.success || process.error), map((result) => result.value));
    }
    makeDecision(orderApprovalCode, orderApprovalDecision) {
        this.userIdService.takeUserId().subscribe((userId) => this.store.dispatch(new OrderApprovalActions.MakeDecision({
            userId,
            orderApprovalCode,
            orderApprovalDecision,
        })));
    }
    /**
     * Returns the makeDecision loading flag.  Returns true when the process triggered
     * by makeDecision() is currently running.
     */
    getMakeDecisionResultLoading() {
        return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID)));
    }
    /**
     * Returns the makeDecision failure outcome.  Returns true when the outcome
     * of makeDecision() was an error.
     */
    getMakeDecisionResultError() {
        return this.store.pipe(select(ProcessSelectors.getProcessErrorFactory(ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID)));
    }
    /**
     * Returns the makeDecision process success outcome.  Returns true when the outcome
     * of makeDecision() was a success.
     */
    getMakeDecisionResultSuccess() {
        return this.store.pipe(select(ProcessSelectors.getProcessSuccessFactory(ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID)));
    }
    /**
     * Resets the makeDecision process state. It is usually preferable to reset the
     * process state before making a call to makeDecision() for which we then want
     * to monitor the loading state or the outcome.
     */
    resetMakeDecisionProcessState() {
        this.store.dispatch(new OrderApprovalActions.MakeDecisionReset());
    }
}
OrderApprovalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderApprovalService, deps: [{ token: i1.Store }, { token: i2.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
OrderApprovalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderApprovalService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderApprovalService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,