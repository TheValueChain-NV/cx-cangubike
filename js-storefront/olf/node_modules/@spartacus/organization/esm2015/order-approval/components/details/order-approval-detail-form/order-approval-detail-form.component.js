import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { combineLatest } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { OrderApprovalDecisionValue, } from '../../../core/model/order-approval.model';
import * as i0 from "@angular/core";
import * as i1 from "../order-approval-detail.service";
import * as i2 from "../../../core/services/order-approval.service";
import * as i3 from "@angular/forms";
import * as i4 from "@spartacus/storefront";
import * as i5 from "@angular/common";
import * as i6 from "@angular/router";
import * as i7 from "@spartacus/core";
export class OrderApprovalDetailFormComponent {
    constructor(orderApprovalDetailService, orderApprovalService, fb) {
        this.orderApprovalDetailService = orderApprovalDetailService;
        this.orderApprovalService = orderApprovalService;
        this.fb = fb;
        this.approvalDecisionValue = OrderApprovalDecisionValue;
        this.approvalFormVisible = false;
        this.approvalForm = this.fb.group({
            comment: [''],
        });
        this.orderApprovalLoading$ = this.orderApprovalDetailService
            .getOrderApprovalCodeFromRoute()
            .pipe(switchMap((approvalCode) => this.orderApprovalService.getOrderApprovalLoading(approvalCode)));
        this.decisionResultLoading$ = this.orderApprovalService.getMakeDecisionResultLoading();
        this.loading$ = combineLatest([
            this.orderApprovalLoading$,
            this.decisionResultLoading$,
        ]).pipe(map(([approvalLoading, decisionResultLoading]) => approvalLoading || decisionResultLoading));
        this.orderApproval$ = this.orderApprovalDetailService.getOrderApproval();
        this.orderApprovalService.resetMakeDecisionProcessState();
    }
    displayDecisionForm(decision) {
        this.approvalDecision = decision;
        if (decision === OrderApprovalDecisionValue.APPROVE) {
            this.approvalForm.controls.comment.clearValidators();
        }
        else {
            this.approvalForm.controls.comment.setValidators([Validators.required]);
        }
        this.approvalFormVisible = true;
    }
    cancelDecisionForm() {
        this.approvalFormVisible = false;
        this.approvalForm.reset();
    }
    submitDecision(orderApproval) {
        if (this.approvalForm.valid) {
            this.orderApprovalService.makeDecision(orderApproval.code, {
                decision: this.approvalDecision,
                comment: this.approvalForm.controls.comment.value,
            });
            this.approvalFormVisible = false;
        }
        else {
            this.approvalForm.markAllAsTouched();
        }
    }
    ngOnDestroy() {
        this.orderApprovalService.resetMakeDecisionProcessState();
    }
}
OrderApprovalDetailFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderApprovalDetailFormComponent, deps: [{ token: i1.OrderApprovalDetailService }, { token: i2.OrderApprovalService }, { token: i3.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
OrderApprovalDetailFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderApprovalDetailFormComponent, selector: "cx-order-approval-detail-form", ngImport: i0, template: "<ng-container *ngIf=\"orderApproval$ | async as orderApproval\">\n  <div *ngIf=\"loading$ | async; else approvalFormTemplate\">\n    <div class=\"cx-spinner\">\n      <cx-spinner></cx-spinner>\n    </div>\n  </div>\n\n  <ng-template #approvalFormTemplate>\n    <ng-container *ngIf=\"orderApproval?.approvalDecisionRequired\">\n      <div *ngIf=\"approvalFormVisible\" class=\"cx-approval-form-header row\">\n        <div class=\"cx-approval-form-label col-sm-12\">\n          {{\n            'orderApprovalDetails.form.title_' + approvalDecision\n              | cxTranslate\n                : {\n                    orderCode: orderApproval?.order?.code,\n                    orderTotal:\n                      orderApproval?.order?.totalPriceWithTax?.formattedValue\n                  }\n          }}\n        </div>\n      </div>\n\n      <form\n        [formGroup]=\"approvalForm\"\n        (ngSubmit)=\"submitDecision(orderApproval)\"\n        *ngIf=\"approvalFormVisible\"\n      >\n        <label\n          >{{\n            'orderApprovalDetails.form.comment_' + approvalDecision + '.label'\n              | cxTranslate\n          }}\n          <textarea\n            class=\"form-control\"\n            rows=\"3\"\n            formControlName=\"comment\"\n            maxlength=\"255\"\n          ></textarea>\n          <cx-form-errors\n            [control]=\"approvalForm.get('comment')\"\n          ></cx-form-errors>\n        </label>\n        <div class=\"form-group row\">\n          <div class=\"col-lg-6 col-md-12\">\n            <button\n              class=\"btn btn-block btn-secondary\"\n              (click)=\"cancelDecisionForm()\"\n              type=\"button\"\n            >\n              {{ 'orderApprovalDetails.form.cancel' | cxTranslate }}\n            </button>\n          </div>\n          <div class=\"col-lg-6 col-md-12\">\n            <button class=\"btn btn-block btn-primary\" type=\"submit\">\n              {{\n                'orderApprovalDetails.form.submit_' + approvalDecision\n                  | cxTranslate\n              }}\n            </button>\n          </div>\n        </div>\n      </form>\n    </ng-container>\n    <ng-container *ngIf=\"!approvalFormVisible\">\n      <div class=\"form-group row\">\n        <div class=\"col-lg-4 col-md-12\">\n          <a\n            [routerLink]=\"{ cxRoute: 'orderApprovals' } | cxUrl\"\n            class=\"btn btn-block btn-secondary\"\n            >{{ 'orderApprovalDetails.back' | cxTranslate }}</a\n          >\n        </div>\n        <div\n          class=\"col-lg-4 col-md-12\"\n          *ngIf=\"orderApproval?.approvalDecisionRequired\"\n        >\n          <button\n            class=\"btn btn-block btn-primary\"\n            (click)=\"displayDecisionForm(approvalDecisionValue.REJECT)\"\n          >\n            {{ 'orderApprovalDetails.showForm_REJECT' | cxTranslate }}\n          </button>\n        </div>\n        <div\n          class=\"col-lg-4 col-md-12\"\n          *ngIf=\"orderApproval?.approvalDecisionRequired\"\n        >\n          <button\n            class=\"btn btn-block btn-primary\"\n            (click)=\"displayDecisionForm(approvalDecisionValue.APPROVE)\"\n          >\n            {{ 'orderApprovalDetails.showForm_APPROVE' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </ng-container>\n  </ng-template>\n</ng-container>\n", components: [{ type: i4.SpinnerComponent, selector: "cx-spinner" }, { type: i4.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i6.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i5.AsyncPipe, "cxTranslate": i7.TranslatePipe, "cxUrl": i7.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderApprovalDetailFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-order-approval-detail-form',
                    templateUrl: './order-approval-detail-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.OrderApprovalDetailService }, { type: i2.OrderApprovalService }, { type: i3.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,