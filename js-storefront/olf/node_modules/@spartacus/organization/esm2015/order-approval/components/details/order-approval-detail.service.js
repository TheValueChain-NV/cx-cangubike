import { Injectable } from '@angular/core';
import { filter, map, pluck, shareReplay, switchMap, tap, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../../core/services/order-approval.service";
export class OrderApprovalDetailService {
    constructor(routingService, orderApprovalService) {
        this.routingService = routingService;
        this.orderApprovalService = orderApprovalService;
        this.approvalCode$ = this.routingService
            .getRouterState()
            .pipe(map((routingData) => routingData.state.params.approvalCode));
        this.orderApproval$ = this.approvalCode$.pipe(filter(Boolean), tap((approvalCode) => this.orderApprovalService.loadOrderApproval(approvalCode)), switchMap((approvalCode) => this.orderApprovalService.get(approvalCode)), shareReplay({ bufferSize: 1, refCount: true }));
        this.order$ = this.orderApproval$.pipe(pluck('order'));
    }
    /**
     * Returns a string that represents the approval code
     * found in the page url.
     */
    getOrderApprovalCodeFromRoute() {
        return this.approvalCode$;
    }
    /**
     * Returns the order data from the approval details that have been
     * retrieved from the approval code in the page url.
     */
    getOrderDetails() {
        return this.order$;
    }
    /**
     * Returns the approval details that have been retrieved from the
     * approval code in the page url.
     */
    getOrderApproval() {
        return this.orderApproval$;
    }
}
OrderApprovalDetailService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderApprovalDetailService, deps: [{ token: i1.RoutingService }, { token: i2.OrderApprovalService }], target: i0.ɵɵFactoryTarget.Injectable });
OrderApprovalDetailService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderApprovalDetailService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderApprovalDetailService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RoutingService }, { type: i2.OrderApprovalService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItYXBwcm92YWwtZGV0YWlsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL29yZGVyLWFwcHJvdmFsL2NvbXBvbmVudHMvZGV0YWlscy9vcmRlci1hcHByb3ZhbC1kZXRhaWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSzNDLE9BQU8sRUFDTCxNQUFNLEVBQ04sR0FBRyxFQUNILEtBQUssRUFDTCxXQUFXLEVBQ1gsU0FBUyxFQUNULEdBQUcsR0FDSixNQUFNLGdCQUFnQixDQUFDOzs7O0FBS3hCLE1BQU0sT0FBTywwQkFBMEI7SUFrQnJDLFlBQ1ksY0FBOEIsRUFDOUIsb0JBQTBDO1FBRDFDLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5Qix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBbkI1QyxrQkFBYSxHQUFHLElBQUksQ0FBQyxjQUFjO2FBQzFDLGNBQWMsRUFBRTthQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRTNELG1CQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQ2hELE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDZixHQUFHLENBQUMsQ0FBQyxZQUFvQixFQUFFLEVBQUUsQ0FDM0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUMxRCxFQUNELFNBQVMsQ0FBQyxDQUFDLFlBQW9CLEVBQUUsRUFBRSxDQUNqQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUM1QyxFQUNELFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQy9DLENBQUM7UUFFUSxXQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFLekQsQ0FBQztJQUVKOzs7T0FHRztJQUNILDZCQUE2QjtRQUMzQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRztJQUNILGdCQUFnQjtRQUNkLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDOzt1SEE3Q1UsMEJBQTBCOzJIQUExQiwwQkFBMEIsY0FGekIsTUFBTTsyRkFFUCwwQkFBMEI7a0JBSHRDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3JkZXIsIFJvdXRpbmdTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9yZGVyQXBwcm92YWwgfSBmcm9tICcuLi8uLi9jb3JlL21vZGVsL29yZGVyLWFwcHJvdmFsLm1vZGVsJztcbmltcG9ydCB7IE9yZGVyQXBwcm92YWxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29yZS9zZXJ2aWNlcy9vcmRlci1hcHByb3ZhbC5zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIGZpbHRlcixcbiAgbWFwLFxuICBwbHVjayxcbiAgc2hhcmVSZXBsYXksXG4gIHN3aXRjaE1hcCxcbiAgdGFwLFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBPcmRlckFwcHJvdmFsRGV0YWlsU2VydmljZSB7XG4gIHByb3RlY3RlZCBhcHByb3ZhbENvZGUkID0gdGhpcy5yb3V0aW5nU2VydmljZVxuICAgIC5nZXRSb3V0ZXJTdGF0ZSgpXG4gICAgLnBpcGUobWFwKChyb3V0aW5nRGF0YSkgPT4gcm91dGluZ0RhdGEuc3RhdGUucGFyYW1zLmFwcHJvdmFsQ29kZSkpO1xuXG4gIHByb3RlY3RlZCBvcmRlckFwcHJvdmFsJCA9IHRoaXMuYXBwcm92YWxDb2RlJC5waXBlKFxuICAgIGZpbHRlcihCb29sZWFuKSxcbiAgICB0YXAoKGFwcHJvdmFsQ29kZTogc3RyaW5nKSA9PlxuICAgICAgdGhpcy5vcmRlckFwcHJvdmFsU2VydmljZS5sb2FkT3JkZXJBcHByb3ZhbChhcHByb3ZhbENvZGUpXG4gICAgKSxcbiAgICBzd2l0Y2hNYXAoKGFwcHJvdmFsQ29kZTogc3RyaW5nKSA9PlxuICAgICAgdGhpcy5vcmRlckFwcHJvdmFsU2VydmljZS5nZXQoYXBwcm92YWxDb2RlKVxuICAgICksXG4gICAgc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KVxuICApO1xuXG4gIHByb3RlY3RlZCBvcmRlciQgPSB0aGlzLm9yZGVyQXBwcm92YWwkLnBpcGUocGx1Y2soJ29yZGVyJykpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByb3V0aW5nU2VydmljZTogUm91dGluZ1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIG9yZGVyQXBwcm92YWxTZXJ2aWNlOiBPcmRlckFwcHJvdmFsU2VydmljZVxuICApIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBhcHByb3ZhbCBjb2RlXG4gICAqIGZvdW5kIGluIHRoZSBwYWdlIHVybC5cbiAgICovXG4gIGdldE9yZGVyQXBwcm92YWxDb2RlRnJvbVJvdXRlKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuYXBwcm92YWxDb2RlJDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvcmRlciBkYXRhIGZyb20gdGhlIGFwcHJvdmFsIGRldGFpbHMgdGhhdCBoYXZlIGJlZW5cbiAgICogcmV0cmlldmVkIGZyb20gdGhlIGFwcHJvdmFsIGNvZGUgaW4gdGhlIHBhZ2UgdXJsLlxuICAgKi9cbiAgZ2V0T3JkZXJEZXRhaWxzKCk6IE9ic2VydmFibGU8T3JkZXI+IHtcbiAgICByZXR1cm4gdGhpcy5vcmRlciQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYXBwcm92YWwgZGV0YWlscyB0aGF0IGhhdmUgYmVlbiByZXRyaWV2ZWQgZnJvbSB0aGVcbiAgICogYXBwcm92YWwgY29kZSBpbiB0aGUgcGFnZSB1cmwuXG4gICAqL1xuICBnZXRPcmRlckFwcHJvdmFsKCk6IE9ic2VydmFibGU8T3JkZXJBcHByb3ZhbD4ge1xuICAgIHJldHVybiB0aGlzLm9yZGVyQXBwcm92YWwkO1xuICB9XG59XG4iXX0=