import { ChangeDetectionStrategy, Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@angular/common";
import * as i3 from "@spartacus/core";
export class OrderDetailPermissionResultsComponent {
    constructor(orderDetailsService) {
        this.orderDetailsService = orderDetailsService;
        this.order$ = this.orderDetailsService.getOrderDetails();
    }
}
OrderDetailPermissionResultsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderDetailPermissionResultsComponent, deps: [{ token: i1.OrderDetailsService }], target: i0.ɵɵFactoryTarget.Component });
OrderDetailPermissionResultsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderDetailPermissionResultsComponent, selector: "cx-order-detail-permission-results", ngImport: i0, template: "<ng-container *ngIf=\"order$ | async as order\">\n  <ng-container *ngIf=\"order.permissionResults?.length\">\n    <div class=\"cx-approval-header row\">\n      <div class=\"cx-approval-label col-sm-12\">\n        {{ 'orderApprovalDetails.permissionResults.header' | cxTranslate }}\n      </div>\n    </div>\n    <div class=\"row\">\n      <table class=\"table table-striped cx-approval-table\">\n        <thead class=\"cx-approval-thead-mobile\">\n          <th scope=\"col\">\n            {{\n              'orderApprovalDetails.permissionResults.permission' | cxTranslate\n            }}\n          </th>\n          <th scope=\"col\">\n            {{\n              'orderApprovalDetails.permissionResults.approver' | cxTranslate\n            }}\n          </th>\n          <th scope=\"col\">\n            {{ 'orderApprovalDetails.permissionResults.status' | cxTranslate }}\n          </th>\n          <th scope=\"col\">\n            {{\n              'orderApprovalDetails.permissionResults.approverComments'\n                | cxTranslate\n            }}\n          </th>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let permissionResult of order.permissionResults\">\n            <td class=\"cx-approval-permissionCode\">\n              <div class=\"d-md-none cx-approval-table-label\">\n                {{\n                  'orderApprovalDetails.permissionResults.permission'\n                    | cxTranslate\n                }}\n              </div>\n              {{\n                'orderApprovalDetails.permissionResults.permissionType_' +\n                  permissionResult?.permissionType?.code | cxTranslate\n              }}\n            </td>\n            <td class=\"cx-approval-approverName\">\n              <div class=\"d-md-none cx-approval-table-label\">\n                {{\n                  'orderApprovalDetails.permissionResults.approver'\n                    | cxTranslate\n                }}\n              </div>\n              {{ permissionResult.approverName }}\n            </td>\n            <td class=\"cx-approval-statusDisplay\">\n              <div class=\"d-md-none cx-approval-table-label\">\n                {{\n                  'orderApprovalDetails.permissionResults.status' | cxTranslate\n                }}\n              </div>\n              {{ permissionResult.statusDisplay }}\n            </td>\n            <td class=\"cx-approval-approvalNotes\">\n              <div class=\"d-md-none cx-approval-table-label\">\n                {{\n                  'orderApprovalDetails.permissionResults.approverComments'\n                    | cxTranslate\n                }}\n              </div>\n              {{\n                permissionResult.approverNotes\n                  ? permissionResult.approverNotes\n                  : ('orderApprovalDetails.permissionResults.noApprovalComments'\n                    | cxTranslate)\n              }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </ng-container>\n</ng-container>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i2.AsyncPipe, "cxTranslate": i3.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderDetailPermissionResultsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-order-detail-permission-results',
                    templateUrl: './order-detail-permission-results.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.OrderDetailsService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItZGV0YWlsLXBlcm1pc3Npb24tcmVzdWx0cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL29yZGVyLWFwcHJvdmFsL2NvbXBvbmVudHMvZGV0YWlscy9vcmRlci1kZXRhaWwtcGVybWlzc2lvbi1yZXN1bHRzL29yZGVyLWRldGFpbC1wZXJtaXNzaW9uLXJlc3VsdHMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9vcmRlci1hcHByb3ZhbC9jb21wb25lbnRzL2RldGFpbHMvb3JkZXItZGV0YWlsLXBlcm1pc3Npb24tcmVzdWx0cy9vcmRlci1kZXRhaWwtcGVybWlzc2lvbi1yZXN1bHRzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7O0FBVW5FLE1BQU0sT0FBTyxxQ0FBcUM7SUFHaEQsWUFBc0IsbUJBQXdDO1FBQXhDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFGOUQsV0FBTSxHQUFzQixJQUFJLENBQUMsbUJBQW1CLENBQUMsZUFBZSxFQUFFLENBQUM7SUFFTixDQUFDOztrSUFIdkQscUNBQXFDO3NIQUFyQyxxQ0FBcUMsMEVDVmxELHc5RkFpRkE7MkZEdkVhLHFDQUFxQztrQkFMakQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsb0NBQW9DO29CQUM5QyxXQUFXLEVBQUUsa0RBQWtEO29CQUMvRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPcmRlciB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPcmRlckRldGFpbHNTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9zdG9yZWZyb250JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtb3JkZXItZGV0YWlsLXBlcm1pc3Npb24tcmVzdWx0cycsXG4gIHRlbXBsYXRlVXJsOiAnLi9vcmRlci1kZXRhaWwtcGVybWlzc2lvbi1yZXN1bHRzLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIE9yZGVyRGV0YWlsUGVybWlzc2lvblJlc3VsdHNDb21wb25lbnQge1xuICBvcmRlciQ6IE9ic2VydmFibGU8T3JkZXI+ID0gdGhpcy5vcmRlckRldGFpbHNTZXJ2aWNlLmdldE9yZGVyRGV0YWlscygpO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBvcmRlckRldGFpbHNTZXJ2aWNlOiBPcmRlckRldGFpbHNTZXJ2aWNlKSB7fVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cIm9yZGVyJCB8IGFzeW5jIGFzIG9yZGVyXCI+XG4gIDxuZy1jb250YWluZXIgKm5nSWY9XCJvcmRlci5wZXJtaXNzaW9uUmVzdWx0cz8ubGVuZ3RoXCI+XG4gICAgPGRpdiBjbGFzcz1cImN4LWFwcHJvdmFsLWhlYWRlciByb3dcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjeC1hcHByb3ZhbC1sYWJlbCBjb2wtc20tMTJcIj5cbiAgICAgICAge3sgJ29yZGVyQXBwcm92YWxEZXRhaWxzLnBlcm1pc3Npb25SZXN1bHRzLmhlYWRlcicgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgPHRhYmxlIGNsYXNzPVwidGFibGUgdGFibGUtc3RyaXBlZCBjeC1hcHByb3ZhbC10YWJsZVwiPlxuICAgICAgICA8dGhlYWQgY2xhc3M9XCJjeC1hcHByb3ZhbC10aGVhZC1tb2JpbGVcIj5cbiAgICAgICAgICA8dGggc2NvcGU9XCJjb2xcIj5cbiAgICAgICAgICAgIHt7XG4gICAgICAgICAgICAgICdvcmRlckFwcHJvdmFsRGV0YWlscy5wZXJtaXNzaW9uUmVzdWx0cy5wZXJtaXNzaW9uJyB8IGN4VHJhbnNsYXRlXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+XG4gICAgICAgICAgICB7e1xuICAgICAgICAgICAgICAnb3JkZXJBcHByb3ZhbERldGFpbHMucGVybWlzc2lvblJlc3VsdHMuYXBwcm92ZXInIHwgY3hUcmFuc2xhdGVcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPC90aD5cbiAgICAgICAgICA8dGggc2NvcGU9XCJjb2xcIj5cbiAgICAgICAgICAgIHt7ICdvcmRlckFwcHJvdmFsRGV0YWlscy5wZXJtaXNzaW9uUmVzdWx0cy5zdGF0dXMnIHwgY3hUcmFuc2xhdGUgfX1cbiAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDx0aCBzY29wZT1cImNvbFwiPlxuICAgICAgICAgICAge3tcbiAgICAgICAgICAgICAgJ29yZGVyQXBwcm92YWxEZXRhaWxzLnBlcm1pc3Npb25SZXN1bHRzLmFwcHJvdmVyQ29tbWVudHMnXG4gICAgICAgICAgICAgICAgfCBjeFRyYW5zbGF0ZVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA8L3RoPlxuICAgICAgICA8L3RoZWFkPlxuICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgPHRyICpuZ0Zvcj1cImxldCBwZXJtaXNzaW9uUmVzdWx0IG9mIG9yZGVyLnBlcm1pc3Npb25SZXN1bHRzXCI+XG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJjeC1hcHByb3ZhbC1wZXJtaXNzaW9uQ29kZVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1tZC1ub25lIGN4LWFwcHJvdmFsLXRhYmxlLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAge3tcbiAgICAgICAgICAgICAgICAgICdvcmRlckFwcHJvdmFsRGV0YWlscy5wZXJtaXNzaW9uUmVzdWx0cy5wZXJtaXNzaW9uJ1xuICAgICAgICAgICAgICAgICAgICB8IGN4VHJhbnNsYXRlXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIHt7XG4gICAgICAgICAgICAgICAgJ29yZGVyQXBwcm92YWxEZXRhaWxzLnBlcm1pc3Npb25SZXN1bHRzLnBlcm1pc3Npb25UeXBlXycgK1xuICAgICAgICAgICAgICAgICAgcGVybWlzc2lvblJlc3VsdD8ucGVybWlzc2lvblR5cGU/LmNvZGUgfCBjeFRyYW5zbGF0ZVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cImN4LWFwcHJvdmFsLWFwcHJvdmVyTmFtZVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1tZC1ub25lIGN4LWFwcHJvdmFsLXRhYmxlLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAge3tcbiAgICAgICAgICAgICAgICAgICdvcmRlckFwcHJvdmFsRGV0YWlscy5wZXJtaXNzaW9uUmVzdWx0cy5hcHByb3ZlcidcbiAgICAgICAgICAgICAgICAgICAgfCBjeFRyYW5zbGF0ZVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICB7eyBwZXJtaXNzaW9uUmVzdWx0LmFwcHJvdmVyTmFtZSB9fVxuICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cImN4LWFwcHJvdmFsLXN0YXR1c0Rpc3BsYXlcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtbWQtbm9uZSBjeC1hcHByb3ZhbC10YWJsZS1sYWJlbFwiPlxuICAgICAgICAgICAgICAgIHt7XG4gICAgICAgICAgICAgICAgICAnb3JkZXJBcHByb3ZhbERldGFpbHMucGVybWlzc2lvblJlc3VsdHMuc3RhdHVzJyB8IGN4VHJhbnNsYXRlXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIHt7IHBlcm1pc3Npb25SZXN1bHQuc3RhdHVzRGlzcGxheSB9fVxuICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cImN4LWFwcHJvdmFsLWFwcHJvdmFsTm90ZXNcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtbWQtbm9uZSBjeC1hcHByb3ZhbC10YWJsZS1sYWJlbFwiPlxuICAgICAgICAgICAgICAgIHt7XG4gICAgICAgICAgICAgICAgICAnb3JkZXJBcHByb3ZhbERldGFpbHMucGVybWlzc2lvblJlc3VsdHMuYXBwcm92ZXJDb21tZW50cydcbiAgICAgICAgICAgICAgICAgICAgfCBjeFRyYW5zbGF0ZVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICB7e1xuICAgICAgICAgICAgICAgIHBlcm1pc3Npb25SZXN1bHQuYXBwcm92ZXJOb3Rlc1xuICAgICAgICAgICAgICAgICAgPyBwZXJtaXNzaW9uUmVzdWx0LmFwcHJvdmVyTm90ZXNcbiAgICAgICAgICAgICAgICAgIDogKCdvcmRlckFwcHJvdmFsRGV0YWlscy5wZXJtaXNzaW9uUmVzdWx0cy5ub0FwcHJvdmFsQ29tbWVudHMnXG4gICAgICAgICAgICAgICAgICAgIHwgY3hUcmFuc2xhdGUpXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgIDwvZGl2PlxuICA8L25nLWNvbnRhaW5lcj5cbjwvbmctY29udGFpbmVyPlxuIl19