import { ChangeDetectionStrategy, Component } from '@angular/core';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../../core/services/order-approval.service";
import * as i3 from "@spartacus/storefront";
import * as i4 from "@angular/common";
import * as i5 from "@angular/router";
export class OrderApprovalListComponent {
    constructor(routing, orderApprovalService, translation) {
        this.routing = routing;
        this.orderApprovalService = orderApprovalService;
        this.translation = translation;
        this.PAGE_SIZE = 5;
    }
    ngOnInit() {
        this.fetchApprovalListPage({});
        this.sortLabels$ = combineLatest([
            this.translation.translate('sorting.date'),
            this.translation.translate('sorting.orderNumber'),
        ]).pipe(map(([textByDate, textByOrderNumber]) => {
            return {
                byDate: textByDate,
                byOrderNumber: textByOrderNumber,
            };
        }));
    }
    changeSortCode(sortCode) {
        const fetchParams = {
            sort: sortCode,
            currentPage: 0,
        };
        this.sortType = sortCode;
        this.fetchApprovalListPage(fetchParams);
    }
    pageChange(page) {
        const fetchParams = {
            sort: this.sortType,
            currentPage: page,
        };
        this.fetchApprovalListPage(fetchParams);
    }
    fetchApprovalListPage(searchConfig) {
        searchConfig.pageSize = this.PAGE_SIZE;
        this.orderApprovalService.loadOrderApprovals(searchConfig);
        this.orderApprovals$ = this.orderApprovalService.getList(searchConfig);
    }
    goToApprovalDetails(event, orderApproval) {
        var _a;
        if (((_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.nodeName.toLowerCase()) !== 'a') {
            this.routing.go({
                cxRoute: 'orderApprovalDetails',
                params: { approvalCode: orderApproval.code },
            });
        }
    }
}
OrderApprovalListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderApprovalListComponent, deps: [{ token: i1.RoutingService }, { token: i2.OrderApprovalService }, { token: i1.TranslationService }], target: i0.ɵɵFactoryTarget.Component });
OrderApprovalListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderApprovalListComponent, selector: "cx-order-approval-list", ngImport: i0, template: "<ng-container *ngIf=\"orderApprovals$ | async as orderApprovals\">\n  <ng-container\n    *ngIf=\"orderApprovals.pagination.totalResults > 0; else noOrder\"\n  >\n    <!-- Select Form and Pagination Top -->\n    <div class=\"cx-order-approval-sort top row\">\n      <div\n        class=\"\n          cx-order-approval-form-group\n          form-group\n          col-sm-12 col-md-4 col-lg-4\n        \"\n      >\n        <cx-sorting\n          [sortOptions]=\"orderApprovals.sorts\"\n          [sortLabels]=\"sortLabels$ | async\"\n          (sortListEvent)=\"changeSortCode($event)\"\n          [selectedOption]=\"orderApprovals.pagination.sort\"\n        ></cx-sorting>\n      </div>\n      <div class=\"cx-order-approval-pagination\">\n        <cx-pagination\n          [pagination]=\"orderApprovals.pagination\"\n          (viewPageEvent)=\"pageChange($event)\"\n        ></cx-pagination>\n      </div>\n    </div>\n    <!-- TABLE -->\n    <table class=\"table cx-order-approval-table\">\n      <thead class=\"cx-order-approval-thead-mobile\">\n        <th scope=\"col\">\n          {{ 'orderApprovalList.orderCode' | cxTranslate }}\n        </th>\n        <th scope=\"col\">{{ 'orderApprovalList.POCode' | cxTranslate }}</th>\n        <th scope=\"col\">{{ 'orderApprovalList.placedBy' | cxTranslate }}</th>\n        <th scope=\"col\">{{ 'orderApprovalList.date' | cxTranslate }}</th>\n        <th scope=\"col\">\n          {{ 'orderApprovalList.status' | cxTranslate }}\n        </th>\n        <th scope=\"col\">{{ 'orderApprovalList.total' | cxTranslate }}</th>\n      </thead>\n      <tbody>\n        <tr\n          *ngFor=\"let approval of orderApprovals.values\"\n          (click)=\"goToApprovalDetails($event, approval)\"\n        >\n          <td class=\"cx-order-approval-code\">\n            <div class=\"d-md-none cx-order-approval-label\">\n              {{ 'orderApprovalList.orderCode' | cxTranslate }}\n            </div>\n            <a\n              [routerLink]=\"\n                {\n                  cxRoute: 'orderApprovalDetails',\n                  params: { approvalCode: approval?.code }\n                } | cxUrl\n              \"\n              class=\"cx-order-approval-value\"\n            >\n              {{ approval.order?.code }}</a\n            >\n          </td>\n          <td class=\"cx-order-approval-po-code\">\n            <div class=\"d-md-none cx-order-approval-label\">\n              {{ 'orderApprovalList.POCode' | cxTranslate }}\n            </div>\n            <a\n              [routerLink]=\"\n                {\n                  cxRoute: 'orderApprovalDetails',\n                  params: { approvalCode: approval?.code }\n                } | cxUrl\n              \"\n              class=\"cx-order-approval-value\"\n              >{{\n                approval.order?.purchaseOrderNumber ||\n                  ('orderApprovalList.none' | cxTranslate)\n              }}</a\n            >\n          </td>\n          <td class=\"cx-order-approval-placed\">\n            <div class=\"d-md-none cx-order-approval-label\">\n              {{ 'orderApprovalList.placedBy' | cxTranslate }}\n            </div>\n            <a\n              [routerLink]=\"\n                {\n                  cxRoute: 'orderApprovalDetails',\n                  params: { approvalCode: approval?.code }\n                } | cxUrl\n              \"\n              class=\"cx-order-approval-value\"\n              >{{ approval.order?.orgCustomer?.name }}</a\n            >\n          </td>\n          <td class=\"cx-order-approval-date\">\n            <div class=\"d-md-none cx-order-approval-label\">\n              {{ 'orderApprovalList.date' | cxTranslate }}\n            </div>\n            <a\n              [routerLink]=\"\n                {\n                  cxRoute: 'orderApprovalDetails',\n                  params: { approvalCode: approval?.code }\n                } | cxUrl\n              \"\n              class=\"cx-order-approval-value\"\n              >{{ approval.order?.created | cxDate: 'longDate' }}</a\n            >\n          </td>\n\n          <td class=\"cx-order-approval-status\">\n            <div class=\"d-md-none cx-order-approval-label\">\n              {{ 'orderApprovalList.status' | cxTranslate }}\n            </div>\n            <a\n              [routerLink]=\"\n                {\n                  cxRoute: 'orderApprovalDetails',\n                  params: { approvalCode: approval?.code }\n                } | cxUrl\n              \"\n              class=\"cx-order-approval-value\"\n            >\n              {{\n                'orderDetails.statusDisplay_' + approval.order?.statusDisplay\n                  | cxTranslate\n              }}</a\n            >\n          </td>\n          <td class=\"cx-order-approval-total\">\n            <div class=\"d-md-none cx-order-approval-label\">\n              {{ 'orderApprovalList.total' | cxTranslate }}\n            </div>\n            <a\n              [routerLink]=\"\n                {\n                  cxRoute: 'orderApprovalDetails',\n                  params: { approvalCode: approval?.code }\n                } | cxUrl\n              \"\n              class=\"cx-order-approval-value\"\n            >\n              {{ approval.order?.totalPrice?.formattedValue }}</a\n            >\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <!-- Select Form and Pagination Bottom -->\n    <div class=\"cx-order-approval-sort bottom row\">\n      <div\n        class=\"\n          cx-order-approval-form-group\n          form-group\n          col-sm-12 col-md-4 col-lg-4\n        \"\n      >\n        <cx-sorting\n          [sortOptions]=\"orderApprovals.sorts\"\n          [sortLabels]=\"sortLabels$ | async\"\n          (sortListEvent)=\"changeSortCode($event)\"\n          [selectedOption]=\"orderApprovals.pagination.sort\"\n        ></cx-sorting>\n      </div>\n      <div class=\"cx-order-approval-pagination\">\n        <cx-pagination\n          [pagination]=\"orderApprovals.pagination\"\n          (viewPageEvent)=\"pageChange($event)\"\n        ></cx-pagination>\n      </div>\n    </div>\n  </ng-container>\n\n  <!-- NO ORDER CONTAINER -->\n  <ng-template #noOrder>\n    <div class=\"cx-order-approval-no-order row\">\n      <div class=\"col-sm-12 col-md-6 col-lg-4\">\n        <div>{{ 'orderApprovalList.emptyList' | cxTranslate }}</div>\n      </div>\n    </div>\n  </ng-template>\n</ng-container>\n", components: [{ type: i3.SortingComponent, selector: "cx-sorting", inputs: ["sortOptions", "selectedOption", "placeholder", "sortLabels"], outputs: ["sortListEvent"] }, { type: i3.PaginationComponent, selector: "cx-pagination", inputs: ["pageRoute", "queryParam", "defaultPage", "pagination"], outputs: ["viewPageEvent"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i4.AsyncPipe, "cxTranslate": i1.TranslatePipe, "cxUrl": i1.UrlPipe, "cxDate": i1.CxDatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderApprovalListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-order-approval-list',
                    templateUrl: './order-approval-list.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.RoutingService }, { type: i2.OrderApprovalService }, { type: i1.TranslationService }]; } });
//# sourceMappingURL=data:application/json;base64,