import { Injectable } from '@angular/core';
import { COST_CENTERS_NORMALIZER, COST_CENTER_NORMALIZER, COST_CENTER_SERIALIZER, } from '@spartacus/core';
import { BUDGETS_NORMALIZER, } from '@spartacus/organization/administration/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
export class OccCostCenterAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
    }
    load(userId, costCenterCode) {
        return this.http
            .get(this.getCostCenterEndpoint(userId, costCenterCode))
            .pipe(this.converter.pipeable(COST_CENTER_NORMALIZER));
    }
    loadList(userId, params) {
        return this.http
            .get(this.getAllCostCentersEndpoint(userId, params))
            .pipe(this.converter.pipeable(COST_CENTERS_NORMALIZER));
    }
    create(userId, costCenter) {
        costCenter = this.converter.convert(costCenter, COST_CENTER_SERIALIZER);
        return this.http
            .post(this.getCostCentersEndpoint(userId), costCenter)
            .pipe(this.converter.pipeable(COST_CENTER_NORMALIZER));
    }
    update(userId, costCenterCode, costCenter) {
        costCenter = this.converter.convert(costCenter, COST_CENTER_SERIALIZER);
        return this.http
            .patch(this.getCostCenterEndpoint(userId, costCenterCode), costCenter)
            .pipe(this.converter.pipeable(COST_CENTER_NORMALIZER));
    }
    loadBudgets(userId, costCenterCode, params) {
        return this.http
            .get(this.getBudgetsEndpoint(userId, costCenterCode, params))
            .pipe(this.converter.pipeable(BUDGETS_NORMALIZER));
    }
    assignBudget(userId, costCenterCode, budgetCode) {
        return this.http.post(this.getBudgetsEndpoint(userId, costCenterCode, { budgetCode }), null);
    }
    unassignBudget(userId, costCenterCode, budgetCode) {
        return this.http.delete(this.getBudgetEndpoint(userId, costCenterCode, budgetCode));
    }
    getCostCenterEndpoint(userId, costCenterCode) {
        return this.occEndpoints.buildUrl('costCenter', {
            urlParams: { userId, costCenterCode },
        });
    }
    getCostCentersEndpoint(userId, params) {
        return this.occEndpoints.buildUrl('costCenters', {
            urlParams: { userId },
            queryParams: params,
        });
    }
    getAllCostCentersEndpoint(userId, params) {
        return this.occEndpoints.buildUrl('costCentersAll', {
            urlParams: { userId },
            queryParams: params,
        });
    }
    getBudgetsEndpoint(userId, costCenterCode, params) {
        return this.occEndpoints.buildUrl('costCenterBudgets', {
            urlParams: { userId, costCenterCode },
            queryParams: params,
        });
    }
    getBudgetEndpoint(userId, costCenterCode, budgetCode) {
        return this.occEndpoints.buildUrl('costCenterBudget', {
            urlParams: {
                userId,
                costCenterCode,
                budgetCode,
            },
        });
    }
}
OccCostCenterAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccCostCenterAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccCostCenterAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccCostCenterAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccCostCenterAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,