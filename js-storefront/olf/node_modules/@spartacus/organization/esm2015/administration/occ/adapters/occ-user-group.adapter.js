import { Injectable } from '@angular/core';
import { B2B_USERS_NORMALIZER, PERMISSIONS_NORMALIZER, USER_GROUPS_NORMALIZER, USER_GROUP_NORMALIZER, USER_GROUP_SERIALIZER, } from '@spartacus/organization/administration/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
export class OccUserGroupAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
    }
    load(userId, userGroupId) {
        return this.http
            .get(this.getUserGroupEndpoint(userId, userGroupId))
            .pipe(this.converter.pipeable(USER_GROUP_NORMALIZER));
    }
    loadList(userId, params) {
        return this.http
            .get(this.getUserGroupsEndpoint(userId, params))
            .pipe(this.converter.pipeable(USER_GROUPS_NORMALIZER));
    }
    loadAvailableOrderApprovalPermissions(userId, userGroupId, params) {
        return this.http
            .get(this.getPermissionsEndpoint(userId, userGroupId, params))
            .pipe(this.converter.pipeable(PERMISSIONS_NORMALIZER));
    }
    loadAvailableOrgCustomers(userId, userGroupId, params) {
        return this.http
            .get(this.getAvailableCustomersEndpoint(userId, userGroupId, params))
            .pipe(this.converter.pipeable(B2B_USERS_NORMALIZER));
    }
    create(userId, userGroup) {
        userGroup = this.converter.convert(userGroup, USER_GROUP_SERIALIZER);
        return this.http
            .post(this.getUserGroupsEndpoint(userId), userGroup)
            .pipe(this.converter.pipeable(USER_GROUP_NORMALIZER));
    }
    delete(userId, userGroupId) {
        return this.http
            .delete(this.getUserGroupEndpoint(userId, userGroupId))
            .pipe(this.converter.pipeable(USER_GROUP_NORMALIZER));
    }
    update(userId, userGroupId, userGroup) {
        userGroup = this.converter.convert(userGroup, USER_GROUP_SERIALIZER);
        return this.http
            .patch(this.getUserGroupEndpoint(userId, userGroupId), userGroup)
            .pipe(this.converter.pipeable(USER_GROUP_NORMALIZER));
    }
    assignMember(userId, userGroupId, orgCustomerId) {
        return this.http.post(this.getMembersEndpoint(userId, userGroupId, {
            orgCustomerId,
        }), null);
    }
    assignOrderApprovalPermission(userId, userGroupId, orderApprovalPermissionCode) {
        return this.http.post(this.getOrderApprovalPermissionsEndpoint(userId, userGroupId, {
            orderApprovalPermissionCode,
        }), null);
    }
    unassignMember(userId, userGroupId, orgCustomerId) {
        return this.http.delete(this.getMemberEndpoint(userId, userGroupId, orgCustomerId));
    }
    unassignAllMembers(userId, userGroupId) {
        return this.http.delete(this.getMembersEndpoint(userId, userGroupId));
    }
    unassignOrderApprovalPermission(userId, userGroupId, orderApprovalPermissionCode) {
        return this.http.delete(this.getOrderApprovalPermissionEndpoint(userId, userGroupId, orderApprovalPermissionCode));
    }
    getUserGroupEndpoint(userId, userGroupId) {
        return this.occEndpoints.buildUrl('userGroup', {
            urlParams: {
                userId,
                userGroupId,
            },
        });
    }
    getUserGroupsEndpoint(userId, params) {
        return this.occEndpoints.buildUrl('userGroups', {
            urlParams: { userId },
            queryParams: params,
        });
    }
    getAvailableCustomersEndpoint(userId, userGroupId, params) {
        return this.occEndpoints.buildUrl('userGroupAvailableOrgCustomers', {
            urlParams: { userId, userGroupId },
            queryParams: params,
        });
    }
    getPermissionsEndpoint(userId, userGroupId, params) {
        return this.occEndpoints.buildUrl('userGroupAvailableOrderApprovalPermissions', { urlParams: { userId, userGroupId }, queryParams: params });
    }
    getMemberEndpoint(userId, userGroupId, orgCustomerId) {
        return this.occEndpoints.buildUrl('userGroupMember', {
            urlParams: {
                userId,
                userGroupId,
                orgCustomerId,
            },
        });
    }
    getMembersEndpoint(userId, userGroupId, params) {
        return this.occEndpoints.buildUrl('userGroupMembers', {
            urlParams: { userId, userGroupId },
            queryParams: params,
        });
    }
    getOrderApprovalPermissionsEndpoint(userId, userGroupId, params) {
        return this.occEndpoints.buildUrl('userGroupOrderApprovalPermissions', {
            urlParams: { userId, userGroupId },
            queryParams: params,
        });
    }
    getOrderApprovalPermissionEndpoint(userId, userGroupId, orderApprovalPermissionCode) {
        return this.occEndpoints.buildUrl('userGroupOrderApprovalPermission', {
            urlParams: {
                userId,
                userGroupId,
                orderApprovalPermissionCode,
            },
        });
    }
}
OccUserGroupAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccUserGroupAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccUserGroupAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccUserGroupAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccUserGroupAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,