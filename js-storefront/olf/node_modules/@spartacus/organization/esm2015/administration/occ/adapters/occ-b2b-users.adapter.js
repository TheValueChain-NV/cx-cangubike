import { Injectable } from '@angular/core';
import { B2B_USERS_NORMALIZER, B2B_USER_NORMALIZER, PERMISSIONS_NORMALIZER, USER_GROUPS_NORMALIZER, B2B_USER_SERIALIZER, } from '@spartacus/organization/administration/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
export class OccB2BUserAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
    }
    load(userId, orgUnitCustomerId) {
        return this.http
            .get(this.getB2BUserEndpoint(userId, orgUnitCustomerId))
            .pipe(this.converter.pipeable(B2B_USER_NORMALIZER));
    }
    loadList(userId, params) {
        return this.http
            .get(this.getB2BUsersEndpoint(userId, params))
            .pipe(this.converter.pipeable(B2B_USERS_NORMALIZER));
    }
    create(userId, orgCustomer) {
        orgCustomer = this.converter.convert(orgCustomer, B2B_USER_SERIALIZER);
        return this.http
            .post(this.getB2BUsersEndpoint(userId), orgCustomer)
            .pipe(this.converter.pipeable(B2B_USER_NORMALIZER));
    }
    update(userId, orgCustomerId, orgCustomer) {
        orgCustomer = this.converter.convert(orgCustomer, B2B_USER_SERIALIZER);
        return this.http
            .patch(this.getB2BUserEndpoint(userId, orgCustomerId), orgCustomer)
            .pipe(this.converter.pipeable(B2B_USER_NORMALIZER));
    }
    loadApprovers(userId, orgCustomerId, params) {
        return this.http
            .get(this.getApproversEndpoint(userId, orgCustomerId, params))
            .pipe(this.converter.pipeable(B2B_USERS_NORMALIZER));
    }
    assignApprover(userId, orgCustomerId, approverId) {
        return this.http.post(this.getApproverEndpoint(userId, orgCustomerId, approverId), null);
    }
    unassignApprover(userId, orgCustomerId, approverId) {
        return this.http.delete(this.getApproverEndpoint(userId, orgCustomerId, approverId));
    }
    loadPermissions(userId, orgCustomerId, params) {
        return this.http
            .get(this.getPermissionsEndpoint(userId, orgCustomerId, params))
            .pipe(this.converter.pipeable(PERMISSIONS_NORMALIZER));
    }
    assignPermission(userId, orgCustomerId, permissionId) {
        return this.http.post(this.getPermissionEndpoint(userId, orgCustomerId, permissionId), null);
    }
    unassignPermission(userId, orgCustomerId, permissionId) {
        return this.http.delete(this.getPermissionEndpoint(userId, orgCustomerId, permissionId));
    }
    loadUserGroups(userId, orgCustomerId, params) {
        return this.http
            .get(this.getUserGroupsEndpoint(userId, orgCustomerId, params))
            .pipe(this.converter.pipeable(USER_GROUPS_NORMALIZER));
    }
    assignUserGroup(userId, orgCustomerId, userGroupId) {
        return this.http.post(this.getUserGroupEndpoint(userId, orgCustomerId, userGroupId), null);
    }
    unassignUserGroup(userId, orgCustomerId, userGroupId) {
        return this.http.delete(this.getUserGroupEndpoint(userId, orgCustomerId, userGroupId));
    }
    getB2BUserEndpoint(userId, orgCustomerId) {
        return this.occEndpoints.buildUrl('b2bUser', {
            urlParams: {
                userId,
                orgCustomerId,
            },
        });
    }
    getB2BUsersEndpoint(userId, params) {
        return this.occEndpoints.buildUrl('b2bUsers', {
            urlParams: { userId },
            queryParams: params,
        });
    }
    getApproverEndpoint(userId, orgCustomerId, approverId) {
        return this.occEndpoints.buildUrl('b2bUserApprover', {
            urlParams: {
                userId,
                orgCustomerId,
                approverId,
            },
        });
    }
    getApproversEndpoint(userId, orgCustomerId, params) {
        return this.occEndpoints.buildUrl('b2bUserApprovers', {
            urlParams: { userId, orgCustomerId },
            queryParams: params,
        });
    }
    getPermissionEndpoint(userId, orgCustomerId, premissionId) {
        return this.occEndpoints.buildUrl('b2bUserPermission', {
            urlParams: {
                userId,
                orgCustomerId,
                premissionId,
            },
        });
    }
    getPermissionsEndpoint(userId, orgCustomerId, params) {
        return this.occEndpoints.buildUrl('b2bUserPermissions', {
            urlParams: {
                userId,
                orgCustomerId,
            },
            queryParams: params,
        });
    }
    getUserGroupEndpoint(userId, orgCustomerId, userGroupId) {
        return this.occEndpoints.buildUrl('b2bUserUserGroup', {
            urlParams: {
                userId,
                orgCustomerId,
                userGroupId,
            },
        });
    }
    getUserGroupsEndpoint(userId, orgCustomerId, params) {
        return this.occEndpoints.buildUrl('b2bUserUserGroups', {
            urlParams: { userId, orgCustomerId },
            queryParams: params,
        });
    }
}
OccB2BUserAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccB2BUserAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccB2BUserAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccB2BUserAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccB2BUserAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,