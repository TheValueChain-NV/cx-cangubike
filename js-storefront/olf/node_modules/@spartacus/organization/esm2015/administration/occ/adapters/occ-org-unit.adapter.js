import { Injectable } from '@angular/core';
import { ADDRESS_LIST_NORMALIZER, ADDRESS_NORMALIZER, ADDRESS_SERIALIZER, } from '@spartacus/core';
import { B2BUNIT_APPROVAL_PROCESSES_NORMALIZER, B2BUNIT_NODE_LIST_NORMALIZER, B2BUNIT_NODE_NORMALIZER, B2BUNIT_NORMALIZER, B2BUNIT_SERIALIZER, B2B_USERS_NORMALIZER, } from '@spartacus/organization/administration/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
export class OccOrgUnitAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
    }
    load(userId, orgUnitId) {
        return this.http
            .get(this.getOrgUnitEndpoint(userId, orgUnitId))
            .pipe(this.converter.pipeable(B2BUNIT_NORMALIZER));
    }
    create(userId, orgUnit) {
        return this.http
            .post(this.getOrgUnitsEndpoint(userId), orgUnit)
            .pipe(this.converter.pipeable(B2BUNIT_NORMALIZER));
    }
    update(userId, orgUnitId, orgUnit) {
        orgUnit = this.converter.convert(orgUnit, B2BUNIT_SERIALIZER);
        return this.http
            .patch(this.getOrgUnitEndpoint(userId, orgUnitId), orgUnit)
            .pipe(this.converter.pipeable(B2BUNIT_NORMALIZER));
    }
    loadTree(userId) {
        return this.http
            .get(this.getOrgUnitsTreeEndpoint(userId))
            .pipe(this.converter.pipeable(B2BUNIT_NODE_NORMALIZER));
    }
    loadList(userId) {
        return this.http
            .get(this.getAvailableOrgUnitsEndpoint(userId))
            .pipe(this.converter.pipeable(B2BUNIT_NODE_LIST_NORMALIZER));
    }
    loadApprovalProcesses(userId) {
        return this.http
            .get(this.getOrgUnitsApprovalProcessesEndpoint(userId))
            .pipe(this.converter.pipeable(B2BUNIT_APPROVAL_PROCESSES_NORMALIZER));
    }
    loadUsers(userId, orgUnitId, roleId, params) {
        return this.http
            .get(this.getUsersEndpoint(userId, orgUnitId, roleId, params))
            .pipe(this.converter.pipeable(B2B_USERS_NORMALIZER));
    }
    assignRole(userId, orgCustomerId, roleId) {
        return this.http.post(this.getRolesEndpoint(userId, orgCustomerId, { roleId }), null);
    }
    unassignRole(userId, orgCustomerId, roleId) {
        return this.http.delete(this.getRoleEndpoint(userId, orgCustomerId, roleId));
    }
    assignApprover(userId, orgUnitId, orgCustomerId, roleId) {
        return this.http.post(this.getApproversEndpoint(userId, orgUnitId, orgCustomerId, { roleId }), null);
    }
    unassignApprover(userId, orgUnitId, orgCustomerId, roleId) {
        return this.http.delete(this.getApproverEndpoint(userId, orgUnitId, orgCustomerId, roleId));
    }
    loadAddresses(userId, orgUnitId) {
        return this.http
            .get(this.getAddressesEndpoint(userId, orgUnitId))
            .pipe(this.converter.pipeable(ADDRESS_LIST_NORMALIZER));
    }
    createAddress(userId, orgUnitId, address) {
        address = this.converter.convert(address, ADDRESS_SERIALIZER);
        return this.http
            .post(this.getAddressesEndpoint(userId, orgUnitId), address)
            .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));
    }
    updateAddress(userId, orgUnitId, addressId, address) {
        address = this.converter.convert(address, ADDRESS_SERIALIZER);
        return this.http
            .patch(this.getAddressEndpoint(userId, orgUnitId, addressId), address)
            .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));
    }
    deleteAddress(userId, orgUnitId, addressId) {
        return this.http
            .delete(this.getAddressEndpoint(userId, orgUnitId, addressId))
            .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));
    }
    getOrgUnitEndpoint(userId, orgUnitId) {
        return this.occEndpoints.buildUrl('orgUnit', {
            urlParams: { userId, orgUnitId },
        });
    }
    getOrgUnitsEndpoint(userId) {
        return this.occEndpoints.buildUrl('orgUnits', { urlParams: { userId } });
    }
    getAvailableOrgUnitsEndpoint(userId) {
        return this.occEndpoints.buildUrl('orgUnitsAvailable', {
            urlParams: { userId },
        });
    }
    getOrgUnitsTreeEndpoint(userId) {
        return this.occEndpoints.buildUrl('orgUnitsTree', {
            urlParams: { userId },
        });
    }
    getOrgUnitsApprovalProcessesEndpoint(userId) {
        return this.occEndpoints.buildUrl('orgUnitsApprovalProcesses', {
            urlParams: { userId },
        });
    }
    getUsersEndpoint(userId, orgUnitId, roleId, params) {
        return this.occEndpoints.buildUrl('orgUnitUsers', {
            urlParams: {
                userId,
                orgUnitId,
                roleId,
            },
            queryParams: params,
        });
    }
    getRolesEndpoint(userId, orgCustomerId, params) {
        return this.occEndpoints.buildUrl('orgUnitUserRoles', {
            urlParams: { userId, orgCustomerId },
            queryParams: params,
        });
    }
    getRoleEndpoint(userId, orgCustomerId, roleId) {
        return this.occEndpoints.buildUrl('orgUnitUserRole', {
            urlParams: {
                userId,
                orgCustomerId,
                roleId,
            },
        });
    }
    getApproversEndpoint(userId, orgUnitId, orgCustomerId, params) {
        return this.occEndpoints.buildUrl('orgUnitApprovers', {
            urlParams: { userId, orgUnitId, orgCustomerId },
            queryParams: params,
        });
    }
    getApproverEndpoint(userId, orgUnitId, orgCustomerId, roleId) {
        return this.occEndpoints.buildUrl('orgUnitApprover', {
            urlParams: {
                userId,
                orgUnitId,
                orgCustomerId,
                roleId,
            },
        });
    }
    getAddressesEndpoint(userId, orgUnitId) {
        return this.occEndpoints.buildUrl('orgUnitsAddresses', {
            urlParams: {
                userId,
                orgUnitId,
            },
        });
    }
    getAddressEndpoint(userId, orgUnitId, addressId) {
        return this.occEndpoints.buildUrl('orgUnitsAddress', {
            urlParams: {
                userId,
                orgUnitId,
                addressId,
            },
        });
    }
}
OccOrgUnitAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccOrgUnitAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccOrgUnitAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccOrgUnitAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccOrgUnitAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,