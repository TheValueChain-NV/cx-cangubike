import { Injectable } from '@angular/core';
import { SubListService } from '../../shared/sub-list/sub-list.service';
import { OrganizationTableType } from '../../shared/organization.model';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/organization/administration/core";
export class UserApproverListService extends SubListService {
    constructor(tableService, userService) {
        super(tableService);
        this.tableService = tableService;
        this.userService = userService;
        this.tableType = OrganizationTableType.USER_APPROVERS;
        this._domainType = OrganizationTableType.USER_GROUP;
    }
    load(pagination, code) {
        return this.userService.getApprovers(code, pagination);
    }
    /**
     * @override
     * Assign approver to the user.
     */
    assign(userCode, approverId) {
        this.userService.assignApprover(userCode, approverId);
        return this.userService.getLoadingStatus(approverId);
    }
    /**
     * @override
     * Unassign the approver from the user.
     */
    unassign(userCode, approverId) {
        this.userService.unassignApprover(userCode, approverId);
        return this.userService.getLoadingStatus(approverId);
    }
}
UserApproverListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserApproverListService, deps: [{ token: i1.TableService }, { token: i2.B2BUserService }], target: i0.ɵɵFactoryTarget.Injectable });
UserApproverListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserApproverListService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserApproverListService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.TableService }, { type: i2.B2BUserService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1hcHByb3Zlci1saXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvdXNlci9hcHByb3ZlcnMvdXNlci1hcHByb3Zlci1saXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVEzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDeEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7Ozs7QUFLeEUsTUFBTSxPQUFPLHVCQUF3QixTQUFRLGNBQXVCO0lBSWxFLFlBQ1ksWUFBMEIsRUFDMUIsV0FBMkI7UUFFckMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBSFYsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsZ0JBQVcsR0FBWCxXQUFXLENBQWdCO1FBTDdCLGNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxjQUFjLENBQUM7UUFDakQsZ0JBQVcsR0FBRyxxQkFBcUIsQ0FBQyxVQUFVLENBQUM7SUFPekQsQ0FBQztJQUVTLElBQUksQ0FDWixVQUEyQixFQUMzQixJQUFZO1FBRVosT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FDSixRQUFnQixFQUNoQixVQUFrQjtRQUVsQixJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDdEQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRLENBQ04sUUFBZ0IsRUFDaEIsVUFBa0I7UUFFbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDeEQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7O29IQXhDVSx1QkFBdUI7d0hBQXZCLHVCQUF1QixjQUZ0QixNQUFNOzJGQUVQLHVCQUF1QjtrQkFIbkMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCMkJVc2VyLCBFbnRpdGllc01vZGVsLCBQYWdpbmF0aW9uTW9kZWwgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHtcbiAgQjJCVXNlclNlcnZpY2UsXG4gIE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXMsXG59IGZyb20gJ0BzcGFydGFjdXMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvcmUnO1xuaW1wb3J0IHsgVGFibGVTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9zdG9yZWZyb250JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFN1Ykxpc3RTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3N1Yi1saXN0L3N1Yi1saXN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uVGFibGVUeXBlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL29yZ2FuaXphdGlvbi5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBVc2VyQXBwcm92ZXJMaXN0U2VydmljZSBleHRlbmRzIFN1Ykxpc3RTZXJ2aWNlPEIyQlVzZXI+IHtcbiAgcHJvdGVjdGVkIHRhYmxlVHlwZSA9IE9yZ2FuaXphdGlvblRhYmxlVHlwZS5VU0VSX0FQUFJPVkVSUztcbiAgcHJvdGVjdGVkIF9kb21haW5UeXBlID0gT3JnYW5pemF0aW9uVGFibGVUeXBlLlVTRVJfR1JPVVA7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHRhYmxlU2VydmljZTogVGFibGVTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCB1c2VyU2VydmljZTogQjJCVXNlclNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIodGFibGVTZXJ2aWNlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBsb2FkKFxuICAgIHBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbCxcbiAgICBjb2RlOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxFbnRpdGllc01vZGVsPEIyQlVzZXI+PiB7XG4gICAgcmV0dXJuIHRoaXMudXNlclNlcnZpY2UuZ2V0QXBwcm92ZXJzKGNvZGUsIHBhZ2luYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBBc3NpZ24gYXBwcm92ZXIgdG8gdGhlIHVzZXIuXG4gICAqL1xuICBhc3NpZ24oXG4gICAgdXNlckNvZGU6IHN0cmluZyxcbiAgICBhcHByb3ZlcklkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxPcmdhbml6YXRpb25JdGVtU3RhdHVzPEIyQlVzZXI+PiB7XG4gICAgdGhpcy51c2VyU2VydmljZS5hc3NpZ25BcHByb3Zlcih1c2VyQ29kZSwgYXBwcm92ZXJJZCk7XG4gICAgcmV0dXJuIHRoaXMudXNlclNlcnZpY2UuZ2V0TG9hZGluZ1N0YXR1cyhhcHByb3ZlcklkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogVW5hc3NpZ24gdGhlIGFwcHJvdmVyIGZyb20gdGhlIHVzZXIuXG4gICAqL1xuICB1bmFzc2lnbihcbiAgICB1c2VyQ29kZTogc3RyaW5nLFxuICAgIGFwcHJvdmVySWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXM8QjJCVXNlcj4+IHtcbiAgICB0aGlzLnVzZXJTZXJ2aWNlLnVuYXNzaWduQXBwcm92ZXIodXNlckNvZGUsIGFwcHJvdmVySWQpO1xuICAgIHJldHVybiB0aGlzLnVzZXJTZXJ2aWNlLmdldExvYWRpbmdTdGF0dXMoYXBwcm92ZXJJZCk7XG4gIH1cbn1cbiJdfQ==