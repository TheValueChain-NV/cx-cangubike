import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewChild, } from '@angular/core';
import { switchMap, tap } from 'rxjs/operators';
import { ListComponent } from '../list/list.component';
import { MessageService } from '../message/services/message.service';
import * as i0 from "@angular/core";
import * as i1 from "../card/card.component";
import * as i2 from "@spartacus/storefront";
import * as i3 from "@angular/common";
import * as i4 from "@spartacus/core";
export class SubListComponent extends ListComponent {
    constructor() {
        super(...arguments);
        this.hostClass = '';
        this.previous = true;
        this.key = this.service.key();
        this.showHint = false;
        this.hasGhostData = false;
        this.listData$ = this.currentKey$.pipe(switchMap((key) => this.service.getData(key)), tap((data) => {
            this.hasGhostData = this.service.hasGhostData(data);
        }));
        this.dataStructure$ = this.service.getStructure();
    }
    set routerKey(key) {
        this.subKey$ = this.organizationItemService.getRouterParam(key);
    }
}
SubListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SubListComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
SubListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: SubListComponent, selector: "cx-org-sub-list", inputs: { previous: "previous", key: "key", showHint: "showHint", routerKey: "routerKey" }, host: { properties: { "class.ghost": "this.hasGhostData" }, classAttribute: "content-wrapper" }, viewQueries: [{ propertyName: "messageService", first: true, predicate: MessageService, descendants: true, read: MessageService }], usesInheritance: true, ngImport: i0, template: "<cx-org-card\n  [previous]=\"previous\"\n  [i18nRoot]=\"viewType\"\n  [showHint]=\"showHint\"\n  [cxFocus]=\"{ autofocus: true }\"\n>\n  <ng-content select=\"[actions]\" ngProjectAs=\"[actions]\"></ng-content>\n  <ng-content select=\"[main]\" ngProjectAs=\"[main]\"></ng-content>\n  <ng-content select=\"[info]\" ngProjectAs=\"[info]\"></ng-content>\n\n  <ng-container main *ngIf=\"dataStructure$ | async as structure\">\n    <ng-container *ngIf=\"listData$ | async as data\">\n      <section>\n        <cx-table\n          *ngIf=\"data.values?.length > 0; else emptyList\"\n          [structure]=\"structure\"\n          [data]=\"data.values\"\n          [i18nRoot]=\"domainType\"\n          [currentItem]=\"{ property: key, value: subKey$ | async }\"\n        >\n        </cx-table>\n      </section>\n\n      <div class=\"footer\" *ngIf=\"data.pagination?.totalPages > 1\">\n        <cx-pagination\n          [pagination]=\"data.pagination\"\n          (viewPageEvent)=\"browse(data.pagination, $event)\"\n        ></cx-pagination>\n      </div>\n    </ng-container>\n  </ng-container>\n</cx-org-card>\n\n<ng-template #emptyList>\n  <p class=\"is-empty\">{{ 'organization.messages.emptyList' | cxTranslate }}</p>\n</ng-template>\n", components: [{ type: i1.CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: i2.TableComponent, selector: "cx-table", inputs: ["structure", "data", "i18nRoot", "currentItem"], outputs: ["launch"] }, { type: i2.PaginationComponent, selector: "cx-pagination", inputs: ["pageRoute", "queryParam", "defaultPage", "pagination"], outputs: ["viewPageEvent"] }], directives: [{ type: i2.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe, "cxTranslate": i4.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SubListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-sub-list',
                    templateUrl: './sub-list.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                }]
        }], propDecorators: { messageService: [{
                type: ViewChild,
                args: [MessageService, { read: MessageService }]
            }], previous: [{
                type: Input
            }], key: [{
                type: Input
            }], showHint: [{
                type: Input
            }], routerKey: [{
                type: Input
            }], hasGhostData: [{
                type: HostBinding,
                args: ['class.ghost']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb21wb25lbnRzL3NoYXJlZC9zdWItbGlzdC9zdWItbGlzdC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvc2hhcmVkL3N1Yi1saXN0L3N1Yi1saXN0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBQ0wsU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBSXZCLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQzs7Ozs7O0FBUXJFLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxhQUFhO0lBTm5EOztRQU9FLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFLTixhQUFRLEdBQXFCLElBQUksQ0FBQztRQUVsQyxRQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUV6QixhQUFRLEdBQUksS0FBSyxDQUFDO1FBTUMsaUJBQVksR0FBRyxLQUFLLENBQUM7UUFJeEMsY0FBUyxHQUFtQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FDeEUsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUM3QyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNYLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUVPLG1CQUFjLEdBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7S0FDL0I7SUFqQkMsSUFBYSxTQUFTLENBQUMsR0FBVztRQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEUsQ0FBQzs7NkdBZFUsZ0JBQWdCO2lHQUFoQixnQkFBZ0Isb1NBR2hCLGNBQWMsMkJBQVUsY0FBYyxvREN2Qm5ELG10Q0FvQ0E7MkZEaEJhLGdCQUFnQjtrQkFONUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixXQUFXLEVBQUUsMkJBQTJCO29CQUN4QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFO2lCQUNuQzs4QkFLQyxjQUFjO3NCQURiLFNBQVM7dUJBQUMsY0FBYyxFQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTtnQkFHMUMsUUFBUTtzQkFBaEIsS0FBSztnQkFFRyxHQUFHO3NCQUFYLEtBQUs7Z0JBRUcsUUFBUTtzQkFBaEIsS0FBSztnQkFFTyxTQUFTO3NCQUFyQixLQUFLO2dCQUlzQixZQUFZO3NCQUF2QyxXQUFXO3VCQUFDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFbnRpdGllc01vZGVsIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IFRhYmxlU3RydWN0dXJlIH0gZnJvbSAnQHNwYXJ0YWN1cy9zdG9yZWZyb250JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTGlzdENvbXBvbmVudCB9IGZyb20gJy4uL2xpc3QvbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuLi9tZXNzYWdlL3NlcnZpY2VzL21lc3NhZ2Uuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LW9yZy1zdWItbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zdWItbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7IGNsYXNzOiAnY29udGVudC13cmFwcGVyJyB9LFxufSlcbmV4cG9ydCBjbGFzcyBTdWJMaXN0Q29tcG9uZW50IGV4dGVuZHMgTGlzdENvbXBvbmVudCB7XG4gIGhvc3RDbGFzcyA9ICcnO1xuXG4gIEBWaWV3Q2hpbGQoTWVzc2FnZVNlcnZpY2UsIHsgcmVhZDogTWVzc2FnZVNlcnZpY2UgfSlcbiAgbWVzc2FnZVNlcnZpY2U6IE1lc3NhZ2VTZXJ2aWNlO1xuXG4gIEBJbnB1dCgpIHByZXZpb3VzOiBib29sZWFuIHwgc3RyaW5nID0gdHJ1ZTtcblxuICBASW5wdXQoKSBrZXkgPSB0aGlzLnNlcnZpY2Uua2V5KCk7XG5cbiAgQElucHV0KCkgc2hvd0hpbnQ/ID0gZmFsc2U7XG5cbiAgQElucHV0KCkgc2V0IHJvdXRlcktleShrZXk6IHN0cmluZykge1xuICAgIHRoaXMuc3ViS2V5JCA9IHRoaXMub3JnYW5pemF0aW9uSXRlbVNlcnZpY2UuZ2V0Um91dGVyUGFyYW0oa2V5KTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZ2hvc3QnKSBoYXNHaG9zdERhdGEgPSBmYWxzZTtcblxuICBzdWJLZXkkOiBPYnNlcnZhYmxlPHN0cmluZz47XG5cbiAgcmVhZG9ubHkgbGlzdERhdGEkOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8YW55Pj4gPSB0aGlzLmN1cnJlbnRLZXkkLnBpcGUoXG4gICAgc3dpdGNoTWFwKChrZXkpID0+IHRoaXMuc2VydmljZS5nZXREYXRhKGtleSkpLFxuICAgIHRhcCgoZGF0YSkgPT4ge1xuICAgICAgdGhpcy5oYXNHaG9zdERhdGEgPSB0aGlzLnNlcnZpY2UuaGFzR2hvc3REYXRhKGRhdGEpO1xuICAgIH0pXG4gICk7XG5cbiAgcmVhZG9ubHkgZGF0YVN0cnVjdHVyZSQ6IE9ic2VydmFibGU8VGFibGVTdHJ1Y3R1cmU+ID1cbiAgICB0aGlzLnNlcnZpY2UuZ2V0U3RydWN0dXJlKCk7XG59XG4iLCI8Y3gtb3JnLWNhcmRcbiAgW3ByZXZpb3VzXT1cInByZXZpb3VzXCJcbiAgW2kxOG5Sb290XT1cInZpZXdUeXBlXCJcbiAgW3Nob3dIaW50XT1cInNob3dIaW50XCJcbiAgW2N4Rm9jdXNdPVwieyBhdXRvZm9jdXM6IHRydWUgfVwiXG4+XG4gIDxuZy1jb250ZW50IHNlbGVjdD1cIlthY3Rpb25zXVwiIG5nUHJvamVjdEFzPVwiW2FjdGlvbnNdXCI+PC9uZy1jb250ZW50PlxuICA8bmctY29udGVudCBzZWxlY3Q9XCJbbWFpbl1cIiBuZ1Byb2plY3RBcz1cIlttYWluXVwiPjwvbmctY29udGVudD5cbiAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW2luZm9dXCIgbmdQcm9qZWN0QXM9XCJbaW5mb11cIj48L25nLWNvbnRlbnQ+XG5cbiAgPG5nLWNvbnRhaW5lciBtYWluICpuZ0lmPVwiZGF0YVN0cnVjdHVyZSQgfCBhc3luYyBhcyBzdHJ1Y3R1cmVcIj5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwibGlzdERhdGEkIHwgYXN5bmMgYXMgZGF0YVwiPlxuICAgICAgPHNlY3Rpb24+XG4gICAgICAgIDxjeC10YWJsZVxuICAgICAgICAgICpuZ0lmPVwiZGF0YS52YWx1ZXM/Lmxlbmd0aCA+IDA7IGVsc2UgZW1wdHlMaXN0XCJcbiAgICAgICAgICBbc3RydWN0dXJlXT1cInN0cnVjdHVyZVwiXG4gICAgICAgICAgW2RhdGFdPVwiZGF0YS52YWx1ZXNcIlxuICAgICAgICAgIFtpMThuUm9vdF09XCJkb21haW5UeXBlXCJcbiAgICAgICAgICBbY3VycmVudEl0ZW1dPVwieyBwcm9wZXJ0eToga2V5LCB2YWx1ZTogc3ViS2V5JCB8IGFzeW5jIH1cIlxuICAgICAgICA+XG4gICAgICAgIDwvY3gtdGFibGU+XG4gICAgICA8L3NlY3Rpb24+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb290ZXJcIiAqbmdJZj1cImRhdGEucGFnaW5hdGlvbj8udG90YWxQYWdlcyA+IDFcIj5cbiAgICAgICAgPGN4LXBhZ2luYXRpb25cbiAgICAgICAgICBbcGFnaW5hdGlvbl09XCJkYXRhLnBhZ2luYXRpb25cIlxuICAgICAgICAgICh2aWV3UGFnZUV2ZW50KT1cImJyb3dzZShkYXRhLnBhZ2luYXRpb24sICRldmVudClcIlxuICAgICAgICA+PC9jeC1wYWdpbmF0aW9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9uZy1jb250YWluZXI+XG4gIDwvbmctY29udGFpbmVyPlxuPC9jeC1vcmctY2FyZD5cblxuPG5nLXRlbXBsYXRlICNlbXB0eUxpc3Q+XG4gIDxwIGNsYXNzPVwiaXMtZW1wdHlcIj57eyAnb3JnYW5pemF0aW9uLm1lc3NhZ2VzLmVtcHR5TGlzdCcgfCBjeFRyYW5zbGF0ZSB9fTwvcD5cbjwvbmctdGVtcGxhdGU+XG4iXX0=