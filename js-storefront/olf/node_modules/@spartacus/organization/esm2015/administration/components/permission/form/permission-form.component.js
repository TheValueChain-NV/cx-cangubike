import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Period, } from '@spartacus/organization/administration/core';
import { tap } from 'rxjs/operators';
import { CurrentItemService } from '../../shared/current-item.service';
import { ItemService } from '../../shared/item.service';
import { CurrentPermissionService } from '../services/current-permission.service';
import { PermissionItemService } from '../services/permission-item.service';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/item.service";
import * as i2 from "@spartacus/organization/administration/core";
import * as i3 from "@spartacus/core";
import * as i4 from "../../shared/form/form.component";
import * as i5 from "@spartacus/storefront";
import * as i6 from "@ng-select/ng-select";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
export class PermissionFormComponent {
    constructor(itemService, unitService, currencyService, permissionService) {
        this.itemService = itemService;
        this.unitService = unitService;
        this.currencyService = currencyService;
        this.permissionService = permissionService;
        this.form = this.itemService.getForm();
        this.units$ = this.unitService.getActiveUnitList().pipe(tap((units) => {
            var _a, _b, _c;
            if (units.length === 1) {
                (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('orgUnit.uid')) === null || _b === void 0 ? void 0 : _b.setValue((_c = units[0]) === null || _c === void 0 ? void 0 : _c.id);
            }
        }));
        this.currencies$ = this.currencyService.getAll().pipe(tap((currency) => {
            var _a, _b, _c;
            if (currency.length === 1) {
                (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('currency.isocode')) === null || _b === void 0 ? void 0 : _b.setValue((_c = currency[0]) === null || _c === void 0 ? void 0 : _c.isocode);
            }
        }));
        this.types$ = this.permissionService.getTypes();
        this.periods = Object.keys(Period);
    }
    ngOnInit() {
        this.unitService.loadList();
    }
}
PermissionFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionFormComponent, deps: [{ token: i1.ItemService }, { token: i2.OrgUnitService }, { token: i3.CurrencyService }, { token: i2.PermissionService }], target: i0.ɵɵFactoryTarget.Component });
PermissionFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: PermissionFormComponent, selector: "cx-org-permission-form", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: PermissionItemService,
        },
        {
            provide: CurrentItemService,
            useExisting: CurrentPermissionService,
        },
    ], ngImport: i0, template: "<cx-org-form i18nRoot=\"orgPurchaseLimit\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgPurchaseLimit.code' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgPurchaseLimit.code' | cxTranslate }}\"\n        formControlName=\"code\"\n      />\n      <cx-form-errors [control]=\"form.get('code')\"></cx-form-errors>\n    </label>\n\n    <label\n      *ngIf=\"(types$ | async)?.length\"\n      aria-required=\"true\"\n      [formGroup]=\"form.get('orderApprovalPermissionType')\"\n    >\n      <span class=\"label-content required\">{{\n        'orgPurchaseLimit.orderApprovalPermissionType' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"code\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"types$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        [readonly]=\"form.disabled\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"\n          'orgPurchaseLimit.orderApprovalPermissionType' | cxTranslate\n        \"\n      >\n      </ng-select>\n      <cx-form-errors\n        [control]=\"form.get('orderApprovalPermissionType.code')\"\n      ></cx-form-errors>\n    </label>\n\n    <label aria-required=\"true\" *ngIf=\"form.get('periodRange')\">\n      <span class=\"label-content required\">{{\n        'orgPurchaseLimit.periodRange' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"periodRange\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"periods\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgPurchaseLimit.periodRange' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('periodRange')\"></cx-form-errors>\n    </label>\n\n    <label\n      aria-required=\"true\"\n      *ngIf=\"form.get('currency')\"\n      [formGroup]=\"form.get('currency')\"\n    >\n      <span class=\"label-content required\">{{\n        'orgPurchaseLimit.currency' | cxTranslate\n      }}</span>\n      <ng-select\n        *ngIf=\"currencies$ | async as currencies\"\n        formControlName=\"isocode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"currencies\"\n        bindLabel=\"name\"\n        bindValue=\"isocode\"\n        [placeholder]=\"'orgPurchaseLimit.currency' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('currency.isocode')\"></cx-form-errors>\n    </label>\n\n    <label *ngIf=\"form.get('threshold')\">\n      <span class=\"label-content required\">{{\n        'orgPurchaseLimit.threshold' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"number\"\n        required\n        placeholder=\"{{ 'orgPurchaseLimit.threshold' | cxTranslate }}\"\n        formControlName=\"threshold\"\n      />\n      <cx-form-errors [control]=\"form.get('threshold')\"></cx-form-errors>\n    </label>\n\n    <label aria-required=\"true\" [formGroup]=\"form.get('orgUnit')\">\n      <span class=\"label-content required\">{{\n        'orgPurchaseLimit.orgUnit' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"units$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        [readonly]=\"form.get('orgUnit').disabled\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgPurchaseLimit.orgUnit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('orgUnit.uid')\"></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n", components: [{ type: i4.FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { type: i5.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { type: i6.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }], pipes: { "cxTranslate": i3.TranslatePipe, "async": i7.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-permission-form',
                    templateUrl: './permission-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                    providers: [
                        {
                            provide: ItemService,
                            useExisting: PermissionItemService,
                        },
                        {
                            provide: CurrentItemService,
                            useExisting: CurrentPermissionService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.OrgUnitService }, { type: i3.CurrencyService }, { type: i2.PermissionService }]; } });
//# sourceMappingURL=data:application/json;base64,