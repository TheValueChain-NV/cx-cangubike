import { ChangeDetectionStrategy, Component } from '@angular/core';
import { LoadStatus } from '@spartacus/organization/administration/core';
import { filter, first, map, switchMap, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../services/user-item.service";
import * as i2 from "./user-change-password-form.service";
import * as i3 from "../../shared/message/services/message.service";
import * as i4 from "../../shared/card/card.component";
import * as i5 from "@spartacus/storefront";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
import * as i8 from "@angular/router";
import * as i9 from "@spartacus/core";
export class UserChangePasswordFormComponent {
    constructor(itemService, formService, messageService) {
        this.itemService = itemService;
        this.formService = formService;
        this.messageService = messageService;
        this.form$ = this.itemService.current$.pipe(map((item) => this.formService.getForm(item)));
    }
    save(form) {
        this.itemService.current$
            .pipe(first(), switchMap((item) => this.itemService.save(form, form.value.customerId).pipe(take(1), filter((data) => data.status === LoadStatus.SUCCESS), map((data) => (Object.assign(Object.assign({}, item), data.item))))))
            .subscribe((data) => {
            this.notify(data);
            this.itemService.launchDetails(data);
        });
    }
    notify(item) {
        this.messageService.add({
            message: {
                key: `orgUser.messages.updatePassword`,
                params: {
                    item,
                },
            },
        });
    }
}
UserChangePasswordFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserChangePasswordFormComponent, deps: [{ token: i1.UserItemService }, { token: i2.UserChangePasswordFormService }, { token: i3.MessageService }], target: i0.ɵɵFactoryTarget.Component });
UserChangePasswordFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserChangePasswordFormComponent, selector: "cx-org-user-change-password-form", host: { classAttribute: "content-wrapper" }, ngImport: i0, template: "<form *ngIf=\"form$ | async as form\" [formGroup]=\"form\" (submit)=\"save(form)\">\n  <cx-org-card\n    [previous]=\"false\"\n    i18nRoot=\"orgUser.password\"\n    [cxFocus]=\"{ autofocus: 'input', refreshFocus: form }\"\n  >\n    <button actions class=\"button primary\">\n      {{ 'organization.save' | cxTranslate }}\n    </button>\n    <button actions class=\"link\" routerLink=\"../\" type=\"button\">\n      {{ 'organization.cancel' | cxTranslate }}\n    </button>\n\n    <section main class=\"details\">\n      <label class=\"full-width\">\n        <span class=\"label-content\">{{\n          'orgUser.password.newPassword' | cxTranslate\n        }}</span>\n        <input\n          aria-required=\"true\"\n          class=\"form-control\"\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"{{ 'orgUser.password.newPassword' | cxTranslate }}\"\n          formControlName=\"password\"\n        />\n        <cx-form-errors [control]=\"form.get('password')\"></cx-form-errors>\n      </label>\n      <label>\n        <span class=\"label-content\">{{\n          'orgUser.password.confirmPassword' | cxTranslate\n        }}</span>\n        <input\n          aria-required=\"true\"\n          class=\"form-control\"\n          type=\"password\"\n          name=\"confirmPassword\"\n          placeholder=\"{{ 'orgUser.password.confirmPassword' | cxTranslate }}\"\n          formControlName=\"confirmPassword\"\n        />\n        <cx-form-errors\n          [control]=\"form.get('confirmPassword')\"\n        ></cx-form-errors>\n      </label>\n    </section>\n  </cx-org-card>\n</form>\n", components: [{ type: i4.CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: i5.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i8.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["routerLink", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i6.AsyncPipe, "cxTranslate": i9.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserChangePasswordFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-user-change-password-form',
                    templateUrl: './user-change-password-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                }]
        }], ctorParameters: function () { return [{ type: i1.UserItemService }, { type: i2.UserChangePasswordFormService }, { type: i3.MessageService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1jaGFuZ2UtcGFzc3dvcmQtZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvdXNlci9jaGFuZ2UtcGFzc3dvcmQtZm9ybS91c2VyLWNoYW5nZS1wYXNzd29yZC1mb3JtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91c2VyL2NoYW5nZS1wYXNzd29yZC1mb3JtL3VzZXItY2hhbmdlLXBhc3N3b3JkLWZvcm0uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUduRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFFekUsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7Ozs7QUFXckUsTUFBTSxPQUFPLCtCQUErQjtJQUsxQyxZQUNZLFdBQTRCLEVBQzVCLFdBQTBDLEVBQzFDLGNBQThCO1FBRjlCLGdCQUFXLEdBQVgsV0FBVyxDQUFpQjtRQUM1QixnQkFBVyxHQUFYLFdBQVcsQ0FBK0I7UUFDMUMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBUDFDLFVBQUssR0FBMEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUMzRCxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzlDLENBQUM7SUFNQyxDQUFDO0lBRUosSUFBSSxDQUFDLElBQWU7UUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRO2FBQ3RCLElBQUksQ0FDSCxLQUFLLEVBQUUsRUFDUCxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNqQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUcsSUFBSSxDQUFDLEtBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQy9ELElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUNwRCxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGlDQUNULElBQUksR0FDSixJQUFJLENBQUMsSUFBSSxFQUNaLENBQUMsQ0FDSixDQUNGLENBQ0Y7YUFDQSxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVTLE1BQU0sQ0FBQyxJQUFVO1FBQ3pCLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDO1lBQ3RCLE9BQU8sRUFBRTtnQkFDUCxHQUFHLEVBQUUsaUNBQWlDO2dCQUN0QyxNQUFNLEVBQUU7b0JBQ04sSUFBSTtpQkFDTDthQUNGO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7NEhBekNVLCtCQUErQjtnSEFBL0IsK0JBQStCLHFIQ2hCNUMsMGxEQStDQTsyRkQvQmEsK0JBQStCO2tCQU4zQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxrQ0FBa0M7b0JBQzVDLFdBQVcsRUFBRSw0Q0FBNEM7b0JBQ3pELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUU7aUJBQ25DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBMb2FkU3RhdHVzIH0gZnJvbSAnQHNwYXJ0YWN1cy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIGZpcnN0LCBtYXAsIHN3aXRjaE1hcCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL21lc3NhZ2Uvc2VydmljZXMvbWVzc2FnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJJdGVtU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3VzZXItaXRlbS5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJDaGFuZ2VQYXNzd29yZEZvcm1TZXJ2aWNlIH0gZnJvbSAnLi91c2VyLWNoYW5nZS1wYXNzd29yZC1mb3JtLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1vcmctdXNlci1jaGFuZ2UtcGFzc3dvcmQtZm9ybScsXG4gIHRlbXBsYXRlVXJsOiAnLi91c2VyLWNoYW5nZS1wYXNzd29yZC1mb3JtLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHsgY2xhc3M6ICdjb250ZW50LXdyYXBwZXInIH0sXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJDaGFuZ2VQYXNzd29yZEZvcm1Db21wb25lbnQge1xuICBmb3JtJDogT2JzZXJ2YWJsZTxGb3JtR3JvdXA+ID0gdGhpcy5pdGVtU2VydmljZS5jdXJyZW50JC5waXBlKFxuICAgIG1hcCgoaXRlbSkgPT4gdGhpcy5mb3JtU2VydmljZS5nZXRGb3JtKGl0ZW0pKVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBpdGVtU2VydmljZTogVXNlckl0ZW1TZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBmb3JtU2VydmljZTogVXNlckNoYW5nZVBhc3N3b3JkRm9ybVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIG1lc3NhZ2VTZXJ2aWNlOiBNZXNzYWdlU2VydmljZVxuICApIHt9XG5cbiAgc2F2ZShmb3JtOiBGb3JtR3JvdXApOiB2b2lkIHtcbiAgICB0aGlzLml0ZW1TZXJ2aWNlLmN1cnJlbnQkXG4gICAgICAucGlwZShcbiAgICAgICAgZmlyc3QoKSxcbiAgICAgICAgc3dpdGNoTWFwKChpdGVtKSA9PlxuICAgICAgICAgIHRoaXMuaXRlbVNlcnZpY2Uuc2F2ZShmb3JtLCAoZm9ybS52YWx1ZSBhcyBVc2VyKS5jdXN0b21lcklkKS5waXBlKFxuICAgICAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgICAgIGZpbHRlcigoZGF0YSkgPT4gZGF0YS5zdGF0dXMgPT09IExvYWRTdGF0dXMuU1VDQ0VTUyksXG4gICAgICAgICAgICBtYXAoKGRhdGEpID0+ICh7XG4gICAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICAgIC4uLmRhdGEuaXRlbSxcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xuICAgICAgICB0aGlzLm5vdGlmeShkYXRhKTtcbiAgICAgICAgdGhpcy5pdGVtU2VydmljZS5sYXVuY2hEZXRhaWxzKGRhdGEpO1xuICAgICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgbm90aWZ5KGl0ZW06IFVzZXIpIHtcbiAgICB0aGlzLm1lc3NhZ2VTZXJ2aWNlLmFkZCh7XG4gICAgICBtZXNzYWdlOiB7XG4gICAgICAgIGtleTogYG9yZ1VzZXIubWVzc2FnZXMudXBkYXRlUGFzc3dvcmRgLFxuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBpdGVtLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuIiwiPGZvcm0gKm5nSWY9XCJmb3JtJCB8IGFzeW5jIGFzIGZvcm1cIiBbZm9ybUdyb3VwXT1cImZvcm1cIiAoc3VibWl0KT1cInNhdmUoZm9ybSlcIj5cbiAgPGN4LW9yZy1jYXJkXG4gICAgW3ByZXZpb3VzXT1cImZhbHNlXCJcbiAgICBpMThuUm9vdD1cIm9yZ1VzZXIucGFzc3dvcmRcIlxuICAgIFtjeEZvY3VzXT1cInsgYXV0b2ZvY3VzOiAnaW5wdXQnLCByZWZyZXNoRm9jdXM6IGZvcm0gfVwiXG4gID5cbiAgICA8YnV0dG9uIGFjdGlvbnMgY2xhc3M9XCJidXR0b24gcHJpbWFyeVwiPlxuICAgICAge3sgJ29yZ2FuaXphdGlvbi5zYXZlJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgPC9idXR0b24+XG4gICAgPGJ1dHRvbiBhY3Rpb25zIGNsYXNzPVwibGlua1wiIHJvdXRlckxpbms9XCIuLi9cIiB0eXBlPVwiYnV0dG9uXCI+XG4gICAgICB7eyAnb3JnYW5pemF0aW9uLmNhbmNlbCcgfCBjeFRyYW5zbGF0ZSB9fVxuICAgIDwvYnV0dG9uPlxuXG4gICAgPHNlY3Rpb24gbWFpbiBjbGFzcz1cImRldGFpbHNcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImZ1bGwtd2lkdGhcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbC1jb250ZW50XCI+e3tcbiAgICAgICAgICAnb3JnVXNlci5wYXNzd29yZC5uZXdQYXNzd29yZCcgfCBjeFRyYW5zbGF0ZVxuICAgICAgICB9fTwvc3Bhbj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgYXJpYS1yZXF1aXJlZD1cInRydWVcIlxuICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgIG5hbWU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJ7eyAnb3JnVXNlci5wYXNzd29yZC5uZXdQYXNzd29yZCcgfCBjeFRyYW5zbGF0ZSB9fVwiXG4gICAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwicGFzc3dvcmRcIlxuICAgICAgICAvPlxuICAgICAgICA8Y3gtZm9ybS1lcnJvcnMgW2NvbnRyb2xdPVwiZm9ybS5nZXQoJ3Bhc3N3b3JkJylcIj48L2N4LWZvcm0tZXJyb3JzPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxsYWJlbD5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbC1jb250ZW50XCI+e3tcbiAgICAgICAgICAnb3JnVXNlci5wYXNzd29yZC5jb25maXJtUGFzc3dvcmQnIHwgY3hUcmFuc2xhdGVcbiAgICAgICAgfX08L3NwYW4+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIGFyaWEtcmVxdWlyZWQ9XCJ0cnVlXCJcbiAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICBuYW1lPVwiY29uZmlybVBhc3N3b3JkXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cInt7ICdvcmdVc2VyLnBhc3N3b3JkLmNvbmZpcm1QYXNzd29yZCcgfCBjeFRyYW5zbGF0ZSB9fVwiXG4gICAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwiY29uZmlybVBhc3N3b3JkXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGN4LWZvcm0tZXJyb3JzXG4gICAgICAgICAgW2NvbnRyb2xdPVwiZm9ybS5nZXQoJ2NvbmZpcm1QYXNzd29yZCcpXCJcbiAgICAgICAgPjwvY3gtZm9ybS1lcnJvcnM+XG4gICAgICA8L2xhYmVsPlxuICAgIDwvc2VjdGlvbj5cbiAgPC9jeC1vcmctY2FyZD5cbjwvZm9ybT5cbiJdfQ==