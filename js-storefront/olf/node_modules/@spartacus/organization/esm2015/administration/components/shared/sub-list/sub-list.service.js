import { Injectable } from '@angular/core';
import { TableLayout, } from '@spartacus/storefront';
import { ListService } from '../list/list.service';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
export class SubListService extends ListService {
    constructor() {
        super(...arguments);
        /**
         * The default table structure for sub lists is only showing tables with vertical layout.
         */
        this.defaultTableStructure = {
            options: { layout: TableLayout.VERTICAL },
        };
        /**
         * @override This sub list will show 3 items.
         */
        this.ghostData = { values: new Array(3) };
    }
    // TODO: abstract
    assign(_key, ..._args) {
        return of();
    }
    unassign(_key, ..._args) {
        return of();
    }
    /**
     * As we can't filter with the backend API, we do this client side.
     */
    filterSelected(list) {
        if (!list) {
            return list;
        }
        const { pagination, sorts, values } = list;
        return {
            pagination,
            sorts,
            values: values.filter((value) => value.selected),
        };
    }
}
SubListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SubListService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
SubListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SubListService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SubListService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLWxpc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy9zaGFyZWQvc3ViLWxpc3Qvc3ViLWxpc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFFTCxXQUFXLEdBQ1osTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbkQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFJdEMsTUFBTSxPQUFnQixjQUVwQixTQUFRLFdBQWM7SUFIeEI7O1FBSUU7O1dBRUc7UUFDTywwQkFBcUIsR0FBaUM7WUFDOUQsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxRQUFRLEVBQUU7U0FDMUMsQ0FBQztRQUVGOztXQUVHO1FBQ08sY0FBUyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFzQixDQUFDO0tBOEJwRTtJQTVCQyxpQkFBaUI7SUFDakIsTUFBTSxDQUFFLElBQVksRUFBRSxHQUFHLEtBQVU7UUFDakMsT0FBTyxFQUFFLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxRQUFRLENBQ04sSUFBWSxFQUNaLEdBQUcsS0FBVTtRQUViLE9BQU8sRUFBRSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDTyxjQUFjLENBQUMsSUFBc0I7UUFDN0MsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFM0MsT0FBTztZQUNMLFVBQVU7WUFDVixLQUFLO1lBQ0wsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7U0FDakQsQ0FBQztJQUNKLENBQUM7OzJHQTFDbUIsY0FBYzsrR0FBZCxjQUFjOzJGQUFkLGNBQWM7a0JBRG5DLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFbnRpdGllc01vZGVsIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7XG4gIFJlc3BvbnNpdmVUYWJsZUNvbmZpZ3VyYXRpb24sXG4gIFRhYmxlTGF5b3V0LFxufSBmcm9tICdAc3BhcnRhY3VzL3N0b3JlZnJvbnQnO1xuaW1wb3J0IHsgTGlzdFNlcnZpY2UgfSBmcm9tICcuLi9saXN0L2xpc3Quc2VydmljZSc7XG5pbXBvcnQgeyBCYXNlSXRlbSB9IGZyb20gJy4uL29yZ2FuaXphdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uSXRlbVN0YXR1cyB9IGZyb20gJ0BzcGFydGFjdXMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3ViTGlzdFNlcnZpY2U8XG4gIFQgZXh0ZW5kcyBCYXNlSXRlbVxuPiBleHRlbmRzIExpc3RTZXJ2aWNlPFQ+IHtcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHRhYmxlIHN0cnVjdHVyZSBmb3Igc3ViIGxpc3RzIGlzIG9ubHkgc2hvd2luZyB0YWJsZXMgd2l0aCB2ZXJ0aWNhbCBsYXlvdXQuXG4gICAqL1xuICBwcm90ZWN0ZWQgZGVmYXVsdFRhYmxlU3RydWN0dXJlOiBSZXNwb25zaXZlVGFibGVDb25maWd1cmF0aW9uID0ge1xuICAgIG9wdGlvbnM6IHsgbGF5b3V0OiBUYWJsZUxheW91dC5WRVJUSUNBTCB9LFxuICB9O1xuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGUgVGhpcyBzdWIgbGlzdCB3aWxsIHNob3cgMyBpdGVtcy5cbiAgICovXG4gIHByb3RlY3RlZCBnaG9zdERhdGEgPSB7IHZhbHVlczogbmV3IEFycmF5KDMpIH0gYXMgRW50aXRpZXNNb2RlbDxUPjtcblxuICAvLyBUT0RPOiBhYnN0cmFjdFxuICBhc3NpZ24/KF9rZXk6IHN0cmluZywgLi4uX2FyZ3M6IGFueSk6IE9ic2VydmFibGU8T3JnYW5pemF0aW9uSXRlbVN0YXR1czxUPj4ge1xuICAgIHJldHVybiBvZigpO1xuICB9XG5cbiAgdW5hc3NpZ24/KFxuICAgIF9rZXk6IHN0cmluZyxcbiAgICAuLi5fYXJnczogYW55XG4gICk6IE9ic2VydmFibGU8T3JnYW5pemF0aW9uSXRlbVN0YXR1czxUPj4ge1xuICAgIHJldHVybiBvZigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFzIHdlIGNhbid0IGZpbHRlciB3aXRoIHRoZSBiYWNrZW5kIEFQSSwgd2UgZG8gdGhpcyBjbGllbnQgc2lkZS5cbiAgICovXG4gIHByb3RlY3RlZCBmaWx0ZXJTZWxlY3RlZChsaXN0OiBFbnRpdGllc01vZGVsPFQ+KTogRW50aXRpZXNNb2RlbDxUPiB7XG4gICAgaWYgKCFsaXN0KSB7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICBjb25zdCB7IHBhZ2luYXRpb24sIHNvcnRzLCB2YWx1ZXMgfSA9IGxpc3Q7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGFnaW5hdGlvbixcbiAgICAgIHNvcnRzLFxuICAgICAgdmFsdWVzOiB2YWx1ZXMuZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUuc2VsZWN0ZWQpLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==