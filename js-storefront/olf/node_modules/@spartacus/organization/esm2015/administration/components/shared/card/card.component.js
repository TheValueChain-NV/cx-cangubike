import { ChangeDetectionStrategy, Component, Input, ViewChild, } from '@angular/core';
import { ViewComponent } from '@spartacus/storefront';
import { tap } from 'rxjs/operators';
import { MessageService } from '../message/services/message.service';
import { ICON_TYPE } from '@spartacus/storefront';
import * as i0 from "@angular/core";
import * as i1 from "../item.service";
import * as i2 from "../message/services/message.service";
import * as i3 from "@spartacus/storefront";
import * as i4 from "../message/message.component";
import * as i5 from "@angular/common";
import * as i6 from "@angular/router";
import * as i7 from "@spartacus/core";
export class CardComponent {
    constructor(itemService, messageService) {
        this.itemService = itemService;
        this.messageService = messageService;
        this.previous = true;
        this.showHint = false;
        this.iconTypes = ICON_TYPE;
        this.item$ = this.itemService.current$.pipe(tap((item) => this.refreshMessages(item)));
    }
    /**
     * The views are router based, which means if we close a view, the router outlet is
     * cleaned immediately. To prevent this, we're closing the view manually, before
     * navigating back.
     */
    closeView(event) {
        event.stopPropagation();
        this.view.toggle(true);
        setTimeout(() => {
            var _a;
            (_a = event.target) === null || _a === void 0 ? void 0 : _a.parentElement.click();
        }, 500);
        return false;
    }
    get previousLabel() {
        return this.previous;
    }
    refreshMessages(item) {
        var _a, _b;
        if (this.itemKey !== undefined &&
            (item === null || item === void 0 ? void 0 : item.code) !== this.itemKey &&
            (item === null || item === void 0 ? void 0 : item.uid) !== this.itemKey &&
            (item === null || item === void 0 ? void 0 : item.customerId) !== this.itemKey) {
            this.messageService.clear();
        }
        this.itemKey = (_b = (_a = item === null || item === void 0 ? void 0 : item.code) !== null && _a !== void 0 ? _a : item === null || item === void 0 ? void 0 : item.uid) !== null && _b !== void 0 ? _b : item === null || item === void 0 ? void 0 : item.customerId;
    }
}
CardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CardComponent, deps: [{ token: i1.ItemService }, { token: i2.MessageService }], target: i0.ɵɵFactoryTarget.Component });
CardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CardComponent, selector: "cx-org-card", inputs: { i18nRoot: "i18nRoot", previous: "previous", subtitle: "subtitle", showHint: "showHint" }, host: { classAttribute: "content-wrapper" }, providers: [MessageService], viewQueries: [{ propertyName: "view", first: true, predicate: ViewComponent, descendants: true, read: ViewComponent }], ngImport: i0, template: "<cx-view class=\"card\">\n  <div class=\"header\">\n    <div class=\"title-bar\">\n      <div class=\"title\">\n        <h3>\n          {{ i18nRoot + '.title' | cxTranslate: { item: item$ | async } }}\n          <button\n            *ngIf=\"showHint\"\n            [cxPopover]=\"detailHint\"\n            [cxPopoverOptions]=\"{\n              placement: 'auto',\n              class: 'hint-popover',\n              appendToBody: true,\n              displayCloseButton: true\n            }\"\n          >\n            <cx-icon [type]=\"iconTypes.INFO\"> </cx-icon>\n          </button>\n        </h3>\n        <h4>\n          {{\n            subtitle ||\n              (i18nRoot + '.subtitle' | cxTranslate: { item: item$ | async })\n          }}\n        </h4>\n      </div>\n      <div class=\"actions\">\n        <ng-content select=\"[actions]\"></ng-content>\n      </div>\n    </div>\n    <a *ngIf=\"!!previous\" class=\"link close\" routerLink=\"../\">\n      <cx-icon\n        *ngIf=\"previous === true; else prevLabel\"\n        type=\"CLOSE\"\n        (click)=\"closeView($event)\"\n      ></cx-icon>\n      <ng-template #prevLabel>{{ previousLabel | cxTranslate }}</ng-template>\n    </a>\n  </div>\n\n  <div class=\"main\">\n    <cx-org-message></cx-org-message>\n    <ng-content select=\"[info]\"></ng-content>\n    <ng-content select=\"[main]\"></ng-content>\n  </div>\n</cx-view>\n\n<router-outlet></router-outlet>\n\n<ng-template #detailHint>\n  <p>\n    {{ i18nRoot + '.hint' | cxTranslate }}\n  </p>\n</ng-template>\n", components: [{ type: i3.ViewComponent, selector: "cx-view", inputs: ["position", "hidden"], outputs: ["hiddenChange"] }, { type: i3.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { type: i4.MessageComponent, selector: "cx-org-message" }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.PopoverDirective, selector: "[cxPopover]", inputs: ["cxPopover", "cxPopoverOptions"], outputs: ["openPopover", "closePopover"] }, { type: i6.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i6.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], pipes: { "cxTranslate": i7.TranslatePipe, "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-card',
                    templateUrl: './card.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                    providers: [MessageService],
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.MessageService }]; }, propDecorators: { i18nRoot: [{
                type: Input
            }], previous: [{
                type: Input
            }], subtitle: [{
                type: Input
            }], showHint: [{
                type: Input
            }], view: [{
                type: ViewChild,
                args: [ViewComponent, { read: ViewComponent }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvc2hhcmVkL2NhcmQvY2FyZC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvc2hhcmVkL2NhcmQvY2FyZC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxLQUFLLEVBQ0wsU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV0RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRXJFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7Ozs7O0FBU2xELE1BQU0sT0FBTyxhQUFhO0lBZ0J4QixZQUNZLFdBQTJCLEVBQzNCLGNBQThCO1FBRDlCLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtRQUMzQixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFoQmpDLGFBQVEsR0FBcUIsSUFBSSxDQUFDO1FBRWxDLGFBQVEsR0FBSSxLQUFLLENBQUM7UUFJM0IsY0FBUyxHQUFHLFNBQVMsQ0FBQztRQUV0QixVQUFLLEdBQWtCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDbkQsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzFDLENBQUM7SUFPQyxDQUFDO0lBRUo7Ozs7T0FJRztJQUNILFNBQVMsQ0FBQyxLQUFpQjtRQUN6QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkIsVUFBVSxDQUFDLEdBQUcsRUFBRTs7WUFDZCxNQUFDLEtBQUssQ0FBQyxNQUFzQiwwQ0FBRSxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkQsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRVIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsUUFBa0IsQ0FBQztJQUNqQyxDQUFDO0lBRVMsZUFBZSxDQUFDLElBQU87O1FBQy9CLElBQ0UsSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTO1lBQzFCLENBQUEsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLElBQUksTUFBSyxJQUFJLENBQUMsT0FBTztZQUMzQixDQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxHQUFHLE1BQUssSUFBSSxDQUFDLE9BQU87WUFDMUIsQ0FBQSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsVUFBVSxNQUFLLElBQUksQ0FBQyxPQUFPLEVBQ2pDO1lBQ0EsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM3QjtRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBQSxNQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxJQUFJLG1DQUFJLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxHQUFHLG1DQUFJLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxVQUFVLENBQUM7SUFDN0QsQ0FBQzs7MEdBbkRVLGFBQWE7OEZBQWIsYUFBYSx1TEFGYixDQUFDLGNBQWMsQ0FBQyxnRUFnQmhCLGFBQWEsMkJBQVUsYUFBYSw2QkNuQ2pELGdnREFzREE7MkZEakNhLGFBQWE7a0JBUHpCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFdBQVcsRUFBRSx1QkFBdUI7b0JBQ3BDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUU7b0JBQ2xDLFNBQVMsRUFBRSxDQUFDLGNBQWMsQ0FBQztpQkFDNUI7K0hBRVUsUUFBUTtzQkFBaEIsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFVNkMsSUFBSTtzQkFBdEQsU0FBUzt1QkFBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWaWV3Q29tcG9uZW50IH0gZnJvbSAnQHNwYXJ0YWN1cy9zdG9yZWZyb250JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEl0ZW1TZXJ2aWNlIH0gZnJvbSAnLi4vaXRlbS5zZXJ2aWNlJztcbmltcG9ydCB7IE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vbWVzc2FnZS9zZXJ2aWNlcy9tZXNzYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmFzZUl0ZW0gfSBmcm9tICcuLi9vcmdhbml6YXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgSUNPTl9UWVBFIH0gZnJvbSAnQHNwYXJ0YWN1cy9zdG9yZWZyb250JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtb3JnLWNhcmQnLFxuICB0ZW1wbGF0ZVVybDogJy4vY2FyZC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7IGNsYXNzOiAnY29udGVudC13cmFwcGVyJyB9LFxuICBwcm92aWRlcnM6IFtNZXNzYWdlU2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIENhcmRDb21wb25lbnQ8VCBleHRlbmRzIEJhc2VJdGVtPiB7XG4gIEBJbnB1dCgpIGkxOG5Sb290OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHByZXZpb3VzOiBib29sZWFuIHwgc3RyaW5nID0gdHJ1ZTtcbiAgQElucHV0KCkgc3VidGl0bGU/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNob3dIaW50PyA9IGZhbHNlO1xuXG4gIHByb3RlY3RlZCBpdGVtS2V5O1xuXG4gIGljb25UeXBlcyA9IElDT05fVFlQRTtcblxuICBpdGVtJDogT2JzZXJ2YWJsZTxUPiA9IHRoaXMuaXRlbVNlcnZpY2UuY3VycmVudCQucGlwZShcbiAgICB0YXAoKGl0ZW0pID0+IHRoaXMucmVmcmVzaE1lc3NhZ2VzKGl0ZW0pKVxuICApO1xuXG4gIEBWaWV3Q2hpbGQoVmlld0NvbXBvbmVudCwgeyByZWFkOiBWaWV3Q29tcG9uZW50IH0pIHZpZXc6IFZpZXdDb21wb25lbnQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGl0ZW1TZXJ2aWNlOiBJdGVtU2VydmljZTxUPixcbiAgICBwcm90ZWN0ZWQgbWVzc2FnZVNlcnZpY2U6IE1lc3NhZ2VTZXJ2aWNlXG4gICkge31cblxuICAvKipcbiAgICogVGhlIHZpZXdzIGFyZSByb3V0ZXIgYmFzZWQsIHdoaWNoIG1lYW5zIGlmIHdlIGNsb3NlIGEgdmlldywgdGhlIHJvdXRlciBvdXRsZXQgaXNcbiAgICogY2xlYW5lZCBpbW1lZGlhdGVseS4gVG8gcHJldmVudCB0aGlzLCB3ZSdyZSBjbG9zaW5nIHRoZSB2aWV3IG1hbnVhbGx5LCBiZWZvcmVcbiAgICogbmF2aWdhdGluZyBiYWNrLlxuICAgKi9cbiAgY2xvc2VWaWV3KGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy52aWV3LnRvZ2dsZSh0cnVlKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCk/LnBhcmVudEVsZW1lbnQuY2xpY2soKTtcbiAgICB9LCA1MDApO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0IHByZXZpb3VzTGFiZWwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5wcmV2aW91cyBhcyBzdHJpbmc7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVmcmVzaE1lc3NhZ2VzKGl0ZW06IFQpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLml0ZW1LZXkgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgaXRlbT8uY29kZSAhPT0gdGhpcy5pdGVtS2V5ICYmXG4gICAgICBpdGVtPy51aWQgIT09IHRoaXMuaXRlbUtleSAmJlxuICAgICAgaXRlbT8uY3VzdG9tZXJJZCAhPT0gdGhpcy5pdGVtS2V5XG4gICAgKSB7XG4gICAgICB0aGlzLm1lc3NhZ2VTZXJ2aWNlLmNsZWFyKCk7XG4gICAgfVxuICAgIHRoaXMuaXRlbUtleSA9IGl0ZW0/LmNvZGUgPz8gaXRlbT8udWlkID8/IGl0ZW0/LmN1c3RvbWVySWQ7XG4gIH1cbn1cbiIsIjxjeC12aWV3IGNsYXNzPVwiY2FyZFwiPlxuICA8ZGl2IGNsYXNzPVwiaGVhZGVyXCI+XG4gICAgPGRpdiBjbGFzcz1cInRpdGxlLWJhclwiPlxuICAgICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XG4gICAgICAgIDxoMz5cbiAgICAgICAgICB7eyBpMThuUm9vdCArICcudGl0bGUnIHwgY3hUcmFuc2xhdGU6IHsgaXRlbTogaXRlbSQgfCBhc3luYyB9IH19XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgKm5nSWY9XCJzaG93SGludFwiXG4gICAgICAgICAgICBbY3hQb3BvdmVyXT1cImRldGFpbEhpbnRcIlxuICAgICAgICAgICAgW2N4UG9wb3Zlck9wdGlvbnNdPVwie1xuICAgICAgICAgICAgICBwbGFjZW1lbnQ6ICdhdXRvJyxcbiAgICAgICAgICAgICAgY2xhc3M6ICdoaW50LXBvcG92ZXInLFxuICAgICAgICAgICAgICBhcHBlbmRUb0JvZHk6IHRydWUsXG4gICAgICAgICAgICAgIGRpc3BsYXlDbG9zZUJ1dHRvbjogdHJ1ZVxuICAgICAgICAgICAgfVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGN4LWljb24gW3R5cGVdPVwiaWNvblR5cGVzLklORk9cIj4gPC9jeC1pY29uPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2gzPlxuICAgICAgICA8aDQ+XG4gICAgICAgICAge3tcbiAgICAgICAgICAgIHN1YnRpdGxlIHx8XG4gICAgICAgICAgICAgIChpMThuUm9vdCArICcuc3VidGl0bGUnIHwgY3hUcmFuc2xhdGU6IHsgaXRlbTogaXRlbSQgfCBhc3luYyB9KVxuICAgICAgICAgIH19XG4gICAgICAgIDwvaDQ+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJhY3Rpb25zXCI+XG4gICAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIlthY3Rpb25zXVwiPjwvbmctY29udGVudD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxhICpuZ0lmPVwiISFwcmV2aW91c1wiIGNsYXNzPVwibGluayBjbG9zZVwiIHJvdXRlckxpbms9XCIuLi9cIj5cbiAgICAgIDxjeC1pY29uXG4gICAgICAgICpuZ0lmPVwicHJldmlvdXMgPT09IHRydWU7IGVsc2UgcHJldkxhYmVsXCJcbiAgICAgICAgdHlwZT1cIkNMT1NFXCJcbiAgICAgICAgKGNsaWNrKT1cImNsb3NlVmlldygkZXZlbnQpXCJcbiAgICAgID48L2N4LWljb24+XG4gICAgICA8bmctdGVtcGxhdGUgI3ByZXZMYWJlbD57eyBwcmV2aW91c0xhYmVsIHwgY3hUcmFuc2xhdGUgfX08L25nLXRlbXBsYXRlPlxuICAgIDwvYT5cbiAgPC9kaXY+XG5cbiAgPGRpdiBjbGFzcz1cIm1haW5cIj5cbiAgICA8Y3gtb3JnLW1lc3NhZ2U+PC9jeC1vcmctbWVzc2FnZT5cbiAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbaW5mb11cIj48L25nLWNvbnRlbnQ+XG4gICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW21haW5dXCI+PC9uZy1jb250ZW50PlxuICA8L2Rpdj5cbjwvY3gtdmlldz5cblxuPHJvdXRlci1vdXRsZXQ+PC9yb3V0ZXItb3V0bGV0PlxuXG48bmctdGVtcGxhdGUgI2RldGFpbEhpbnQ+XG4gIDxwPlxuICAgIHt7IGkxOG5Sb290ICsgJy5oaW50JyB8IGN4VHJhbnNsYXRlIH19XG4gIDwvcD5cbjwvbmctdGVtcGxhdGU+XG4iXX0=