import { ChangeDetectionStrategy, Component } from '@angular/core';
import { tap } from 'rxjs/operators';
import { ItemService } from '../../shared/item.service';
import { UserGroupItemService } from '../services/user-group-item.service';
import { createCodeForEntityName } from '../../shared/utility/entity-code';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/item.service";
import * as i2 from "@spartacus/organization/administration/core";
import * as i3 from "../../shared/form/form.component";
import * as i4 from "@spartacus/storefront";
import * as i5 from "@ng-select/ng-select";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
import * as i8 from "@spartacus/core";
export class UserGroupFormComponent {
    constructor(itemService, unitService) {
        this.itemService = itemService;
        this.unitService = unitService;
        this.form = this.itemService.getForm();
        // getList ???
        this.units$ = this.unitService.getActiveUnitList().pipe(tap((units) => {
            var _a, _b, _c;
            if (units.length === 1) {
                (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('orgUnit.uid')) === null || _b === void 0 ? void 0 : _b.setValue((_c = units[0]) === null || _c === void 0 ? void 0 : _c.id);
            }
        }));
    }
    ngOnInit() {
        this.unitService.loadList();
    }
    createUidWithName(name, code) {
        createCodeForEntityName(name, code);
    }
}
UserGroupFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupFormComponent, deps: [{ token: i1.ItemService }, { token: i2.OrgUnitService }], target: i0.ɵɵFactoryTarget.Component });
UserGroupFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserGroupFormComponent, selector: "cx-org-user-group-form", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: UserGroupItemService,
        },
    ], ngImport: i0, template: "<cx-org-form i18nRoot=\"orgUserGroup\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUserGroup.name' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgUserGroup.name' | cxTranslate }}\"\n        formControlName=\"name\"\n        (blur)=\"createUidWithName(form.get('name'), form.get('uid'))\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUserGroup.uid' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgUserGroup.uid' | cxTranslate }}\"\n        formControlName=\"uid\"\n      />\n      <cx-form-errors [control]=\"form.get('uid')\"></cx-form-errors>\n    </label>\n\n    <label aria-required=\"true\" [formGroup]=\"form.get('orgUnit')\">\n      <span class=\"label-content required\">{{\n        'orgUserGroup.orgUnit' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"units$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        [readonly]=\"form.get('orgUnit.uid').disabled\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgUserGroup.orgUnit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('orgUnit.uid')\"></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n", components: [{ type: i3.FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { type: i4.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { type: i5.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "cxTranslate": i8.TranslatePipe, "async": i6.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-user-group-form',
                    templateUrl: './user-group-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                    providers: [
                        {
                            provide: ItemService,
                            useExisting: UserGroupItemService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.OrgUnitService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1ncm91cC1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91c2VyLWdyb3VwL2Zvcm0vdXNlci1ncm91cC1mb3JtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91c2VyLWdyb3VwL2Zvcm0vdXNlci1ncm91cC1mb3JtLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFRM0UsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7Ozs7Ozs7OztBQWMzRSxNQUFNLE9BQU8sc0JBQXNCO0lBWWpDLFlBQ1ksV0FBbUMsRUFDbkMsV0FBMkI7UUFEM0IsZ0JBQVcsR0FBWCxXQUFXLENBQXdCO1FBQ25DLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtRQWJ2QyxTQUFJLEdBQWMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUU3QyxjQUFjO1FBQ2QsV0FBTSxHQUE4QixJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUMzRSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTs7WUFDWixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUN0QixNQUFBLE1BQUEsSUFBSSxDQUFDLElBQUksMENBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQywwQ0FBRSxRQUFRLENBQUMsTUFBQSxLQUFLLENBQUMsQ0FBQyxDQUFDLDBDQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZEO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUtDLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQsaUJBQWlCLENBQUMsSUFBcUIsRUFBRSxJQUFxQjtRQUM1RCx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7bUhBdkJVLHNCQUFzQjt1R0FBdEIsc0JBQXNCLDhGQVB0QjtRQUNUO1lBQ0UsT0FBTyxFQUFFLFdBQVc7WUFDcEIsV0FBVyxFQUFFLG9CQUFvQjtTQUNsQztLQUNGLDBCQ3ZCSCxrcERBbURBOzJGRDFCYSxzQkFBc0I7a0JBWmxDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsV0FBVyxFQUFFLGtDQUFrQztvQkFDL0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtvQkFDbEMsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxXQUFXOzRCQUNwQixXQUFXLEVBQUUsb0JBQW9CO3lCQUNsQztxQkFDRjtpQkFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1xuICBCMkJVbml0Tm9kZSxcbiAgT3JnVW5pdFNlcnZpY2UsXG4gIFVzZXJHcm91cCxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJdGVtU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9pdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlckdyb3VwSXRlbVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy91c2VyLWdyb3VwLWl0ZW0uc2VydmljZSc7XG5pbXBvcnQgeyBjcmVhdGVDb2RlRm9yRW50aXR5TmFtZSB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlsaXR5L2VudGl0eS1jb2RlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtb3JnLXVzZXItZ3JvdXAtZm9ybScsXG4gIHRlbXBsYXRlVXJsOiAnLi91c2VyLWdyb3VwLWZvcm0uY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaG9zdDogeyBjbGFzczogJ2NvbnRlbnQtd3JhcHBlcicgfSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSXRlbVNlcnZpY2UsXG4gICAgICB1c2VFeGlzdGluZzogVXNlckdyb3VwSXRlbVNlcnZpY2UsXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVXNlckdyb3VwRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGZvcm06IEZvcm1Hcm91cCA9IHRoaXMuaXRlbVNlcnZpY2UuZ2V0Rm9ybSgpO1xuXG4gIC8vIGdldExpc3QgPz8/XG4gIHVuaXRzJDogT2JzZXJ2YWJsZTxCMkJVbml0Tm9kZVtdPiA9IHRoaXMudW5pdFNlcnZpY2UuZ2V0QWN0aXZlVW5pdExpc3QoKS5waXBlKFxuICAgIHRhcCgodW5pdHMpID0+IHtcbiAgICAgIGlmICh1bml0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhpcy5mb3JtPy5nZXQoJ29yZ1VuaXQudWlkJyk/LnNldFZhbHVlKHVuaXRzWzBdPy5pZCk7XG4gICAgICB9XG4gICAgfSlcbiAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgaXRlbVNlcnZpY2U6IEl0ZW1TZXJ2aWNlPFVzZXJHcm91cD4sXG4gICAgcHJvdGVjdGVkIHVuaXRTZXJ2aWNlOiBPcmdVbml0U2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy51bml0U2VydmljZS5sb2FkTGlzdCgpO1xuICB9XG5cbiAgY3JlYXRlVWlkV2l0aE5hbWUobmFtZTogQWJzdHJhY3RDb250cm9sLCBjb2RlOiBBYnN0cmFjdENvbnRyb2wpOiB2b2lkIHtcbiAgICBjcmVhdGVDb2RlRm9yRW50aXR5TmFtZShuYW1lLCBjb2RlKTtcbiAgfVxufVxuIiwiPGN4LW9yZy1mb3JtIGkxOG5Sb290PVwib3JnVXNlckdyb3VwXCI+XG4gIDxuZy1jb250YWluZXIgKm5nSWY9XCJmb3JtXCIgW2Zvcm1Hcm91cF09XCJmb3JtXCIgbWFpbj5cbiAgICA8bGFiZWw+XG4gICAgICA8c3BhbiBjbGFzcz1cImxhYmVsLWNvbnRlbnQgcmVxdWlyZWRcIj57e1xuICAgICAgICAnb3JnVXNlckdyb3VwLm5hbWUnIHwgY3hUcmFuc2xhdGVcbiAgICAgIH19PC9zcGFuPlxuICAgICAgPGlucHV0XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICByZXF1aXJlZFxuICAgICAgICBwbGFjZWhvbGRlcj1cInt7ICdvcmdVc2VyR3JvdXAubmFtZScgfCBjeFRyYW5zbGF0ZSB9fVwiXG4gICAgICAgIGZvcm1Db250cm9sTmFtZT1cIm5hbWVcIlxuICAgICAgICAoYmx1cik9XCJjcmVhdGVVaWRXaXRoTmFtZShmb3JtLmdldCgnbmFtZScpLCBmb3JtLmdldCgndWlkJykpXCJcbiAgICAgIC8+XG4gICAgICA8Y3gtZm9ybS1lcnJvcnMgW2NvbnRyb2xdPVwiZm9ybS5nZXQoJ25hbWUnKVwiPjwvY3gtZm9ybS1lcnJvcnM+XG4gICAgPC9sYWJlbD5cblxuICAgIDxsYWJlbD5cbiAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWwtY29udGVudCByZXF1aXJlZFwiPnt7XG4gICAgICAgICdvcmdVc2VyR3JvdXAudWlkJyB8IGN4VHJhbnNsYXRlXG4gICAgICB9fTwvc3Bhbj5cbiAgICAgIDxpbnB1dFxuICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgcGxhY2Vob2xkZXI9XCJ7eyAnb3JnVXNlckdyb3VwLnVpZCcgfCBjeFRyYW5zbGF0ZSB9fVwiXG4gICAgICAgIGZvcm1Db250cm9sTmFtZT1cInVpZFwiXG4gICAgICAvPlxuICAgICAgPGN4LWZvcm0tZXJyb3JzIFtjb250cm9sXT1cImZvcm0uZ2V0KCd1aWQnKVwiPjwvY3gtZm9ybS1lcnJvcnM+XG4gICAgPC9sYWJlbD5cblxuICAgIDxsYWJlbCBhcmlhLXJlcXVpcmVkPVwidHJ1ZVwiIFtmb3JtR3JvdXBdPVwiZm9ybS5nZXQoJ29yZ1VuaXQnKVwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbC1jb250ZW50IHJlcXVpcmVkXCI+e3tcbiAgICAgICAgJ29yZ1VzZXJHcm91cC5vcmdVbml0JyB8IGN4VHJhbnNsYXRlXG4gICAgICB9fTwvc3Bhbj5cbiAgICAgIDxuZy1zZWxlY3RcbiAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwidWlkXCJcbiAgICAgICAgW3NlYXJjaGFibGVdPVwidHJ1ZVwiXG4gICAgICAgIFtjbGVhcmFibGVdPVwiZmFsc2VcIlxuICAgICAgICBbaXRlbXNdPVwidW5pdHMkIHwgYXN5bmNcIlxuICAgICAgICBiaW5kTGFiZWw9XCJuYW1lXCJcbiAgICAgICAgYmluZFZhbHVlPVwiaWRcIlxuICAgICAgICBbcmVhZG9ubHldPVwiZm9ybS5nZXQoJ29yZ1VuaXQudWlkJykuZGlzYWJsZWRcIlxuICAgICAgICBhcHBlbmRUbz1cImN4LW9yZy1saXN0XCJcbiAgICAgICAgW3BsYWNlaG9sZGVyXT1cIidvcmdVc2VyR3JvdXAub3JnVW5pdCcgfCBjeFRyYW5zbGF0ZVwiXG4gICAgICA+XG4gICAgICA8L25nLXNlbGVjdD5cbiAgICAgIDxjeC1mb3JtLWVycm9ycyBbY29udHJvbF09XCJmb3JtLmdldCgnb3JnVW5pdC51aWQnKVwiPjwvY3gtZm9ybS1lcnJvcnM+XG4gICAgPC9sYWJlbD5cbiAgPC9uZy1jb250YWluZXI+XG48L2N4LW9yZy1mb3JtPlxuIl19