import { Injectable } from '@angular/core';
import { ROUTE_PARAMS } from '@spartacus/organization/administration/root';
import { of } from 'rxjs';
import { filter, switchMap } from 'rxjs/operators';
import { CurrentItemService } from '../../../../shared/current-item.service';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@spartacus/organization/administration/core";
export class CurrentUnitAddressService extends CurrentItemService {
    constructor(routingService, unitService) {
        super(routingService);
        this.routingService = routingService;
        this.unitService = unitService;
        // override item$ as we need to use the unit code as well
        this.item$ = this.b2bUnit$.pipe(filter((unitUid) => Boolean(unitUid)), switchMap((unitUid) => this.key$.pipe(switchMap((code) => this.getItem(unitUid, code)))));
    }
    getDetailsRoute() {
        return 'orgUnitAddressDetails';
    }
    getParamKey() {
        return ROUTE_PARAMS.addressCode;
    }
    getItem(unitUid, addressId) {
        return addressId
            ? this.unitService.getAddress(unitUid, addressId)
            : of(null);
    }
    getError(code) {
        return this.unitService.getErrorState(code);
    }
}
CurrentUnitAddressService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CurrentUnitAddressService, deps: [{ token: i1.RoutingService }, { token: i2.OrgUnitService }], target: i0.ɵɵFactoryTarget.Injectable });
CurrentUnitAddressService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CurrentUnitAddressService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CurrentUnitAddressService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RoutingService }, { type: i2.OrgUnitService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVudC11bml0LWFkZHJlc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91bml0L2xpbmtzL2FkZHJlc3Nlcy9zZXJ2aWNlcy9jdXJyZW50LXVuaXQtYWRkcmVzcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQzNFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQzs7OztBQUs3RSxNQUFNLE9BQU8seUJBQTBCLFNBQVEsa0JBQTJCO0lBU3hFLFlBQ1ksY0FBOEIsRUFDOUIsV0FBMkI7UUFFckMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBSFosbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtRQVZ2Qyx5REFBeUQ7UUFDaEQsVUFBSyxHQUF3QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDdEQsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsRUFDckMsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ3pFLENBQ0YsQ0FBQztJQU9GLENBQUM7SUFFRCxlQUFlO1FBQ2IsT0FBTyx1QkFBdUIsQ0FBQztJQUNqQyxDQUFDO0lBRVMsV0FBVztRQUNuQixPQUFPLFlBQVksQ0FBQyxXQUFXLENBQUM7SUFDbEMsQ0FBQztJQUVTLE9BQU8sQ0FBQyxPQUFlLEVBQUUsU0FBaUI7UUFDbEQsT0FBTyxTQUFTO1lBQ2QsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUM7WUFDakQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNmLENBQUM7SUFFRCxRQUFRLENBQUMsSUFBWTtRQUNuQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUM7O3NIQWhDVSx5QkFBeUI7MEhBQXpCLHlCQUF5QixjQUZ4QixNQUFNOzJGQUVQLHlCQUF5QjtrQkFIckMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBZGRyZXNzLCBSb3V0aW5nU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPcmdVbml0U2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvcmUnO1xuaW1wb3J0IHsgUk9VVEVfUEFSQU1TIH0gZnJvbSAnQHNwYXJ0YWN1cy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vcm9vdCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDdXJyZW50SXRlbVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY3VycmVudC1pdGVtLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ3VycmVudFVuaXRBZGRyZXNzU2VydmljZSBleHRlbmRzIEN1cnJlbnRJdGVtU2VydmljZTxBZGRyZXNzPiB7XG4gIC8vIG92ZXJyaWRlIGl0ZW0kIGFzIHdlIG5lZWQgdG8gdXNlIHRoZSB1bml0IGNvZGUgYXMgd2VsbFxuICByZWFkb25seSBpdGVtJDogT2JzZXJ2YWJsZTxBZGRyZXNzPiA9IHRoaXMuYjJiVW5pdCQucGlwZShcbiAgICBmaWx0ZXIoKHVuaXRVaWQpID0+IEJvb2xlYW4odW5pdFVpZCkpLFxuICAgIHN3aXRjaE1hcCgodW5pdFVpZCkgPT5cbiAgICAgIHRoaXMua2V5JC5waXBlKHN3aXRjaE1hcCgoY29kZTogc3RyaW5nKSA9PiB0aGlzLmdldEl0ZW0odW5pdFVpZCwgY29kZSkpKVxuICAgIClcbiAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgcm91dGluZ1NlcnZpY2U6IFJvdXRpbmdTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCB1bml0U2VydmljZTogT3JnVW5pdFNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIocm91dGluZ1NlcnZpY2UpO1xuICB9XG5cbiAgZ2V0RGV0YWlsc1JvdXRlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdvcmdVbml0QWRkcmVzc0RldGFpbHMnO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFBhcmFtS2V5KCkge1xuICAgIHJldHVybiBST1VURV9QQVJBTVMuYWRkcmVzc0NvZGU7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0SXRlbSh1bml0VWlkOiBzdHJpbmcsIGFkZHJlc3NJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxBZGRyZXNzPiB7XG4gICAgcmV0dXJuIGFkZHJlc3NJZFxuICAgICAgPyB0aGlzLnVuaXRTZXJ2aWNlLmdldEFkZHJlc3ModW5pdFVpZCwgYWRkcmVzc0lkKVxuICAgICAgOiBvZihudWxsKTtcbiAgfVxuXG4gIGdldEVycm9yKGNvZGU6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLnVuaXRTZXJ2aWNlLmdldEVycm9yU3RhdGUoY29kZSk7XG4gIH1cbn1cbiJdfQ==