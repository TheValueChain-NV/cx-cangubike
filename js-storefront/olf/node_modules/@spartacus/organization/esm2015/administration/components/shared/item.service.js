import { Injectable } from '@angular/core';
import { FormUtils } from '@spartacus/storefront';
import { BehaviorSubject, of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./current-item.service";
import * as i2 from "@spartacus/core";
import * as i3 from "./form/form.service";
/**
 * Provides CRUD operations for all organization entities.
 *
 * This base class simplifies the various entity implementation, and ensures a consistent
 * component implementation.
 */
export class ItemService {
    constructor(currentItemService, routingService, formService) {
        this.currentItemService = currentItemService;
        this.routingService = routingService;
        this.formService = formService;
        this.key$ = this.currentItemService.key$;
        this.current$ = this.currentItemService.item$;
        this.isInEditMode$ = new BehaviorSubject(false);
        /**
         * Returns the current business unit code.
         *
         * The current unit is driven by the route parameter.
         */
        this.unit$ = this.currentItemService.b2bUnit$;
        this.error$ = this.key$.pipe(switchMap((key) => this.currentItemService.getError(key)));
    }
    save(form, key) {
        if (form.invalid) {
            form.markAllAsTouched();
            FormUtils.deepUpdateValueAndValidity(form);
            return of();
        }
        else {
            /**
             * This assignment is needed to re-use form value after `form.disable()` call
             * In some cases value was converted by `form.disable()` into empty object
             */
            const formValue = form.value;
            form.disable();
            return key ? this.update(key, formValue) : this.create(formValue);
        }
    }
    getForm(item) {
        return this.formService.getForm(item);
    }
    /**
     * Launches the detailed route for the given item item.
     */
    launchDetails(item) {
        const cxRoute = this.getDetailsRoute();
        const params = this.buildRouteParams(item);
        if (cxRoute && item && Object.keys(item).length > 0) {
            this.routingService.go({ cxRoute, params });
        }
    }
    /**
     * Returns the route parameters that are used when launching the
     * details page. The route parameters default to the actual item,
     * but can be further populated in implementations.
     *
     * Customized route parameters are useful in case the actual item
     * doesn't match the expected route parameters. You can manipulate
     * the parameter data.
     */
    buildRouteParams(item) {
        return item;
    }
    getRouterParam(key) {
        return this.currentItemService.getRouterParam(key);
    }
    /**
     * Sets to true when the user is on the entity item form page
     */
    setEditMode(isInEdit) {
        this.isInEditMode$.next(isInEdit);
    }
}
ItemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ItemService, deps: [{ token: i1.CurrentItemService }, { token: i2.RoutingService }, { token: i3.FormService }], target: i0.ɵɵFactoryTarget.Injectable });
ItemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ItemService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ItemService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.CurrentItemService }, { type: i2.RoutingService }, { type: i3.FormService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb21wb25lbnRzL3NoYXJlZC9pdGVtLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGVBQWUsRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQUkzQzs7Ozs7R0FLRztBQUVILE1BQU0sT0FBZ0IsV0FBVztJQUMvQixZQUNZLGtCQUF5QyxFQUN6QyxjQUE4QixFQUM5QixXQUEyQjtRQUYzQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXVCO1FBQ3pDLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFHdkMsU0FBSSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7UUFDcEMsYUFBUSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUM7UUFFekMsa0JBQWEsR0FBd0IsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFFekU7Ozs7V0FJRztRQUNILFVBQUssR0FBdUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQztRQUU3RCxXQUFNLEdBQXdCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUMxQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDMUQsQ0FBQztJQWhCQyxDQUFDO0lBa0JKLElBQUksQ0FBQyxJQUFlLEVBQUUsR0FBWTtRQUNoQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEIsU0FBUyxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNDLE9BQU8sRUFBRSxFQUFFLENBQUM7U0FDYjthQUFNO1lBQ0w7OztlQUdHO1lBQ0gsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUM3QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFZixPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDbkU7SUFDSCxDQUFDO0lBNkJELE9BQU8sQ0FBQyxJQUFRO1FBQ2QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxhQUFhLENBQUMsSUFBTztRQUNuQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksT0FBTyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbkQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNPLGdCQUFnQixDQUFDLElBQU87UUFDaEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsY0FBYyxDQUFDLEdBQVc7UUFDeEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVcsQ0FBQyxRQUFpQjtRQUMxQixJQUFJLENBQUMsYUFBMEMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEUsQ0FBQzs7d0dBeEdtQixXQUFXOzRHQUFYLFdBQVc7MkZBQVgsV0FBVztrQkFEaEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFJvdXRpbmdTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXMgfSBmcm9tICdAc3BhcnRhY3VzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlJztcbmltcG9ydCB7IEZvcm1VdGlscyB9IGZyb20gJ0BzcGFydGFjdXMvc3RvcmVmcm9udCc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDdXJyZW50SXRlbVNlcnZpY2UgfSBmcm9tICcuL2N1cnJlbnQtaXRlbS5zZXJ2aWNlJztcbmltcG9ydCB7IEZvcm1TZXJ2aWNlIH0gZnJvbSAnLi9mb3JtL2Zvcm0uc2VydmljZSc7XG5cbi8qKlxuICogUHJvdmlkZXMgQ1JVRCBvcGVyYXRpb25zIGZvciBhbGwgb3JnYW5pemF0aW9uIGVudGl0aWVzLlxuICpcbiAqIFRoaXMgYmFzZSBjbGFzcyBzaW1wbGlmaWVzIHRoZSB2YXJpb3VzIGVudGl0eSBpbXBsZW1lbnRhdGlvbiwgYW5kIGVuc3VyZXMgYSBjb25zaXN0ZW50XG4gKiBjb21wb25lbnQgaW1wbGVtZW50YXRpb24uXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJdGVtU2VydmljZTxUPiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBjdXJyZW50SXRlbVNlcnZpY2U6IEN1cnJlbnRJdGVtU2VydmljZTxUPixcbiAgICBwcm90ZWN0ZWQgcm91dGluZ1NlcnZpY2U6IFJvdXRpbmdTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBmb3JtU2VydmljZTogRm9ybVNlcnZpY2U8VD5cbiAgKSB7fVxuXG4gIGtleSQgPSB0aGlzLmN1cnJlbnRJdGVtU2VydmljZS5rZXkkO1xuICBjdXJyZW50JCA9IHRoaXMuY3VycmVudEl0ZW1TZXJ2aWNlLml0ZW0kO1xuXG4gIGlzSW5FZGl0TW9kZSQ6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KGZhbHNlKTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBidXNpbmVzcyB1bml0IGNvZGUuXG4gICAqXG4gICAqIFRoZSBjdXJyZW50IHVuaXQgaXMgZHJpdmVuIGJ5IHRoZSByb3V0ZSBwYXJhbWV0ZXIuXG4gICAqL1xuICB1bml0JDogT2JzZXJ2YWJsZTxzdHJpbmc+ID0gdGhpcy5jdXJyZW50SXRlbVNlcnZpY2UuYjJiVW5pdCQ7XG5cbiAgZXJyb3IkOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gdGhpcy5rZXkkLnBpcGUoXG4gICAgc3dpdGNoTWFwKChrZXkpID0+IHRoaXMuY3VycmVudEl0ZW1TZXJ2aWNlLmdldEVycm9yKGtleSkpXG4gICk7XG5cbiAgc2F2ZShmb3JtOiBGb3JtR3JvdXAsIGtleT86IHN0cmluZyk6IE9ic2VydmFibGU8T3JnYW5pemF0aW9uSXRlbVN0YXR1czxUPj4ge1xuICAgIGlmIChmb3JtLmludmFsaWQpIHtcbiAgICAgIGZvcm0ubWFya0FsbEFzVG91Y2hlZCgpO1xuICAgICAgRm9ybVV0aWxzLmRlZXBVcGRhdGVWYWx1ZUFuZFZhbGlkaXR5KGZvcm0pO1xuICAgICAgcmV0dXJuIG9mKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhpcyBhc3NpZ25tZW50IGlzIG5lZWRlZCB0byByZS11c2UgZm9ybSB2YWx1ZSBhZnRlciBgZm9ybS5kaXNhYmxlKClgIGNhbGxcbiAgICAgICAqIEluIHNvbWUgY2FzZXMgdmFsdWUgd2FzIGNvbnZlcnRlZCBieSBgZm9ybS5kaXNhYmxlKClgIGludG8gZW1wdHkgb2JqZWN0XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGZvcm1WYWx1ZSA9IGZvcm0udmFsdWU7XG4gICAgICBmb3JtLmRpc2FibGUoKTtcblxuICAgICAgcmV0dXJuIGtleSA/IHRoaXMudXBkYXRlKGtleSwgZm9ybVZhbHVlKSA6IHRoaXMuY3JlYXRlKGZvcm1WYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYW4gaXRlbS5cbiAgICovXG4gIGRlbGV0ZT8oXG4gICAga2V5OiBzdHJpbmcsXG4gICAgYWRkaXRpb25hbFBhcmFtPzogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8T3JnYW5pemF0aW9uSXRlbVN0YXR1czxUPj47XG4gIC8qKlxuICAgKiBMb2FkcyBhbiBpdGVtLlxuICAgKi9cbiAgYWJzdHJhY3QgbG9hZCguLi5wYXJhbXM6IGFueVtdKTogT2JzZXJ2YWJsZTxUPjtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpdGVtLlxuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNyZWF0ZSh2YWx1ZTogVCk6IE9ic2VydmFibGU8T3JnYW5pemF0aW9uSXRlbVN0YXR1czxUPj47XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYW4gZXhpc3RpbmcgaXRlbS5cbiAgICovXG4gIGFic3RyYWN0IHVwZGF0ZShrZXk6IHN0cmluZywgdmFsdWU6IFQpOiBPYnNlcnZhYmxlPE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXM8VD4+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkZXRhaWxlZCBjeFJvdXRlIGZvciB0aGUgb3JnYW5pemF0aW9uIGl0ZW0uXG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0RGV0YWlsc1JvdXRlKCk6IHN0cmluZztcblxuICBnZXRGb3JtKGl0ZW0/OiBUKTogRm9ybUdyb3VwIHtcbiAgICByZXR1cm4gdGhpcy5mb3JtU2VydmljZS5nZXRGb3JtKGl0ZW0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExhdW5jaGVzIHRoZSBkZXRhaWxlZCByb3V0ZSBmb3IgdGhlIGdpdmVuIGl0ZW0gaXRlbS5cbiAgICovXG4gIGxhdW5jaERldGFpbHMoaXRlbTogVCk6IHZvaWQge1xuICAgIGNvbnN0IGN4Um91dGUgPSB0aGlzLmdldERldGFpbHNSb3V0ZSgpO1xuICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMuYnVpbGRSb3V0ZVBhcmFtcyhpdGVtKTtcbiAgICBpZiAoY3hSb3V0ZSAmJiBpdGVtICYmIE9iamVjdC5rZXlzKGl0ZW0pLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMucm91dGluZ1NlcnZpY2UuZ28oeyBjeFJvdXRlLCBwYXJhbXMgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHJvdXRlIHBhcmFtZXRlcnMgdGhhdCBhcmUgdXNlZCB3aGVuIGxhdW5jaGluZyB0aGVcbiAgICogZGV0YWlscyBwYWdlLiBUaGUgcm91dGUgcGFyYW1ldGVycyBkZWZhdWx0IHRvIHRoZSBhY3R1YWwgaXRlbSxcbiAgICogYnV0IGNhbiBiZSBmdXJ0aGVyIHBvcHVsYXRlZCBpbiBpbXBsZW1lbnRhdGlvbnMuXG4gICAqXG4gICAqIEN1c3RvbWl6ZWQgcm91dGUgcGFyYW1ldGVycyBhcmUgdXNlZnVsIGluIGNhc2UgdGhlIGFjdHVhbCBpdGVtXG4gICAqIGRvZXNuJ3QgbWF0Y2ggdGhlIGV4cGVjdGVkIHJvdXRlIHBhcmFtZXRlcnMuIFlvdSBjYW4gbWFuaXB1bGF0ZVxuICAgKiB0aGUgcGFyYW1ldGVyIGRhdGEuXG4gICAqL1xuICBwcm90ZWN0ZWQgYnVpbGRSb3V0ZVBhcmFtcyhpdGVtOiBUKTogYW55IHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIGdldFJvdXRlclBhcmFtKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50SXRlbVNlcnZpY2UuZ2V0Um91dGVyUGFyYW0oa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRvIHRydWUgd2hlbiB0aGUgdXNlciBpcyBvbiB0aGUgZW50aXR5IGl0ZW0gZm9ybSBwYWdlXG4gICAqL1xuICBzZXRFZGl0TW9kZShpc0luRWRpdDogYm9vbGVhbikge1xuICAgICh0aGlzLmlzSW5FZGl0TW9kZSQgYXMgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KS5uZXh0KGlzSW5FZGl0KTtcbiAgfVxufVxuIl19