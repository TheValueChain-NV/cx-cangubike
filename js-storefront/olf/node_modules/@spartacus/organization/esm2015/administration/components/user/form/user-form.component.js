import { ChangeDetectionStrategy, Component, Input, } from '@angular/core';
import { FormControl } from '@angular/forms';
import { tap } from 'rxjs/operators';
import { CurrentItemService } from '../../shared/current-item.service';
import { ItemService } from '../../shared/item.service';
import { CurrentUserService } from '../services/current-user.service';
import { UserItemService } from '../services/user-item.service';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/item.service";
import * as i2 from "@spartacus/organization/administration/core";
import * as i3 from "@spartacus/core";
import * as i4 from "../../shared/form/form.component";
import * as i5 from "@ng-select/ng-select";
import * as i6 from "@spartacus/storefront";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
export class UserFormComponent {
    constructor(itemService, unitService, userService, b2bUserService) {
        this.itemService = itemService;
        this.unitService = unitService;
        this.userService = userService;
        this.b2bUserService = b2bUserService;
        this.form = this.itemService.getForm();
        this.units$ = this.unitService.getActiveUnitList().pipe(tap((units) => {
            var _a, _b;
            if (units.length === 1) {
                (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('orgUnit.uid').setValue((_b = units[0]) === null || _b === void 0 ? void 0 : _b.id);
            }
        }));
        this.titles$ = this.userService.getTitles();
        this.availableRoles = this.b2bUserService.getAllRoles();
    }
    /**
     * Initialize the business unit for the user.
     *
     * If there's a unit provided, we disable the unit form control.
     */
    set unitKey(value) {
        var _a, _b, _c;
        if (value) {
            (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('orgUnit.uid').setValue(value);
            (_c = (_b = this.form) === null || _b === void 0 ? void 0 : _b.get('orgUnit')) === null || _c === void 0 ? void 0 : _c.disable();
        }
    }
    ngOnInit() {
        this.unitService.loadList();
    }
    updateRoles(event) {
        const { checked, value } = event.target;
        if (checked) {
            this.roles.push(new FormControl(value));
        }
        else {
            this.roles.removeAt(this.roles.value.indexOf(value));
        }
    }
    get roles() {
        return this.form.get('roles');
    }
    get isAssignedToApprovers() {
        return this.form.get('isAssignedToApprovers');
    }
}
UserFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserFormComponent, deps: [{ token: i1.ItemService }, { token: i2.OrgUnitService }, { token: i3.UserService }, { token: i2.B2BUserService }], target: i0.ɵɵFactoryTarget.Component });
UserFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserFormComponent, selector: "cx-org-user-form", inputs: { unitKey: "unitKey" }, host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: UserItemService,
        },
        {
            provide: CurrentItemService,
            useExisting: CurrentUserService,
        },
    ], ngImport: i0, template: "<cx-org-form i18nRoot=\"orgUser\">\n  <ng-container main *ngIf=\"form\" [formGroup]=\"form\">\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUser.title' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"titleCode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"titles$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgUser.title' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('titleCode')\"></cx-form-errors>\n    </label>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUser.firstName' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgUser.firstName' | cxTranslate }}\"\n        formControlName=\"firstName\"\n      />\n      <cx-form-errors [control]=\"form.get('firstName')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUser.lastName' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgUser.lastName' | cxTranslate }}\"\n        formControlName=\"lastName\"\n      />\n      <cx-form-errors [control]=\"form.get('lastName')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUser.email' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"email\"\n        required\n        placeholder=\"{{ 'orgUser.email' | cxTranslate }}\"\n        formControlName=\"email\"\n      />\n      <cx-form-errors [control]=\"form.get('email')\"></cx-form-errors>\n    </label>\n\n    <fieldset aria-required=\"true\" class=\"full-width\" formArrayName=\"roles\">\n      <legend class=\"label-content required\">\n        {{ 'orgUser.roles' | cxTranslate }}\n      </legend>\n\n      <label\n        class=\"form-check\"\n        *ngFor=\"let role of availableRoles; let i = index\"\n      >\n        <input\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          [value]=\"role\"\n          [checked]=\"roles?.value?.includes(role)\"\n          (change)=\"updateRoles($event)\"\n          [disabled]=\"form?.status === 'DISABLED'\"\n        />\n        <span class=\"form-check-label\">\n          {{ 'organization.userRoles.' + role | cxTranslate }}\n        </span>\n      </label>\n    </fieldset>\n\n    <label aria-required=\"true\" [formGroup]=\"form.get('orgUnit')\">\n      <span class=\"label-content required\">{{\n        'orgUser.orgUnit' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"units$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgUser.orgUnit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('orgUnit.uid')\"></cx-form-errors>\n    </label>\n\n    <div *ngIf=\"isAssignedToApprovers\" class=\"full-width\">\n      <label class=\"form-check\">\n        <input\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          formControlName=\"isAssignedToApprovers\"\n        />\n        <span class=\"form-check-label\">{{\n          'orgUser.assignApprover' | cxTranslate\n        }}</span>\n      </label>\n    </div>\n  </ng-container>\n</cx-org-form>\n", components: [{ type: i4.FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { type: i5.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { type: i6.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }], pipes: { "cxTranslate": i3.TranslatePipe, "async": i7.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-user-form',
                    templateUrl: './user-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                    providers: [
                        {
                            provide: ItemService,
                            useExisting: UserItemService,
                        },
                        {
                            provide: CurrentItemService,
                            useExisting: CurrentUserService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.OrgUnitService }, { type: i3.UserService }, { type: i2.B2BUserService }]; }, propDecorators: { unitKey: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,