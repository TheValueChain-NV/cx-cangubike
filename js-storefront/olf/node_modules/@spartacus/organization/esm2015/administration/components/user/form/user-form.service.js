import { Injectable } from '@angular/core';
import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';
import { B2BUserRole } from '@spartacus/core';
import { CustomFormValidators } from '@spartacus/storefront';
import { FormService } from '../../shared/form/form.service';
import * as i0 from "@angular/core";
export class UserFormService extends FormService {
    build() {
        const form = new FormGroup({});
        form.setControl('customerId', new FormControl(''));
        form.setControl('titleCode', new FormControl(''));
        form.setControl('firstName', new FormControl('', Validators.required));
        form.setControl('lastName', new FormControl('', Validators.required));
        form.setControl('email', new FormControl('', [
            Validators.required,
            CustomFormValidators.emailValidator,
        ]));
        form.setControl('orgUnit', new FormGroup({
            uid: new FormControl(undefined, Validators.required),
        }));
        form.setControl('roles', new FormArray([]));
        form.setControl('isAssignedToApprovers', new FormControl(false));
        form.get('roles').valueChanges.subscribe((roles) => {
            if (roles.includes(B2BUserRole.APPROVER)) {
                form.get('isAssignedToApprovers').enable();
            }
            else {
                form.get('isAssignedToApprovers').disable();
                form.get('isAssignedToApprovers').reset();
            }
        });
        this.form = form;
    }
    patchData(item) {
        var _a;
        super.patchData(item);
        if (item) {
            const roles = this.form.get('roles');
            (_a = item.roles) === null || _a === void 0 ? void 0 : _a.forEach((role) => {
                if (!roles.value.includes(role)) {
                    roles.push(new FormControl(role));
                }
            });
        }
    }
}
UserFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserFormService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
UserFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserFormService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserFormService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1mb3JtLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvdXNlci9mb3JtL3VzZXItZm9ybS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQy9FLE9BQU8sRUFBVyxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7O0FBSzdELE1BQU0sT0FBTyxlQUFnQixTQUFRLFdBQW9CO0lBQzdDLEtBQUs7UUFDYixNQUFNLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsVUFBVSxDQUNiLE9BQU8sRUFDUCxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUU7WUFDbEIsVUFBVSxDQUFDLFFBQVE7WUFDbkIsb0JBQW9CLENBQUMsY0FBYztTQUNwQyxDQUFDLENBQ0gsQ0FBQztRQUNGLElBQUksQ0FBQyxVQUFVLENBQ2IsU0FBUyxFQUNULElBQUksU0FBUyxDQUFDO1lBQ1osR0FBRyxFQUFFLElBQUksV0FBVyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDO1NBQ3JELENBQUMsQ0FDSCxDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLHVCQUF1QixFQUFFLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFakUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBZSxFQUFFLEVBQUU7WUFDM0QsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDeEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQzVDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDNUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQzNDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRVMsU0FBUyxDQUFDLElBQWE7O1FBQy9CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEIsSUFBSSxJQUFJLEVBQUU7WUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQWMsQ0FBQztZQUNsRCxNQUFBLElBQUksQ0FBQyxLQUFLLDBDQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUMzQixJQUFJLENBQUUsS0FBSyxDQUFDLEtBQWtCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUM3QyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7aUJBQ25DO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7OzRHQTdDVSxlQUFlO2dIQUFmLGVBQWUsY0FGZCxNQUFNOzJGQUVQLGVBQWU7a0JBSDNCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUFycmF5LCBGb3JtQ29udHJvbCwgRm9ybUdyb3VwLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQjJCVXNlciwgQjJCVXNlclJvbGUgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgQ3VzdG9tRm9ybVZhbGlkYXRvcnMgfSBmcm9tICdAc3BhcnRhY3VzL3N0b3JlZnJvbnQnO1xuaW1wb3J0IHsgRm9ybVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvZm9ybS9mb3JtLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVXNlckZvcm1TZXJ2aWNlIGV4dGVuZHMgRm9ybVNlcnZpY2U8QjJCVXNlcj4ge1xuICBwcm90ZWN0ZWQgYnVpbGQoKSB7XG4gICAgY29uc3QgZm9ybSA9IG5ldyBGb3JtR3JvdXAoe30pO1xuICAgIGZvcm0uc2V0Q29udHJvbCgnY3VzdG9tZXJJZCcsIG5ldyBGb3JtQ29udHJvbCgnJykpO1xuICAgIGZvcm0uc2V0Q29udHJvbCgndGl0bGVDb2RlJywgbmV3IEZvcm1Db250cm9sKCcnKSk7XG4gICAgZm9ybS5zZXRDb250cm9sKCdmaXJzdE5hbWUnLCBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpKTtcbiAgICBmb3JtLnNldENvbnRyb2woJ2xhc3ROYW1lJywgbmV3IEZvcm1Db250cm9sKCcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSk7XG4gICAgZm9ybS5zZXRDb250cm9sKFxuICAgICAgJ2VtYWlsJyxcbiAgICAgIG5ldyBGb3JtQ29udHJvbCgnJywgW1xuICAgICAgICBWYWxpZGF0b3JzLnJlcXVpcmVkLFxuICAgICAgICBDdXN0b21Gb3JtVmFsaWRhdG9ycy5lbWFpbFZhbGlkYXRvcixcbiAgICAgIF0pXG4gICAgKTtcbiAgICBmb3JtLnNldENvbnRyb2woXG4gICAgICAnb3JnVW5pdCcsXG4gICAgICBuZXcgRm9ybUdyb3VwKHtcbiAgICAgICAgdWlkOiBuZXcgRm9ybUNvbnRyb2wodW5kZWZpbmVkLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSxcbiAgICAgIH0pXG4gICAgKTtcbiAgICBmb3JtLnNldENvbnRyb2woJ3JvbGVzJywgbmV3IEZvcm1BcnJheShbXSkpO1xuICAgIGZvcm0uc2V0Q29udHJvbCgnaXNBc3NpZ25lZFRvQXBwcm92ZXJzJywgbmV3IEZvcm1Db250cm9sKGZhbHNlKSk7XG5cbiAgICBmb3JtLmdldCgncm9sZXMnKS52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKChyb2xlczogc3RyaW5nW10pID0+IHtcbiAgICAgIGlmIChyb2xlcy5pbmNsdWRlcyhCMkJVc2VyUm9sZS5BUFBST1ZFUikpIHtcbiAgICAgICAgZm9ybS5nZXQoJ2lzQXNzaWduZWRUb0FwcHJvdmVycycpLmVuYWJsZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybS5nZXQoJ2lzQXNzaWduZWRUb0FwcHJvdmVycycpLmRpc2FibGUoKTtcbiAgICAgICAgZm9ybS5nZXQoJ2lzQXNzaWduZWRUb0FwcHJvdmVycycpLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICB9XG5cbiAgcHJvdGVjdGVkIHBhdGNoRGF0YShpdGVtOiBCMkJVc2VyKSB7XG4gICAgc3VwZXIucGF0Y2hEYXRhKGl0ZW0pO1xuICAgIGlmIChpdGVtKSB7XG4gICAgICBjb25zdCByb2xlcyA9IHRoaXMuZm9ybS5nZXQoJ3JvbGVzJykgYXMgRm9ybUFycmF5O1xuICAgICAgaXRlbS5yb2xlcz8uZm9yRWFjaCgocm9sZSkgPT4ge1xuICAgICAgICBpZiAoIShyb2xlcy52YWx1ZSBhcyBzdHJpbmdbXSkuaW5jbHVkZXMocm9sZSkpIHtcbiAgICAgICAgICByb2xlcy5wdXNoKG5ldyBGb3JtQ29udHJvbChyb2xlKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19