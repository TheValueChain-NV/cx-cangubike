import { Injectable } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { CustomFormValidators } from '@spartacus/storefront';
import { FormService } from '../../shared/form/form.service';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
export class BudgetFormService extends FormService {
    constructor(datePickerService) {
        super();
        this.datePickerService = datePickerService;
    }
    build() {
        const form = new FormGroup({});
        form.setControl('code', new FormControl('', [
            Validators.required,
            CustomFormValidators.noSpecialCharacters,
        ]));
        form.setControl('name', new FormControl('', Validators.required));
        form.setControl('startDate', new FormControl('', [
            Validators.required,
            CustomFormValidators.patternValidation((date) => this.datePickerService.isValidFormat(date)),
        ]));
        form.setControl('endDate', new FormControl('', [
            Validators.required,
            CustomFormValidators.patternValidation((date) => this.datePickerService.isValidFormat(date)),
        ]));
        form.setControl('budget', new FormControl('', [
            Validators.required,
            CustomFormValidators.mustBePositive,
        ]));
        form.setControl('currency', new FormGroup({
            isocode: new FormControl(undefined, Validators.required),
        }));
        form.setControl('orgUnit', new FormGroup({
            uid: new FormControl(undefined, Validators.required),
        }));
        form.setValidators(CustomFormValidators.dateRange('startDate', 'endDate', (date) => this.datePickerService.getDate(date)));
        this.form = form;
    }
}
BudgetFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetFormService, deps: [{ token: i1.DatePickerService }], target: i0.ɵɵFactoryTarget.Injectable });
BudgetFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetFormService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetFormService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.DatePickerService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVkZ2V0LWZvcm0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy9idWRnZXQvZm9ybS9idWRnZXQtZm9ybS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFxQixNQUFNLHVCQUF1QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7O0FBSzdELE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxXQUFtQjtJQUN4RCxZQUFzQixpQkFBb0M7UUFDeEQsS0FBSyxFQUFFLENBQUM7UUFEWSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO0lBRTFELENBQUM7SUFFUyxLQUFLO1FBQ2IsTUFBTSxJQUFJLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FDYixNQUFNLEVBQ04sSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFO1lBQ2xCLFVBQVUsQ0FBQyxRQUFRO1lBQ25CLG9CQUFvQixDQUFDLG1CQUFtQjtTQUN6QyxDQUFDLENBQ0gsQ0FBQztRQUNGLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsVUFBVSxDQUNiLFdBQVcsRUFDWCxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUU7WUFDbEIsVUFBVSxDQUFDLFFBQVE7WUFDbkIsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUM5QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUMzQztTQUNGLENBQUMsQ0FDSCxDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FDYixTQUFTLEVBQ1QsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFO1lBQ2xCLFVBQVUsQ0FBQyxRQUFRO1lBQ25CLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDOUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FDM0M7U0FDRixDQUFDLENBQ0gsQ0FBQztRQUNGLElBQUksQ0FBQyxVQUFVLENBQ2IsUUFBUSxFQUNSLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRTtZQUNsQixVQUFVLENBQUMsUUFBUTtZQUNuQixvQkFBb0IsQ0FBQyxjQUFjO1NBQ3BDLENBQUMsQ0FDSCxDQUFDO1FBRUYsSUFBSSxDQUFDLFVBQVUsQ0FDYixVQUFVLEVBQ1YsSUFBSSxTQUFTLENBQUM7WUFDWixPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUM7U0FDekQsQ0FBQyxDQUNILENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxDQUNiLFNBQVMsRUFDVCxJQUFJLFNBQVMsQ0FBQztZQUNaLEdBQUcsRUFBRSxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQztTQUNyRCxDQUFDLENBQ0gsQ0FBQztRQUNGLElBQUksQ0FBQyxhQUFhLENBQ2hCLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDOUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FDckMsQ0FDRixDQUFDO1FBQ0YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQzs7OEdBM0RVLGlCQUFpQjtrSEFBakIsaUJBQWlCLGNBRmhCLE1BQU07MkZBRVAsaUJBQWlCO2tCQUg3QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sLCBGb3JtR3JvdXAsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBCdWRnZXQgfSBmcm9tICdAc3BhcnRhY3VzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlJztcbmltcG9ydCB7IEN1c3RvbUZvcm1WYWxpZGF0b3JzLCBEYXRlUGlja2VyU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvc3RvcmVmcm9udCc7XG5pbXBvcnQgeyBGb3JtU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9mb3JtL2Zvcm0uc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBCdWRnZXRGb3JtU2VydmljZSBleHRlbmRzIEZvcm1TZXJ2aWNlPEJ1ZGdldD4ge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZGF0ZVBpY2tlclNlcnZpY2U6IERhdGVQaWNrZXJTZXJ2aWNlKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBidWlsZCgpIHtcbiAgICBjb25zdCBmb3JtID0gbmV3IEZvcm1Hcm91cCh7fSk7XG4gICAgZm9ybS5zZXRDb250cm9sKFxuICAgICAgJ2NvZGUnLFxuICAgICAgbmV3IEZvcm1Db250cm9sKCcnLCBbXG4gICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgIEN1c3RvbUZvcm1WYWxpZGF0b3JzLm5vU3BlY2lhbENoYXJhY3RlcnMsXG4gICAgICBdKVxuICAgICk7XG4gICAgZm9ybS5zZXRDb250cm9sKCduYW1lJywgbmV3IEZvcm1Db250cm9sKCcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSk7XG4gICAgZm9ybS5zZXRDb250cm9sKFxuICAgICAgJ3N0YXJ0RGF0ZScsXG4gICAgICBuZXcgRm9ybUNvbnRyb2woJycsIFtcbiAgICAgICAgVmFsaWRhdG9ycy5yZXF1aXJlZCxcbiAgICAgICAgQ3VzdG9tRm9ybVZhbGlkYXRvcnMucGF0dGVyblZhbGlkYXRpb24oKGRhdGUpID0+XG4gICAgICAgICAgdGhpcy5kYXRlUGlja2VyU2VydmljZS5pc1ZhbGlkRm9ybWF0KGRhdGUpXG4gICAgICAgICksXG4gICAgICBdKVxuICAgICk7XG4gICAgZm9ybS5zZXRDb250cm9sKFxuICAgICAgJ2VuZERhdGUnLFxuICAgICAgbmV3IEZvcm1Db250cm9sKCcnLCBbXG4gICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgIEN1c3RvbUZvcm1WYWxpZGF0b3JzLnBhdHRlcm5WYWxpZGF0aW9uKChkYXRlKSA9PlxuICAgICAgICAgIHRoaXMuZGF0ZVBpY2tlclNlcnZpY2UuaXNWYWxpZEZvcm1hdChkYXRlKVxuICAgICAgICApLFxuICAgICAgXSlcbiAgICApO1xuICAgIGZvcm0uc2V0Q29udHJvbChcbiAgICAgICdidWRnZXQnLFxuICAgICAgbmV3IEZvcm1Db250cm9sKCcnLCBbXG4gICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgIEN1c3RvbUZvcm1WYWxpZGF0b3JzLm11c3RCZVBvc2l0aXZlLFxuICAgICAgXSlcbiAgICApO1xuXG4gICAgZm9ybS5zZXRDb250cm9sKFxuICAgICAgJ2N1cnJlbmN5JyxcbiAgICAgIG5ldyBGb3JtR3JvdXAoe1xuICAgICAgICBpc29jb2RlOiBuZXcgRm9ybUNvbnRyb2wodW5kZWZpbmVkLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSxcbiAgICAgIH0pXG4gICAgKTtcbiAgICBmb3JtLnNldENvbnRyb2woXG4gICAgICAnb3JnVW5pdCcsXG4gICAgICBuZXcgRm9ybUdyb3VwKHtcbiAgICAgICAgdWlkOiBuZXcgRm9ybUNvbnRyb2wodW5kZWZpbmVkLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSxcbiAgICAgIH0pXG4gICAgKTtcbiAgICBmb3JtLnNldFZhbGlkYXRvcnMoXG4gICAgICBDdXN0b21Gb3JtVmFsaWRhdG9ycy5kYXRlUmFuZ2UoJ3N0YXJ0RGF0ZScsICdlbmREYXRlJywgKGRhdGUpID0+XG4gICAgICAgIHRoaXMuZGF0ZVBpY2tlclNlcnZpY2UuZ2V0RGF0ZShkYXRlKVxuICAgICAgKVxuICAgICk7XG4gICAgdGhpcy5mb3JtID0gZm9ybTtcbiAgfVxufVxuIl19