import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { OrganizationTableType } from '../../../shared/organization.model';
import { UserGroupPermissionListService } from '../user-group-permission-list.service';
import * as i0 from "@angular/core";
export class UserGroupAssignedPermissionsListService extends UserGroupPermissionListService {
    constructor() {
        super(...arguments);
        this.tableType = OrganizationTableType.USER_GROUP_ASSIGNED_PERMISSIONS;
    }
    /**
     * @override
     * Load all b2b users assigned to the given user group
     */
    load(pagination, code) {
        return super
            .load(pagination, code)
            .pipe(map((users) => this.filterSelected(users)));
    }
}
UserGroupAssignedPermissionsListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupAssignedPermissionsListService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
UserGroupAssignedPermissionsListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupAssignedPermissionsListService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupAssignedPermissionsListService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1ncm91cC1hc3NpZ25lZC1wZXJtaXNzaW9uLWxpc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91c2VyLWdyb3VwL3Blcm1pc3Npb25zL2Fzc2lnbmVkL3VzZXItZ3JvdXAtYXNzaWduZWQtcGVybWlzc2lvbi1saXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDM0UsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7O0FBS3ZGLE1BQU0sT0FBTyx1Q0FBd0MsU0FBUSw4QkFBOEI7SUFIM0Y7O1FBSVksY0FBUyxHQUFHLHFCQUFxQixDQUFDLCtCQUErQixDQUFDO0tBYTdFO0lBWkM7OztPQUdHO0lBQ08sSUFBSSxDQUNaLFVBQTJCLEVBQzNCLElBQVk7UUFFWixPQUFPLEtBQUs7YUFDVCxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQzthQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDOztvSUFiVSx1Q0FBdUM7d0lBQXZDLHVDQUF1QyxjQUZ0QyxNQUFNOzJGQUVQLHVDQUF1QztrQkFIbkQsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFbnRpdGllc01vZGVsLCBQYWdpbmF0aW9uTW9kZWwgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgUGVybWlzc2lvbiB9IGZyb20gJ0BzcGFydGFjdXMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uVGFibGVUeXBlIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL29yZ2FuaXphdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBVc2VyR3JvdXBQZXJtaXNzaW9uTGlzdFNlcnZpY2UgfSBmcm9tICcuLi91c2VyLWdyb3VwLXBlcm1pc3Npb24tbGlzdC5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJHcm91cEFzc2lnbmVkUGVybWlzc2lvbnNMaXN0U2VydmljZSBleHRlbmRzIFVzZXJHcm91cFBlcm1pc3Npb25MaXN0U2VydmljZSB7XG4gIHByb3RlY3RlZCB0YWJsZVR5cGUgPSBPcmdhbml6YXRpb25UYWJsZVR5cGUuVVNFUl9HUk9VUF9BU1NJR05FRF9QRVJNSVNTSU9OUztcbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBMb2FkIGFsbCBiMmIgdXNlcnMgYXNzaWduZWQgdG8gdGhlIGdpdmVuIHVzZXIgZ3JvdXBcbiAgICovXG4gIHByb3RlY3RlZCBsb2FkKFxuICAgIHBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbCxcbiAgICBjb2RlOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxFbnRpdGllc01vZGVsPFBlcm1pc3Npb24+PiB7XG4gICAgcmV0dXJuIHN1cGVyXG4gICAgICAubG9hZChwYWdpbmF0aW9uLCBjb2RlKVxuICAgICAgLnBpcGUobWFwKCh1c2VycykgPT4gdGhpcy5maWx0ZXJTZWxlY3RlZCh1c2VycykpKTtcbiAgfVxufVxuIl19