import { ChangeDetectionStrategy, Component } from '@angular/core';
import { of } from 'rxjs';
import { ListService } from '../../../shared/list/list.service';
import { UnitChildrenService } from './unit-children.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/current-unit.service";
import * as i2 from "../../../shared/sub-list/sub-list.component";
import * as i3 from "../../../shared/detail/disable-info/disable-info.component";
import * as i4 from "@angular/router";
import * as i5 from "@angular/common";
import * as i6 from "@spartacus/core";
export class UnitChildrenComponent {
    constructor(currentUnitService) {
        this.currentUnitService = currentUnitService;
        this.unit$ = this.currentUnitService
            ? this.currentUnitService.item$
            : of({ active: true });
    }
}
UnitChildrenComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitChildrenComponent, deps: [{ token: i1.CurrentUnitService }], target: i0.ɵɵFactoryTarget.Component });
UnitChildrenComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitChildrenComponent, selector: "cx-org-unit-children", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ListService,
            useExisting: UnitChildrenService,
        },
    ], ngImport: i0, template: "<cx-org-sub-list [showHint]=\"true\">\n  <a\n    actions\n    class=\"link\"\n    routerLink=\"create\"\n    [class.disabled]=\"!(unit$ | async)?.active\"\n  >\n    {{ 'organization.create' | cxTranslate }}\n  </a>\n  <cx-org-disable-info\n    info\n    i18nRoot=\"orgUnitChildren\"\n    [displayInfoConfig]=\"{\n      disabledCreate: true,\n      disabledEnable: false,\n      disabledEdit: false\n    }\"\n  >\n  </cx-org-disable-info>\n</cx-org-sub-list>\n", components: [{ type: i2.SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }, { type: i3.DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i4.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i5.AsyncPipe, "cxTranslate": i6.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitChildrenComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-unit-children',
                    templateUrl: './unit-children.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                    providers: [
                        {
                            provide: ListService,
                            useExisting: UnitChildrenService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.CurrentUnitService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC1jaGlsZHJlbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvdW5pdC9saW5rcy9jaGlsZHJlbi91bml0LWNoaWxkcmVuLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91bml0L2xpbmtzL2NoaWxkcmVuL3VuaXQtY2hpbGRyZW4uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7Ozs7QUFjOUQsTUFBTSxPQUFPLHFCQUFxQjtJQUtoQyxZQUFzQixrQkFBc0M7UUFBdEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUo1RCxVQUFLLEdBQXdCLElBQUksQ0FBQyxrQkFBa0I7WUFDbEQsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLO1lBQy9CLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUVzQyxDQUFDOztrSEFMckQscUJBQXFCO3NHQUFyQixxQkFBcUIsNEZBUHJCO1FBQ1Q7WUFDRSxPQUFPLEVBQUUsV0FBVztZQUNwQixXQUFXLEVBQUUsbUJBQW1CO1NBQ2pDO0tBQ0YsMEJDakJILDZjQW9CQTsyRkREYSxxQkFBcUI7a0JBWmpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsV0FBVyxFQUFFLGdDQUFnQztvQkFDN0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtvQkFDbEMsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxXQUFXOzRCQUNwQixXQUFXLEVBQUUsbUJBQW1CO3lCQUNqQztxQkFDRjtpQkFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEIyQlVuaXQgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IExpc3RTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2xpc3QvbGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IEN1cnJlbnRVbml0U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2N1cnJlbnQtdW5pdC5zZXJ2aWNlJztcbmltcG9ydCB7IFVuaXRDaGlsZHJlblNlcnZpY2UgfSBmcm9tICcuL3VuaXQtY2hpbGRyZW4uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LW9yZy11bml0LWNoaWxkcmVuJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3VuaXQtY2hpbGRyZW4uY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaG9zdDogeyBjbGFzczogJ2NvbnRlbnQtd3JhcHBlcicgfSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTGlzdFNlcnZpY2UsXG4gICAgICB1c2VFeGlzdGluZzogVW5pdENoaWxkcmVuU2VydmljZSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBVbml0Q2hpbGRyZW5Db21wb25lbnQge1xuICB1bml0JDogT2JzZXJ2YWJsZTxCMkJVbml0PiA9IHRoaXMuY3VycmVudFVuaXRTZXJ2aWNlXG4gICAgPyB0aGlzLmN1cnJlbnRVbml0U2VydmljZS5pdGVtJFxuICAgIDogb2YoeyBhY3RpdmU6IHRydWUgfSk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGN1cnJlbnRVbml0U2VydmljZTogQ3VycmVudFVuaXRTZXJ2aWNlKSB7fVxufVxuIiwiPGN4LW9yZy1zdWItbGlzdCBbc2hvd0hpbnRdPVwidHJ1ZVwiPlxuICA8YVxuICAgIGFjdGlvbnNcbiAgICBjbGFzcz1cImxpbmtcIlxuICAgIHJvdXRlckxpbms9XCJjcmVhdGVcIlxuICAgIFtjbGFzcy5kaXNhYmxlZF09XCIhKHVuaXQkIHwgYXN5bmMpPy5hY3RpdmVcIlxuICA+XG4gICAge3sgJ29yZ2FuaXphdGlvbi5jcmVhdGUnIHwgY3hUcmFuc2xhdGUgfX1cbiAgPC9hPlxuICA8Y3gtb3JnLWRpc2FibGUtaW5mb1xuICAgIGluZm9cbiAgICBpMThuUm9vdD1cIm9yZ1VuaXRDaGlsZHJlblwiXG4gICAgW2Rpc3BsYXlJbmZvQ29uZmlnXT1cIntcbiAgICAgIGRpc2FibGVkQ3JlYXRlOiB0cnVlLFxuICAgICAgZGlzYWJsZWRFbmFibGU6IGZhbHNlLFxuICAgICAgZGlzYWJsZWRFZGl0OiBmYWxzZVxuICAgIH1cIlxuICA+XG4gIDwvY3gtb3JnLWRpc2FibGUtaW5mbz5cbjwvY3gtb3JnLXN1Yi1saXN0PlxuIl19