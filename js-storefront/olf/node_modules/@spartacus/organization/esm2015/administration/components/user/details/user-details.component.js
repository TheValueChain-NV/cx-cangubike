import { ChangeDetectionStrategy, Component } from '@angular/core';
import { startWith, switchMap } from 'rxjs/operators';
import { ItemService } from '../../shared/item.service';
import { UserItemService } from '../services/user-item.service';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/item.service";
import * as i2 from "../../shared/card/card.component";
import * as i3 from "../../shared/detail/toggle-status-action/toggle-status.component";
import * as i4 from "../../shared/detail/disable-info/disable-info.component";
import * as i5 from "@angular/common";
import * as i6 from "@spartacus/storefront";
import * as i7 from "@angular/router";
import * as i8 from "../../shared/item-exists.directive";
import * as i9 from "@spartacus/core";
export class UserDetailsComponent {
    constructor(itemService) {
        this.itemService = itemService;
        this.model$ = this.itemService.key$.pipe(switchMap((code) => this.itemService.load(code)), startWith({}));
        this.isInEditMode$ = this.itemService.isInEditMode$;
    }
}
UserDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserDetailsComponent, deps: [{ token: i1.ItemService }], target: i0.ɵɵFactoryTarget.Component });
UserDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserDetailsComponent, selector: "cx-org-user-details", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: UserItemService,
        },
    ], ngImport: i0, template: "<cx-org-card\n  *ngIf=\"model$ | async as model\"\n  i18nRoot=\"orgUser.details\"\n  [cxFocus]=\"{ refreshFocus: model }\"\n>\n  <a\n    actions\n    class=\"link edit\"\n    [class.disabled]=\"!model.active || (isInEditMode$ | async)\"\n    [routerLink]=\"{ cxRoute: 'orgUserEdit', params: model } | cxUrl\"\n  >\n    {{ 'organization.edit' | cxTranslate }}\n  </a>\n\n  <cx-org-toggle-status\n    actions\n    key=\"customerId\"\n    i18nRoot=\"orgUser\"\n  ></cx-org-toggle-status>\n\n  <cx-org-disable-info info i18nRoot=\"orgUser\"> </cx-org-disable-info>\n\n  <section main class=\"details\" cxOrgItemExists>\n    <div class=\"property\">\n      <label>{{ 'orgUser.name' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.name }}\n      </span>\n    </div>\n\n    <div class=\"property full-width\">\n      <label>{{ 'orgUser.uid' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.uid }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUser.roles' | cxTranslate }}</label>\n      <ul class=\"value\">\n        <li\n          *ngFor=\"let role of model.roles; let isLast = last\"\n          [innerText]=\"'organization.userRoles.' + role | cxTranslate\"\n        ></li>\n        <li *ngIf=\"model.roles?.length === 0\">-</li>\n      </ul>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUser.orgUnit' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.orgUnit\n          } | cxUrl\n        \"\n      >\n        {{ model.orgUnit?.name }}\n      </a>\n    </div>\n    <div class=\"property full-width\">\n      <a\n        *ngIf=\"model.customerId\"\n        class=\"link\"\n        [class.disabled]=\"!model.active\"\n        [routerLink]=\"\n          { cxRoute: 'orgUserChangePassword', params: model } | cxUrl\n        \"\n      >\n        {{ 'orgUser.links.password' | cxTranslate }}\n      </a>\n    </div>\n  </section>\n\n  <section main class=\"link-list\">\n    <ng-container *ngIf=\"model.customerId\">\n      <a\n        class=\"link\"\n        [routerLink]=\"{ cxRoute: 'orgUserApprovers', params: model } | cxUrl\"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUser.links.approvers' | cxTranslate }}\n      </a>\n      <a\n        class=\"link\"\n        [routerLink]=\"{ cxRoute: 'orgUserUserGroups', params: model } | cxUrl\"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUser.links.userGroup' | cxTranslate }}\n      </a>\n\n      <a\n        class=\"link\"\n        [routerLink]=\"{ cxRoute: 'orgUserPermissions', params: model } | cxUrl\"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUser.links.permission' | cxTranslate }}\n      </a>\n    </ng-container>\n  </section>\n</cx-org-card>\n", components: [{ type: i2.CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: i3.ToggleStatusComponent, selector: "cx-org-toggle-status", inputs: ["i18nRoot", "key", "disabled"] }, { type: i4.DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i7.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i8.ItemExistsDirective, selector: "[cxOrgItemExists]" }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }], pipes: { "async": i5.AsyncPipe, "cxUrl": i9.UrlPipe, "cxTranslate": i9.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-user-details',
                    templateUrl: './user-details.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ItemService,
                            useExisting: UserItemService,
                        },
                    ],
                    host: { class: 'content-wrapper' },
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1kZXRhaWxzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91c2VyL2RldGFpbHMvdXNlci1kZXRhaWxzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91c2VyL2RldGFpbHMvdXNlci1kZXRhaWxzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7Ozs7Ozs7OztBQWNoRSxNQUFNLE9BQU8sb0JBQW9CO0lBUS9CLFlBQXNCLFdBQWlDO1FBQWpDLGdCQUFXLEdBQVgsV0FBVyxDQUFzQjtRQU52RCxXQUFNLEdBQXdCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDdEQsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUNoRCxTQUFTLENBQUMsRUFBRSxDQUFDLENBQ2QsQ0FBQztRQUNGLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFFVyxDQUFDOztpSEFSaEQsb0JBQW9CO3FHQUFwQixvQkFBb0IsMkZBUnBCO1FBQ1Q7WUFDRSxPQUFPLEVBQUUsV0FBVztZQUNwQixXQUFXLEVBQUUsZUFBZTtTQUM3QjtLQUNGLDBCQ2hCSCxpMEZBdUdBOzJGRHBGYSxvQkFBb0I7a0JBWmhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsV0FBVyxFQUFFLCtCQUErQjtvQkFDNUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsV0FBVzs0QkFDcEIsV0FBVyxFQUFFLGVBQWU7eUJBQzdCO3FCQUNGO29CQUNELElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtpQkFDbkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCMkJVc2VyIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3RhcnRXaXRoLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJdGVtU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9pdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlckl0ZW1TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdXNlci1pdGVtLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1vcmctdXNlci1kZXRhaWxzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3VzZXItZGV0YWlscy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBJdGVtU2VydmljZSxcbiAgICAgIHVzZUV4aXN0aW5nOiBVc2VySXRlbVNlcnZpY2UsXG4gICAgfSxcbiAgXSxcbiAgaG9zdDogeyBjbGFzczogJ2NvbnRlbnQtd3JhcHBlcicgfSxcbn0pXG5leHBvcnQgY2xhc3MgVXNlckRldGFpbHNDb21wb25lbnQge1xuICB1c2VyR3VhcmRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgbW9kZWwkOiBPYnNlcnZhYmxlPEIyQlVzZXI+ID0gdGhpcy5pdGVtU2VydmljZS5rZXkkLnBpcGUoXG4gICAgc3dpdGNoTWFwKChjb2RlKSA9PiB0aGlzLml0ZW1TZXJ2aWNlLmxvYWQoY29kZSkpLFxuICAgIHN0YXJ0V2l0aCh7fSlcbiAgKTtcbiAgaXNJbkVkaXRNb2RlJCA9IHRoaXMuaXRlbVNlcnZpY2UuaXNJbkVkaXRNb2RlJDtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaXRlbVNlcnZpY2U6IEl0ZW1TZXJ2aWNlPEIyQlVzZXI+KSB7fVxufVxuIiwiPGN4LW9yZy1jYXJkXG4gICpuZ0lmPVwibW9kZWwkIHwgYXN5bmMgYXMgbW9kZWxcIlxuICBpMThuUm9vdD1cIm9yZ1VzZXIuZGV0YWlsc1wiXG4gIFtjeEZvY3VzXT1cInsgcmVmcmVzaEZvY3VzOiBtb2RlbCB9XCJcbj5cbiAgPGFcbiAgICBhY3Rpb25zXG4gICAgY2xhc3M9XCJsaW5rIGVkaXRcIlxuICAgIFtjbGFzcy5kaXNhYmxlZF09XCIhbW9kZWwuYWN0aXZlIHx8IChpc0luRWRpdE1vZGUkIHwgYXN5bmMpXCJcbiAgICBbcm91dGVyTGlua109XCJ7IGN4Um91dGU6ICdvcmdVc2VyRWRpdCcsIHBhcmFtczogbW9kZWwgfSB8IGN4VXJsXCJcbiAgPlxuICAgIHt7ICdvcmdhbml6YXRpb24uZWRpdCcgfCBjeFRyYW5zbGF0ZSB9fVxuICA8L2E+XG5cbiAgPGN4LW9yZy10b2dnbGUtc3RhdHVzXG4gICAgYWN0aW9uc1xuICAgIGtleT1cImN1c3RvbWVySWRcIlxuICAgIGkxOG5Sb290PVwib3JnVXNlclwiXG4gID48L2N4LW9yZy10b2dnbGUtc3RhdHVzPlxuXG4gIDxjeC1vcmctZGlzYWJsZS1pbmZvIGluZm8gaTE4blJvb3Q9XCJvcmdVc2VyXCI+IDwvY3gtb3JnLWRpc2FibGUtaW5mbz5cblxuICA8c2VjdGlvbiBtYWluIGNsYXNzPVwiZGV0YWlsc1wiIGN4T3JnSXRlbUV4aXN0cz5cbiAgICA8ZGl2IGNsYXNzPVwicHJvcGVydHlcIj5cbiAgICAgIDxsYWJlbD57eyAnb3JnVXNlci5uYW1lJyB8IGN4VHJhbnNsYXRlIH19PC9sYWJlbD5cbiAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj5cbiAgICAgICAge3sgbW9kZWwubmFtZSB9fVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cInByb3BlcnR5IGZ1bGwtd2lkdGhcIj5cbiAgICAgIDxsYWJlbD57eyAnb3JnVXNlci51aWQnIHwgY3hUcmFuc2xhdGUgfX08L2xhYmVsPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPlxuICAgICAgICB7eyBtb2RlbC51aWQgfX1cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJwcm9wZXJ0eVwiPlxuICAgICAgPGxhYmVsPnt7ICdvcmdVc2VyLnJvbGVzJyB8IGN4VHJhbnNsYXRlIH19PC9sYWJlbD5cbiAgICAgIDx1bCBjbGFzcz1cInZhbHVlXCI+XG4gICAgICAgIDxsaVxuICAgICAgICAgICpuZ0Zvcj1cImxldCByb2xlIG9mIG1vZGVsLnJvbGVzOyBsZXQgaXNMYXN0ID0gbGFzdFwiXG4gICAgICAgICAgW2lubmVyVGV4dF09XCInb3JnYW5pemF0aW9uLnVzZXJSb2xlcy4nICsgcm9sZSB8IGN4VHJhbnNsYXRlXCJcbiAgICAgICAgPjwvbGk+XG4gICAgICAgIDxsaSAqbmdJZj1cIm1vZGVsLnJvbGVzPy5sZW5ndGggPT09IDBcIj4tPC9saT5cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwicHJvcGVydHlcIj5cbiAgICAgIDxsYWJlbD57eyAnb3JnVXNlci5vcmdVbml0JyB8IGN4VHJhbnNsYXRlIH19PC9sYWJlbD5cbiAgICAgIDxhXG4gICAgICAgIGNsYXNzPVwidmFsdWVcIlxuICAgICAgICBbcm91dGVyTGlua109XCJcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjeFJvdXRlOiAnb3JnVW5pdERldGFpbHMnLFxuICAgICAgICAgICAgcGFyYW1zOiBtb2RlbC5vcmdVbml0XG4gICAgICAgICAgfSB8IGN4VXJsXG4gICAgICAgIFwiXG4gICAgICA+XG4gICAgICAgIHt7IG1vZGVsLm9yZ1VuaXQ/Lm5hbWUgfX1cbiAgICAgIDwvYT5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicHJvcGVydHkgZnVsbC13aWR0aFwiPlxuICAgICAgPGFcbiAgICAgICAgKm5nSWY9XCJtb2RlbC5jdXN0b21lcklkXCJcbiAgICAgICAgY2xhc3M9XCJsaW5rXCJcbiAgICAgICAgW2NsYXNzLmRpc2FibGVkXT1cIiFtb2RlbC5hY3RpdmVcIlxuICAgICAgICBbcm91dGVyTGlua109XCJcbiAgICAgICAgICB7IGN4Um91dGU6ICdvcmdVc2VyQ2hhbmdlUGFzc3dvcmQnLCBwYXJhbXM6IG1vZGVsIH0gfCBjeFVybFxuICAgICAgICBcIlxuICAgICAgPlxuICAgICAgICB7eyAnb3JnVXNlci5saW5rcy5wYXNzd29yZCcgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgPC9hPlxuICAgIDwvZGl2PlxuICA8L3NlY3Rpb24+XG5cbiAgPHNlY3Rpb24gbWFpbiBjbGFzcz1cImxpbmstbGlzdFwiPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJtb2RlbC5jdXN0b21lcklkXCI+XG4gICAgICA8YVxuICAgICAgICBjbGFzcz1cImxpbmtcIlxuICAgICAgICBbcm91dGVyTGlua109XCJ7IGN4Um91dGU6ICdvcmdVc2VyQXBwcm92ZXJzJywgcGFyYW1zOiBtb2RlbCB9IHwgY3hVcmxcIlxuICAgICAgICByb3V0ZXJMaW5rQWN0aXZlPVwiaXMtY3VycmVudFwiXG4gICAgICA+XG4gICAgICAgIHt7ICdvcmdVc2VyLmxpbmtzLmFwcHJvdmVycycgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgPC9hPlxuICAgICAgPGFcbiAgICAgICAgY2xhc3M9XCJsaW5rXCJcbiAgICAgICAgW3JvdXRlckxpbmtdPVwieyBjeFJvdXRlOiAnb3JnVXNlclVzZXJHcm91cHMnLCBwYXJhbXM6IG1vZGVsIH0gfCBjeFVybFwiXG4gICAgICAgIHJvdXRlckxpbmtBY3RpdmU9XCJpcy1jdXJyZW50XCJcbiAgICAgID5cbiAgICAgICAge3sgJ29yZ1VzZXIubGlua3MudXNlckdyb3VwJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgICA8L2E+XG5cbiAgICAgIDxhXG4gICAgICAgIGNsYXNzPVwibGlua1wiXG4gICAgICAgIFtyb3V0ZXJMaW5rXT1cInsgY3hSb3V0ZTogJ29yZ1VzZXJQZXJtaXNzaW9ucycsIHBhcmFtczogbW9kZWwgfSB8IGN4VXJsXCJcbiAgICAgICAgcm91dGVyTGlua0FjdGl2ZT1cImlzLWN1cnJlbnRcIlxuICAgICAgPlxuICAgICAgICB7eyAnb3JnVXNlci5saW5rcy5wZXJtaXNzaW9uJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgICA8L2E+XG4gICAgPC9uZy1jb250YWluZXI+XG4gIDwvc2VjdGlvbj5cbjwvY3gtb3JnLWNhcmQ+XG4iXX0=