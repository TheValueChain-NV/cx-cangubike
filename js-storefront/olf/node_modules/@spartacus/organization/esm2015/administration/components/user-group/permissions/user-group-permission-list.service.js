import { Injectable } from '@angular/core';
import { SubListService } from '../../shared/sub-list/sub-list.service';
import { OrganizationTableType } from '../../shared/organization.model';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/organization/administration/core";
export class UserGroupPermissionListService extends SubListService {
    constructor(tableService, userGroupService, permissionService) {
        super(tableService);
        this.tableService = tableService;
        this.userGroupService = userGroupService;
        this.permissionService = permissionService;
        this.tableType = OrganizationTableType.USER_GROUP_PERMISSIONS;
        this._domainType = OrganizationTableType.PERMISSION;
    }
    /**
     *
     * @override
     * Loads all b2b users.
     *
     * @param code The user group code.
     */
    load(pagination, code) {
        return this.userGroupService.getAvailableOrderApprovalPermissions(code, pagination);
    }
    /**
     * @override
     * Assign user to the user group.
     */
    assign(userGroupCode, permissionCode) {
        this.userGroupService.assignPermission(userGroupCode, permissionCode);
        return this.permissionService.getLoadingStatus(permissionCode);
    }
    /**
     * @override
     * Unassigns the user from the user group.
     */
    unassign(userGroupCode, permissionCode) {
        this.userGroupService.unassignPermission(userGroupCode, permissionCode);
        return this.permissionService.getLoadingStatus(permissionCode);
    }
}
UserGroupPermissionListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupPermissionListService, deps: [{ token: i1.TableService }, { token: i2.UserGroupService }, { token: i2.PermissionService }], target: i0.ɵɵFactoryTarget.Injectable });
UserGroupPermissionListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupPermissionListService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupPermissionListService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.TableService }, { type: i2.UserGroupService }, { type: i2.PermissionService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1ncm91cC1wZXJtaXNzaW9uLWxpc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91c2VyLWdyb3VwL3Blcm1pc3Npb25zL3VzZXItZ3JvdXAtcGVybWlzc2lvbi1saXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVczQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDeEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7Ozs7QUFLeEUsTUFBTSxPQUFPLDhCQUErQixTQUFRLGNBQTBCO0lBSTVFLFlBQ1ksWUFBMEIsRUFDMUIsZ0JBQWtDLEVBQ2xDLGlCQUFvQztRQUU5QyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFKVixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFOdEMsY0FBUyxHQUFHLHFCQUFxQixDQUFDLHNCQUFzQixDQUFDO1FBQ3pELGdCQUFXLEdBQUcscUJBQXFCLENBQUMsVUFBVSxDQUFDO0lBUXpELENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDTyxJQUFJLENBQ1osVUFBMkIsRUFDM0IsSUFBWTtRQUVaLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLG9DQUFvQyxDQUMvRCxJQUFJLEVBQ0osVUFBVSxDQUNYLENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUNKLGFBQXFCLEVBQ3JCLGNBQXNCO1FBRXRCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDdEUsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVEsQ0FDTixhQUFxQixFQUNyQixjQUFzQjtRQUV0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3hFLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7OzJIQW5EVSw4QkFBOEI7K0hBQTlCLDhCQUE4QixjQUY3QixNQUFNOzJGQUVQLDhCQUE4QjtrQkFIMUMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFbnRpdGllc01vZGVsLCBQYWdpbmF0aW9uTW9kZWwgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHtcbiAgUGVybWlzc2lvbixcbiAgUGVybWlzc2lvblNlcnZpY2UsXG4gIFVzZXJHcm91cCxcbiAgVXNlckdyb3VwU2VydmljZSxcbiAgT3JnYW5pemF0aW9uSXRlbVN0YXR1cyxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29yZSc7XG5pbXBvcnQgeyBUYWJsZVNlcnZpY2UgfSBmcm9tICdAc3BhcnRhY3VzL3N0b3JlZnJvbnQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU3ViTGlzdFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvc3ViLWxpc3Qvc3ViLWxpc3Quc2VydmljZSc7XG5pbXBvcnQgeyBPcmdhbml6YXRpb25UYWJsZVR5cGUgfSBmcm9tICcuLi8uLi9zaGFyZWQvb3JnYW5pemF0aW9uLm1vZGVsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJHcm91cFBlcm1pc3Npb25MaXN0U2VydmljZSBleHRlbmRzIFN1Ykxpc3RTZXJ2aWNlPFBlcm1pc3Npb24+IHtcbiAgcHJvdGVjdGVkIHRhYmxlVHlwZSA9IE9yZ2FuaXphdGlvblRhYmxlVHlwZS5VU0VSX0dST1VQX1BFUk1JU1NJT05TO1xuICBwcm90ZWN0ZWQgX2RvbWFpblR5cGUgPSBPcmdhbml6YXRpb25UYWJsZVR5cGUuUEVSTUlTU0lPTjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgdGFibGVTZXJ2aWNlOiBUYWJsZVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHVzZXJHcm91cFNlcnZpY2U6IFVzZXJHcm91cFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHBlcm1pc3Npb25TZXJ2aWNlOiBQZXJtaXNzaW9uU2VydmljZVxuICApIHtcbiAgICBzdXBlcih0YWJsZVNlcnZpY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBvdmVycmlkZVxuICAgKiBMb2FkcyBhbGwgYjJiIHVzZXJzLlxuICAgKlxuICAgKiBAcGFyYW0gY29kZSBUaGUgdXNlciBncm91cCBjb2RlLlxuICAgKi9cbiAgcHJvdGVjdGVkIGxvYWQoXG4gICAgcGFnaW5hdGlvbjogUGFnaW5hdGlvbk1vZGVsLFxuICAgIGNvZGU6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8UGVybWlzc2lvbj4+IHtcbiAgICByZXR1cm4gdGhpcy51c2VyR3JvdXBTZXJ2aWNlLmdldEF2YWlsYWJsZU9yZGVyQXBwcm92YWxQZXJtaXNzaW9ucyhcbiAgICAgIGNvZGUsXG4gICAgICBwYWdpbmF0aW9uXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQXNzaWduIHVzZXIgdG8gdGhlIHVzZXIgZ3JvdXAuXG4gICAqL1xuICBhc3NpZ24oXG4gICAgdXNlckdyb3VwQ29kZTogc3RyaW5nLFxuICAgIHBlcm1pc3Npb25Db2RlOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxPcmdhbml6YXRpb25JdGVtU3RhdHVzPFVzZXJHcm91cD4+IHtcbiAgICB0aGlzLnVzZXJHcm91cFNlcnZpY2UuYXNzaWduUGVybWlzc2lvbih1c2VyR3JvdXBDb2RlLCBwZXJtaXNzaW9uQ29kZSk7XG4gICAgcmV0dXJuIHRoaXMucGVybWlzc2lvblNlcnZpY2UuZ2V0TG9hZGluZ1N0YXR1cyhwZXJtaXNzaW9uQ29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIFVuYXNzaWducyB0aGUgdXNlciBmcm9tIHRoZSB1c2VyIGdyb3VwLlxuICAgKi9cbiAgdW5hc3NpZ24oXG4gICAgdXNlckdyb3VwQ29kZTogc3RyaW5nLFxuICAgIHBlcm1pc3Npb25Db2RlOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxPcmdhbml6YXRpb25JdGVtU3RhdHVzPFVzZXJHcm91cD4+IHtcbiAgICB0aGlzLnVzZXJHcm91cFNlcnZpY2UudW5hc3NpZ25QZXJtaXNzaW9uKHVzZXJHcm91cENvZGUsIHBlcm1pc3Npb25Db2RlKTtcbiAgICByZXR1cm4gdGhpcy5wZXJtaXNzaW9uU2VydmljZS5nZXRMb2FkaW5nU3RhdHVzKHBlcm1pc3Npb25Db2RlKTtcbiAgfVxufVxuIl19