import { Injectable } from '@angular/core';
import { ItemService } from '../../shared/item.service';
import * as i0 from "@angular/core";
import * as i1 from "./current-unit.service";
import * as i2 from "@spartacus/core";
import * as i3 from "../form/unit-form.service";
import * as i4 from "@spartacus/organization/administration/core";
export class UnitItemService extends ItemService {
    constructor(currentItemService, routingService, formService, unitService) {
        super(currentItemService, routingService, formService);
        this.currentItemService = currentItemService;
        this.routingService = routingService;
        this.formService = formService;
        this.unitService = unitService;
    }
    /**
     * @override
     * Returns the unit for the given code.
     *
     * Loads the unit each time, to ensure accurate data is resolved.
     */
    load(code) {
        this.unitService.load(code);
        return this.unitService.get(code);
    }
    update(code, value) {
        this.unitService.update(code, value);
        return this.unitService.getLoadingStatus(value.uid);
    }
    create(value) {
        this.unitService.create(value);
        return this.unitService.getLoadingStatus(value.uid);
    }
    /**
     * @override
     * Returns 'unitDetails'
     */
    getDetailsRoute() {
        return 'orgUnitDetails';
    }
}
UnitItemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitItemService, deps: [{ token: i1.CurrentUnitService }, { token: i2.RoutingService }, { token: i3.UnitFormService }, { token: i4.OrgUnitService }], target: i0.ɵɵFactoryTarget.Injectable });
UnitItemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitItemService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitItemService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.CurrentUnitService }, { type: i2.RoutingService }, { type: i3.UnitFormService }, { type: i4.OrgUnitService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC1pdGVtLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvdW5pdC9zZXJ2aWNlcy91bml0LWl0ZW0uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7Ozs7O0FBT3hELE1BQU0sT0FBTyxlQUFnQixTQUFRLFdBQW9CO0lBQ3ZELFlBQ1ksa0JBQXNDLEVBQ3RDLGNBQThCLEVBQzlCLFdBQTRCLEVBQzVCLFdBQTJCO1FBRXJDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFMN0MsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsZ0JBQVcsR0FBWCxXQUFXLENBQWlCO1FBQzVCLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtJQUd2QyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxJQUFJLENBQUMsSUFBWTtRQUNmLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBYztRQUN6QixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRVMsTUFBTSxDQUNkLEtBQWM7UUFFZCxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRDs7O09BR0c7SUFDTyxlQUFlO1FBQ3ZCLE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQzs7NEdBdkNVLGVBQWU7Z0hBQWYsZUFBZSxjQUZkLE1BQU07MkZBRVAsZUFBZTtrQkFIM0IsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCMkJVbml0LCBSb3V0aW5nU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQge1xuICBPcmdhbml6YXRpb25JdGVtU3RhdHVzLFxuICBPcmdVbml0U2VydmljZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJdGVtU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9pdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgVW5pdEZvcm1TZXJ2aWNlIH0gZnJvbSAnLi4vZm9ybS91bml0LWZvcm0uc2VydmljZSc7XG5pbXBvcnQgeyBDdXJyZW50VW5pdFNlcnZpY2UgfSBmcm9tICcuL2N1cnJlbnQtdW5pdC5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFVuaXRJdGVtU2VydmljZSBleHRlbmRzIEl0ZW1TZXJ2aWNlPEIyQlVuaXQ+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGN1cnJlbnRJdGVtU2VydmljZTogQ3VycmVudFVuaXRTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCByb3V0aW5nU2VydmljZTogUm91dGluZ1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGZvcm1TZXJ2aWNlOiBVbml0Rm9ybVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHVuaXRTZXJ2aWNlOiBPcmdVbml0U2VydmljZVxuICApIHtcbiAgICBzdXBlcihjdXJyZW50SXRlbVNlcnZpY2UsIHJvdXRpbmdTZXJ2aWNlLCBmb3JtU2VydmljZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIFJldHVybnMgdGhlIHVuaXQgZm9yIHRoZSBnaXZlbiBjb2RlLlxuICAgKlxuICAgKiBMb2FkcyB0aGUgdW5pdCBlYWNoIHRpbWUsIHRvIGVuc3VyZSBhY2N1cmF0ZSBkYXRhIGlzIHJlc29sdmVkLlxuICAgKi9cbiAgbG9hZChjb2RlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEIyQlVuaXQ+IHtcbiAgICB0aGlzLnVuaXRTZXJ2aWNlLmxvYWQoY29kZSk7XG4gICAgcmV0dXJuIHRoaXMudW5pdFNlcnZpY2UuZ2V0KGNvZGUpO1xuICB9XG5cbiAgdXBkYXRlKGNvZGUsIHZhbHVlOiBCMkJVbml0KTogT2JzZXJ2YWJsZTxPcmdhbml6YXRpb25JdGVtU3RhdHVzPEIyQlVuaXQ+PiB7XG4gICAgdGhpcy51bml0U2VydmljZS51cGRhdGUoY29kZSwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzLnVuaXRTZXJ2aWNlLmdldExvYWRpbmdTdGF0dXModmFsdWUudWlkKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGUoXG4gICAgdmFsdWU6IEIyQlVuaXRcbiAgKTogT2JzZXJ2YWJsZTxPcmdhbml6YXRpb25JdGVtU3RhdHVzPEIyQlVuaXQ+PiB7XG4gICAgdGhpcy51bml0U2VydmljZS5jcmVhdGUodmFsdWUpO1xuICAgIHJldHVybiB0aGlzLnVuaXRTZXJ2aWNlLmdldExvYWRpbmdTdGF0dXModmFsdWUudWlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogUmV0dXJucyAndW5pdERldGFpbHMnXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0RGV0YWlsc1JvdXRlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdvcmdVbml0RGV0YWlscyc7XG4gIH1cbn1cbiJdfQ==