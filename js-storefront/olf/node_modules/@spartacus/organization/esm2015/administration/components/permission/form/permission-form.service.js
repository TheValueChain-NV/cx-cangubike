import { Injectable } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { CustomFormValidators } from '@spartacus/storefront';
import { Subscription } from 'rxjs';
import { distinctUntilChanged, filter } from 'rxjs/operators';
import { FormService } from '../../shared/form/form.service';
import * as i0 from "@angular/core";
export var PermissionType;
(function (PermissionType) {
    PermissionType["ORDER"] = "B2BOrderThresholdPermission";
    PermissionType["TIME_SPAN"] = "B2BOrderThresholdTimespanPermission";
    PermissionType["EXCEEDED"] = "B2BBudgetExceededPermission";
})(PermissionType || (PermissionType = {}));
export class PermissionFormService extends FormService {
    constructor() {
        super(...arguments);
        this.subscription = new Subscription();
    }
    /**
     * @override
     * Builds a generic sub form for permissions and amends the form
     * based on the for approval permission type.
     */
    build() {
        const form = new FormGroup({});
        form.setControl('code', new FormControl('', [
            Validators.required,
            CustomFormValidators.noSpecialCharacters,
        ]));
        form.setControl('orgUnit', new FormGroup({
            uid: new FormControl(undefined, Validators.required),
        }));
        form.setControl('orderApprovalPermissionType', new FormGroup({
            code: new FormControl(undefined, Validators.required),
        }));
        // subscribe to permission type changes and amend accordingly.
        this.subscription.add(form
            .get('orderApprovalPermissionType')
            .get('code')
            .valueChanges.pipe(distinctUntilChanged(), filter((code) => !!code))
            .subscribe((code) => this.amend(form, code)));
        this.form = form;
    }
    /**
     * @override
     * The form is using  `B2BBudgetExceededPermission` by default.
     */
    get defaultValue() {
        return {
            orderApprovalPermissionType: {
                code: PermissionType.EXCEEDED,
            },
        };
    }
    /**
     * Amends the form structure based on the `PermissionType`.
     */
    amend(form, code) {
        if (code === PermissionType.EXCEEDED) {
            form.removeControl('periodRange');
            form.removeControl('currency');
            form.removeControl('threshold');
        }
        if (code === PermissionType.TIME_SPAN || code === PermissionType.ORDER) {
            if (!form.get('currency')) {
                form.setControl('currency', new FormGroup({
                    isocode: new FormControl(undefined, Validators.required),
                }));
            }
            if (!form.get('threshold')) {
                form.setControl('threshold', new FormControl('', Validators.required));
            }
        }
        if (code === PermissionType.ORDER) {
            form.removeControl('periodRange');
        }
        if (code === PermissionType.TIME_SPAN) {
            if (!form.get('periodRange')) {
                form.setControl('periodRange', new FormControl('', Validators.required));
            }
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    patchData(item) {
        super.patchData(item);
        if ((item === null || item === void 0 ? void 0 : item.code) !== undefined) {
            this.form.get('orderApprovalPermissionType').disable();
        }
    }
}
PermissionFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionFormService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
PermissionFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionFormService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionFormService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,