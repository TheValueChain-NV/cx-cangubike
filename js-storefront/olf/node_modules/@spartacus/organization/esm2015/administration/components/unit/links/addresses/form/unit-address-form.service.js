import { Injectable } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { filter, switchMap, tap } from 'rxjs/operators';
import { FormService } from '../../../../shared/form/form.service';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@spartacus/user/profile/root";
export class UnitAddressFormService extends FormService {
    constructor(userAddressService, userProfileFacade) {
        super();
        this.userAddressService = userAddressService;
        this.userProfileFacade = userProfileFacade;
    }
    build() {
        const form = new FormGroup({});
        form.setControl('id', new FormControl(''));
        form.setControl('titleCode', new FormControl(''));
        form.setControl('firstName', new FormControl('', Validators.required));
        form.setControl('lastName', new FormControl('', Validators.required));
        form.setControl('line1', new FormControl('', Validators.required));
        form.setControl('line2', new FormControl(''));
        form.setControl('town', new FormControl('', Validators.required));
        form.setControl('country', new FormGroup({
            isocode: new FormControl(null, Validators.required),
        }));
        form.setControl('region', new FormGroup({
            isocode: new FormControl(null, Validators.required),
        }));
        form.setControl('postalCode', new FormControl('', Validators.required));
        form.setControl('phone', new FormControl(''));
        this.form = form;
    }
    getCountries() {
        return this.userAddressService.getDeliveryCountries().pipe(tap((countries) => {
            if (Object.keys(countries).length === 0) {
                this.userAddressService.loadDeliveryCountries();
            }
        }));
    }
    getTitles() {
        return this.userProfileFacade.getTitles();
    }
    getRegions() {
        let selectedCountryCode = this.form.get('country.isocode').value;
        let newCountryCode;
        return this.getForm()
            .get('country.isocode')
            .valueChanges.pipe(filter((countryIsoCode) => Boolean(countryIsoCode)), switchMap((countryIsoCode) => {
            newCountryCode = countryIsoCode;
            return this.userAddressService.getRegions(countryIsoCode);
        }), tap((regions) => {
            const regionControl = this.form.get('region.isocode');
            if (!regions || regions.length === 0) {
                regionControl.disable();
            }
            else {
                regionControl.enable();
            }
            if (selectedCountryCode && newCountryCode !== selectedCountryCode) {
                regionControl.reset();
            }
            selectedCountryCode = newCountryCode;
        }));
    }
}
UnitAddressFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitAddressFormService, deps: [{ token: i1.UserAddressService }, { token: i2.UserProfileFacade }], target: i0.ɵɵFactoryTarget.Injectable });
UnitAddressFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitAddressFormService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitAddressFormService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.UserAddressService }, { type: i2.UserProfileFacade }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC1hZGRyZXNzLWZvcm0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91bml0L2xpbmtzL2FkZHJlc3Nlcy9mb3JtL3VuaXQtYWRkcmVzcy1mb3JtLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVVwRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7Ozs7QUFLbkUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLFdBQW9CO0lBQzlELFlBQ1ksa0JBQXNDLEVBQ3RDLGlCQUFvQztRQUU5QyxLQUFLLEVBQUUsQ0FBQztRQUhFLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtJQUdoRCxDQUFDO0lBRVMsS0FBSztRQUNiLE1BQU0sSUFBSSxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENB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S0FBSyxtQkFBbUIsRUFBRTtnQkFDakUsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ3ZCO1lBQ0QsbUJBQW1CLEdBQUcsY0FBYyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDOzttSEExRVUsc0JBQXNCO3VIQUF0QixzQkFBc0IsY0FGckIsTUFBTTsyRkFFUCxzQkFBc0I7a0JBSGxDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7XG4gIEFkZHJlc3MsXG4gIENvdW50cnksXG4gIFJlZ2lvbixcbiAgVGl0bGUsXG4gIFVzZXJBZGRyZXNzU2VydmljZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IFVzZXJQcm9maWxlRmFjYWRlIH0gZnJvbSAnQHNwYXJ0YWN1cy91c2VyL3Byb2ZpbGUvcm9vdCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRm9ybVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvZm9ybS9mb3JtLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVW5pdEFkZHJlc3NGb3JtU2VydmljZSBleHRlbmRzIEZvcm1TZXJ2aWNlPEFkZHJlc3M+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHVzZXJBZGRyZXNzU2VydmljZTogVXNlckFkZHJlc3NTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCB1c2VyUHJvZmlsZUZhY2FkZTogVXNlclByb2ZpbGVGYWNhZGVcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBidWlsZCgpIHtcbiAgICBjb25zdCBmb3JtID0gbmV3IEZvcm1Hcm91cCh7fSk7XG4gICAgZm9ybS5zZXRDb250cm9sKCdpZCcsIG5ldyBGb3JtQ29udHJvbCgnJykpO1xuICAgIGZvcm0uc2V0Q29udHJvbCgndGl0bGVDb2RlJywgbmV3IEZvcm1Db250cm9sKCcnKSk7XG4gICAgZm9ybS5zZXRDb250cm9sKCdmaXJzdE5hbWUnLCBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpKTtcbiAgICBmb3JtLnNldENvbnRyb2woJ2xhc3ROYW1lJywgbmV3IEZvcm1Db250cm9sKCcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSk7XG4gICAgZm9ybS5zZXRDb250cm9sKCdsaW5lMScsIG5ldyBGb3JtQ29udHJvbCgnJywgVmFsaWRhdG9ycy5yZXF1aXJlZCkpO1xuICAgIGZvcm0uc2V0Q29udHJvbCgnbGluZTInLCBuZXcgRm9ybUNvbnRyb2woJycpKTtcbiAgICBmb3JtLnNldENvbnRyb2woJ3Rvd24nLCBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpKTtcbiAgICBmb3JtLnNldENvbnRyb2woXG4gICAgICAnY291bnRyeScsXG4gICAgICBuZXcgRm9ybUdyb3VwKHtcbiAgICAgICAgaXNvY29kZTogbmV3IEZvcm1Db250cm9sKG51bGwsIFZhbGlkYXRvcnMucmVxdWlyZWQpLFxuICAgICAgfSlcbiAgICApO1xuICAgIGZvcm0uc2V0Q29udHJvbChcbiAgICAgICdyZWdpb24nLFxuICAgICAgbmV3IEZvcm1Hcm91cCh7XG4gICAgICAgIGlzb2NvZGU6IG5ldyBGb3JtQ29udHJvbChudWxsLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSxcbiAgICAgIH0pXG4gICAgKTtcbiAgICBmb3JtLnNldENvbnRyb2woJ3Bvc3RhbENvZGUnLCBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpKTtcbiAgICBmb3JtLnNldENvbnRyb2woJ3Bob25lJywgbmV3IEZvcm1Db250cm9sKCcnKSk7XG5cbiAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICB9XG5cbiAgZ2V0Q291bnRyaWVzKCk6IE9ic2VydmFibGU8Q291bnRyeVtdPiB7XG4gICAgcmV0dXJuIHRoaXMudXNlckFkZHJlc3NTZXJ2aWNlLmdldERlbGl2ZXJ5Q291bnRyaWVzKCkucGlwZShcbiAgICAgIHRhcCgoY291bnRyaWVzKSA9PiB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhjb3VudHJpZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMudXNlckFkZHJlc3NTZXJ2aWNlLmxvYWREZWxpdmVyeUNvdW50cmllcygpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBnZXRUaXRsZXMoKTogT2JzZXJ2YWJsZTxUaXRsZVtdPiB7XG4gICAgcmV0dXJuIHRoaXMudXNlclByb2ZpbGVGYWNhZGUuZ2V0VGl0bGVzKCk7XG4gIH1cblxuICBnZXRSZWdpb25zKCk6IE9ic2VydmFibGU8UmVnaW9uW10+IHtcbiAgICBsZXQgc2VsZWN0ZWRDb3VudHJ5Q29kZSA9IHRoaXMuZm9ybS5nZXQoJ2NvdW50cnkuaXNvY29kZScpLnZhbHVlO1xuICAgIGxldCBuZXdDb3VudHJ5Q29kZTogc3RyaW5nO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0Rm9ybSgpXG4gICAgICAuZ2V0KCdjb3VudHJ5Lmlzb2NvZGUnKVxuICAgICAgLnZhbHVlQ2hhbmdlcy5waXBlKFxuICAgICAgICBmaWx0ZXIoKGNvdW50cnlJc29Db2RlKSA9PiBCb29sZWFuKGNvdW50cnlJc29Db2RlKSksXG4gICAgICAgIHN3aXRjaE1hcCgoY291bnRyeUlzb0NvZGUpID0+IHtcbiAgICAgICAgICBuZXdDb3VudHJ5Q29kZSA9IGNvdW50cnlJc29Db2RlO1xuICAgICAgICAgIHJldHVybiB0aGlzLnVzZXJBZGRyZXNzU2VydmljZS5nZXRSZWdpb25zKGNvdW50cnlJc29Db2RlKTtcbiAgICAgICAgfSksXG4gICAgICAgIHRhcCgocmVnaW9uczogUmVnaW9uW10pID0+IHtcbiAgICAgICAgICBjb25zdCByZWdpb25Db250cm9sID0gdGhpcy5mb3JtLmdldCgncmVnaW9uLmlzb2NvZGUnKTtcbiAgICAgICAgICBpZiAoIXJlZ2lvbnMgfHwgcmVnaW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJlZ2lvbkNvbnRyb2wuZGlzYWJsZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWdpb25Db250cm9sLmVuYWJsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2VsZWN0ZWRDb3VudHJ5Q29kZSAmJiBuZXdDb3VudHJ5Q29kZSAhPT0gc2VsZWN0ZWRDb3VudHJ5Q29kZSkge1xuICAgICAgICAgICAgcmVnaW9uQ29udHJvbC5yZXNldCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxlY3RlZENvdW50cnlDb2RlID0gbmV3Q291bnRyeUNvZGU7XG4gICAgICAgIH0pXG4gICAgICApO1xuICB9XG59XG4iXX0=