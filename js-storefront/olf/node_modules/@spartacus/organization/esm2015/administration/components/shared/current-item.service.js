import { Injectable } from '@angular/core';
import { ROUTE_PARAMS } from '@spartacus/organization/administration/root';
import { of } from 'rxjs';
import { distinctUntilChanged, map, pluck, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
/**
 * Abstract Base class for all organization entities. This class simplifies
 * the various entity implementation, that only differ by dependencies and
 * data model.
 */
export class CurrentItemService {
    constructor(routingService) {
        this.routingService = routingService;
        /**
         * Observes the key for the active organization item. The active key is observed
         * from the list of route parameters. The full route parameter list is evaluated,
         * including child routes.
         *
         * To allow for specific ("semantic") route parameters, the route parameter _key_ is
         * retrieved from the `getParamKey`.
         */
        this.key$ = this.routingService
            .getParams()
            .pipe(pluck(this.getParamKey()), distinctUntilChanged());
        /**
         * Observes the active item.
         *
         * The active item is loaded by the active `key$`.
         */
        this.item$ = this.key$.pipe(switchMap((code) => (code ? this.getItem(code) : of(null))));
        /**
         * Observes the b2bUnit based on the unitCode route parameter.
         */
        this.b2bUnit$ = this.routingService
            .getParams()
            .pipe(pluck(ROUTE_PARAMS.unitCode), distinctUntilChanged());
    }
    getRouterParam(paramKey) {
        return this.routingService
            .getParams()
            .pipe(map((params) => params[paramKey]));
    }
}
CurrentItemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CurrentItemService, deps: [{ token: i1.RoutingService }], target: i0.ɵɵFactoryTarget.Injectable });
CurrentItemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CurrentItemService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CurrentItemService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.RoutingService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVudC1pdGVtLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvc2hhcmVkL2N1cnJlbnQtaXRlbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQzNFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUU3RTs7OztHQUlHO0FBRUgsTUFBTSxPQUFnQixrQkFBa0I7SUFDdEMsWUFBc0IsY0FBOEI7UUFBOUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBRXBEOzs7Ozs7O1dBT0c7UUFDTSxTQUFJLEdBQXVCLElBQUksQ0FBQyxjQUFjO2FBQ3BELFNBQVMsRUFBRTthQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1FBRTNEOzs7O1dBSUc7UUFDTSxVQUFLLEdBQWtCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUM1QyxTQUFTLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNwRSxDQUFDO1FBRUY7O1dBRUc7UUFDTSxhQUFRLEdBQXVCLElBQUksQ0FBQyxjQUFjO2FBQ3hELFNBQVMsRUFBRTthQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLG9CQUFvQixFQUFFLENBQUMsQ0FBQztJQTVCUCxDQUFDO0lBeUN4RCxjQUFjLENBQUMsUUFBZ0I7UUFDN0IsT0FBTyxJQUFJLENBQUMsY0FBYzthQUN2QixTQUFTLEVBQUU7YUFDWCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7OytHQTlDbUIsa0JBQWtCO21IQUFsQixrQkFBa0I7MkZBQWxCLGtCQUFrQjtrQkFEdkMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRpbmdTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IFJPVVRFX1BBUkFNUyB9IGZyb20gJ0BzcGFydGFjdXMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL3Jvb3QnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHBsdWNrLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogQWJzdHJhY3QgQmFzZSBjbGFzcyBmb3IgYWxsIG9yZ2FuaXphdGlvbiBlbnRpdGllcy4gVGhpcyBjbGFzcyBzaW1wbGlmaWVzXG4gKiB0aGUgdmFyaW91cyBlbnRpdHkgaW1wbGVtZW50YXRpb24sIHRoYXQgb25seSBkaWZmZXIgYnkgZGVwZW5kZW5jaWVzIGFuZFxuICogZGF0YSBtb2RlbC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEN1cnJlbnRJdGVtU2VydmljZTxUPiB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByb3V0aW5nU2VydmljZTogUm91dGluZ1NlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIE9ic2VydmVzIHRoZSBrZXkgZm9yIHRoZSBhY3RpdmUgb3JnYW5pemF0aW9uIGl0ZW0uIFRoZSBhY3RpdmUga2V5IGlzIG9ic2VydmVkXG4gICAqIGZyb20gdGhlIGxpc3Qgb2Ygcm91dGUgcGFyYW1ldGVycy4gVGhlIGZ1bGwgcm91dGUgcGFyYW1ldGVyIGxpc3QgaXMgZXZhbHVhdGVkLFxuICAgKiBpbmNsdWRpbmcgY2hpbGQgcm91dGVzLlxuICAgKlxuICAgKiBUbyBhbGxvdyBmb3Igc3BlY2lmaWMgKFwic2VtYW50aWNcIikgcm91dGUgcGFyYW1ldGVycywgdGhlIHJvdXRlIHBhcmFtZXRlciBfa2V5XyBpc1xuICAgKiByZXRyaWV2ZWQgZnJvbSB0aGUgYGdldFBhcmFtS2V5YC5cbiAgICovXG4gIHJlYWRvbmx5IGtleSQ6IE9ic2VydmFibGU8c3RyaW5nPiA9IHRoaXMucm91dGluZ1NlcnZpY2VcbiAgICAuZ2V0UGFyYW1zKClcbiAgICAucGlwZShwbHVjayh0aGlzLmdldFBhcmFtS2V5KCkpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcblxuICAvKipcbiAgICogT2JzZXJ2ZXMgdGhlIGFjdGl2ZSBpdGVtLlxuICAgKlxuICAgKiBUaGUgYWN0aXZlIGl0ZW0gaXMgbG9hZGVkIGJ5IHRoZSBhY3RpdmUgYGtleSRgLlxuICAgKi9cbiAgcmVhZG9ubHkgaXRlbSQ6IE9ic2VydmFibGU8VD4gPSB0aGlzLmtleSQucGlwZShcbiAgICBzd2l0Y2hNYXAoKGNvZGU6IHN0cmluZykgPT4gKGNvZGUgPyB0aGlzLmdldEl0ZW0oY29kZSkgOiBvZihudWxsKSkpXG4gICk7XG5cbiAgLyoqXG4gICAqIE9ic2VydmVzIHRoZSBiMmJVbml0IGJhc2VkIG9uIHRoZSB1bml0Q29kZSByb3V0ZSBwYXJhbWV0ZXIuXG4gICAqL1xuICByZWFkb25seSBiMmJVbml0JDogT2JzZXJ2YWJsZTxzdHJpbmc+ID0gdGhpcy5yb3V0aW5nU2VydmljZVxuICAgIC5nZXRQYXJhbXMoKVxuICAgIC5waXBlKHBsdWNrKFJPVVRFX1BBUkFNUy51bml0Q29kZSksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSByb3V0ZSBwYXJhbWV0ZXIga2V5IGZvciB0aGUgaXRlbS4gVGhlIHJvdXRlIHBhcmFtZXRlciBrZXkgZGlmZmVyc1xuICAgKiBwZXIgaXRlbSwgc28gdGhhdCByb3V0ZSBwYXJhbWV0ZXJzIGFyZSBkaXN0aW5ndWlzaGVkIGluIHRoZSByb3V0ZSBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGdldFBhcmFtS2V5KCk6IHN0cmluZztcblxuICAvKipcbiAgICogRW1pdHMgdGhlIGN1cnJlbnQgbW9kZWwgb3IgbnVsbCwgaWYgdGhlcmUgaXMgbm8gbW9kZWwgYXZhaWxhYmxlXG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0SXRlbSguLi5wYXJhbXM6IGFueVtdKTogT2JzZXJ2YWJsZTxUPjtcblxuICBnZXRSb3V0ZXJQYXJhbShwYXJhbUtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5yb3V0aW5nU2VydmljZVxuICAgICAgLmdldFBhcmFtcygpXG4gICAgICAucGlwZShtYXAoKHBhcmFtcykgPT4gcGFyYW1zW3BhcmFtS2V5XSkpO1xuICB9XG5cbiAgYWJzdHJhY3QgZ2V0RXJyb3IoX2tleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbn1cbiJdfQ==