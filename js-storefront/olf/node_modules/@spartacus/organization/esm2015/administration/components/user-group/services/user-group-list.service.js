import { Injectable } from '@angular/core';
import { filter, map } from 'rxjs/operators';
import { ListService } from '../../shared/list/list.service';
import { OrganizationTableType } from '../../shared/organization.model';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/organization/administration/core";
/**
 * Service to populate Cost Center data to `Table` data. The cost center
 * data is driven by the table configuration, using the `OrganizationTables.COST_CENTER`.
 */
export class UserGroupListService extends ListService {
    constructor(tableService, userGroupService) {
        super(tableService);
        this.tableService = tableService;
        this.userGroupService = userGroupService;
        this.tableType = OrganizationTableType.USER_GROUP;
    }
    key() {
        return 'uid';
    }
    load(pagination) {
        return this.userGroupService.getList(pagination).pipe(filter((list) => Boolean(list)), map((raw) => this.convertUserGroups(raw)));
    }
    /**
     * Populates the cost center data to a convenient table data model, so that we
     * can skip specific conversion in the view logic where possible.
     */
    convertUserGroups({ pagination, sorts, values, }) {
        const userGroupModels = {
            pagination,
            sorts,
            values: values.map((value) => (Object.assign(Object.assign({}, value), { unit: value.orgUnit }))),
        };
        return userGroupModels;
    }
}
UserGroupListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupListService, deps: [{ token: i1.TableService }, { token: i2.UserGroupService }], target: i0.ɵɵFactoryTarget.Injectable });
UserGroupListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupListService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupListService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.TableService }, { type: i2.UserGroupService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1ncm91cC1saXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvdXNlci1ncm91cC9zZXJ2aWNlcy91c2VyLWdyb3VwLWxpc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUTNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzdELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7O0FBV3hFOzs7R0FHRztBQUlILE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxXQUEyQjtJQUduRSxZQUNZLFlBQTBCLEVBQzFCLGdCQUFrQztRQUU1QyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFIVixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBSnBDLGNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxVQUFVLENBQUM7SUFPdkQsQ0FBQztJQUVELEdBQUc7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFUyxJQUFJLENBQ1osVUFBMkI7UUFFM0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDbkQsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDL0IsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDMUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7O09BR0c7SUFDTyxpQkFBaUIsQ0FBQyxFQUMxQixVQUFVLEVBQ1YsS0FBSyxFQUNMLE1BQU0sR0FDbUI7UUFDekIsTUFBTSxlQUFlLEdBQWtDO1lBQ3JELFVBQVU7WUFDVixLQUFLO1lBQ0wsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUFDLGlDQUM5QixLQUFLLEtBQ1IsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLElBQ25CLENBQUM7U0FDSixDQUFDO1FBQ0YsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQzs7aUhBekNVLG9CQUFvQjtxSEFBcEIsb0JBQW9CLGNBRm5CLE1BQU07MkZBRVAsb0JBQW9CO2tCQUhoQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVudGl0aWVzTW9kZWwsIFBhZ2luYXRpb25Nb2RlbCB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQge1xuICBVc2VyR3JvdXAsXG4gIFVzZXJHcm91cFNlcnZpY2UsXG59IGZyb20gJ0BzcGFydGFjdXMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvcmUnO1xuaW1wb3J0IHsgVGFibGVTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9zdG9yZWZyb250JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTGlzdFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvbGlzdC9saXN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uVGFibGVUeXBlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL29yZ2FuaXphdGlvbi5tb2RlbCc7XG4vKipcbiAqIFRoZSBVSSBtb2RlbCBmb3IgdGhlIGNvc3QgY2VudGVyLCB3aGljaCBpcyBhIHNsaWdodGx5IGZsYXR0ZW5lZCB2ZXJzaW9uXG4gKiBvZiB0aGUgY29yZSBjb3N0IGNlbnRlciBtb2RlbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VyR3JvdXBNb2RlbCB7XG4gIHVpZD86IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbiAgb3JnVW5pdD86IGFueTtcbn1cblxuLyoqXG4gKiBTZXJ2aWNlIHRvIHBvcHVsYXRlIENvc3QgQ2VudGVyIGRhdGEgdG8gYFRhYmxlYCBkYXRhLiBUaGUgY29zdCBjZW50ZXJcbiAqIGRhdGEgaXMgZHJpdmVuIGJ5IHRoZSB0YWJsZSBjb25maWd1cmF0aW9uLCB1c2luZyB0aGUgYE9yZ2FuaXphdGlvblRhYmxlcy5DT1NUX0NFTlRFUmAuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBVc2VyR3JvdXBMaXN0U2VydmljZSBleHRlbmRzIExpc3RTZXJ2aWNlPFVzZXJHcm91cE1vZGVsPiB7XG4gIHByb3RlY3RlZCB0YWJsZVR5cGUgPSBPcmdhbml6YXRpb25UYWJsZVR5cGUuVVNFUl9HUk9VUDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgdGFibGVTZXJ2aWNlOiBUYWJsZVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHVzZXJHcm91cFNlcnZpY2U6IFVzZXJHcm91cFNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIodGFibGVTZXJ2aWNlKTtcbiAgfVxuXG4gIGtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAndWlkJztcbiAgfVxuXG4gIHByb3RlY3RlZCBsb2FkKFxuICAgIHBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbFxuICApOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8VXNlckdyb3VwTW9kZWw+PiB7XG4gICAgcmV0dXJuIHRoaXMudXNlckdyb3VwU2VydmljZS5nZXRMaXN0KHBhZ2luYXRpb24pLnBpcGUoXG4gICAgICBmaWx0ZXIoKGxpc3QpID0+IEJvb2xlYW4obGlzdCkpLFxuICAgICAgbWFwKChyYXcpID0+IHRoaXMuY29udmVydFVzZXJHcm91cHMocmF3KSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvcHVsYXRlcyB0aGUgY29zdCBjZW50ZXIgZGF0YSB0byBhIGNvbnZlbmllbnQgdGFibGUgZGF0YSBtb2RlbCwgc28gdGhhdCB3ZVxuICAgKiBjYW4gc2tpcCBzcGVjaWZpYyBjb252ZXJzaW9uIGluIHRoZSB2aWV3IGxvZ2ljIHdoZXJlIHBvc3NpYmxlLlxuICAgKi9cbiAgcHJvdGVjdGVkIGNvbnZlcnRVc2VyR3JvdXBzKHtcbiAgICBwYWdpbmF0aW9uLFxuICAgIHNvcnRzLFxuICAgIHZhbHVlcyxcbiAgfTogRW50aXRpZXNNb2RlbDxVc2VyR3JvdXA+KTogRW50aXRpZXNNb2RlbDxVc2VyR3JvdXBNb2RlbD4ge1xuICAgIGNvbnN0IHVzZXJHcm91cE1vZGVsczogRW50aXRpZXNNb2RlbDxVc2VyR3JvdXBNb2RlbD4gPSB7XG4gICAgICBwYWdpbmF0aW9uLFxuICAgICAgc29ydHMsXG4gICAgICB2YWx1ZXM6IHZhbHVlcy5tYXAoKHZhbHVlOiBhbnkpID0+ICh7XG4gICAgICAgIC4uLnZhbHVlLFxuICAgICAgICB1bml0OiB2YWx1ZS5vcmdVbml0LFxuICAgICAgfSkpLFxuICAgIH07XG4gICAgcmV0dXJuIHVzZXJHcm91cE1vZGVscztcbiAgfVxufVxuIl19