import { Injectable } from '@angular/core';
import { map, switchMap } from 'rxjs/operators';
import { ListService } from '../../shared/list/list.service';
import { OrganizationTableType } from '../../shared/organization.model';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/organization/administration/core";
import * as i3 from "./unit-item.service";
import * as i4 from "./unit-tree.service";
/**
 * Service to populate Unit data to `Table` data. Unit
 * data is driven by the table configuration, using the `OrganizationTables.UNIT`.
 */
export class UnitListService extends ListService {
    constructor(tableService, unitService, unitItemService, unitTreeService) {
        super(tableService);
        this.tableService = tableService;
        this.unitService = unitService;
        this.unitItemService = unitItemService;
        this.unitTreeService = unitTreeService;
        this.tableType = OrganizationTableType.UNIT;
    }
    load() {
        return this.unitService.getTree().pipe(switchMap((node) => this.unitItemService.key$.pipe(map((key) => {
            this.unitTreeService.initialize(node, key);
            return node;
        }))), switchMap((tree) => this.unitTreeService.treeToggle$.pipe(map(() => tree))), map((tree) => this.convertListItem(tree)));
    }
    convertListItem(unit, depthLevel = 0, pagination = { totalResults: 0 }) {
        var _a, _b;
        let values = [];
        if (!unit) {
            return;
        }
        const node = Object.assign(Object.assign({}, unit), { count: (_b = (_a = unit.children) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0, expanded: this.unitTreeService.isExpanded(unit.id, depthLevel), depthLevel, 
            // tmp, should be normalized
            uid: unit.id, children: [...unit.children].sort((unitA, unitB) => unitA.name.localeCompare(unitB.name)) });
        values.push(node);
        pagination.totalResults++;
        node.children.forEach((childUnit) => {
            var _a;
            const childList = (_a = this.convertListItem(childUnit, depthLevel + 1, pagination)) === null || _a === void 0 ? void 0 : _a.values;
            if (node.expanded && childList.length > 0) {
                values = values.concat(childList);
            }
        });
        return { values, pagination };
    }
    key() {
        return 'uid';
    }
}
UnitListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitListService, deps: [{ token: i1.TableService }, { token: i2.OrgUnitService }, { token: i3.UnitItemService }, { token: i4.UnitTreeService }], target: i0.ɵɵFactoryTarget.Injectable });
UnitListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitListService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitListService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.TableService }, { type: i2.OrgUnitService }, { type: i3.UnitItemService }, { type: i4.UnitTreeService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC1saXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvdW5pdC9zZXJ2aWNlcy91bml0LWxpc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzdELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7Ozs7QUFJeEU7OztHQUdHO0FBSUgsTUFBTSxPQUFPLGVBQWdCLFNBQVEsV0FBNEI7SUFHL0QsWUFDWSxZQUEwQixFQUMxQixXQUEyQixFQUMzQixlQUFnQyxFQUNoQyxlQUFnQztRQUUxQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFMVixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFDM0Isb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQU5sQyxjQUFTLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDO0lBU2pELENBQUM7SUFFUyxJQUFJO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FDcEMsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDakIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUM1QixHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNWLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztZQUMzQyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUNILENBQ0YsRUFDRCxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNqQixJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ3ZELEVBQ0QsR0FBRyxDQUFDLENBQUMsSUFBaUIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUN2RCxDQUFDO0lBQ0osQ0FBQztJQUVTLGVBQWUsQ0FDdkIsSUFBaUIsRUFDakIsVUFBVSxHQUFHLENBQUMsRUFDZCxVQUFVLEdBQUcsRUFBRSxZQUFZLEVBQUUsQ0FBQyxFQUFFOztRQUVoQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE9BQU87U0FDUjtRQUVELE1BQU0sSUFBSSxtQ0FDTCxJQUFJLEtBQ1AsS0FBSyxFQUFFLE1BQUEsTUFBQSxJQUFJLENBQUMsUUFBUSwwQ0FBRSxNQUFNLG1DQUFJLENBQUMsRUFDakMsUUFBUSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLEVBQzlELFVBQVU7WUFDViw0QkFBNEI7WUFDNUIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQ1osUUFBUSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQ2pELEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FDckMsR0FDRixDQUFDO1FBRUYsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQixVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTs7WUFDbEMsTUFBTSxTQUFTLEdBQUcsTUFBQSxJQUFJLENBQUMsZUFBZSxDQUNwQyxTQUFTLEVBQ1QsVUFBVSxHQUFHLENBQUMsRUFDZCxVQUFVLENBQ1gsMENBQUUsTUFBTSxDQUFDO1lBQ1YsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUNuQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsR0FBRztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7NEdBdEVVLGVBQWU7Z0hBQWYsZUFBZSxjQUZkLE1BQU07MkZBRVAsZUFBZTtrQkFIM0IsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFbnRpdGllc01vZGVsIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7XG4gIEIyQlVuaXROb2RlLFxuICBCMkJVbml0VHJlZU5vZGUsXG4gIE9yZ1VuaXRTZXJ2aWNlLFxufSBmcm9tICdAc3BhcnRhY3VzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlJztcbmltcG9ydCB7IFRhYmxlU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvc3RvcmVmcm9udCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IExpc3RTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2xpc3QvbGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvblRhYmxlVHlwZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9vcmdhbml6YXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgVW5pdEl0ZW1TZXJ2aWNlIH0gZnJvbSAnLi91bml0LWl0ZW0uc2VydmljZSc7XG5pbXBvcnQgeyBVbml0VHJlZVNlcnZpY2UgfSBmcm9tICcuL3VuaXQtdHJlZS5zZXJ2aWNlJztcblxuLyoqXG4gKiBTZXJ2aWNlIHRvIHBvcHVsYXRlIFVuaXQgZGF0YSB0byBgVGFibGVgIGRhdGEuIFVuaXRcbiAqIGRhdGEgaXMgZHJpdmVuIGJ5IHRoZSB0YWJsZSBjb25maWd1cmF0aW9uLCB1c2luZyB0aGUgYE9yZ2FuaXphdGlvblRhYmxlcy5VTklUYC5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFVuaXRMaXN0U2VydmljZSBleHRlbmRzIExpc3RTZXJ2aWNlPEIyQlVuaXRUcmVlTm9kZT4ge1xuICBwcm90ZWN0ZWQgdGFibGVUeXBlID0gT3JnYW5pemF0aW9uVGFibGVUeXBlLlVOSVQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHRhYmxlU2VydmljZTogVGFibGVTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCB1bml0U2VydmljZTogT3JnVW5pdFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHVuaXRJdGVtU2VydmljZTogVW5pdEl0ZW1TZXJ2aWNlLFxuICAgIHByb3RlY3RlZCB1bml0VHJlZVNlcnZpY2U6IFVuaXRUcmVlU2VydmljZVxuICApIHtcbiAgICBzdXBlcih0YWJsZVNlcnZpY2UpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGxvYWQoKTogT2JzZXJ2YWJsZTxFbnRpdGllc01vZGVsPEIyQlVuaXRUcmVlTm9kZT4+IHtcbiAgICByZXR1cm4gdGhpcy51bml0U2VydmljZS5nZXRUcmVlKCkucGlwZShcbiAgICAgIHN3aXRjaE1hcCgobm9kZSkgPT5cbiAgICAgICAgdGhpcy51bml0SXRlbVNlcnZpY2Uua2V5JC5waXBlKFxuICAgICAgICAgIG1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVuaXRUcmVlU2VydmljZS5pbml0aWFsaXplKG5vZGUsIGtleSk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApLFxuICAgICAgc3dpdGNoTWFwKCh0cmVlKSA9PlxuICAgICAgICB0aGlzLnVuaXRUcmVlU2VydmljZS50cmVlVG9nZ2xlJC5waXBlKG1hcCgoKSA9PiB0cmVlKSlcbiAgICAgICksXG4gICAgICBtYXAoKHRyZWU6IEIyQlVuaXROb2RlKSA9PiB0aGlzLmNvbnZlcnRMaXN0SXRlbSh0cmVlKSlcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbnZlcnRMaXN0SXRlbShcbiAgICB1bml0OiBCMkJVbml0Tm9kZSxcbiAgICBkZXB0aExldmVsID0gMCxcbiAgICBwYWdpbmF0aW9uID0geyB0b3RhbFJlc3VsdHM6IDAgfVxuICApOiBFbnRpdGllc01vZGVsPEIyQlVuaXRUcmVlTm9kZT4ge1xuICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICBpZiAoIXVuaXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBub2RlOiBCMkJVbml0VHJlZU5vZGUgPSB7XG4gICAgICAuLi51bml0LFxuICAgICAgY291bnQ6IHVuaXQuY2hpbGRyZW4/Lmxlbmd0aCA/PyAwLFxuICAgICAgZXhwYW5kZWQ6IHRoaXMudW5pdFRyZWVTZXJ2aWNlLmlzRXhwYW5kZWQodW5pdC5pZCwgZGVwdGhMZXZlbCksXG4gICAgICBkZXB0aExldmVsLFxuICAgICAgLy8gdG1wLCBzaG91bGQgYmUgbm9ybWFsaXplZFxuICAgICAgdWlkOiB1bml0LmlkLFxuICAgICAgY2hpbGRyZW46IFsuLi51bml0LmNoaWxkcmVuXS5zb3J0KCh1bml0QSwgdW5pdEIpID0+XG4gICAgICAgIHVuaXRBLm5hbWUubG9jYWxlQ29tcGFyZSh1bml0Qi5uYW1lKVxuICAgICAgKSxcbiAgICB9O1xuXG4gICAgdmFsdWVzLnB1c2gobm9kZSk7XG4gICAgcGFnaW5hdGlvbi50b3RhbFJlc3VsdHMrKztcblxuICAgIG5vZGUuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGRVbml0KSA9PiB7XG4gICAgICBjb25zdCBjaGlsZExpc3QgPSB0aGlzLmNvbnZlcnRMaXN0SXRlbShcbiAgICAgICAgY2hpbGRVbml0LFxuICAgICAgICBkZXB0aExldmVsICsgMSxcbiAgICAgICAgcGFnaW5hdGlvblxuICAgICAgKT8udmFsdWVzO1xuICAgICAgaWYgKG5vZGUuZXhwYW5kZWQgJiYgY2hpbGRMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChjaGlsZExpc3QpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHsgdmFsdWVzLCBwYWdpbmF0aW9uIH07XG4gIH1cblxuICBrZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ3VpZCc7XG4gIH1cbn1cbiJdfQ==