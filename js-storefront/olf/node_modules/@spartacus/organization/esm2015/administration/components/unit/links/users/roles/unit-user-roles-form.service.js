import { Injectable } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { FormService } from '../../../../shared/form/form.service';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/organization/administration/core";
export class UnitUserRolesFormService extends FormService {
    constructor(userService) {
        super();
        this.userService = userService;
        this.availableRoles = this.userService.getAllRoles();
    }
    getForm(item) {
        // if form already exist, while switching between users
        // it didn't patchData again, so used force rebuild
        this.form = null;
        return super.getForm(item);
    }
    build() {
        const form = new FormGroup({});
        this.availableRoles.forEach((role) => form.addControl(role, new FormControl()));
        this.form = form;
    }
    patchData(item) {
        var _a;
        super.patchData(item);
        if (item) {
            (_a = item.roles) === null || _a === void 0 ? void 0 : _a.forEach((role) => {
                this.form.get(role).setValue(true);
            });
        }
    }
}
UnitUserRolesFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitUserRolesFormService, deps: [{ token: i1.B2BUserService }], target: i0.ɵɵFactoryTarget.Injectable });
UnitUserRolesFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitUserRolesFormService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitUserRolesFormService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.B2BUserService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC11c2VyLXJvbGVzLWZvcm0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91bml0L2xpbmtzL3VzZXJzL3JvbGVzL3VuaXQtdXNlci1yb2xlcy1mb3JtLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQzs7O0FBS25FLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxXQUFvQjtJQUdoRSxZQUFzQixXQUEyQjtRQUMvQyxLQUFLLEVBQUUsQ0FBQztRQURZLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtRQUZqRCxtQkFBYyxHQUFrQixJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBSS9ELENBQUM7SUFFRCxPQUFPLENBQUMsSUFBYztRQUNwQix1REFBdUQ7UUFDdkQsbURBQW1EO1FBQ25ELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRVMsS0FBSztRQUNiLE1BQU0sSUFBSSxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDbkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxXQUFXLEVBQUUsQ0FBQyxDQUN6QyxDQUFDO1FBQ0YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVTLFNBQVMsQ0FBQyxJQUFhOztRQUMvQixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLElBQUksSUFBSSxFQUFFO1lBQ1IsTUFBQSxJQUFJLENBQUMsS0FBSywwQ0FBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOztxSEE3QlUsd0JBQXdCO3lIQUF4Qix3QkFBd0IsY0FGdkIsTUFBTTsyRkFFUCx3QkFBd0I7a0JBSHBDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEIyQlVzZXIsIEIyQlVzZXJSb2xlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IEIyQlVzZXJTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29yZSc7XG5pbXBvcnQgeyBGb3JtU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9mb3JtL2Zvcm0uc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBVbml0VXNlclJvbGVzRm9ybVNlcnZpY2UgZXh0ZW5kcyBGb3JtU2VydmljZTxCMkJVc2VyPiB7XG4gIGF2YWlsYWJsZVJvbGVzOiBCMkJVc2VyUm9sZVtdID0gdGhpcy51c2VyU2VydmljZS5nZXRBbGxSb2xlcygpO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB1c2VyU2VydmljZTogQjJCVXNlclNlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgZ2V0Rm9ybShpdGVtPzogQjJCVXNlcik6IEZvcm1Hcm91cCB7XG4gICAgLy8gaWYgZm9ybSBhbHJlYWR5IGV4aXN0LCB3aGlsZSBzd2l0Y2hpbmcgYmV0d2VlbiB1c2Vyc1xuICAgIC8vIGl0IGRpZG4ndCBwYXRjaERhdGEgYWdhaW4sIHNvIHVzZWQgZm9yY2UgcmVidWlsZFxuICAgIHRoaXMuZm9ybSA9IG51bGw7XG4gICAgcmV0dXJuIHN1cGVyLmdldEZvcm0oaXRlbSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYnVpbGQoKSB7XG4gICAgY29uc3QgZm9ybSA9IG5ldyBGb3JtR3JvdXAoe30pO1xuICAgIHRoaXMuYXZhaWxhYmxlUm9sZXMuZm9yRWFjaCgocm9sZSkgPT5cbiAgICAgIGZvcm0uYWRkQ29udHJvbChyb2xlLCBuZXcgRm9ybUNvbnRyb2woKSlcbiAgICApO1xuICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gIH1cblxuICBwcm90ZWN0ZWQgcGF0Y2hEYXRhKGl0ZW06IEIyQlVzZXIpIHtcbiAgICBzdXBlci5wYXRjaERhdGEoaXRlbSk7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGl0ZW0ucm9sZXM/LmZvckVhY2goKHJvbGUpID0+IHtcbiAgICAgICAgdGhpcy5mb3JtLmdldChyb2xlKS5zZXRWYWx1ZSh0cnVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19