import { Injectable } from '@angular/core';
import { filter, map } from 'rxjs/operators';
import { ListService } from '../../shared/list/list.service';
import { OrganizationTableType } from '../../shared/organization.model';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/organization/administration/core";
/**
 * Service to populate Budget data to `Table` data. Budget
 * data is driven by the table configuration, using the `OrganizationTables.BUDGET`.
 */
export class BudgetListService extends ListService {
    constructor(tableService, budgetService) {
        super(tableService);
        this.tableService = tableService;
        this.budgetService = budgetService;
        this.tableType = OrganizationTableType.BUDGET;
    }
    load(pagination) {
        return this.budgetService.getList(pagination).pipe(filter((list) => Boolean(list)), map((raw) => this.convertBudgets(raw)));
    }
    /**
     * Populates budget data to a convenient table data model, so that we
     * can skip specific conversion in the view logic where possible.
     */
    convertBudgets({ pagination, sorts, values, }) {
        const budgetModels = {
            pagination,
            sorts,
            values: values.map((value) => {
                var _a;
                return (Object.assign(Object.assign({}, value), { currency: (_a = value.currency) === null || _a === void 0 ? void 0 : _a.isocode, unit: value.orgUnit }));
            }),
        };
        return budgetModels;
    }
}
BudgetListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetListService, deps: [{ token: i1.TableService }, { token: i2.BudgetService }], target: i0.ɵɵFactoryTarget.Injectable });
BudgetListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetListService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetListService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.TableService }, { type: i2.BudgetService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVkZ2V0LWxpc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy9idWRnZXQvc2VydmljZXMvYnVkZ2V0LWxpc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUTNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzdELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7O0FBRXhFOzs7R0FHRztBQUlILE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxXQUFtQjtJQUd4RCxZQUNZLFlBQTBCLEVBQzFCLGFBQTRCO1FBRXRDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUhWLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBSjlCLGNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLENBQUM7SUFPbkQsQ0FBQztJQUVTLElBQUksQ0FDWixVQUEyQjtRQUUzQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDaEQsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDL0IsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ3ZDLENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ08sY0FBYyxDQUFDLEVBQ3ZCLFVBQVUsRUFDVixLQUFLLEVBQ0wsTUFBTSxHQUNnQjtRQUN0QixNQUFNLFlBQVksR0FBMEI7WUFDMUMsVUFBVTtZQUNWLEtBQUs7WUFDTCxNQUFNLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFOztnQkFBQyxPQUFBLGlDQUM5QixLQUFLLEtBQ1IsUUFBUSxFQUFFLE1BQUEsS0FBSyxDQUFDLFFBQVEsMENBQUUsT0FBTyxFQUNqQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sSUFDbkIsQ0FBQTthQUFBLENBQUM7U0FDSixDQUFDO1FBQ0YsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQzs7OEdBdENVLGlCQUFpQjtrSEFBakIsaUJBQWlCLGNBRmhCLE1BQU07MkZBRVAsaUJBQWlCO2tCQUg3QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVudGl0aWVzTW9kZWwsIFBhZ2luYXRpb25Nb2RlbCB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQge1xuICBCdWRnZXQsXG4gIEJ1ZGdldFNlcnZpY2UsXG59IGZyb20gJ0BzcGFydGFjdXMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvcmUnO1xuaW1wb3J0IHsgVGFibGVTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9zdG9yZWZyb250JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTGlzdFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvbGlzdC9saXN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uVGFibGVUeXBlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL29yZ2FuaXphdGlvbi5tb2RlbCc7XG5cbi8qKlxuICogU2VydmljZSB0byBwb3B1bGF0ZSBCdWRnZXQgZGF0YSB0byBgVGFibGVgIGRhdGEuIEJ1ZGdldFxuICogZGF0YSBpcyBkcml2ZW4gYnkgdGhlIHRhYmxlIGNvbmZpZ3VyYXRpb24sIHVzaW5nIHRoZSBgT3JnYW5pemF0aW9uVGFibGVzLkJVREdFVGAuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBCdWRnZXRMaXN0U2VydmljZSBleHRlbmRzIExpc3RTZXJ2aWNlPEJ1ZGdldD4ge1xuICBwcm90ZWN0ZWQgdGFibGVUeXBlID0gT3JnYW5pemF0aW9uVGFibGVUeXBlLkJVREdFVDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgdGFibGVTZXJ2aWNlOiBUYWJsZVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGJ1ZGdldFNlcnZpY2U6IEJ1ZGdldFNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIodGFibGVTZXJ2aWNlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBsb2FkKFxuICAgIHBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbFxuICApOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8QnVkZ2V0Pj4ge1xuICAgIHJldHVybiB0aGlzLmJ1ZGdldFNlcnZpY2UuZ2V0TGlzdChwYWdpbmF0aW9uKS5waXBlKFxuICAgICAgZmlsdGVyKChsaXN0KSA9PiBCb29sZWFuKGxpc3QpKSxcbiAgICAgIG1hcCgocmF3KSA9PiB0aGlzLmNvbnZlcnRCdWRnZXRzKHJhdykpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQb3B1bGF0ZXMgYnVkZ2V0IGRhdGEgdG8gYSBjb252ZW5pZW50IHRhYmxlIGRhdGEgbW9kZWwsIHNvIHRoYXQgd2VcbiAgICogY2FuIHNraXAgc3BlY2lmaWMgY29udmVyc2lvbiBpbiB0aGUgdmlldyBsb2dpYyB3aGVyZSBwb3NzaWJsZS5cbiAgICovXG4gIHByb3RlY3RlZCBjb252ZXJ0QnVkZ2V0cyh7XG4gICAgcGFnaW5hdGlvbixcbiAgICBzb3J0cyxcbiAgICB2YWx1ZXMsXG4gIH06IEVudGl0aWVzTW9kZWw8QnVkZ2V0Pik6IEVudGl0aWVzTW9kZWw8QnVkZ2V0PiB7XG4gICAgY29uc3QgYnVkZ2V0TW9kZWxzOiBFbnRpdGllc01vZGVsPEJ1ZGdldD4gPSB7XG4gICAgICBwYWdpbmF0aW9uLFxuICAgICAgc29ydHMsXG4gICAgICB2YWx1ZXM6IHZhbHVlcy5tYXAoKHZhbHVlOiBhbnkpID0+ICh7XG4gICAgICAgIC4uLnZhbHVlLFxuICAgICAgICBjdXJyZW5jeTogdmFsdWUuY3VycmVuY3k/Lmlzb2NvZGUsXG4gICAgICAgIHVuaXQ6IHZhbHVlLm9yZ1VuaXQsXG4gICAgICB9KSksXG4gICAgfTtcbiAgICByZXR1cm4gYnVkZ2V0TW9kZWxzO1xuICB9XG59XG4iXX0=