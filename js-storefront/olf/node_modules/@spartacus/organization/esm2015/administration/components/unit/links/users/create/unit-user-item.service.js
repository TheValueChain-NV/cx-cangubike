import { Injectable } from '@angular/core';
import { UserItemService } from '../../../../user/services/user-item.service';
import * as i0 from "@angular/core";
export class UnitUserItemService extends UserItemService {
    save(form, key) {
        var _a;
        // we enable the orgUnit temporarily so that the underlying
        // save method can read the complete form.value.
        (_a = form.get('orgUnit')) === null || _a === void 0 ? void 0 : _a.enable();
        return super.save(form, key);
    }
    /**
     * @override
     * Returns 'unitDetails'
     */
    getDetailsRoute() {
        return 'orgUnitUserList';
    }
    buildRouteParams(item) {
        return { uid: item.orgUnit.uid };
    }
    // @override to default method
    launchDetails(item) {
        const cxRoute = this.getDetailsRoute();
        const params = this.buildRouteParams(item);
        if (cxRoute && item && Object.keys(item).length > 0) {
            this.routingService.go({ cxRoute, params });
        }
    }
}
UnitUserItemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitUserItemService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
UnitUserItemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitUserItemService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitUserItemService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC11c2VyLWl0ZW0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91bml0L2xpbmtzL3VzZXJzL2NyZWF0ZS91bml0LXVzZXItaXRlbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZDQUE2QyxDQUFDOztBQUs5RSxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsZUFBZTtJQUN0RCxJQUFJLENBQ0YsSUFBZSxFQUNmLEdBQVk7O1FBRVosMkRBQTJEO1FBQzNELGdEQUFnRDtRQUNoRCxNQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLDBDQUFFLE1BQU0sRUFBRSxDQUFDO1FBQzlCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7T0FHRztJQUNPLGVBQWU7UUFDdkIsT0FBTyxpQkFBaUIsQ0FBQztJQUMzQixDQUFDO0lBRVMsZ0JBQWdCLENBQUMsSUFBYTtRQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELDhCQUE4QjtJQUM5QixhQUFhLENBQUMsSUFBYTtRQUN6QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksT0FBTyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbkQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7O2dIQTlCVSxtQkFBbUI7b0hBQW5CLG1CQUFtQixjQUZsQixNQUFNOzJGQUVQLG1CQUFtQjtrQkFIL0IsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBCMkJVc2VyIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXMgfSBmcm9tICdAc3BhcnRhY3VzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlJztcbmltcG9ydCB7IFVzZXJJdGVtU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3VzZXIvc2VydmljZXMvdXNlci1pdGVtLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVW5pdFVzZXJJdGVtU2VydmljZSBleHRlbmRzIFVzZXJJdGVtU2VydmljZSB7XG4gIHNhdmUoXG4gICAgZm9ybTogRm9ybUdyb3VwLFxuICAgIGtleT86IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXM8QjJCVXNlcj4+IHtcbiAgICAvLyB3ZSBlbmFibGUgdGhlIG9yZ1VuaXQgdGVtcG9yYXJpbHkgc28gdGhhdCB0aGUgdW5kZXJseWluZ1xuICAgIC8vIHNhdmUgbWV0aG9kIGNhbiByZWFkIHRoZSBjb21wbGV0ZSBmb3JtLnZhbHVlLlxuICAgIGZvcm0uZ2V0KCdvcmdVbml0Jyk/LmVuYWJsZSgpO1xuICAgIHJldHVybiBzdXBlci5zYXZlKGZvcm0sIGtleSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIFJldHVybnMgJ3VuaXREZXRhaWxzJ1xuICAgKi9cbiAgcHJvdGVjdGVkIGdldERldGFpbHNSb3V0ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnb3JnVW5pdFVzZXJMaXN0JztcbiAgfVxuXG4gIHByb3RlY3RlZCBidWlsZFJvdXRlUGFyYW1zKGl0ZW06IEIyQlVzZXIpIHtcbiAgICByZXR1cm4geyB1aWQ6IGl0ZW0ub3JnVW5pdC51aWQgfTtcbiAgfVxuXG4gIC8vIEBvdmVycmlkZSB0byBkZWZhdWx0IG1ldGhvZFxuICBsYXVuY2hEZXRhaWxzKGl0ZW06IEIyQlVzZXIpOiB2b2lkIHtcbiAgICBjb25zdCBjeFJvdXRlID0gdGhpcy5nZXREZXRhaWxzUm91dGUoKTtcbiAgICBjb25zdCBwYXJhbXMgPSB0aGlzLmJ1aWxkUm91dGVQYXJhbXMoaXRlbSk7XG4gICAgaWYgKGN4Um91dGUgJiYgaXRlbSAmJiBPYmplY3Qua2V5cyhpdGVtKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnJvdXRpbmdTZXJ2aWNlLmdvKHsgY3hSb3V0ZSwgcGFyYW1zIH0pO1xuICAgIH1cbiAgfVxufVxuIl19