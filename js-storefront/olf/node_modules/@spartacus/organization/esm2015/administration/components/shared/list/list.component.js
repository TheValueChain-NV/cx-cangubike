import { ChangeDetectionStrategy, Component, HostBinding, Input, } from '@angular/core';
import { tap } from 'rxjs/operators';
import { ICON_TYPE } from '@spartacus/storefront';
import * as i0 from "@angular/core";
import * as i1 from "./list.service";
import * as i2 from "../item.service";
import * as i3 from "@spartacus/storefront";
import * as i4 from "@ng-select/ng-select";
import * as i5 from "@angular/common";
import * as i6 from "@angular/forms";
import * as i7 from "@angular/router";
import * as i8 from "@spartacus/core";
export class ListComponent {
    constructor(service, organizationItemService) {
        this.service = service;
        this.organizationItemService = organizationItemService;
        this.hasGhostData = false;
        this.viewType = this.service.viewType;
        this.domainType = this.service.domainType;
        this.iconTypes = ICON_TYPE;
        /**
         * The current key represents the current selected item from the dataset.
         * This key is used to load the item details as well as highlight the item in
         * a list of items.
         */
        this.currentKey$ = this.organizationItemService.key$;
        this.structure$ = this.service.getStructure();
        this.listData$ = this.service
            .getData()
            .pipe(tap((data) => {
            var _a;
            this.sortCode = (_a = data.pagination) === null || _a === void 0 ? void 0 : _a.sort;
            this.hasGhostData = this.service.hasGhostData(data);
        }));
        this.key = this.service.key();
    }
    /**
     * Returns the total number of items.
     */
    getListCount(dataTable) {
        var _a;
        return (_a = dataTable.pagination) === null || _a === void 0 ? void 0 : _a.totalResults;
    }
    /**
     * Browses to the given page number
     */
    browse(pagination, pageNumber) {
        this.service.view(pagination, pageNumber);
    }
    /**
     * Navigates to the detailed view of the selected list item.
     */
    launchItem(event) {
        this.organizationItemService.launchDetails(event);
    }
    /**
     * Sorts the list.
     */
    sort(pagination) {
        this.service.sort(Object.assign(Object.assign({}, pagination), { sort: this.sortCode }));
    }
}
ListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ListComponent, deps: [{ token: i1.ListService }, { token: i2.ItemService }], target: i0.ɵɵFactoryTarget.Component });
ListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ListComponent, selector: "cx-org-list", inputs: { key: "key" }, host: { properties: { "class.ghost": "this.hasGhostData", "class": "this.viewType" } }, ngImport: i0, template: "<cx-split-view [hideMode]=\"false\">\n  <ng-container *ngIf=\"structure$ | async as structure\">\n    <cx-view class=\"list\" *ngIf=\"listData$ | async as data\">\n      <div class=\"header\">\n        <div class=\"title\">\n          <h3>\n            {{\n              viewType + '.header' | cxTranslate: { count: getListCount(data) }\n            }}\n            <button\n              [cxPopover]=\"listHint\"\n              [cxPopoverOptions]=\"{\n                placement: 'auto',\n                class: 'hint-popover',\n                appendToBody: true,\n                displayCloseButton: true\n              }\"\n            >\n              <cx-icon [type]=\"iconTypes.INFO\"> </cx-icon>\n            </button>\n          </h3>\n        </div>\n\n        <div class=\"actions\">\n          <label>\n            <span *ngIf=\"data.pagination?.sort\">{{\n              structure.type + '.sortBy' | cxTranslate\n            }}</span>\n            <ng-select\n              name=\"sort\"\n              class=\"sort\"\n              *ngIf=\"data.pagination?.sort\"\n              [searchable]=\"false\"\n              [clearable]=\"false\"\n              (change)=\"sort(data.pagination)\"\n              [tabIndex]=\"0\"\n              [(ngModel)]=\"sortCode\"\n              [attr.aria-label]=\"\n                (sortCode\n                  ? structure.type + '.sort.' + sortCode\n                  : structure.type + '.sortBy'\n                ) | cxTranslate\n              \"\n            >\n              <ng-option *ngFor=\"let sort of data.sorts\" [value]=\"sort.code\">\n                {{ structure.type + '.sort.' + sort.code | cxTranslate }}\n              </ng-option>\n            </ng-select>\n          </label>\n\n          <ng-content select=\"[actions]\"></ng-content>\n\n          <a\n            class=\"button primary create\"\n            [routerLink]=\"{ cxRoute: structure.type + 'Create' } | cxUrl\"\n            routerLinkActive=\"disabled\"\n          >\n            {{ 'organization.add' | cxTranslate }}\n          </a>\n        </div>\n      </div>\n\n      <cx-table\n        *ngIf=\"data.values?.length > 0; else emptyList\"\n        [structure]=\"structure\"\n        [data]=\"data.values\"\n        [i18nRoot]=\"domainType\"\n        [currentItem]=\"{ property: key, value: currentKey$ | async }\"\n        (launch)=\"launchItem($event)\"\n        [cxFocus]=\"{ trap: 'both' }\"\n      >\n      </cx-table>\n\n      <div class=\"footer\">\n        <cx-pagination\n          [pagination]=\"data.pagination\"\n          (viewPageEvent)=\"browse(data.pagination, $event)\"\n        ></cx-pagination>\n      </div>\n    </cx-view>\n\n    <!-- nested split views are rendered inside child routes -->\n    <router-outlet></router-outlet>\n  </ng-container>\n</cx-split-view>\n\n<ng-template #emptyList>\n  <p class=\"instruction is-empty\">\n    {{ 'organization.messages.emptyList' | cxTranslate }}\n  </p>\n</ng-template>\n\n<ng-template #listHint>\n  <p>\n    {{ viewType + '.hint' | cxTranslate }}\n  </p>\n</ng-template>\n", components: [{ type: i3.SplitViewComponent, selector: "cx-split-view", inputs: ["hideMode"] }, { type: i3.ViewComponent, selector: "cx-view", inputs: ["position", "hidden"], outputs: ["hiddenChange"] }, { type: i3.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { type: i4.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { type: i4.ɵr, selector: "ng-option", inputs: ["disabled", "value"] }, { type: i3.TableComponent, selector: "cx-table", inputs: ["structure", "data", "i18nRoot", "currentItem"], outputs: ["launch"] }, { type: i3.PaginationComponent, selector: "cx-pagination", inputs: ["pageRoute", "queryParam", "defaultPage", "pagination"], outputs: ["viewPageEvent"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.PopoverDirective, selector: "[cxPopover]", inputs: ["cxPopover", "cxPopoverOptions"], outputs: ["openPopover", "closePopover"] }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i7.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }, { type: i3.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i7.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], pipes: { "async": i5.AsyncPipe, "cxTranslate": i8.TranslatePipe, "cxUrl": i8.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-list',
                    templateUrl: './list.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ListService }, { type: i2.ItemService }]; }, propDecorators: { hasGhostData: [{
                type: HostBinding,
                args: ['class.ghost']
            }], viewType: [{
                type: HostBinding,
                args: ['class']
            }], key: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,