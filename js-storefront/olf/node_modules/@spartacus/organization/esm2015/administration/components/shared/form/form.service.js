import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class FormService {
    getForm(item) {
        if (this.form && !!item) {
            this.patchData(item);
            return this.form;
        }
        if (!this.form) {
            this.build(item);
        }
        // while we should be able to reset with initial value, this doesn't always work
        // hence, we're patching afterwards.
        this.form.reset();
        this.form.enable();
        this.patchData(item);
        return this.form;
    }
    patchData(item) {
        this.toggleFreeze(item);
        this.form.patchValue(Object.assign(Object.assign({}, this.defaultValue), item));
    }
    toggleFreeze(item) {
        var _a, _b;
        if (this.form.enabled && ((_a = item) === null || _a === void 0 ? void 0 : _a.active) === false) {
            this.form.disable();
        }
        if (this.form.disabled && ((_b = item) === null || _b === void 0 ? void 0 : _b.active) === true) {
            this.form.enable();
        }
    }
    /**
     * returns the default form value.
     */
    get defaultValue() {
        return {};
    }
}
FormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: FormService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
FormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: FormService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: FormService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb21wb25lbnRzL3NoYXJlZC9mb3JtL2Zvcm0uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxNQUFNLE9BQWdCLFdBQVc7SUFRL0IsT0FBTyxDQUFDLElBQVE7UUFDZCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRTtZQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztTQUNsQjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNsQjtRQUVELGdGQUFnRjtRQUNoRixvQ0FBb0M7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVsQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFFUyxTQUFTLENBQUMsSUFBUTtRQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxpQ0FBTSxJQUFJLENBQUMsWUFBWSxHQUFLLElBQUksRUFBRyxDQUFDO0lBQzFELENBQUM7SUFFTyxZQUFZLENBQUMsSUFBUTs7UUFDM0IsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFBLE1BQUMsSUFBaUIsMENBQUUsTUFBTSxNQUFLLEtBQUssRUFBRTtZQUM3RCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFBLE1BQUMsSUFBaUIsMENBQUUsTUFBTSxNQUFLLElBQUksRUFBRTtZQUM3RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUNEOztPQUVHO0lBQ0gsSUFBYyxZQUFZO1FBQ3hCLE9BQU8sRUFBTyxDQUFDO0lBQ2pCLENBQUM7O3dHQTdDbUIsV0FBVzs0R0FBWCxXQUFXOzJGQUFYLFdBQVc7a0JBRGhDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBCYXNlSXRlbSB9IGZyb20gJy4uL29yZ2FuaXphdGlvbi5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGb3JtU2VydmljZTxUPiB7XG4gIHByb3RlY3RlZCBmb3JtOiBGb3JtR3JvdXA7XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyB0aGUgZm9ybSBzdHJ1Y3R1cmUuXG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3QgYnVpbGQoaXRlbT86IFQpOiB2b2lkO1xuXG4gIGdldEZvcm0oaXRlbT86IFQpOiBGb3JtR3JvdXAge1xuICAgIGlmICh0aGlzLmZvcm0gJiYgISFpdGVtKSB7XG4gICAgICB0aGlzLnBhdGNoRGF0YShpdGVtKTtcbiAgICAgIHJldHVybiB0aGlzLmZvcm07XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICAgIHRoaXMuYnVpbGQoaXRlbSk7XG4gICAgfVxuXG4gICAgLy8gd2hpbGUgd2Ugc2hvdWxkIGJlIGFibGUgdG8gcmVzZXQgd2l0aCBpbml0aWFsIHZhbHVlLCB0aGlzIGRvZXNuJ3QgYWx3YXlzIHdvcmtcbiAgICAvLyBoZW5jZSwgd2UncmUgcGF0Y2hpbmcgYWZ0ZXJ3YXJkcy5cbiAgICB0aGlzLmZvcm0ucmVzZXQoKTtcblxuICAgIHRoaXMuZm9ybS5lbmFibGUoKTtcbiAgICB0aGlzLnBhdGNoRGF0YShpdGVtKTtcbiAgICByZXR1cm4gdGhpcy5mb3JtO1xuICB9XG5cbiAgcHJvdGVjdGVkIHBhdGNoRGF0YShpdGVtPzogVCk6IHZvaWQge1xuICAgIHRoaXMudG9nZ2xlRnJlZXplKGl0ZW0pO1xuICAgIHRoaXMuZm9ybS5wYXRjaFZhbHVlKHsgLi4udGhpcy5kZWZhdWx0VmFsdWUsIC4uLml0ZW0gfSk7XG4gIH1cblxuICBwcml2YXRlIHRvZ2dsZUZyZWV6ZShpdGVtPzogVCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmZvcm0uZW5hYmxlZCAmJiAoaXRlbSBhcyBCYXNlSXRlbSk/LmFjdGl2ZSA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuZm9ybS5kaXNhYmxlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmZvcm0uZGlzYWJsZWQgJiYgKGl0ZW0gYXMgQmFzZUl0ZW0pPy5hY3RpdmUgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuZm9ybS5lbmFibGUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIHJldHVybnMgdGhlIGRlZmF1bHQgZm9ybSB2YWx1ZS5cbiAgICovXG4gIHByb3RlY3RlZCBnZXQgZGVmYXVsdFZhbHVlKCk6IFQge1xuICAgIHJldHVybiB7fSBhcyBUO1xuICB9XG59XG4iXX0=