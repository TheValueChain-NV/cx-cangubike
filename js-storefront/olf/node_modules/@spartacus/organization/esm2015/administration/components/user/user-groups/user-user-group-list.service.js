import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import { SubListService } from '../../shared/sub-list/sub-list.service';
import { OrganizationTableType } from '../../shared/organization.model';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/organization/administration/core";
export class UserUserGroupListService extends SubListService {
    constructor(tableService, userService, userGroupService) {
        super(tableService);
        this.tableService = tableService;
        this.userService = userService;
        this.userGroupService = userGroupService;
        this.tableType = OrganizationTableType.USER_USER_GROUPS;
        this._domainType = OrganizationTableType.USER_GROUP;
    }
    load(pagination, code) {
        return this.userService
            .getUserGroups(code, pagination)
            .pipe(filter((list) => Boolean(list)));
    }
    /**
     * @override
     * Assign user group to the user.
     */
    assign(userCode, userGroupCode) {
        this.userService.assignUserGroup(userCode, userGroupCode);
        return this.userGroupService.getLoadingStatus(userGroupCode);
    }
    /**
     * @override
     * Unassign the user group from the user.
     */
    unassign(userCode, userGroupCode) {
        this.userService.unassignUserGroup(userCode, userGroupCode);
        return this.userGroupService.getLoadingStatus(userGroupCode);
    }
}
UserUserGroupListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserUserGroupListService, deps: [{ token: i1.TableService }, { token: i2.B2BUserService }, { token: i2.UserGroupService }], target: i0.ɵɵFactoryTarget.Injectable });
UserUserGroupListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserUserGroupListService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserUserGroupListService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.TableService }, { type: i2.B2BUserService }, { type: i2.UserGroupService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci11c2VyLWdyb3VwLWxpc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91c2VyL3VzZXItZ3JvdXBzL3VzZXItdXNlci1ncm91cC1saXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVUzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7O0FBS3hFLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxjQUF5QjtJQUlyRSxZQUNZLFlBQTBCLEVBQzFCLFdBQTJCLEVBQzNCLGdCQUFrQztRQUU1QyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFKVixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFDM0IscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQU5wQyxjQUFTLEdBQUcscUJBQXFCLENBQUMsZ0JBQWdCLENBQUM7UUFDbkQsZ0JBQVcsR0FBRyxxQkFBcUIsQ0FBQyxVQUFVLENBQUM7SUFRekQsQ0FBQztJQUVTLElBQUksQ0FDWixVQUEyQixFQUMzQixJQUFZO1FBRVosT0FBTyxJQUFJLENBQUMsV0FBVzthQUNwQixhQUFhLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQzthQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQ0osUUFBZ0IsRUFDaEIsYUFBcUI7UUFFckIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzFELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRLENBQ04sUUFBZ0IsRUFDaEIsYUFBcUI7UUFFckIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDNUQsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7cUhBM0NVLHdCQUF3Qjt5SEFBeEIsd0JBQXdCLGNBRnZCLE1BQU07MkZBRVAsd0JBQXdCO2tCQUhwQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVudGl0aWVzTW9kZWwsIFBhZ2luYXRpb25Nb2RlbCB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQge1xuICBCMkJVc2VyU2VydmljZSxcbiAgVXNlckdyb3VwLFxuICBVc2VyR3JvdXBTZXJ2aWNlLFxuICBPcmdhbml6YXRpb25JdGVtU3RhdHVzLFxufSBmcm9tICdAc3BhcnRhY3VzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlJztcbmltcG9ydCB7IFRhYmxlU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvc3RvcmVmcm9udCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTdWJMaXN0U2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9zdWItbGlzdC9zdWItbGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvblRhYmxlVHlwZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9vcmdhbml6YXRpb24ubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVXNlclVzZXJHcm91cExpc3RTZXJ2aWNlIGV4dGVuZHMgU3ViTGlzdFNlcnZpY2U8VXNlckdyb3VwPiB7XG4gIHByb3RlY3RlZCB0YWJsZVR5cGUgPSBPcmdhbml6YXRpb25UYWJsZVR5cGUuVVNFUl9VU0VSX0dST1VQUztcbiAgcHJvdGVjdGVkIF9kb21haW5UeXBlID0gT3JnYW5pemF0aW9uVGFibGVUeXBlLlVTRVJfR1JPVVA7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHRhYmxlU2VydmljZTogVGFibGVTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCB1c2VyU2VydmljZTogQjJCVXNlclNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHVzZXJHcm91cFNlcnZpY2U6IFVzZXJHcm91cFNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIodGFibGVTZXJ2aWNlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBsb2FkKFxuICAgIHBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbCxcbiAgICBjb2RlOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxFbnRpdGllc01vZGVsPFVzZXJHcm91cD4+IHtcbiAgICByZXR1cm4gdGhpcy51c2VyU2VydmljZVxuICAgICAgLmdldFVzZXJHcm91cHMoY29kZSwgcGFnaW5hdGlvbilcbiAgICAgIC5waXBlKGZpbHRlcigobGlzdCkgPT4gQm9vbGVhbihsaXN0KSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBBc3NpZ24gdXNlciBncm91cCB0byB0aGUgdXNlci5cbiAgICovXG4gIGFzc2lnbihcbiAgICB1c2VyQ29kZTogc3RyaW5nLFxuICAgIHVzZXJHcm91cENvZGU6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXM8VXNlckdyb3VwPj4ge1xuICAgIHRoaXMudXNlclNlcnZpY2UuYXNzaWduVXNlckdyb3VwKHVzZXJDb2RlLCB1c2VyR3JvdXBDb2RlKTtcbiAgICByZXR1cm4gdGhpcy51c2VyR3JvdXBTZXJ2aWNlLmdldExvYWRpbmdTdGF0dXModXNlckdyb3VwQ29kZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIFVuYXNzaWduIHRoZSB1c2VyIGdyb3VwIGZyb20gdGhlIHVzZXIuXG4gICAqL1xuICB1bmFzc2lnbihcbiAgICB1c2VyQ29kZTogc3RyaW5nLFxuICAgIHVzZXJHcm91cENvZGU6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXM8VXNlckdyb3VwPj4ge1xuICAgIHRoaXMudXNlclNlcnZpY2UudW5hc3NpZ25Vc2VyR3JvdXAodXNlckNvZGUsIHVzZXJHcm91cENvZGUpO1xuICAgIHJldHVybiB0aGlzLnVzZXJHcm91cFNlcnZpY2UuZ2V0TG9hZGluZ1N0YXR1cyh1c2VyR3JvdXBDb2RlKTtcbiAgfVxufVxuIl19