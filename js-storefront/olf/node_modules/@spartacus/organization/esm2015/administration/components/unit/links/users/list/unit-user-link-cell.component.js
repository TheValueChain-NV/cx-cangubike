import { ChangeDetectionStrategy, Component } from '@angular/core';
import { CellComponent } from '../../../../shared/table/cell.component';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "../../../../shared/item.service";
import * as i3 from "@angular/common";
import * as i4 from "@angular/router";
import * as i5 from "@spartacus/core";
export class UnitUserRolesCellComponent extends CellComponent {
    constructor(outlet, itemService) {
        super(outlet);
        this.outlet = outlet;
        this.itemService = itemService;
        this.unitKey$ = this.itemService.key$;
    }
    getRouterModel(uid) {
        return Object.assign(Object.assign({}, this.outlet.context), { uid });
    }
}
UnitUserRolesCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitUserRolesCellComponent, deps: [{ token: i1.OutletContextData }, { token: i2.ItemService }], target: i0.ɵɵFactoryTarget.Component });
UnitUserRolesCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitUserRolesCellComponent, selector: "cx-org-unit-user-link-cell", usesInheritance: true, ngImport: i0, template: `
    <a
      *ngIf="hasItem && unitKey$ | async as uid"
      [routerLink]="
        { cxRoute: 'orgUnitUserRoles', params: getRouterModel(uid) } | cxUrl
      "
    >
      {{ 'orgUser.roles' | cxTranslate }}
    </a>
  `, isInline: true, directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxUrl": i5.UrlPipe, "async": i3.AsyncPipe, "cxTranslate": i5.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitUserRolesCellComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-unit-user-link-cell',
                    template: `
    <a
      *ngIf="hasItem && unitKey$ | async as uid"
      [routerLink]="
        { cxRoute: 'orgUnitUserRoles', params: getRouterModel(uid) } | cxUrl
      "
    >
      {{ 'orgUser.roles' | cxTranslate }}
    </a>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.OutletContextData }, { type: i2.ItemService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC11c2VyLWxpbmstY2VsbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvdW5pdC9saW5rcy91c2Vycy9saXN0L3VuaXQtdXNlci1saW5rLWNlbGwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRbkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlDQUF5QyxDQUFDOzs7Ozs7O0FBZ0J4RSxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsYUFBYTtJQUUzRCxZQUNZLE1BQWlELEVBQ2pELFdBQWlDO1FBRTNDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUhKLFdBQU0sR0FBTixNQUFNLENBQTJDO1FBQ2pELGdCQUFXLEdBQVgsV0FBVyxDQUFzQjtRQUg3QyxhQUFRLEdBQXVCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0lBTXJELENBQUM7SUFFRCxjQUFjLENBQUMsR0FBVztRQUN4Qix1Q0FBWSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBRSxHQUFHLElBQUc7SUFDekMsQ0FBQzs7dUhBWFUsMEJBQTBCOzJHQUExQiwwQkFBMEIseUZBWjNCOzs7Ozs7Ozs7R0FTVDsyRkFHVSwwQkFBMEI7a0JBZHRDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjtvQkFDdEMsUUFBUSxFQUFFOzs7Ozs7Ozs7R0FTVDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCMkJVbml0IH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7XG4gIE91dGxldENvbnRleHREYXRhLFxuICBUYWJsZURhdGFPdXRsZXRDb250ZXh0LFxufSBmcm9tICdAc3BhcnRhY3VzL3N0b3JlZnJvbnQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSXRlbVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvaXRlbS5zZXJ2aWNlJztcbmltcG9ydCB7IENlbGxDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvdGFibGUvY2VsbC5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1vcmctdW5pdC11c2VyLWxpbmstY2VsbCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGFcbiAgICAgICpuZ0lmPVwiaGFzSXRlbSAmJiB1bml0S2V5JCB8IGFzeW5jIGFzIHVpZFwiXG4gICAgICBbcm91dGVyTGlua109XCJcbiAgICAgICAgeyBjeFJvdXRlOiAnb3JnVW5pdFVzZXJSb2xlcycsIHBhcmFtczogZ2V0Um91dGVyTW9kZWwodWlkKSB9IHwgY3hVcmxcbiAgICAgIFwiXG4gICAgPlxuICAgICAge3sgJ29yZ1VzZXIucm9sZXMnIHwgY3hUcmFuc2xhdGUgfX1cbiAgICA8L2E+XG4gIGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBVbml0VXNlclJvbGVzQ2VsbENvbXBvbmVudCBleHRlbmRzIENlbGxDb21wb25lbnQge1xuICB1bml0S2V5JDogT2JzZXJ2YWJsZTxzdHJpbmc+ID0gdGhpcy5pdGVtU2VydmljZS5rZXkkO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgb3V0bGV0OiBPdXRsZXRDb250ZXh0RGF0YTxUYWJsZURhdGFPdXRsZXRDb250ZXh0PixcbiAgICBwcm90ZWN0ZWQgaXRlbVNlcnZpY2U6IEl0ZW1TZXJ2aWNlPEIyQlVuaXQ+XG4gICkge1xuICAgIHN1cGVyKG91dGxldCk7XG4gIH1cblxuICBnZXRSb3V0ZXJNb2RlbCh1aWQ6IHN0cmluZyk6IGFueSB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy5vdXRsZXQuY29udGV4dCwgdWlkIH07XG4gIH1cbn1cbiJdfQ==