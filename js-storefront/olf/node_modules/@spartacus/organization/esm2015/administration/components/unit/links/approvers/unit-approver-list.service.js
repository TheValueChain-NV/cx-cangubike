import { Injectable } from '@angular/core';
import { B2BUserRole, } from '@spartacus/core';
import { SubListService } from '../../../shared/sub-list/sub-list.service';
import { OrganizationTableType } from '../../../shared/organization.model';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/organization/administration/core";
export class UnitApproverListService extends SubListService {
    constructor(tableService, unitService, userService) {
        super(tableService);
        this.tableService = tableService;
        this.unitService = unitService;
        this.userService = userService;
        this.tableType = OrganizationTableType.UNIT_APPROVERS;
        this._domainType = OrganizationTableType.USER;
    }
    load(pagination, code) {
        return this.unitService.getUsers(code, B2BUserRole.APPROVER, pagination);
    }
    /**
     * @override
     * Assign budget to the cost center.
     */
    assign(unitId, customerId) {
        this.unitService.assignApprover(unitId, customerId, B2BUserRole.APPROVER);
        return this.userService.getLoadingStatus(customerId);
    }
    /**
     * @override
     * Unassign the budget from the cost center.
     */
    unassign(unitId, customerId) {
        this.unitService.unassignApprover(unitId, customerId, B2BUserRole.APPROVER);
        return this.userService.getLoadingStatus(customerId);
    }
}
UnitApproverListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitApproverListService, deps: [{ token: i1.TableService }, { token: i2.OrgUnitService }, { token: i2.B2BUserService }], target: i0.ɵɵFactoryTarget.Injectable });
UnitApproverListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitApproverListService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitApproverListService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.TableService }, { type: i2.OrgUnitService }, { type: i2.B2BUserService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC1hcHByb3Zlci1saXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvdW5pdC9saW5rcy9hcHByb3ZlcnMvdW5pdC1hcHByb3Zlci1saXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBRUwsV0FBVyxHQUdaLE1BQU0saUJBQWlCLENBQUM7QUFRekIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOzs7O0FBSzNFLE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxjQUF1QjtJQUlsRSxZQUNZLFlBQTBCLEVBQzFCLFdBQTJCLEVBQzNCLFdBQTJCO1FBRXJDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUpWLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtRQUMzQixnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFON0IsY0FBUyxHQUFHLHFCQUFxQixDQUFDLGNBQWMsQ0FBQztRQUNqRCxnQkFBVyxHQUFHLHFCQUFxQixDQUFDLElBQUksQ0FBQztJQVFuRCxDQUFDO0lBRVMsSUFBSSxDQUNaLFVBQTJCLEVBQzNCLElBQVk7UUFFWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQ0osTUFBYyxFQUNkLFVBQWtCO1FBRWxCLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUSxDQUNOLE1BQWMsRUFDZCxVQUFrQjtRQUVsQixJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2RCxDQUFDOztvSEF6Q1UsdUJBQXVCO3dIQUF2Qix1QkFBdUIsY0FGdEIsTUFBTTsyRkFFUCx1QkFBdUI7a0JBSG5DLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQjJCVXNlcixcbiAgQjJCVXNlclJvbGUsXG4gIEVudGl0aWVzTW9kZWwsXG4gIFBhZ2luYXRpb25Nb2RlbCxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7XG4gIE9yZ1VuaXRTZXJ2aWNlLFxuICBCMkJVc2VyU2VydmljZSxcbiAgT3JnYW5pemF0aW9uSXRlbVN0YXR1cyxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29yZSc7XG5pbXBvcnQgeyBUYWJsZVNlcnZpY2UgfSBmcm9tICdAc3BhcnRhY3VzL3N0b3JlZnJvbnQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU3ViTGlzdFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvc3ViLWxpc3Qvc3ViLWxpc3Quc2VydmljZSc7XG5pbXBvcnQgeyBPcmdhbml6YXRpb25UYWJsZVR5cGUgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvb3JnYW5pemF0aW9uLm1vZGVsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFVuaXRBcHByb3Zlckxpc3RTZXJ2aWNlIGV4dGVuZHMgU3ViTGlzdFNlcnZpY2U8QjJCVXNlcj4ge1xuICBwcm90ZWN0ZWQgdGFibGVUeXBlID0gT3JnYW5pemF0aW9uVGFibGVUeXBlLlVOSVRfQVBQUk9WRVJTO1xuICBwcm90ZWN0ZWQgX2RvbWFpblR5cGUgPSBPcmdhbml6YXRpb25UYWJsZVR5cGUuVVNFUjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgdGFibGVTZXJ2aWNlOiBUYWJsZVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHVuaXRTZXJ2aWNlOiBPcmdVbml0U2VydmljZSxcbiAgICBwcm90ZWN0ZWQgdXNlclNlcnZpY2U6IEIyQlVzZXJTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKHRhYmxlU2VydmljZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgbG9hZChcbiAgICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uTW9kZWwsXG4gICAgY29kZTogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8RW50aXRpZXNNb2RlbDxCMkJVc2VyPj4ge1xuICAgIHJldHVybiB0aGlzLnVuaXRTZXJ2aWNlLmdldFVzZXJzKGNvZGUsIEIyQlVzZXJSb2xlLkFQUFJPVkVSLCBwYWdpbmF0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQXNzaWduIGJ1ZGdldCB0byB0aGUgY29zdCBjZW50ZXIuXG4gICAqL1xuICBhc3NpZ24oXG4gICAgdW5pdElkOiBzdHJpbmcsXG4gICAgY3VzdG9tZXJJZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8T3JnYW5pemF0aW9uSXRlbVN0YXR1czxCMkJVc2VyPj4ge1xuICAgIHRoaXMudW5pdFNlcnZpY2UuYXNzaWduQXBwcm92ZXIodW5pdElkLCBjdXN0b21lcklkLCBCMkJVc2VyUm9sZS5BUFBST1ZFUik7XG4gICAgcmV0dXJuIHRoaXMudXNlclNlcnZpY2UuZ2V0TG9hZGluZ1N0YXR1cyhjdXN0b21lcklkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogVW5hc3NpZ24gdGhlIGJ1ZGdldCBmcm9tIHRoZSBjb3N0IGNlbnRlci5cbiAgICovXG4gIHVuYXNzaWduKFxuICAgIHVuaXRJZDogc3RyaW5nLFxuICAgIGN1c3RvbWVySWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXM8QjJCVXNlcj4+IHtcbiAgICB0aGlzLnVuaXRTZXJ2aWNlLnVuYXNzaWduQXBwcm92ZXIodW5pdElkLCBjdXN0b21lcklkLCBCMkJVc2VyUm9sZS5BUFBST1ZFUik7XG4gICAgcmV0dXJuIHRoaXMudXNlclNlcnZpY2UuZ2V0TG9hZGluZ1N0YXR1cyhjdXN0b21lcklkKTtcbiAgfVxufVxuIl19