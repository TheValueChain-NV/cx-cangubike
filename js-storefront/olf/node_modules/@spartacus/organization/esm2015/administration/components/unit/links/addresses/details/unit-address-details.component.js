import { ChangeDetectionStrategy, Component } from '@angular/core';
import { map, shareReplay, switchMap, tap, withLatestFrom, } from 'rxjs/operators';
import { ItemService } from '../../../../shared/item.service';
import { UnitAddressItemService } from '../services/unit-address-item.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../../shared/item.service";
import * as i2 from "../../../services/current-unit.service";
import * as i3 from "@spartacus/core";
import * as i4 from "../../../../shared/card/card.component";
import * as i5 from "../../../../shared/detail/delete-item-action/delete-item.component";
import * as i6 from "@angular/common";
import * as i7 from "@spartacus/storefront";
import * as i8 from "@angular/router";
export class UnitAddressDetailsComponent {
    constructor(itemService, currentUnitService, userAddressService) {
        this.itemService = itemService;
        this.currentUnitService = currentUnitService;
        this.userAddressService = userAddressService;
        this.unit$ = this.currentUnitService.item$;
        this.model$ = this.itemService.key$.pipe(withLatestFrom(this.unit$), switchMap(([code, unit]) => this.itemService.load(unit.uid, code)), shareReplay({ bufferSize: 1, refCount: true }));
    }
    getCountry(isoCode) {
        return this.userAddressService.getDeliveryCountries().pipe(tap((countries) => {
            if (Object.keys(countries).length === 0) {
                this.userAddressService.loadDeliveryCountries();
            }
        }), map((countries) => countries.find((country) => country.isocode === isoCode)));
    }
}
UnitAddressDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitAddressDetailsComponent, deps: [{ token: i1.ItemService }, { token: i2.CurrentUnitService }, { token: i3.UserAddressService }], target: i0.ɵɵFactoryTarget.Component });
UnitAddressDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitAddressDetailsComponent, selector: "cx-org-unit-address-details", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: UnitAddressItemService,
        },
    ], ngImport: i0, template: "<ng-container *ngIf=\"unit$ | async as unit\">\n  <cx-org-card\n    *ngIf=\"model$ | async as model\"\n    i18nRoot=\"orgUnitAddress.details\"\n    [subtitle]=\"'orgUnitAddress.details.subtitle' | cxTranslate: { item: unit }\"\n    [cxFocus]=\"{ refreshFocus: model }\"\n  >\n    <a class=\"link\" actions routerLink=\"edit\">\n      {{ 'organization.edit' | cxTranslate }}\n    </a>\n\n    <cx-org-delete-item\n      actions\n      key=\"id\"\n      [additionalParam]=\"unit.uid\"\n      i18nRoot=\"orgUnitAddress\"\n    ></cx-org-delete-item>\n\n    <section main class=\"details\">\n      <div class=\"property\">\n        <label>{{ 'orgUnit.name' | cxTranslate }}</label>\n        <span class=\"value\"> {{ model.firstName }} {{ model.lastName }} </span>\n      </div>\n\n      <div class=\"property\">\n        <label>{{ 'orgUnit.unit' | cxTranslate }}</label>\n        <span class=\"value\">\n          <a\n            [routerLink]=\"\n              {\n                cxRoute: 'orgUnitDetails',\n                params: unit\n              } | cxUrl\n            \"\n          >\n            {{ unit.name }}\n          </a>\n        </span>\n      </div>\n\n      <div class=\"property full-width\">\n        <label>{{ 'orgUnitAddress.formattedAddress' | cxTranslate }}</label>\n        <span class=\"value\">\n          {{ model.formattedAddress }}\n        </span>\n      </div>\n\n      <div class=\"property\">\n        <label>{{ 'orgUnitAddress.country' | cxTranslate }}</label>\n        <span class=\"value\">\n          {{ (getCountry(model.country.isocode) | async)?.name }}\n        </span>\n      </div>\n    </section>\n  </cx-org-card>\n</ng-container>\n", components: [{ type: i4.CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: i5.DeleteItemComponent, selector: "cx-org-delete-item", inputs: ["i18nRoot", "key", "additionalParam"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i8.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i6.AsyncPipe, "cxTranslate": i3.TranslatePipe, "cxUrl": i3.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitAddressDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-unit-address-details',
                    templateUrl: './unit-address-details.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                    providers: [
                        {
                            provide: ItemService,
                            useExisting: UnitAddressItemService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.CurrentUnitService }, { type: i3.UserAddressService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC1hZGRyZXNzLWRldGFpbHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb21wb25lbnRzL3VuaXQvbGlua3MvYWRkcmVzc2VzL2RldGFpbHMvdW5pdC1hZGRyZXNzLWRldGFpbHMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb21wb25lbnRzL3VuaXQvbGlua3MvYWRkcmVzc2VzL2RldGFpbHMvdW5pdC1hZGRyZXNzLWRldGFpbHMuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUduRSxPQUFPLEVBQ0wsR0FBRyxFQUNILFdBQVcsRUFDWCxTQUFTLEVBQ1QsR0FBRyxFQUNILGNBQWMsR0FDZixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUU5RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQzs7Ozs7Ozs7OztBQWMvRSxNQUFNLE9BQU8sMkJBQTJCO0lBc0J0QyxZQUNZLFdBQWlDLEVBQ2pDLGtCQUFzQyxFQUN0QyxrQkFBc0M7UUFGdEMsZ0JBQVcsR0FBWCxXQUFXLENBQXNCO1FBQ2pDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQXhCbEQsVUFBSyxHQUF3QixJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDO1FBRTNELFdBQU0sR0FBd0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUN0RCxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUMxQixTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUNsRSxXQUFXLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUMvQyxDQUFDO0lBbUJDLENBQUM7SUFqQkosVUFBVSxDQUFDLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxJQUFJLENBQ3hELEdBQUcsQ0FBQyxDQUFDLFNBQW9CLEVBQUUsRUFBRTtZQUMzQixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDdkMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLHFCQUFxQixFQUFFLENBQUM7YUFDakQ7UUFDSCxDQUFDLENBQUMsRUFDRixHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUNoQixTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQyxDQUN6RCxDQUNGLENBQUM7SUFDSixDQUFDOzt3SEFwQlUsMkJBQTJCOzRHQUEzQiwyQkFBMkIsbUdBUDNCO1FBQ1Q7WUFDRSxPQUFPLEVBQUUsV0FBVztZQUNwQixXQUFXLEVBQUUsc0JBQXNCO1NBQ3BDO0tBQ0YsMEJDeEJILDJvREF3REE7MkZEOUJhLDJCQUEyQjtrQkFadkMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsNkJBQTZCO29CQUN2QyxXQUFXLEVBQUUsdUNBQXVDO29CQUNwRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFO29CQUNsQyxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLFdBQVc7NEJBQ3BCLFdBQVcsRUFBRSxzQkFBc0I7eUJBQ3BDO3FCQUNGO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWRkcmVzcywgQjJCVW5pdCwgQ291bnRyeSwgVXNlckFkZHJlc3NTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIG1hcCxcbiAgc2hhcmVSZXBsYXksXG4gIHN3aXRjaE1hcCxcbiAgdGFwLFxuICB3aXRoTGF0ZXN0RnJvbSxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSXRlbVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvaXRlbS5zZXJ2aWNlJztcbmltcG9ydCB7IEN1cnJlbnRVbml0U2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL2N1cnJlbnQtdW5pdC5zZXJ2aWNlJztcbmltcG9ydCB7IFVuaXRBZGRyZXNzSXRlbVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy91bml0LWFkZHJlc3MtaXRlbS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtb3JnLXVuaXQtYWRkcmVzcy1kZXRhaWxzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3VuaXQtYWRkcmVzcy1kZXRhaWxzLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHsgY2xhc3M6ICdjb250ZW50LXdyYXBwZXInIH0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEl0ZW1TZXJ2aWNlLFxuICAgICAgdXNlRXhpc3Rpbmc6IFVuaXRBZGRyZXNzSXRlbVNlcnZpY2UsXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVW5pdEFkZHJlc3NEZXRhaWxzQ29tcG9uZW50IHtcbiAgdW5pdCQ6IE9ic2VydmFibGU8QjJCVW5pdD4gPSB0aGlzLmN1cnJlbnRVbml0U2VydmljZS5pdGVtJDtcblxuICBtb2RlbCQ6IE9ic2VydmFibGU8QWRkcmVzcz4gPSB0aGlzLml0ZW1TZXJ2aWNlLmtleSQucGlwZShcbiAgICB3aXRoTGF0ZXN0RnJvbSh0aGlzLnVuaXQkKSxcbiAgICBzd2l0Y2hNYXAoKFtjb2RlLCB1bml0XSkgPT4gdGhpcy5pdGVtU2VydmljZS5sb2FkKHVuaXQudWlkLCBjb2RlKSksXG4gICAgc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KVxuICApO1xuXG4gIGdldENvdW50cnkoaXNvQ29kZSk6IE9ic2VydmFibGU8Q291bnRyeT4ge1xuICAgIHJldHVybiB0aGlzLnVzZXJBZGRyZXNzU2VydmljZS5nZXREZWxpdmVyeUNvdW50cmllcygpLnBpcGUoXG4gICAgICB0YXAoKGNvdW50cmllczogQ291bnRyeVtdKSA9PiB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhjb3VudHJpZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMudXNlckFkZHJlc3NTZXJ2aWNlLmxvYWREZWxpdmVyeUNvdW50cmllcygpO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIG1hcCgoY291bnRyaWVzKSA9PlxuICAgICAgICBjb3VudHJpZXMuZmluZCgoY291bnRyeSkgPT4gY291bnRyeS5pc29jb2RlID09PSBpc29Db2RlKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgaXRlbVNlcnZpY2U6IEl0ZW1TZXJ2aWNlPEFkZHJlc3M+LFxuICAgIHByb3RlY3RlZCBjdXJyZW50VW5pdFNlcnZpY2U6IEN1cnJlbnRVbml0U2VydmljZSxcbiAgICBwcm90ZWN0ZWQgdXNlckFkZHJlc3NTZXJ2aWNlOiBVc2VyQWRkcmVzc1NlcnZpY2VcbiAgKSB7fVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cInVuaXQkIHwgYXN5bmMgYXMgdW5pdFwiPlxuICA8Y3gtb3JnLWNhcmRcbiAgICAqbmdJZj1cIm1vZGVsJCB8IGFzeW5jIGFzIG1vZGVsXCJcbiAgICBpMThuUm9vdD1cIm9yZ1VuaXRBZGRyZXNzLmRldGFpbHNcIlxuICAgIFtzdWJ0aXRsZV09XCInb3JnVW5pdEFkZHJlc3MuZGV0YWlscy5zdWJ0aXRsZScgfCBjeFRyYW5zbGF0ZTogeyBpdGVtOiB1bml0IH1cIlxuICAgIFtjeEZvY3VzXT1cInsgcmVmcmVzaEZvY3VzOiBtb2RlbCB9XCJcbiAgPlxuICAgIDxhIGNsYXNzPVwibGlua1wiIGFjdGlvbnMgcm91dGVyTGluaz1cImVkaXRcIj5cbiAgICAgIHt7ICdvcmdhbml6YXRpb24uZWRpdCcgfCBjeFRyYW5zbGF0ZSB9fVxuICAgIDwvYT5cblxuICAgIDxjeC1vcmctZGVsZXRlLWl0ZW1cbiAgICAgIGFjdGlvbnNcbiAgICAgIGtleT1cImlkXCJcbiAgICAgIFthZGRpdGlvbmFsUGFyYW1dPVwidW5pdC51aWRcIlxuICAgICAgaTE4blJvb3Q9XCJvcmdVbml0QWRkcmVzc1wiXG4gICAgPjwvY3gtb3JnLWRlbGV0ZS1pdGVtPlxuXG4gICAgPHNlY3Rpb24gbWFpbiBjbGFzcz1cImRldGFpbHNcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJwcm9wZXJ0eVwiPlxuICAgICAgICA8bGFiZWw+e3sgJ29yZ1VuaXQubmFtZScgfCBjeFRyYW5zbGF0ZSB9fTwvbGFiZWw+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj4ge3sgbW9kZWwuZmlyc3ROYW1lIH19IHt7IG1vZGVsLmxhc3ROYW1lIH19IDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwicHJvcGVydHlcIj5cbiAgICAgICAgPGxhYmVsPnt7ICdvcmdVbml0LnVuaXQnIHwgY3hUcmFuc2xhdGUgfX08L2xhYmVsPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIFtyb3V0ZXJMaW5rXT1cIlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY3hSb3V0ZTogJ29yZ1VuaXREZXRhaWxzJyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHVuaXRcbiAgICAgICAgICAgICAgfSB8IGN4VXJsXG4gICAgICAgICAgICBcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt7IHVuaXQubmFtZSB9fVxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJwcm9wZXJ0eSBmdWxsLXdpZHRoXCI+XG4gICAgICAgIDxsYWJlbD57eyAnb3JnVW5pdEFkZHJlc3MuZm9ybWF0dGVkQWRkcmVzcycgfCBjeFRyYW5zbGF0ZSB9fTwvbGFiZWw+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj5cbiAgICAgICAgICB7eyBtb2RlbC5mb3JtYXR0ZWRBZGRyZXNzIH19XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwicHJvcGVydHlcIj5cbiAgICAgICAgPGxhYmVsPnt7ICdvcmdVbml0QWRkcmVzcy5jb3VudHJ5JyB8IGN4VHJhbnNsYXRlIH19PC9sYWJlbD5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPlxuICAgICAgICAgIHt7IChnZXRDb3VudHJ5KG1vZGVsLmNvdW50cnkuaXNvY29kZSkgfCBhc3luYyk/Lm5hbWUgfX1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuICA8L2N4LW9yZy1jYXJkPlxuPC9uZy1jb250YWluZXI+XG4iXX0=