import { Component, Input } from '@angular/core';
import { LoadStatus } from '@spartacus/organization/administration/core';
import { Subscription } from 'rxjs';
import { filter, first, take } from 'rxjs/operators';
import { ConfirmationMessageComponent } from '../../message/confirmation/confirmation-message.component';
import * as i0 from "@angular/core";
import * as i1 from "../../item.service";
import * as i2 from "../../message/services/message.service";
import * as i3 from "@angular/common";
import * as i4 from "@spartacus/core";
/**
 * Reusable component in the my-company is to delete an item (if it's possible)
 */
export class DeleteItemComponent {
    constructor(itemService, messageService) {
        this.itemService = itemService;
        this.messageService = messageService;
        /**
         * The key input can be used to add a custom key.
         *
         * Most _organization_ entities use the `code` key, but there is some variations.
         */
        this.key = 'code';
        /**
         * resolves the current item.
         */
        this.current$ = this.itemService.current$;
        /**
         * resolves if the user is currently in the edit form.
         */
        this.isInEditMode$ = this.itemService.isInEditMode$;
        this.subscription = new Subscription();
    }
    delete(item) {
        if (!this.confirmation) {
            this.confirmation = this.messageService.add({
                message: {
                    key: this.i18nRoot + '.messages.delete',
                    params: { item },
                },
                messageTitle: {
                    key: this.i18nRoot + '.messages.deleteTitle',
                    params: { item },
                },
                component: ConfirmationMessageComponent,
            });
            this.subscription.add(this.confirmation.pipe(first()).subscribe((event) => {
                if (event.close) {
                    this.confirmation = null;
                }
                if (event.confirm) {
                    this.messageService.close(this.confirmation);
                    this.confirmDelete(item);
                    this.confirmation = null;
                }
            }));
        }
    }
    confirmDelete(item) {
        this.itemService
            .delete(item[this.key], this.additionalParam)
            .pipe(take(1), filter((data) => data.status === LoadStatus.SUCCESS))
            .subscribe((data) => this.notify(Object.assign(Object.assign({}, item), data.item)));
    }
    notify(item) {
        this.messageService.add({
            message: {
                key: `${this.i18nRoot}.messages.deleted`,
                params: { item },
            },
        });
    }
    ngOnDestroy() {
        var _a;
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
}
DeleteItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: DeleteItemComponent, deps: [{ token: i1.ItemService }, { token: i2.MessageService }], target: i0.ɵɵFactoryTarget.Component });
DeleteItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: DeleteItemComponent, selector: "cx-org-delete-item", inputs: { i18nRoot: "i18nRoot", key: "key", additionalParam: "additionalParam" }, host: { classAttribute: "content-wrapper" }, ngImport: i0, template: "<button\n  *ngIf=\"current$ | async as item\"\n  class=\"button active\"\n  [disabled]=\"isInEditMode$ | async\"\n  (click)=\"delete(item)\"\n>\n  {{ 'organization.delete' | cxTranslate }}\n</button>\n", directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe, "cxTranslate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: DeleteItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-delete-item',
                    templateUrl: './delete-item.component.html',
                    host: { class: 'content-wrapper' },
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.MessageService }]; }, propDecorators: { i18nRoot: [{
                type: Input
            }], key: [{
                type: Input
            }], additionalParam: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,