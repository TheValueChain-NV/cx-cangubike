import { ChangeDetectionStrategy, Component, Input, } from '@angular/core';
import { LoadStatus } from '@spartacus/organization/administration/core';
import { first, map, switchMap, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../item.service";
import * as i2 from "../message/services/message.service";
import * as i3 from "../card/card.component";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "../item-active.directive";
import * as i7 from "@spartacus/storefront";
import * as i8 from "@angular/router";
import * as i9 from "@spartacus/core";
const DISABLED_STATUS = 'DISABLED';
/**
 * Reusable component for creating and editing organization items. The component does not
 * know anything about form specific.
 */
export class FormComponent {
    constructor(itemService, messageService) {
        this.itemService = itemService;
        this.messageService = messageService;
        this.animateBack = true;
        this.form$ = this.itemService.current$.pipe(map((item) => {
            this.setI18nRoot(item);
            if (!item) {
                // we trick the form builder...
                item = {};
            }
            return this.itemService.getForm(item);
        }));
        /**
         * To handle the case of receiving a negative response during creation an item
         */
        this.disabled$ = this.form$.pipe(switchMap((form) => form.statusChanges), map((status) => status === DISABLED_STATUS));
    }
    save(form) {
        this.itemService.key$
            .pipe(first(), switchMap((key) => this.itemService.save(form, key).pipe(take(1), map((data) => ({
            item: data.item,
            status: data.status,
            action: key ? 'update' : 'create',
        })))))
            .subscribe(({ item, action, status }) => {
            if (status === LoadStatus.SUCCESS) {
                this.itemService.launchDetails(item);
                this.notify(item, action);
            }
            form.enable();
        });
    }
    notify(item, action) {
        this.messageService.add({
            message: {
                key: `${this.i18nRoot}.messages.${action}`,
                params: {
                    item,
                },
            },
        });
    }
    setI18nRoot(item) {
        // concatenate the i18n root with .edit or .create suffix
        this.i18n = this.i18nRoot + (item ? '.edit' : '.create');
    }
    back(event, card) {
        if (this.animateBack) {
            card.closeView(event);
        }
    }
    ngOnInit() {
        this.itemService.setEditMode(true);
    }
    ngOnDestroy() {
        this.itemService.setEditMode(false);
    }
}
FormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: FormComponent, deps: [{ token: i1.ItemService }, { token: i2.MessageService }], target: i0.ɵɵFactoryTarget.Component });
FormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: FormComponent, selector: "cx-org-form", inputs: { i18nRoot: "i18nRoot", animateBack: "animateBack", subtitle: "subtitle" }, host: { classAttribute: "content-wrapper" }, ngImport: i0, template: "<form *ngIf=\"form$ | async as form\" (submit)=\"save(form)\">\n  <cx-org-card\n    #card\n    [previous]=\"false\"\n    [i18nRoot]=\"i18n\"\n    cxOrgItemActive\n    [subtitle]=\"subtitle\"\n    [cxFocus]=\"{ autofocus: 'input', refreshFocus: form }\"\n  >\n    <button\n      actions\n      class=\"button primary\"\n      [disabled]=\"form.disabled || (disabled$ | async)\"\n    >\n      {{ 'organization.save' | cxTranslate }}\n    </button>\n    <button actions class=\"link\" routerLink=\"../\" type=\"button\">\n      <!--\n        We leverage the soft-close feature from the split view, so that the animation\n        has time to kick in before the router outlet is deleted.\n       -->\n      <span (click)=\"back($event, card)\">{{\n        'organization.cancel' | cxTranslate\n      }}</span>\n    </button>\n\n    <section main class=\"details\">\n      <ng-content select=\"[main]\" ngProjectAs=\"[main]\"></ng-content>\n    </section>\n  </cx-org-card>\n</form>\n", components: [{ type: i3.CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.ItemActiveDirective, selector: "[cxOrgItemActive]" }, { type: i7.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i8.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["routerLink", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i4.AsyncPipe, "cxTranslate": i9.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: FormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-form',
                    templateUrl: './form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.MessageService }]; }, propDecorators: { i18nRoot: [{
                type: Input
            }], animateBack: [{
                type: Input
            }], subtitle: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,