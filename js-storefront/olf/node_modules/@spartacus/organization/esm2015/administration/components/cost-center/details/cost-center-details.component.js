import { ChangeDetectionStrategy, Component } from '@angular/core';
import { startWith, switchMap } from 'rxjs/operators';
import { ItemService } from '../../shared/item.service';
import { CostCenterItemService } from '../services/cost-center-item.service';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/item.service";
import * as i2 from "../../shared/card/card.component";
import * as i3 from "../../shared/detail/toggle-status-action/toggle-status.component";
import * as i4 from "../../shared/detail/disable-info/disable-info.component";
import * as i5 from "@angular/common";
import * as i6 from "@spartacus/storefront";
import * as i7 from "@angular/router";
import * as i8 from "../../shared/item-exists.directive";
import * as i9 from "@spartacus/core";
export class CostCenterDetailsComponent {
    constructor(itemService) {
        this.itemService = itemService;
        this.model$ = this.itemService.key$.pipe(switchMap((code) => this.itemService.load(code)), startWith({}));
        this.isInEditMode$ = this.itemService.isInEditMode$;
    }
}
CostCenterDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CostCenterDetailsComponent, deps: [{ token: i1.ItemService }], target: i0.ɵɵFactoryTarget.Component });
CostCenterDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CostCenterDetailsComponent, selector: "cx-org-cost-center-details", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: CostCenterItemService,
        },
    ], ngImport: i0, template: "<cx-org-card\n  *ngIf=\"model$ | async as model\"\n  i18nRoot=\"orgCostCenter.details\"\n  [cxFocus]=\"{ refreshFocus: model }\"\n>\n  <a\n    actions\n    class=\"link edit\"\n    [class.disabled]=\"!model.active || (isInEditMode$ | async)\"\n    [routerLink]=\"{ cxRoute: 'orgCostCenterEdit', params: model } | cxUrl\"\n  >\n    {{ 'organization.edit' | cxTranslate }}\n  </a>\n\n  <cx-org-toggle-status actions i18nRoot=\"orgCostCenter\"></cx-org-toggle-status>\n\n  <cx-org-disable-info info i18nRoot=\"orgCostCenter\"> </cx-org-disable-info>\n\n  <section main class=\"details\" cxOrgItemExists>\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.name' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.name }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.code' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.code }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.active' | cxTranslate }}</label>\n      <span\n        class=\"value\"\n        [class.is-active]=\"model.active\"\n        [class.is-inactive]=\"!model.active\"\n      >\n        {{\n          (model.active ? 'organization.enabled' : 'organization.disabled')\n            | cxTranslate\n        }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.currency' | cxTranslate }}</label>\n\n      <span class=\"value\">\n        {{ model.currency?.isocode }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.unit' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.unit\n          } | cxUrl\n        \"\n      >\n        {{ model.unit?.name }}\n      </a>\n    </div>\n  </section>\n\n  <section main class=\"link-list\">\n    <a\n      *ngIf=\"model.code\"\n      class=\"link\"\n      [routerLink]=\"{ cxRoute: 'orgCostCenterBudgets', params: model } | cxUrl\"\n      routerLinkActive=\"is-current\"\n    >\n      {{ 'orgCostCenter.budget.link' | cxTranslate }}\n    </a>\n  </section>\n</cx-org-card>\n", components: [{ type: i2.CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: i3.ToggleStatusComponent, selector: "cx-org-toggle-status", inputs: ["i18nRoot", "key", "disabled"] }, { type: i4.DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i7.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i8.ItemExistsDirective, selector: "[cxOrgItemExists]" }, { type: i7.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }], pipes: { "async": i5.AsyncPipe, "cxUrl": i9.UrlPipe, "cxTranslate": i9.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CostCenterDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-cost-center-details',
                    templateUrl: './cost-center-details.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ItemService,
                            useExisting: CostCenterItemService,
                        },
                    ],
                    host: { class: 'content-wrapper' },
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29zdC1jZW50ZXItZGV0YWlscy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvY29zdC1jZW50ZXIvZGV0YWlscy9jb3N0LWNlbnRlci1kZXRhaWxzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy9jb3N0LWNlbnRlci9kZXRhaWxzL2Nvc3QtY2VudGVyLWRldGFpbHMuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUduRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQzs7Ozs7Ozs7Ozs7QUFjN0UsTUFBTSxPQUFPLDBCQUEwQjtJQU9yQyxZQUFzQixXQUFvQztRQUFwQyxnQkFBVyxHQUFYLFdBQVcsQ0FBeUI7UUFOMUQsV0FBTSxHQUEyQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3pELFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDaEQsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUNkLENBQUM7UUFDRixrQkFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0lBRWMsQ0FBQzs7dUhBUG5ELDBCQUEwQjsyR0FBMUIsMEJBQTBCLGtHQVIxQjtRQUNUO1lBQ0UsT0FBTyxFQUFFLFdBQVc7WUFDcEIsV0FBVyxFQUFFLHFCQUFxQjtTQUNuQztLQUNGLDBCQ2hCSCwycUVBa0ZBOzJGRC9EYSwwQkFBMEI7a0JBWnRDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjtvQkFDdEMsV0FBVyxFQUFFLHNDQUFzQztvQkFDbkQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsV0FBVzs0QkFDcEIsV0FBVyxFQUFFLHFCQUFxQjt5QkFDbkM7cUJBQ0Y7b0JBQ0QsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFO2lCQUNuQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvc3RDZW50ZXIgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3RhcnRXaXRoLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJdGVtU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9pdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29zdENlbnRlckl0ZW1TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29zdC1jZW50ZXItaXRlbS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtb3JnLWNvc3QtY2VudGVyLWRldGFpbHMnLFxuICB0ZW1wbGF0ZVVybDogJy4vY29zdC1jZW50ZXItZGV0YWlscy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBJdGVtU2VydmljZSxcbiAgICAgIHVzZUV4aXN0aW5nOiBDb3N0Q2VudGVySXRlbVNlcnZpY2UsXG4gICAgfSxcbiAgXSxcbiAgaG9zdDogeyBjbGFzczogJ2NvbnRlbnQtd3JhcHBlcicgfSxcbn0pXG5leHBvcnQgY2xhc3MgQ29zdENlbnRlckRldGFpbHNDb21wb25lbnQge1xuICBtb2RlbCQ6IE9ic2VydmFibGU8Q29zdENlbnRlcj4gPSB0aGlzLml0ZW1TZXJ2aWNlLmtleSQucGlwZShcbiAgICBzd2l0Y2hNYXAoKGNvZGUpID0+IHRoaXMuaXRlbVNlcnZpY2UubG9hZChjb2RlKSksXG4gICAgc3RhcnRXaXRoKHt9KVxuICApO1xuICBpc0luRWRpdE1vZGUkID0gdGhpcy5pdGVtU2VydmljZS5pc0luRWRpdE1vZGUkO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpdGVtU2VydmljZTogSXRlbVNlcnZpY2U8Q29zdENlbnRlcj4pIHt9XG59XG4iLCI8Y3gtb3JnLWNhcmRcbiAgKm5nSWY9XCJtb2RlbCQgfCBhc3luYyBhcyBtb2RlbFwiXG4gIGkxOG5Sb290PVwib3JnQ29zdENlbnRlci5kZXRhaWxzXCJcbiAgW2N4Rm9jdXNdPVwieyByZWZyZXNoRm9jdXM6IG1vZGVsIH1cIlxuPlxuICA8YVxuICAgIGFjdGlvbnNcbiAgICBjbGFzcz1cImxpbmsgZWRpdFwiXG4gICAgW2NsYXNzLmRpc2FibGVkXT1cIiFtb2RlbC5hY3RpdmUgfHwgKGlzSW5FZGl0TW9kZSQgfCBhc3luYylcIlxuICAgIFtyb3V0ZXJMaW5rXT1cInsgY3hSb3V0ZTogJ29yZ0Nvc3RDZW50ZXJFZGl0JywgcGFyYW1zOiBtb2RlbCB9IHwgY3hVcmxcIlxuICA+XG4gICAge3sgJ29yZ2FuaXphdGlvbi5lZGl0JyB8IGN4VHJhbnNsYXRlIH19XG4gIDwvYT5cblxuICA8Y3gtb3JnLXRvZ2dsZS1zdGF0dXMgYWN0aW9ucyBpMThuUm9vdD1cIm9yZ0Nvc3RDZW50ZXJcIj48L2N4LW9yZy10b2dnbGUtc3RhdHVzPlxuXG4gIDxjeC1vcmctZGlzYWJsZS1pbmZvIGluZm8gaTE4blJvb3Q9XCJvcmdDb3N0Q2VudGVyXCI+IDwvY3gtb3JnLWRpc2FibGUtaW5mbz5cblxuICA8c2VjdGlvbiBtYWluIGNsYXNzPVwiZGV0YWlsc1wiIGN4T3JnSXRlbUV4aXN0cz5cbiAgICA8ZGl2IGNsYXNzPVwicHJvcGVydHlcIj5cbiAgICAgIDxsYWJlbD57eyAnb3JnQ29zdENlbnRlci5uYW1lJyB8IGN4VHJhbnNsYXRlIH19PC9sYWJlbD5cbiAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj5cbiAgICAgICAge3sgbW9kZWwubmFtZSB9fVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cInByb3BlcnR5XCI+XG4gICAgICA8bGFiZWw+e3sgJ29yZ0Nvc3RDZW50ZXIuY29kZScgfCBjeFRyYW5zbGF0ZSB9fTwvbGFiZWw+XG4gICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+XG4gICAgICAgIHt7IG1vZGVsLmNvZGUgfX1cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJwcm9wZXJ0eVwiPlxuICAgICAgPGxhYmVsPnt7ICdvcmdDb3N0Q2VudGVyLmFjdGl2ZScgfCBjeFRyYW5zbGF0ZSB9fTwvbGFiZWw+XG4gICAgICA8c3BhblxuICAgICAgICBjbGFzcz1cInZhbHVlXCJcbiAgICAgICAgW2NsYXNzLmlzLWFjdGl2ZV09XCJtb2RlbC5hY3RpdmVcIlxuICAgICAgICBbY2xhc3MuaXMtaW5hY3RpdmVdPVwiIW1vZGVsLmFjdGl2ZVwiXG4gICAgICA+XG4gICAgICAgIHt7XG4gICAgICAgICAgKG1vZGVsLmFjdGl2ZSA/ICdvcmdhbml6YXRpb24uZW5hYmxlZCcgOiAnb3JnYW5pemF0aW9uLmRpc2FibGVkJylcbiAgICAgICAgICAgIHwgY3hUcmFuc2xhdGVcbiAgICAgICAgfX1cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJwcm9wZXJ0eVwiPlxuICAgICAgPGxhYmVsPnt7ICdvcmdDb3N0Q2VudGVyLmN1cnJlbmN5JyB8IGN4VHJhbnNsYXRlIH19PC9sYWJlbD5cblxuICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPlxuICAgICAgICB7eyBtb2RlbC5jdXJyZW5jeT8uaXNvY29kZSB9fVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cInByb3BlcnR5XCI+XG4gICAgICA8bGFiZWw+e3sgJ29yZ0Nvc3RDZW50ZXIudW5pdCcgfCBjeFRyYW5zbGF0ZSB9fTwvbGFiZWw+XG4gICAgICA8YVxuICAgICAgICBjbGFzcz1cInZhbHVlXCJcbiAgICAgICAgW3JvdXRlckxpbmtdPVwiXG4gICAgICAgICAge1xuICAgICAgICAgICAgY3hSb3V0ZTogJ29yZ1VuaXREZXRhaWxzJyxcbiAgICAgICAgICAgIHBhcmFtczogbW9kZWwudW5pdFxuICAgICAgICAgIH0gfCBjeFVybFxuICAgICAgICBcIlxuICAgICAgPlxuICAgICAgICB7eyBtb2RlbC51bml0Py5uYW1lIH19XG4gICAgICA8L2E+XG4gICAgPC9kaXY+XG4gIDwvc2VjdGlvbj5cblxuICA8c2VjdGlvbiBtYWluIGNsYXNzPVwibGluay1saXN0XCI+XG4gICAgPGFcbiAgICAgICpuZ0lmPVwibW9kZWwuY29kZVwiXG4gICAgICBjbGFzcz1cImxpbmtcIlxuICAgICAgW3JvdXRlckxpbmtdPVwieyBjeFJvdXRlOiAnb3JnQ29zdENlbnRlckJ1ZGdldHMnLCBwYXJhbXM6IG1vZGVsIH0gfCBjeFVybFwiXG4gICAgICByb3V0ZXJMaW5rQWN0aXZlPVwiaXMtY3VycmVudFwiXG4gICAgPlxuICAgICAge3sgJ29yZ0Nvc3RDZW50ZXIuYnVkZ2V0LmxpbmsnIHwgY3hUcmFuc2xhdGUgfX1cbiAgICA8L2E+XG4gIDwvc2VjdGlvbj5cbjwvY3gtb3JnLWNhcmQ+XG4iXX0=