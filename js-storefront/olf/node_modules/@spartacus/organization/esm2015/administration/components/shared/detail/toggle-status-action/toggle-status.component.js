import { Component, Input } from '@angular/core';
import { LoadStatus } from '@spartacus/organization/administration/core';
import { Subscription } from 'rxjs';
import { filter, first, take } from 'rxjs/operators';
import { ConfirmationMessageComponent } from '../../message/confirmation/confirmation-message.component';
import * as i0 from "@angular/core";
import * as i1 from "../../item.service";
import * as i2 from "../../message/services/message.service";
import * as i3 from "../disable-info/disable-info.service";
import * as i4 from "@angular/common";
import * as i5 from "@spartacus/core";
/**
 * Reusable component in the my-company is to toggle the disabled state for
 * my company entities.
 */
export class ToggleStatusComponent {
    constructor(itemService, messageService, disableInfoService) {
        this.itemService = itemService;
        this.messageService = messageService;
        this.disableInfoService = disableInfoService;
        /**
         * The key input can be used to add a custom key.
         *
         * Most _organization_ entities use the `code` key, but there is some variations.
         */
        this.key = 'code';
        /**
         * resolves the current item.
         */
        this.current$ = this.itemService.current$;
        /**
         * resolves if the user is currently in the edit form.
         */
        this.isInEditMode$ = this.itemService.isInEditMode$;
        this.subscription = new Subscription();
    }
    toggle(item) {
        if (!item.active) {
            // we do ask for confirmation when the entity gets activated
            this.update(item);
        }
        else {
            if (!this.confirmation) {
                this.confirmation = this.messageService.add({
                    message: {
                        key: this.i18nRoot + '.messages.deactivate',
                        params: { item },
                    },
                    messageTitle: {
                        key: this.i18nRoot + '.messages.deactivateTitle',
                        params: { item },
                    },
                    confirm: {
                        key: 'organization.confirmation.disable',
                    },
                    component: ConfirmationMessageComponent,
                });
                this.subscription.add(this.confirmation.pipe(first()).subscribe((event) => {
                    if (event.close) {
                        this.confirmation = null;
                    }
                    if (event.confirm) {
                        this.messageService.close(this.confirmation);
                        this.update(item);
                        this.confirmation = null;
                    }
                }));
            }
        }
    }
    /**
     * Indicates whether the status can be toggled or not.
     */
    isDisabled(item) {
        var _a;
        return ((_a = this.disabled) !== null && _a !== void 0 ? _a : (this.disableInfoService.isParentDisabled(item) ||
            this.disableInfoService.isRootUnit(item)));
    }
    update(item) {
        this.itemService
            .update(item[this.key], this.getPatchedItem(item))
            .pipe(take(1), filter((data) => data.status === LoadStatus.SUCCESS))
            .subscribe((data) => this.notify(Object.assign(Object.assign({}, item), data.item)));
    }
    getPatchedItem(item) {
        const patch = {};
        patch[this.key] = item[this.key];
        patch.active = !item.active;
        return patch;
    }
    notify(item) {
        this.messageService.add({
            message: {
                key: `${this.i18nRoot}.messages.${item.active ? 'confirmEnabled' : 'confirmDisabled'}`,
                params: { item },
            },
        });
    }
    ngOnDestroy() {
        var _a;
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
}
ToggleStatusComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ToggleStatusComponent, deps: [{ token: i1.ItemService }, { token: i2.MessageService }, { token: i3.DisableInfoService }], target: i0.ɵɵFactoryTarget.Component });
ToggleStatusComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ToggleStatusComponent, selector: "cx-org-toggle-status", inputs: { i18nRoot: "i18nRoot", key: "key", disabled: "disabled" }, host: { classAttribute: "content-wrapper" }, ngImport: i0, template: "<button\n  *ngIf=\"current$ | async as item\"\n  class=\"button active\"\n  [disabled]=\"\n    isDisabled(item) ||\n    ((isInEditMode$ | async) && item.active && disabled !== true)\n  \"\n  (click)=\"toggle(item)\"\n>\n  {{ 'organization.' + (item.active ? 'disable' : 'enable') | cxTranslate }}\n</button>\n", directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe, "cxTranslate": i5.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ToggleStatusComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-toggle-status',
                    templateUrl: './toggle-status.component.html',
                    host: { class: 'content-wrapper' },
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.MessageService }, { type: i3.DisableInfoService }]; }, propDecorators: { i18nRoot: [{
                type: Input
            }], key: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,