import { Injectable } from '@angular/core';
import { ROUTE_PARAMS } from '@spartacus/organization/administration/root';
import { distinctUntilChanged, filter, first, pluck } from 'rxjs/operators';
import { ItemService } from '../../../../shared/item.service';
import * as i0 from "@angular/core";
import * as i1 from "./current-unit-address.service";
import * as i2 from "@spartacus/core";
import * as i3 from "../form/unit-address-form.service";
import * as i4 from "@spartacus/organization/administration/core";
export class UnitAddressItemService extends ItemService {
    constructor(currentItemService, routingService, formService, unitService) {
        super(currentItemService, routingService, formService);
        this.currentItemService = currentItemService;
        this.routingService = routingService;
        this.formService = formService;
        this.unitService = unitService;
        this.unitRouteParam$ = this.routingService
            .getParams()
            .pipe(pluck(ROUTE_PARAMS.unitCode), distinctUntilChanged());
    }
    load(unitUid, addressId) {
        return this.unitService
            .getAddress(unitUid, addressId)
            .pipe(filter((list) => Boolean(list)));
    }
    update(addressCode, address) {
        this.unitRouteParam$.pipe(first()).subscribe((unitCode) => {
            this.unitService.updateAddress(unitCode, addressCode, address);
        });
        return this.unitService.getAddressLoadingStatus(addressCode);
    }
    create(value) {
        this.unitRouteParam$
            .pipe(first())
            .subscribe((unitCode) => this.unitService.createAddress(unitCode, value));
        return this.unitService.getAddressLoadingStatus(null);
    }
    getDetailsRoute() {
        return this.currentItemService.getDetailsRoute();
    }
    delete(addressId, unitUid) {
        this.launchList();
        this.unitService.deleteAddress(unitUid, addressId);
        return this.unitService.getAddressLoadingStatus(addressId);
    }
    launchDetails(item) {
        if (!item.id) {
            // since the ID is generated in the backend
            // we redirect to the list instead.
            this.launchList();
        }
        else {
            this.unitRouteParam$.pipe(first()).subscribe((unitCode) => {
                this.routingService.go({
                    cxRoute: this.getDetailsRoute(),
                    params: Object.assign(Object.assign({}, item), { uid: unitCode }),
                });
            });
        }
    }
    launchList() {
        this.unitRouteParam$.pipe(first()).subscribe((unitCode) => {
            this.routingService.go({
                cxRoute: 'orgUnitAddressList',
                params: { uid: unitCode },
            });
        });
    }
}
UnitAddressItemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitAddressItemService, deps: [{ token: i1.CurrentUnitAddressService }, { token: i2.RoutingService }, { token: i3.UnitAddressFormService }, { token: i4.OrgUnitService }], target: i0.ɵɵFactoryTarget.Injectable });
UnitAddressItemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitAddressItemService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitAddressItemService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.CurrentUnitAddressService }, { type: i2.RoutingService }, { type: i3.UnitAddressFormService }, { type: i4.OrgUnitService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC1hZGRyZXNzLWl0ZW0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91bml0L2xpbmtzL2FkZHJlc3Nlcy9zZXJ2aWNlcy91bml0LWFkZHJlc3MtaXRlbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFNM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBRTNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7Ozs7O0FBTzlELE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxXQUFvQjtJQUM5RCxZQUNZLGtCQUE2QyxFQUM3QyxjQUE4QixFQUM5QixXQUFtQyxFQUNuQyxXQUEyQjtRQUVyQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBTDdDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBMkI7UUFDN0MsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGdCQUFXLEdBQVgsV0FBVyxDQUF3QjtRQUNuQyxnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFLN0Isb0JBQWUsR0FBRyxJQUFJLENBQUMsY0FBYzthQUM1QyxTQUFTLEVBQUU7YUFDWCxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7SUFKOUQsQ0FBQztJQU1ELElBQUksQ0FBQyxPQUFlLEVBQUUsU0FBaUI7UUFDckMsT0FBTyxJQUFJLENBQUMsV0FBVzthQUNwQixVQUFVLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQzthQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxNQUFNLENBQ0osV0FBbUIsRUFDbkIsT0FBZ0I7UUFFaEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUN4RCxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFUyxNQUFNLENBQ2QsS0FBYztRQUVkLElBQUksQ0FBQyxlQUFlO2FBQ2pCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNiLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFUyxlQUFlO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ25ELENBQUM7SUFFRCxNQUFNLENBQ0osU0FBaUIsRUFDakIsT0FBZTtRQUVmLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDbkQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxhQUFhLENBQUMsSUFBYTtRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNaLDJDQUEyQztZQUMzQyxtQ0FBbUM7WUFDbkMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ25CO2FBQU07WUFDTCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUN4RCxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztvQkFDckIsT0FBTyxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUU7b0JBQy9CLE1BQU0sa0NBQU8sSUFBSSxLQUFFLEdBQUcsRUFBRSxRQUFRLEdBQUU7aUJBQ25DLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRVMsVUFBVTtRQUNsQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3hELElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDO2dCQUNyQixPQUFPLEVBQUUsb0JBQW9CO2dCQUM3QixNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFO2FBQzFCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7bUhBMUVVLHNCQUFzQjt1SEFBdEIsc0JBQXNCLGNBRnJCLE1BQU07MkZBRVAsc0JBQXNCO2tCQUhsQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFkZHJlc3MsIFJvdXRpbmdTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7XG4gIE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXMsXG4gIE9yZ1VuaXRTZXJ2aWNlLFxufSBmcm9tICdAc3BhcnRhY3VzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlJztcbmltcG9ydCB7IFJPVVRFX1BBUkFNUyB9IGZyb20gJ0BzcGFydGFjdXMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL3Jvb3QnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgZmlyc3QsIHBsdWNrIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSXRlbVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvaXRlbS5zZXJ2aWNlJztcbmltcG9ydCB7IFVuaXRBZGRyZXNzRm9ybVNlcnZpY2UgfSBmcm9tICcuLi9mb3JtL3VuaXQtYWRkcmVzcy1mb3JtLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ3VycmVudFVuaXRBZGRyZXNzU2VydmljZSB9IGZyb20gJy4vY3VycmVudC11bml0LWFkZHJlc3Muc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBVbml0QWRkcmVzc0l0ZW1TZXJ2aWNlIGV4dGVuZHMgSXRlbVNlcnZpY2U8QWRkcmVzcz4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgY3VycmVudEl0ZW1TZXJ2aWNlOiBDdXJyZW50VW5pdEFkZHJlc3NTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCByb3V0aW5nU2VydmljZTogUm91dGluZ1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGZvcm1TZXJ2aWNlOiBVbml0QWRkcmVzc0Zvcm1TZXJ2aWNlLFxuICAgIHByb3RlY3RlZCB1bml0U2VydmljZTogT3JnVW5pdFNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoY3VycmVudEl0ZW1TZXJ2aWNlLCByb3V0aW5nU2VydmljZSwgZm9ybVNlcnZpY2UpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHVuaXRSb3V0ZVBhcmFtJCA9IHRoaXMucm91dGluZ1NlcnZpY2VcbiAgICAuZ2V0UGFyYW1zKClcbiAgICAucGlwZShwbHVjayhST1VURV9QQVJBTVMudW5pdENvZGUpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcblxuICBsb2FkKHVuaXRVaWQ6IHN0cmluZywgYWRkcmVzc0lkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEFkZHJlc3M+IHtcbiAgICByZXR1cm4gdGhpcy51bml0U2VydmljZVxuICAgICAgLmdldEFkZHJlc3ModW5pdFVpZCwgYWRkcmVzc0lkKVxuICAgICAgLnBpcGUoZmlsdGVyKChsaXN0KSA9PiBCb29sZWFuKGxpc3QpKSk7XG4gIH1cblxuICB1cGRhdGUoXG4gICAgYWRkcmVzc0NvZGU6IHN0cmluZyxcbiAgICBhZGRyZXNzOiBBZGRyZXNzXG4gICk6IE9ic2VydmFibGU8T3JnYW5pemF0aW9uSXRlbVN0YXR1czxBZGRyZXNzPj4ge1xuICAgIHRoaXMudW5pdFJvdXRlUGFyYW0kLnBpcGUoZmlyc3QoKSkuc3Vic2NyaWJlKCh1bml0Q29kZSkgPT4ge1xuICAgICAgdGhpcy51bml0U2VydmljZS51cGRhdGVBZGRyZXNzKHVuaXRDb2RlLCBhZGRyZXNzQ29kZSwgYWRkcmVzcyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMudW5pdFNlcnZpY2UuZ2V0QWRkcmVzc0xvYWRpbmdTdGF0dXMoYWRkcmVzc0NvZGUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZShcbiAgICB2YWx1ZTogQWRkcmVzc1xuICApOiBPYnNlcnZhYmxlPE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXM8QWRkcmVzcz4+IHtcbiAgICB0aGlzLnVuaXRSb3V0ZVBhcmFtJFxuICAgICAgLnBpcGUoZmlyc3QoKSlcbiAgICAgIC5zdWJzY3JpYmUoKHVuaXRDb2RlKSA9PiB0aGlzLnVuaXRTZXJ2aWNlLmNyZWF0ZUFkZHJlc3ModW5pdENvZGUsIHZhbHVlKSk7XG4gICAgcmV0dXJuIHRoaXMudW5pdFNlcnZpY2UuZ2V0QWRkcmVzc0xvYWRpbmdTdGF0dXMobnVsbCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0RGV0YWlsc1JvdXRlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEl0ZW1TZXJ2aWNlLmdldERldGFpbHNSb3V0ZSgpO1xuICB9XG5cbiAgZGVsZXRlKFxuICAgIGFkZHJlc3NJZDogc3RyaW5nLFxuICAgIHVuaXRVaWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXM8QWRkcmVzcz4+IHtcbiAgICB0aGlzLmxhdW5jaExpc3QoKTtcbiAgICB0aGlzLnVuaXRTZXJ2aWNlLmRlbGV0ZUFkZHJlc3ModW5pdFVpZCwgYWRkcmVzc0lkKTtcbiAgICByZXR1cm4gdGhpcy51bml0U2VydmljZS5nZXRBZGRyZXNzTG9hZGluZ1N0YXR1cyhhZGRyZXNzSWQpO1xuICB9XG5cbiAgbGF1bmNoRGV0YWlscyhpdGVtOiBBZGRyZXNzKTogdm9pZCB7XG4gICAgaWYgKCFpdGVtLmlkKSB7XG4gICAgICAvLyBzaW5jZSB0aGUgSUQgaXMgZ2VuZXJhdGVkIGluIHRoZSBiYWNrZW5kXG4gICAgICAvLyB3ZSByZWRpcmVjdCB0byB0aGUgbGlzdCBpbnN0ZWFkLlxuICAgICAgdGhpcy5sYXVuY2hMaXN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudW5pdFJvdXRlUGFyYW0kLnBpcGUoZmlyc3QoKSkuc3Vic2NyaWJlKCh1bml0Q29kZSkgPT4ge1xuICAgICAgICB0aGlzLnJvdXRpbmdTZXJ2aWNlLmdvKHtcbiAgICAgICAgICBjeFJvdXRlOiB0aGlzLmdldERldGFpbHNSb3V0ZSgpLFxuICAgICAgICAgIHBhcmFtczogeyAuLi5pdGVtLCB1aWQ6IHVuaXRDb2RlIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGxhdW5jaExpc3QoKSB7XG4gICAgdGhpcy51bml0Um91dGVQYXJhbSQucGlwZShmaXJzdCgpKS5zdWJzY3JpYmUoKHVuaXRDb2RlKSA9PiB7XG4gICAgICB0aGlzLnJvdXRpbmdTZXJ2aWNlLmdvKHtcbiAgICAgICAgY3hSb3V0ZTogJ29yZ1VuaXRBZGRyZXNzTGlzdCcsXG4gICAgICAgIHBhcmFtczogeyB1aWQ6IHVuaXRDb2RlIH0sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19