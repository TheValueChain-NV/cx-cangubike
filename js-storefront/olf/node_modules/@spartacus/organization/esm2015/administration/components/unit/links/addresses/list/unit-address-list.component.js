import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ROUTE_PARAMS } from '@spartacus/organization/administration/root';
import { ListService } from '../../../../shared/list/list.service';
import { UnitAddressListService } from './unit-address-list.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../../shared/sub-list/sub-list.component";
import * as i2 from "@angular/router";
import * as i3 from "@spartacus/core";
export class UnitAddressListComponent {
    constructor() {
        this.routerKey = ROUTE_PARAMS.addressCode;
    }
}
UnitAddressListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitAddressListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
UnitAddressListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitAddressListComponent, selector: "cx-org-unit-address-list", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ListService,
            useExisting: UnitAddressListService,
        },
    ], ngImport: i0, template: "<cx-org-sub-list\n  key=\"id\"\n  [routerKey]=\"routerKey\"\n  class=\"has-nested-view\"\n  [showHint]=\"true\"\n>\n  <a actions class=\"link\" routerLink=\"create\">\n    {{ 'organization.create' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: i1.SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitAddressListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-unit-address-list',
                    templateUrl: './unit-address-list.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                    providers: [
                        {
                            provide: ListService,
                            useExisting: UnitAddressListService,
                        },
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC1hZGRyZXNzLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb21wb25lbnRzL3VuaXQvbGlua3MvYWRkcmVzc2VzL2xpc3QvdW5pdC1hZGRyZXNzLWxpc3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb21wb25lbnRzL3VuaXQvbGlua3MvYWRkcmVzc2VzL2xpc3QvdW5pdC1hZGRyZXNzLWxpc3QuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDM0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7OztBQWNyRSxNQUFNLE9BQU8sd0JBQXdCO0lBWnJDO1FBYUUsY0FBUyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUM7S0FDdEM7O3FIQUZZLHdCQUF3Qjt5R0FBeEIsd0JBQXdCLGdHQVB4QjtRQUNUO1lBQ0UsT0FBTyxFQUFFLFdBQVc7WUFDcEIsV0FBVyxFQUFFLHNCQUFzQjtTQUNwQztLQUNGLDBCQ2ZILHFQQVVBOzJGRE9hLHdCQUF3QjtrQkFacEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsMEJBQTBCO29CQUNwQyxXQUFXLEVBQUUsb0NBQW9DO29CQUNqRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFO29CQUNsQyxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLFdBQVc7NEJBQ3BCLFdBQVcsRUFBRSxzQkFBc0I7eUJBQ3BDO3FCQUNGO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUk9VVEVfUEFSQU1TIH0gZnJvbSAnQHNwYXJ0YWN1cy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vcm9vdCc7XG5pbXBvcnQgeyBMaXN0U2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9saXN0L2xpc3Quc2VydmljZSc7XG5pbXBvcnQgeyBVbml0QWRkcmVzc0xpc3RTZXJ2aWNlIH0gZnJvbSAnLi91bml0LWFkZHJlc3MtbGlzdC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtb3JnLXVuaXQtYWRkcmVzcy1saXN0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3VuaXQtYWRkcmVzcy1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHsgY2xhc3M6ICdjb250ZW50LXdyYXBwZXInIH0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IExpc3RTZXJ2aWNlLFxuICAgICAgdXNlRXhpc3Rpbmc6IFVuaXRBZGRyZXNzTGlzdFNlcnZpY2UsXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVW5pdEFkZHJlc3NMaXN0Q29tcG9uZW50IHtcbiAgcm91dGVyS2V5ID0gUk9VVEVfUEFSQU1TLmFkZHJlc3NDb2RlO1xufVxuIiwiPGN4LW9yZy1zdWItbGlzdFxuICBrZXk9XCJpZFwiXG4gIFtyb3V0ZXJLZXldPVwicm91dGVyS2V5XCJcbiAgY2xhc3M9XCJoYXMtbmVzdGVkLXZpZXdcIlxuICBbc2hvd0hpbnRdPVwidHJ1ZVwiXG4+XG4gIDxhIGFjdGlvbnMgY2xhc3M9XCJsaW5rXCIgcm91dGVyTGluaz1cImNyZWF0ZVwiPlxuICAgIHt7ICdvcmdhbml6YXRpb24uY3JlYXRlJyB8IGN4VHJhbnNsYXRlIH19XG4gIDwvYT5cbjwvY3gtb3JnLXN1Yi1saXN0PlxuIl19