import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ROUTE_PARAMS } from '@spartacus/organization/administration/root';
import { of } from 'rxjs';
import { ListService } from '../../../../shared/list/list.service';
import { UnitUserListService } from '../services/unit-user-list.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/current-unit.service";
import * as i2 from "../../../../shared/sub-list/sub-list.component";
import * as i3 from "../../../../shared/detail/disable-info/disable-info.component";
import * as i4 from "@angular/router";
import * as i5 from "@angular/common";
import * as i6 from "@spartacus/core";
export class UnitUserListComponent {
    constructor(currentUnitService) {
        this.currentUnitService = currentUnitService;
        this.routerKey = ROUTE_PARAMS.userCode;
        this.unit$ = this.currentUnitService
            ? this.currentUnitService.item$
            : of({ active: true });
    }
}
UnitUserListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitUserListComponent, deps: [{ token: i1.CurrentUnitService }], target: i0.ɵɵFactoryTarget.Component });
UnitUserListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitUserListComponent, selector: "cx-org-unit-user-list", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ListService,
            useExisting: UnitUserListService,
        },
    ], ngImport: i0, template: "<cx-org-sub-list key=\"customerId\" [routerKey]=\"routerKey\" [showHint]=\"true\">\n  <a\n    actions\n    class=\"link\"\n    routerLink=\"create\"\n    [class.disabled]=\"!(unit$ | async)?.active\"\n  >\n    {{ 'organization.create' | cxTranslate }}\n  </a>\n  <cx-org-disable-info\n    info\n    i18nRoot=\"orgUnitUsers\"\n    [displayInfoConfig]=\"{\n      disabledCreate: true,\n      disabledEnable: false,\n      disabledEdit: false\n    }\"\n  >\n  </cx-org-disable-info>\n</cx-org-sub-list>\n", components: [{ type: i2.SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }, { type: i3.DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i4.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i5.AsyncPipe, "cxTranslate": i6.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitUserListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-unit-user-list',
                    templateUrl: './unit-user-list.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                    providers: [
                        {
                            provide: ListService,
                            useExisting: UnitUserListService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.CurrentUnitService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC11c2VyLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb21wb25lbnRzL3VuaXQvbGlua3MvdXNlcnMvbGlzdC91bml0LXVzZXItbGlzdC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvdW5pdC9saW5rcy91c2Vycy9saXN0L3VuaXQtdXNlci1saXN0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQzNFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRW5FLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOzs7Ozs7OztBQWN6RSxNQUFNLE9BQU8scUJBQXFCO0lBT2hDLFlBQXNCLGtCQUFzQztRQUF0Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBTjVELGNBQVMsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDO1FBRWxDLFVBQUssR0FBd0IsSUFBSSxDQUFDLGtCQUFrQjtZQUNsRCxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUs7WUFDL0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXNDLENBQUM7O2tIQVByRCxxQkFBcUI7c0dBQXJCLHFCQUFxQiw2RkFQckI7UUFDVDtZQUNFLE9BQU8sRUFBRSxXQUFXO1lBQ3BCLFdBQVcsRUFBRSxtQkFBbUI7U0FDakM7S0FDRiwwQkNsQkgsdWZBb0JBOzJGREFhLHFCQUFxQjtrQkFaakMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsdUJBQXVCO29CQUNqQyxXQUFXLEVBQUUsaUNBQWlDO29CQUM5QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFO29CQUNsQyxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLFdBQVc7NEJBQ3BCLFdBQVcsRUFBRSxtQkFBbUI7eUJBQ2pDO3FCQUNGO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQjJCVW5pdCB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBST1VURV9QQVJBTVMgfSBmcm9tICdAc3BhcnRhY3VzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9yb290JztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMaXN0U2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9saXN0L2xpc3Quc2VydmljZSc7XG5pbXBvcnQgeyBDdXJyZW50VW5pdFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9jdXJyZW50LXVuaXQuc2VydmljZSc7XG5pbXBvcnQgeyBVbml0VXNlckxpc3RTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdW5pdC11c2VyLWxpc3Quc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LW9yZy11bml0LXVzZXItbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi91bml0LXVzZXItbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7IGNsYXNzOiAnY29udGVudC13cmFwcGVyJyB9LFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBMaXN0U2VydmljZSxcbiAgICAgIHVzZUV4aXN0aW5nOiBVbml0VXNlckxpc3RTZXJ2aWNlLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFVuaXRVc2VyTGlzdENvbXBvbmVudCB7XG4gIHJvdXRlcktleSA9IFJPVVRFX1BBUkFNUy51c2VyQ29kZTtcblxuICB1bml0JDogT2JzZXJ2YWJsZTxCMkJVbml0PiA9IHRoaXMuY3VycmVudFVuaXRTZXJ2aWNlXG4gICAgPyB0aGlzLmN1cnJlbnRVbml0U2VydmljZS5pdGVtJFxuICAgIDogb2YoeyBhY3RpdmU6IHRydWUgfSk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGN1cnJlbnRVbml0U2VydmljZTogQ3VycmVudFVuaXRTZXJ2aWNlKSB7fVxufVxuIiwiPGN4LW9yZy1zdWItbGlzdCBrZXk9XCJjdXN0b21lcklkXCIgW3JvdXRlcktleV09XCJyb3V0ZXJLZXlcIiBbc2hvd0hpbnRdPVwidHJ1ZVwiPlxuICA8YVxuICAgIGFjdGlvbnNcbiAgICBjbGFzcz1cImxpbmtcIlxuICAgIHJvdXRlckxpbms9XCJjcmVhdGVcIlxuICAgIFtjbGFzcy5kaXNhYmxlZF09XCIhKHVuaXQkIHwgYXN5bmMpPy5hY3RpdmVcIlxuICA+XG4gICAge3sgJ29yZ2FuaXphdGlvbi5jcmVhdGUnIHwgY3hUcmFuc2xhdGUgfX1cbiAgPC9hPlxuICA8Y3gtb3JnLWRpc2FibGUtaW5mb1xuICAgIGluZm9cbiAgICBpMThuUm9vdD1cIm9yZ1VuaXRVc2Vyc1wiXG4gICAgW2Rpc3BsYXlJbmZvQ29uZmlnXT1cIntcbiAgICAgIGRpc2FibGVkQ3JlYXRlOiB0cnVlLFxuICAgICAgZGlzYWJsZWRFbmFibGU6IGZhbHNlLFxuICAgICAgZGlzYWJsZWRFZGl0OiBmYWxzZVxuICAgIH1cIlxuICA+XG4gIDwvY3gtb3JnLWRpc2FibGUtaW5mbz5cbjwvY3gtb3JnLXN1Yi1saXN0PlxuIl19