import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewChild, ViewContainerRef, } from '@angular/core';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./services/message.service";
import * as i2 from "./services/message-render.service";
export class MessageComponent {
    constructor(messageService, renderService) {
        this.messageService = messageService;
        this.renderService = renderService;
        this.subscription = new Subscription();
    }
    ngAfterViewInit() {
        this.subscription.add(this.messageService.get().subscribe((msg) => {
            var _a;
            if (msg) {
                this.render(msg);
            }
            else {
                (_a = this.vcr) === null || _a === void 0 ? void 0 : _a.clear();
            }
        }));
    }
    render(msg) {
        const ref = this.vcr.createComponent(this.renderService.getComponent(msg), 0, this.renderService.getInjector(msg, this.vcr.injector));
        ref.injector.get(ChangeDetectorRef).markForCheck();
        this.subscription.add(msg.events
            .pipe(filter((event) => !!event.close))
            .subscribe(() => this.terminate(ref)));
    }
    /**
     * Terminates the message component in 2 steps. It starts to toggle the terminate
     * state of the component and shortly after destroys the component completely. The
     * termination state allows the CSS layer to play an animation before destroying.
     */
    terminate(ref) {
        ref.instance.terminated = true;
        ref.injector.get(ChangeDetectorRef).markForCheck();
        setTimeout(() => {
            ref.destroy();
        }, 500);
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
MessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: MessageComponent, deps: [{ token: i1.MessageService }, { token: i2.MessageRenderService }], target: i0.ɵɵFactoryTarget.Component });
MessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: MessageComponent, selector: "cx-org-message", viewQueries: [{ propertyName: "vcr", first: true, predicate: ["vcr"], descendants: true, read: ViewContainerRef }], ngImport: i0, template: "<ng-container #vcr></ng-container>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: MessageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-message',
                    templateUrl: './message.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.MessageService }, { type: i2.MessageRenderService }]; }, propDecorators: { vcr: [{
                type: ViewChild,
                args: ['vcr', { read: ViewContainerRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvc2hhcmVkL21lc3NhZ2UvbWVzc2FnZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvc2hhcmVkL21lc3NhZ2UvbWVzc2FnZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBR1QsU0FBUyxFQUNULGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQVd4QyxNQUFNLE9BQU8sZ0JBQWdCO0lBTzNCLFlBQ1ksY0FBOEIsRUFDOUIsYUFBbUM7UUFEbkMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQUpyQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFLekMsQ0FBQztJQUVKLGVBQWU7UUFDYixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FDbkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTs7WUFDMUMsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNsQjtpQkFBTTtnQkFDTCxNQUFBLElBQUksQ0FBQyxHQUFHLDBDQUFFLEtBQUssRUFBRSxDQUFDO2FBQ25CO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFUyxNQUFNLENBQUMsR0FBZ0I7UUFDL0IsTUFBTSxHQUFHLEdBQXVDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUN0RSxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDcEMsQ0FBQyxFQUNELElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUN2RCxDQUFDO1FBQ0YsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVuRCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FDbkIsR0FBRyxDQUFDLE1BQU07YUFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBdUIsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN4RCxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUN4QyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDTyxTQUFTLENBQUMsR0FBdUM7UUFDekQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQy9CLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDbkQsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDVixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7NkdBdERVLGdCQUFnQjtpR0FBaEIsZ0JBQWdCLDZIQUdELGdCQUFnQiw2QkN6QjVDLHNDQUNBOzJGRHFCYSxnQkFBZ0I7a0JBTDVCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsV0FBVyxFQUFFLDBCQUEwQjtvQkFDdkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEO3dJQUkrQyxHQUFHO3NCQUFoRCxTQUFTO3VCQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBDb21wb25lbnRSZWYsXG4gIE9uRGVzdHJveSxcbiAgVmlld0NoaWxkLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQmFzZU1lc3NhZ2VDb21wb25lbnQgfSBmcm9tICcuL2Jhc2UtbWVzc2FnZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTWVzc2FnZURhdGEsIE1lc3NhZ2VFdmVudERhdGEgfSBmcm9tICcuL21lc3NhZ2UubW9kZWwnO1xuaW1wb3J0IHsgTWVzc2FnZVJlbmRlclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL21lc3NhZ2UtcmVuZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL21lc3NhZ2Uuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LW9yZy1tZXNzYWdlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21lc3NhZ2UuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgTWVzc2FnZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIC8vIFdlIHVzZSBhIGNoaWxkIHZpZXcgY29udGFpbmVyIHJlZiwgYXMgY3JlYXRpbmcgY29tcG9uZW50cyB3aWxsIGJlY29tZSBzaWJsaW5ncy5cbiAgLy8gV2UgbGlrZSB0aGUgbWVzc2FnZSBjb21wb25lbnRzIHRvIGFwcGVhciBpbnNpZGUgdGhlIGBjeC1vcmctbWVzc2FnZWAgaW5zdGVhZC5cbiAgQFZpZXdDaGlsZCgndmNyJywgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmIH0pIHZjcjogVmlld0NvbnRhaW5lclJlZjtcblxuICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBtZXNzYWdlU2VydmljZTogTWVzc2FnZVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHJlbmRlclNlcnZpY2U6IE1lc3NhZ2VSZW5kZXJTZXJ2aWNlXG4gICkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKFxuICAgICAgdGhpcy5tZXNzYWdlU2VydmljZS5nZXQoKS5zdWJzY3JpYmUoKG1zZykgPT4ge1xuICAgICAgICBpZiAobXNnKSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXIobXNnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnZjcj8uY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlbmRlcihtc2c6IE1lc3NhZ2VEYXRhKSB7XG4gICAgY29uc3QgcmVmOiBDb21wb25lbnRSZWY8QmFzZU1lc3NhZ2VDb21wb25lbnQ+ID0gdGhpcy52Y3IuY3JlYXRlQ29tcG9uZW50KFxuICAgICAgdGhpcy5yZW5kZXJTZXJ2aWNlLmdldENvbXBvbmVudChtc2cpLFxuICAgICAgMCxcbiAgICAgIHRoaXMucmVuZGVyU2VydmljZS5nZXRJbmplY3Rvcihtc2csIHRoaXMudmNyLmluamVjdG9yKVxuICAgICk7XG4gICAgcmVmLmluamVjdG9yLmdldChDaGFuZ2VEZXRlY3RvclJlZikubWFya0ZvckNoZWNrKCk7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQoXG4gICAgICBtc2cuZXZlbnRzXG4gICAgICAgIC5waXBlKGZpbHRlcigoZXZlbnQ6IE1lc3NhZ2VFdmVudERhdGEpID0+ICEhZXZlbnQuY2xvc2UpKVxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHRoaXMudGVybWluYXRlKHJlZikpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXJtaW5hdGVzIHRoZSBtZXNzYWdlIGNvbXBvbmVudCBpbiAyIHN0ZXBzLiBJdCBzdGFydHMgdG8gdG9nZ2xlIHRoZSB0ZXJtaW5hdGVcbiAgICogc3RhdGUgb2YgdGhlIGNvbXBvbmVudCBhbmQgc2hvcnRseSBhZnRlciBkZXN0cm95cyB0aGUgY29tcG9uZW50IGNvbXBsZXRlbHkuIFRoZVxuICAgKiB0ZXJtaW5hdGlvbiBzdGF0ZSBhbGxvd3MgdGhlIENTUyBsYXllciB0byBwbGF5IGFuIGFuaW1hdGlvbiBiZWZvcmUgZGVzdHJveWluZy5cbiAgICovXG4gIHByb3RlY3RlZCB0ZXJtaW5hdGUocmVmOiBDb21wb25lbnRSZWY8QmFzZU1lc3NhZ2VDb21wb25lbnQ+KSB7XG4gICAgcmVmLmluc3RhbmNlLnRlcm1pbmF0ZWQgPSB0cnVlO1xuICAgIHJlZi5pbmplY3Rvci5nZXQoQ2hhbmdlRGV0ZWN0b3JSZWYpLm1hcmtGb3JDaGVjaygpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcmVmLmRlc3Ryb3koKTtcbiAgICB9LCA1MDApO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAjdmNyPjwvbmctY29udGFpbmVyPlxuIl19