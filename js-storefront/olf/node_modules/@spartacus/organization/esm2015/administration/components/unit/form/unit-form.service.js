import { Injectable } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { CustomFormValidators } from '@spartacus/storefront';
import { FormService } from '../../shared/form/form.service';
import * as i0 from "@angular/core";
export class UnitFormService extends FormService {
    patchData(item) {
        this.toggleParentUnit(item);
        super.patchData(item);
    }
    build() {
        const form = new FormGroup({});
        form.setControl('uid', new FormControl('', [
            Validators.required,
            CustomFormValidators.noSpecialCharacters,
        ]));
        form.setControl('name', new FormControl('', Validators.required));
        form.setControl('approvalProcess', new FormGroup({
            code: new FormControl(null),
        }));
        this.form = form;
        this.toggleParentUnit();
    }
    toggleParentUnit(item) {
        var _a;
        if (this.isRootUnit(item)) {
            (_a = this.form) === null || _a === void 0 ? void 0 : _a.removeControl('parentOrgUnit');
        }
        else if (!this.form.get('parentOrgUnit')) {
            this.form.setControl('parentOrgUnit', new FormGroup({
                uid: new FormControl(null, Validators.required),
            }));
        }
    }
    isRootUnit(item) {
        // as we don't have full response after toggle item status,
        // we have situation where we have object like {uid, active},
        // so decided to check name as alternative required property
        return ((item === null || item === void 0 ? void 0 : item.uid) &&
            (item === null || item === void 0 ? void 0 : item.name) &&
            (!(item === null || item === void 0 ? void 0 : item.parentOrgUnit) || (item === null || item === void 0 ? void 0 : item.uid) === (item === null || item === void 0 ? void 0 : item.parentOrgUnit)));
    }
}
UnitFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitFormService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
UnitFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitFormService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitFormService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC1mb3JtLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvdW5pdC9mb3JtL3VuaXQtZm9ybS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOztBQUs3RCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxXQUFvQjtJQUM3QyxTQUFTLENBQUMsSUFBYztRQUNoQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRVMsS0FBSztRQUNiLE1BQU0sSUFBSSxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxVQUFVLENBQ2IsS0FBSyxFQUNMLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRTtZQUNsQixVQUFVLENBQUMsUUFBUTtZQUNuQixvQkFBb0IsQ0FBQyxtQkFBbUI7U0FDekMsQ0FBQyxDQUNILENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFbEUsSUFBSSxDQUFDLFVBQVUsQ0FDYixpQkFBaUIsRUFDakIsSUFBSSxTQUFTLENBQUM7WUFDWixJQUFJLEVBQUUsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDO1NBQzVCLENBQUMsQ0FDSCxDQUFDO1FBRUYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVTLGdCQUFnQixDQUFDLElBQWM7O1FBQ3ZDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6QixNQUFBLElBQUksQ0FBQyxJQUFJLDBDQUFFLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUMzQzthQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FDbEIsZUFBZSxFQUNmLElBQUksU0FBUyxDQUFDO2dCQUNaLEdBQUcsRUFBRSxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQzthQUNoRCxDQUFDLENBQ0gsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVTLFVBQVUsQ0FBQyxJQUFhO1FBQ2hDLDJEQUEyRDtRQUMzRCw2REFBNkQ7UUFDN0QsNERBQTREO1FBQzVELE9BQU8sQ0FDTCxDQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxHQUFHO2FBQ1QsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLElBQUksQ0FBQTtZQUNWLENBQUMsQ0FBQyxDQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxhQUFhLENBQUEsSUFBSSxDQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxHQUFHLE9BQUssSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLGFBQWEsQ0FBQSxDQUFDLENBQzVELENBQUM7SUFDSixDQUFDOzs0R0FsRFUsZUFBZTtnSEFBZixlQUFlLGNBRmQsTUFBTTsyRkFFUCxlQUFlO2tCQUgzQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sLCBGb3JtR3JvdXAsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBCMkJVbml0IH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IEN1c3RvbUZvcm1WYWxpZGF0b3JzIH0gZnJvbSAnQHNwYXJ0YWN1cy9zdG9yZWZyb250JztcbmltcG9ydCB7IEZvcm1TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2Zvcm0vZm9ybS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFVuaXRGb3JtU2VydmljZSBleHRlbmRzIEZvcm1TZXJ2aWNlPEIyQlVuaXQ+IHtcbiAgcHJvdGVjdGVkIHBhdGNoRGF0YShpdGVtPzogQjJCVW5pdCkge1xuICAgIHRoaXMudG9nZ2xlUGFyZW50VW5pdChpdGVtKTtcbiAgICBzdXBlci5wYXRjaERhdGEoaXRlbSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYnVpbGQoKSB7XG4gICAgY29uc3QgZm9ybSA9IG5ldyBGb3JtR3JvdXAoe30pO1xuICAgIGZvcm0uc2V0Q29udHJvbChcbiAgICAgICd1aWQnLFxuICAgICAgbmV3IEZvcm1Db250cm9sKCcnLCBbXG4gICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgIEN1c3RvbUZvcm1WYWxpZGF0b3JzLm5vU3BlY2lhbENoYXJhY3RlcnMsXG4gICAgICBdKVxuICAgICk7XG4gICAgZm9ybS5zZXRDb250cm9sKCduYW1lJywgbmV3IEZvcm1Db250cm9sKCcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSk7XG5cbiAgICBmb3JtLnNldENvbnRyb2woXG4gICAgICAnYXBwcm92YWxQcm9jZXNzJyxcbiAgICAgIG5ldyBGb3JtR3JvdXAoe1xuICAgICAgICBjb2RlOiBuZXcgRm9ybUNvbnRyb2wobnVsbCksXG4gICAgICB9KVxuICAgICk7XG5cbiAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICAgIHRoaXMudG9nZ2xlUGFyZW50VW5pdCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRvZ2dsZVBhcmVudFVuaXQoaXRlbT86IEIyQlVuaXQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1Jvb3RVbml0KGl0ZW0pKSB7XG4gICAgICB0aGlzLmZvcm0/LnJlbW92ZUNvbnRyb2woJ3BhcmVudE9yZ1VuaXQnKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmZvcm0uZ2V0KCdwYXJlbnRPcmdVbml0JykpIHtcbiAgICAgIHRoaXMuZm9ybS5zZXRDb250cm9sKFxuICAgICAgICAncGFyZW50T3JnVW5pdCcsXG4gICAgICAgIG5ldyBGb3JtR3JvdXAoe1xuICAgICAgICAgIHVpZDogbmV3IEZvcm1Db250cm9sKG51bGwsIFZhbGlkYXRvcnMucmVxdWlyZWQpLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgaXNSb290VW5pdChpdGVtOiBCMkJVbml0KTogYm9vbGVhbiB7XG4gICAgLy8gYXMgd2UgZG9uJ3QgaGF2ZSBmdWxsIHJlc3BvbnNlIGFmdGVyIHRvZ2dsZSBpdGVtIHN0YXR1cyxcbiAgICAvLyB3ZSBoYXZlIHNpdHVhdGlvbiB3aGVyZSB3ZSBoYXZlIG9iamVjdCBsaWtlIHt1aWQsIGFjdGl2ZX0sXG4gICAgLy8gc28gZGVjaWRlZCB0byBjaGVjayBuYW1lIGFzIGFsdGVybmF0aXZlIHJlcXVpcmVkIHByb3BlcnR5XG4gICAgcmV0dXJuIChcbiAgICAgIGl0ZW0/LnVpZCAmJlxuICAgICAgaXRlbT8ubmFtZSAmJlxuICAgICAgKCFpdGVtPy5wYXJlbnRPcmdVbml0IHx8IGl0ZW0/LnVpZCA9PT0gaXRlbT8ucGFyZW50T3JnVW5pdClcbiAgICApO1xuICB9XG59XG4iXX0=