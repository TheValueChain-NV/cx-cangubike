import { ChangeDetectionStrategy, Component, Input, } from '@angular/core';
import { filter, map, switchMap, tap } from 'rxjs/operators';
import { CurrentItemService } from '../../shared/current-item.service';
import { ItemService } from '../../shared/item.service';
import { CurrentUnitService } from '../services/current-unit.service';
import { UnitItemService } from '../services/unit-item.service';
import { createCodeForEntityName } from '../../shared/utility/entity-code';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/item.service";
import * as i2 from "@spartacus/organization/administration/core";
import * as i3 from "../../shared/form/form.component";
import * as i4 from "@spartacus/storefront";
import * as i5 from "@ng-select/ng-select";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
import * as i8 from "@spartacus/core";
export class UnitFormComponent {
    constructor(itemService, unitService) {
        this.itemService = itemService;
        this.unitService = unitService;
        this.i18nRoot = 'orgUnit';
        this.createChildUnit = false;
        this.form = this.itemService.getForm();
        this.units$ = this.itemService.unit$.pipe(tap((unit) => {
            var _a, _b;
            (_a = this.form.get('parentOrgUnit.uid')) === null || _a === void 0 ? void 0 : _a.setValue(unit);
            if (this.createChildUnit) {
                (_b = this.form.get('parentOrgUnit')) === null || _b === void 0 ? void 0 : _b.disable();
            }
        }), switchMap(() => this.unitService.getActiveUnitList().pipe(map((units) => units.filter((unit) => { var _a; return unit.id !== ((_a = this.form) === null || _a === void 0 ? void 0 : _a.value.uid); })), tap((units) => {
            var _a, _b, _c;
            if (units.length === 1) {
                (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('parentOrgUnit.uid')) === null || _b === void 0 ? void 0 : _b.setValue((_c = units[0]) === null || _c === void 0 ? void 0 : _c.id);
            }
        }))));
        this.approvalProcess$ = this.unitService
            .getApprovalProcesses()
            .pipe(filter((items) => (items === null || items === void 0 ? void 0 : items.length) > 0));
    }
    ngOnInit() {
        this.unitService.loadList();
    }
    createUidWithName(name, code) {
        createCodeForEntityName(name, code);
    }
}
UnitFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitFormComponent, deps: [{ token: i1.ItemService }, { token: i2.OrgUnitService }], target: i0.ɵɵFactoryTarget.Component });
UnitFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitFormComponent, selector: "cx-org-unit-form", inputs: { i18nRoot: "i18nRoot", createChildUnit: "createChildUnit" }, host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: UnitItemService,
        },
        {
            provide: CurrentItemService,
            useExisting: CurrentUnitService,
        },
    ], ngImport: i0, template: "<cx-org-form [i18nRoot]=\"i18nRoot\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUnit.name' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgUnit.name' | cxTranslate }}\"\n        formControlName=\"name\"\n        (blur)=\"createUidWithName(form.get('name'), form.get('uid'))\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUnit.uid' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgUnit.uid' | cxTranslate }}\"\n        formControlName=\"uid\"\n      />\n      <cx-form-errors [control]=\"form.get('uid')\"></cx-form-errors>\n    </label>\n\n    <label\n      formGroupName=\"approvalProcess\"\n      class=\"full-width\"\n      aria-required=\"true\"\n    >\n      <span class=\"label-content required\">{{\n        'orgUnit.approvalProcess' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"code\"\n        [searchable]=\"false\"\n        [items]=\"approvalProcess$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgUnit.approvalProcess' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors\n        [control]=\"form.get('approvalProcess.code')\"\n      ></cx-form-errors>\n    </label>\n\n    <label\n      *ngIf=\"form.get('parentOrgUnit')\"\n      aria-required=\"true\"\n      formGroupName=\"parentOrgUnit\"\n    >\n      <span class=\"label-content required\">{{\n        'orgUnit.form.parentOrgUnit' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"units$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgUnit.form.parentOrgUnit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors\n        [control]=\"form.get('parentOrgUnit.uid')\"\n      ></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n", components: [{ type: i3.FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { type: i4.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { type: i5.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i7.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }], pipes: { "cxTranslate": i8.TranslatePipe, "async": i6.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-unit-form',
                    templateUrl: './unit-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                    providers: [
                        {
                            provide: ItemService,
                            useExisting: UnitItemService,
                        },
                        {
                            provide: CurrentItemService,
                            useExisting: CurrentUnitService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.OrgUnitService }]; }, propDecorators: { i18nRoot: [{
                type: Input
            }], createChildUnit: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,