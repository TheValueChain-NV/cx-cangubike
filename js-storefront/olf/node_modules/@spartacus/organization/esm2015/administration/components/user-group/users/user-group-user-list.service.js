import { Injectable } from '@angular/core';
import { SubListService } from '../../shared/sub-list/sub-list.service';
import { OrganizationTableType } from '../../shared/organization.model';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/organization/administration/core";
export class UserGroupUserListService extends SubListService {
    constructor(tableService, userGroupService, userService) {
        super(tableService);
        this.tableService = tableService;
        this.userGroupService = userGroupService;
        this.userService = userService;
        this.tableType = OrganizationTableType.USER_GROUP_USERS;
        this._domainType = OrganizationTableType.USER;
    }
    /**
     *
     * @override
     * Loads all b2b users.
     *
     * @param code The user group code.
     */
    load(pagination, code) {
        return this.userGroupService.getAvailableOrgCustomers(code, pagination);
    }
    /**
     * @override
     * Assign user to the user group.
     */
    assign(userGroupCode, customerId) {
        this.userGroupService.assignMember(userGroupCode, customerId);
        return this.userService.getLoadingStatus(customerId);
    }
    /**
     * @override
     * Unassigns the user from the user group.
     */
    unassign(userGroupCode, customerId) {
        this.userGroupService.unassignMember(userGroupCode, customerId);
        return this.userService.getLoadingStatus(customerId);
    }
    unassignAllMembers(userGroupCode) {
        this.userGroupService.unassignAllMembers(userGroupCode);
        return this.userGroupService.getLoadingStatus(userGroupCode);
    }
}
UserGroupUserListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupUserListService, deps: [{ token: i1.TableService }, { token: i2.UserGroupService }, { token: i2.B2BUserService }], target: i0.ɵɵFactoryTarget.Injectable });
UserGroupUserListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupUserListService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupUserListService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.TableService }, { type: i2.UserGroupService }, { type: i2.B2BUserService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1ncm91cC11c2VyLWxpc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy91c2VyLWdyb3VwL3VzZXJzL3VzZXItZ3JvdXAtdXNlci1saXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVUzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDeEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7Ozs7QUFLeEUsTUFBTSxPQUFPLHdCQUF5QixTQUFRLGNBQXVCO0lBSW5FLFlBQ1ksWUFBMEIsRUFDMUIsZ0JBQWtDLEVBQ2xDLFdBQTJCO1FBRXJDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUpWLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsZ0JBQVcsR0FBWCxXQUFXLENBQWdCO1FBTjdCLGNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNuRCxnQkFBVyxHQUFHLHFCQUFxQixDQUFDLElBQUksQ0FBQztJQVFuRCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ08sSUFBSSxDQUNaLFVBQTJCLEVBQzNCLElBQVk7UUFFWixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FDSixhQUFxQixFQUNyQixVQUFrQjtRQUVsQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM5RCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVEsQ0FDTixhQUFxQixFQUNyQixVQUFrQjtRQUVsQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNoRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELGtCQUFrQixDQUNoQixhQUFxQjtRQUVyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEQsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7cUhBdkRVLHdCQUF3Qjt5SEFBeEIsd0JBQXdCLGNBRnZCLE1BQU07MkZBRVAsd0JBQXdCO2tCQUhwQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVudGl0aWVzTW9kZWwsIFBhZ2luYXRpb25Nb2RlbCwgQjJCVXNlciB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQge1xuICBVc2VyR3JvdXAsXG4gIFVzZXJHcm91cFNlcnZpY2UsXG4gIEIyQlVzZXJTZXJ2aWNlLFxuICBPcmdhbml6YXRpb25JdGVtU3RhdHVzLFxufSBmcm9tICdAc3BhcnRhY3VzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlJztcbmltcG9ydCB7IFRhYmxlU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvc3RvcmVmcm9udCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBTdWJMaXN0U2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9zdWItbGlzdC9zdWItbGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvblRhYmxlVHlwZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9vcmdhbml6YXRpb24ubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVXNlckdyb3VwVXNlckxpc3RTZXJ2aWNlIGV4dGVuZHMgU3ViTGlzdFNlcnZpY2U8QjJCVXNlcj4ge1xuICBwcm90ZWN0ZWQgdGFibGVUeXBlID0gT3JnYW5pemF0aW9uVGFibGVUeXBlLlVTRVJfR1JPVVBfVVNFUlM7XG4gIHByb3RlY3RlZCBfZG9tYWluVHlwZSA9IE9yZ2FuaXphdGlvblRhYmxlVHlwZS5VU0VSO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCB0YWJsZVNlcnZpY2U6IFRhYmxlU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgdXNlckdyb3VwU2VydmljZTogVXNlckdyb3VwU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgdXNlclNlcnZpY2U6IEIyQlVzZXJTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKHRhYmxlU2VydmljZSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQG92ZXJyaWRlXG4gICAqIExvYWRzIGFsbCBiMmIgdXNlcnMuXG4gICAqXG4gICAqIEBwYXJhbSBjb2RlIFRoZSB1c2VyIGdyb3VwIGNvZGUuXG4gICAqL1xuICBwcm90ZWN0ZWQgbG9hZChcbiAgICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uTW9kZWwsXG4gICAgY29kZTogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8RW50aXRpZXNNb2RlbDxCMkJVc2VyPj4ge1xuICAgIHJldHVybiB0aGlzLnVzZXJHcm91cFNlcnZpY2UuZ2V0QXZhaWxhYmxlT3JnQ3VzdG9tZXJzKGNvZGUsIHBhZ2luYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBBc3NpZ24gdXNlciB0byB0aGUgdXNlciBncm91cC5cbiAgICovXG4gIGFzc2lnbihcbiAgICB1c2VyR3JvdXBDb2RlOiBzdHJpbmcsXG4gICAgY3VzdG9tZXJJZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8T3JnYW5pemF0aW9uSXRlbVN0YXR1czxCMkJVc2VyPj4ge1xuICAgIHRoaXMudXNlckdyb3VwU2VydmljZS5hc3NpZ25NZW1iZXIodXNlckdyb3VwQ29kZSwgY3VzdG9tZXJJZCk7XG4gICAgcmV0dXJuIHRoaXMudXNlclNlcnZpY2UuZ2V0TG9hZGluZ1N0YXR1cyhjdXN0b21lcklkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogVW5hc3NpZ25zIHRoZSB1c2VyIGZyb20gdGhlIHVzZXIgZ3JvdXAuXG4gICAqL1xuICB1bmFzc2lnbihcbiAgICB1c2VyR3JvdXBDb2RlOiBzdHJpbmcsXG4gICAgY3VzdG9tZXJJZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8T3JnYW5pemF0aW9uSXRlbVN0YXR1czxCMkJVc2VyPj4ge1xuICAgIHRoaXMudXNlckdyb3VwU2VydmljZS51bmFzc2lnbk1lbWJlcih1c2VyR3JvdXBDb2RlLCBjdXN0b21lcklkKTtcbiAgICByZXR1cm4gdGhpcy51c2VyU2VydmljZS5nZXRMb2FkaW5nU3RhdHVzKGN1c3RvbWVySWQpO1xuICB9XG5cbiAgdW5hc3NpZ25BbGxNZW1iZXJzKFxuICAgIHVzZXJHcm91cENvZGU6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPE9yZ2FuaXphdGlvbkl0ZW1TdGF0dXM8VXNlckdyb3VwPj4ge1xuICAgIHRoaXMudXNlckdyb3VwU2VydmljZS51bmFzc2lnbkFsbE1lbWJlcnModXNlckdyb3VwQ29kZSk7XG4gICAgcmV0dXJuIHRoaXMudXNlckdyb3VwU2VydmljZS5nZXRMb2FkaW5nU3RhdHVzKHVzZXJHcm91cENvZGUpO1xuICB9XG59XG4iXX0=