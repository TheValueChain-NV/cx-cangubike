import { __rest } from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@angular/common";
import * as i3 from "@angular/router";
import * as i4 from "@spartacus/core";
export class CellComponent {
    constructor(outlet) {
        this.outlet = outlet;
    }
    get tabIndex() {
        return -1;
    }
    get model() {
        return this.outlet.context;
    }
    get property() {
        var _a, _b, _c;
        return (_a = this.model) === null || _a === void 0 ? void 0 : _a[(_c = (_b = this.outlet) === null || _b === void 0 ? void 0 : _b.context) === null || _c === void 0 ? void 0 : _c._field];
    }
    /**
     * Indicates wether the cell is linkable.
     *
     * If the cells is linkable, an anchor link is created to the detailed route
     * of the given `_type`.
     *
     * Defaults to `true`.
     */
    get linkable() {
        var _a;
        return this.property !== undefined && ((_a = this.cellOptions.linkable) !== null && _a !== void 0 ? _a : true);
    }
    /**
     * Helper method to access the cell options.
     */
    get cellOptions() {
        var _a, _b, _c, _d, _e;
        return ((_e = (_c = (_b = (_a = this.outlet.context) === null || _a === void 0 ? void 0 : _a._options) === null || _b === void 0 ? void 0 : _b.cells) === null || _c === void 0 ? void 0 : _c[(_d = this.outlet.context) === null || _d === void 0 ? void 0 : _d._field]) !== null && _e !== void 0 ? _e : {});
    }
    /**
     * Generates the configurable route to the detail page of the given context item.
     */
    get route() {
        return this.outlet.context._type + 'Details';
    }
    get routeModel() {
        return this.outlet.context;
    }
    get type() {
        return this.model._type;
    }
    /**
     * Indicates whether the item is loaded.
     */
    get hasItem() {
        return !!this.item && Object.keys(this.item).length > 0;
    }
    get item() {
        if (!this.outlet.context) {
            return null;
        }
        const _a = this.outlet.context, { _field, _options, _type, _i18nRoot } = _a, all = __rest(_a, ["_field", "_options", "_type", "_i18nRoot"]);
        return all;
    }
}
CellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CellComponent, deps: [{ token: i1.OutletContextData }], target: i0.ɵɵFactoryTarget.Component });
CellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CellComponent, selector: "cx-org-cell", ngImport: i0, template: "<a\n  *ngIf=\"linkable; else text\"\n  [routerLink]=\"{ cxRoute: route, params: routeModel } | cxUrl\"\n  [tabIndex]=\"tabIndex\"\n>\n  <ng-container *ngTemplateOutlet=\"text\"></ng-container>\n</a>\n\n<ng-template #text>\n  <span class=\"text\" title=\"{{ property }}\">{{ property }}</span>\n</ng-template>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "cxUrl": i4.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CellComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-cell',
                    templateUrl: './cell.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.OutletContextData }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvc2hhcmVkL3RhYmxlL2NlbGwuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb21wb25lbnRzL3NoYXJlZC90YWJsZS9jZWxsLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFZbkUsTUFBTSxPQUFPLGFBQWE7SUFDeEIsWUFBc0IsTUFBaUQ7UUFBakQsV0FBTSxHQUFOLE1BQU0sQ0FBMkM7SUFBRyxDQUFDO0lBRTNFLElBQUksUUFBUTtRQUNWLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDWixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxRQUFROztRQUNWLE9BQU8sTUFBQSxJQUFJLENBQUMsS0FBSywwQ0FBRyxNQUFBLE1BQUEsSUFBSSxDQUFDLE1BQU0sMENBQUUsT0FBTywwQ0FBRSxNQUFNLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILElBQUksUUFBUTs7UUFDVixPQUFPLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxJQUFJLENBQUMsTUFBQSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsbUNBQUksSUFBSSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxXQUFXOztRQUNiLE9BQU8sQ0FDTCxNQUFBLE1BQUEsTUFBQSxNQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTywwQ0FBRSxRQUFRLDBDQUFFLEtBQUssMENBQUcsTUFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sMENBQUUsTUFBTSxDQUFDLG1DQUFJLEVBQUUsQ0FDMUUsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLE9BQU87UUFDVCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELElBQWMsSUFBSTtRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE1BQU0sS0FBaUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQXBFLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsU0FBUyxPQUFnQyxFQUEzQixHQUFHLGNBQTVDLDRDQUE4QyxDQUFzQixDQUFDO1FBQzNFLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQzs7MEdBaEVVLGFBQWE7OEZBQWIsYUFBYSxtRENaMUIsd1RBV0E7MkZEQ2EsYUFBYTtrQkFMekIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsV0FBVyxFQUFFLHVCQUF1QjtvQkFDcEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgT3V0bGV0Q29udGV4dERhdGEsXG4gIFRhYmxlRGF0YU91dGxldENvbnRleHQsXG4gIFRhYmxlRmllbGRPcHRpb25zLFxufSBmcm9tICdAc3BhcnRhY3VzL3N0b3JlZnJvbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1vcmctY2VsbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9jZWxsLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIENlbGxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgb3V0bGV0OiBPdXRsZXRDb250ZXh0RGF0YTxUYWJsZURhdGFPdXRsZXRDb250ZXh0Pikge31cblxuICBnZXQgdGFiSW5kZXgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBnZXQgbW9kZWwoKTogVGFibGVEYXRhT3V0bGV0Q29udGV4dCB7XG4gICAgcmV0dXJuIHRoaXMub3V0bGV0LmNvbnRleHQ7XG4gIH1cblxuICBnZXQgcHJvcGVydHkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbD8uW3RoaXMub3V0bGV0Py5jb250ZXh0Py5fZmllbGRdO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3ZXRoZXIgdGhlIGNlbGwgaXMgbGlua2FibGUuXG4gICAqXG4gICAqIElmIHRoZSBjZWxscyBpcyBsaW5rYWJsZSwgYW4gYW5jaG9yIGxpbmsgaXMgY3JlYXRlZCB0byB0aGUgZGV0YWlsZWQgcm91dGVcbiAgICogb2YgdGhlIGdpdmVuIGBfdHlwZWAuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvIGB0cnVlYC5cbiAgICovXG4gIGdldCBsaW5rYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wZXJ0eSAhPT0gdW5kZWZpbmVkICYmICh0aGlzLmNlbGxPcHRpb25zLmxpbmthYmxlID8/IHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdG8gYWNjZXNzIHRoZSBjZWxsIG9wdGlvbnMuXG4gICAqL1xuICBnZXQgY2VsbE9wdGlvbnMoKTogVGFibGVGaWVsZE9wdGlvbnMge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLm91dGxldC5jb250ZXh0Py5fb3B0aW9ucz8uY2VsbHM/Llt0aGlzLm91dGxldC5jb250ZXh0Py5fZmllbGRdID8/IHt9XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgdGhlIGNvbmZpZ3VyYWJsZSByb3V0ZSB0byB0aGUgZGV0YWlsIHBhZ2Ugb2YgdGhlIGdpdmVuIGNvbnRleHQgaXRlbS5cbiAgICovXG4gIGdldCByb3V0ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm91dGxldC5jb250ZXh0Ll90eXBlICsgJ0RldGFpbHMnO1xuICB9XG5cbiAgZ2V0IHJvdXRlTW9kZWwoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5vdXRsZXQuY29udGV4dDtcbiAgfVxuXG4gIGdldCB0eXBlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWwuX3R5cGU7XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGl0ZW0gaXMgbG9hZGVkLlxuICAgKi9cbiAgZ2V0IGhhc0l0ZW0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5pdGVtICYmIE9iamVjdC5rZXlzKHRoaXMuaXRlbSkubGVuZ3RoID4gMDtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgaXRlbSgpOiBhbnkge1xuICAgIGlmICghdGhpcy5vdXRsZXQuY29udGV4dCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHsgX2ZpZWxkLCBfb3B0aW9ucywgX3R5cGUsIF9pMThuUm9vdCwgLi4uYWxsIH0gPSB0aGlzLm91dGxldC5jb250ZXh0O1xuICAgIHJldHVybiBhbGw7XG4gIH1cbn1cbiIsIjxhXG4gICpuZ0lmPVwibGlua2FibGU7IGVsc2UgdGV4dFwiXG4gIFtyb3V0ZXJMaW5rXT1cInsgY3hSb3V0ZTogcm91dGUsIHBhcmFtczogcm91dGVNb2RlbCB9IHwgY3hVcmxcIlxuICBbdGFiSW5kZXhdPVwidGFiSW5kZXhcIlxuPlxuICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwidGV4dFwiPjwvbmctY29udGFpbmVyPlxuPC9hPlxuXG48bmctdGVtcGxhdGUgI3RleHQ+XG4gIDxzcGFuIGNsYXNzPVwidGV4dFwiIHRpdGxlPVwie3sgcHJvcGVydHkgfX1cIj57eyBwcm9wZXJ0eSB9fTwvc3Bhbj5cbjwvbmctdGVtcGxhdGU+XG4iXX0=