import { Injectable } from '@angular/core';
import { filter, map } from 'rxjs/operators';
import { ListService } from '../../shared/list/list.service';
import { OrganizationTableType } from '../../shared/organization.model';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/organization/administration/core";
/**
 * Service to populate permission data to `Table` data. The permission
 * data is driven by the table configuration, using the `OrganizationTables.PERMISSION`.
 */
export class PermissionListService extends ListService {
    constructor(tableService, permissionsService) {
        super(tableService);
        this.tableService = tableService;
        this.permissionsService = permissionsService;
        this.tableType = OrganizationTableType.PERMISSION;
    }
    load(pagination) {
        return this.permissionsService.getList(pagination).pipe(filter((list) => Boolean(list)), map((raw) => this.convertPermissions(raw)));
    }
    /**
     * Populates the permission data to a convenient table data model, so that we
     * can skip specific conversion in the view logic where possible.
     */
    convertPermissions({ pagination, sorts, values, }) {
        const permissionGroupModels = {
            pagination,
            sorts,
            values: values.map((value) => (Object.assign(Object.assign({}, value), { unit: value.orgUnit }))),
        };
        return permissionGroupModels;
    }
}
PermissionListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionListService, deps: [{ token: i1.TableService }, { token: i2.PermissionService }], target: i0.ɵɵFactoryTarget.Injectable });
PermissionListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionListService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionListService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.TableService }, { type: i2.PermissionService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbi1saXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvbXBvbmVudHMvcGVybWlzc2lvbi9zZXJ2aWNlcy9wZXJtaXNzaW9uLWxpc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUTNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzdELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7O0FBZXhFOzs7R0FHRztBQUlILE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxXQUE0QjtJQUdyRSxZQUNZLFlBQTBCLEVBQzFCLGtCQUFxQztRQUUvQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFIVixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBSnZDLGNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxVQUFVLENBQUM7SUFPdkQsQ0FBQztJQUVTLElBQUksQ0FDWixVQUEyQjtRQUUzQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUNyRCxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUMvQixHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNPLGtCQUFrQixDQUFDLEVBQzNCLFVBQVUsRUFDVixLQUFLLEVBQ0wsTUFBTSxHQUNtQjtRQUN6QixNQUFNLHFCQUFxQixHQUFtQztZQUM1RCxVQUFVO1lBQ1YsS0FBSztZQUNMLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxpQ0FDOUIsS0FBSyxLQUNSLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxJQUNuQixDQUFDO1NBQ0osQ0FBQztRQUNGLE9BQU8scUJBQXFCLENBQUM7SUFDL0IsQ0FBQzs7a0hBckNVLHFCQUFxQjtzSEFBckIscUJBQXFCLGNBRnBCLE1BQU07MkZBRVAscUJBQXFCO2tCQUhqQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVudGl0aWVzTW9kZWwsIFBhZ2luYXRpb25Nb2RlbCB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQge1xuICBQZXJtaXNzaW9uU2VydmljZSxcbiAgVXNlckdyb3VwLFxufSBmcm9tICdAc3BhcnRhY3VzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlJztcbmltcG9ydCB7IFRhYmxlU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvc3RvcmVmcm9udCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IExpc3RTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2xpc3QvbGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvblRhYmxlVHlwZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9vcmdhbml6YXRpb24ubW9kZWwnO1xuXG4vKipcbiAqIFRoZSBVSSBtb2RlbCBmb3IgdGhlIHBlcm1pc3Npb24sIHdoaWNoIGlzIGEgc2xpZ2h0bHkgZmxhdHRlbmVkIHZlcnNpb25cbiAqIG9mIHRoZSBwZXJtaXNzaW9uIG1vZGVsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBlcm1pc3Npb25Nb2RlbCB7XG4gIGNvZGU/OiBzdHJpbmc7XG4gIG9yZGVyQXBwcm92YWxQZXJtaXNzaW9uVHlwZT86IHsgbmFtZTogc3RyaW5nIH07XG4gIHRocmVzaG9sZD86IGFueTtcbiAgcGVyaW9kUmFuZ2U/OiBhbnk7XG4gIG9yZ1VuaXQ/OiBhbnk7XG4gIGN1cnJlbmN5PzogeyBzeW1ib2w6IHN0cmluZyB9O1xufVxuXG4vKipcbiAqIFNlcnZpY2UgdG8gcG9wdWxhdGUgcGVybWlzc2lvbiBkYXRhIHRvIGBUYWJsZWAgZGF0YS4gVGhlIHBlcm1pc3Npb25cbiAqIGRhdGEgaXMgZHJpdmVuIGJ5IHRoZSB0YWJsZSBjb25maWd1cmF0aW9uLCB1c2luZyB0aGUgYE9yZ2FuaXphdGlvblRhYmxlcy5QRVJNSVNTSU9OYC5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25MaXN0U2VydmljZSBleHRlbmRzIExpc3RTZXJ2aWNlPFBlcm1pc3Npb25Nb2RlbD4ge1xuICBwcm90ZWN0ZWQgdGFibGVUeXBlID0gT3JnYW5pemF0aW9uVGFibGVUeXBlLlBFUk1JU1NJT047XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHRhYmxlU2VydmljZTogVGFibGVTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBwZXJtaXNzaW9uc1NlcnZpY2U6IFBlcm1pc3Npb25TZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKHRhYmxlU2VydmljZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgbG9hZChcbiAgICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uTW9kZWxcbiAgKTogT2JzZXJ2YWJsZTxFbnRpdGllc01vZGVsPFBlcm1pc3Npb25Nb2RlbD4+IHtcbiAgICByZXR1cm4gdGhpcy5wZXJtaXNzaW9uc1NlcnZpY2UuZ2V0TGlzdChwYWdpbmF0aW9uKS5waXBlKFxuICAgICAgZmlsdGVyKChsaXN0KSA9PiBCb29sZWFuKGxpc3QpKSxcbiAgICAgIG1hcCgocmF3KSA9PiB0aGlzLmNvbnZlcnRQZXJtaXNzaW9ucyhyYXcpKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUG9wdWxhdGVzIHRoZSBwZXJtaXNzaW9uIGRhdGEgdG8gYSBjb252ZW5pZW50IHRhYmxlIGRhdGEgbW9kZWwsIHNvIHRoYXQgd2VcbiAgICogY2FuIHNraXAgc3BlY2lmaWMgY29udmVyc2lvbiBpbiB0aGUgdmlldyBsb2dpYyB3aGVyZSBwb3NzaWJsZS5cbiAgICovXG4gIHByb3RlY3RlZCBjb252ZXJ0UGVybWlzc2lvbnMoe1xuICAgIHBhZ2luYXRpb24sXG4gICAgc29ydHMsXG4gICAgdmFsdWVzLFxuICB9OiBFbnRpdGllc01vZGVsPFVzZXJHcm91cD4pOiBFbnRpdGllc01vZGVsPFBlcm1pc3Npb25Nb2RlbD4ge1xuICAgIGNvbnN0IHBlcm1pc3Npb25Hcm91cE1vZGVsczogRW50aXRpZXNNb2RlbDxQZXJtaXNzaW9uTW9kZWw+ID0ge1xuICAgICAgcGFnaW5hdGlvbixcbiAgICAgIHNvcnRzLFxuICAgICAgdmFsdWVzOiB2YWx1ZXMubWFwKCh2YWx1ZTogYW55KSA9PiAoe1xuICAgICAgICAuLi52YWx1ZSxcbiAgICAgICAgdW5pdDogdmFsdWUub3JnVW5pdCxcbiAgICAgIH0pKSxcbiAgICB9O1xuICAgIHJldHVybiBwZXJtaXNzaW9uR3JvdXBNb2RlbHM7XG4gIH1cbn1cbiJdfQ==