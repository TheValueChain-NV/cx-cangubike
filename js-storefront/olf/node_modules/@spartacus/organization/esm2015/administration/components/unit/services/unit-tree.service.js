import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { TREE_TOGGLE } from './unit-tree.model';
import * as i0 from "@angular/core";
/**
 * Service to populate Unit data to `Table` data. Unit
 * data is driven by the table configuration, using the `OrganizationTables.UNIT`.
 */
export class UnitTreeService {
    constructor() {
        /**
         * Indicates the minimum number of (initial) expanded units.
         */
        this.minimalExpanded = 1;
        this.globalToggle$ = new BehaviorSubject(undefined);
        this.treeToggle$ = new BehaviorSubject(new Map());
    }
    /**
     * Initializes the unit tree with an active unit.
     *
     * The active unit will be collapsed.
     */
    initialize(root, activeUnitId) {
        if (activeUnitId) {
            this.expandUntilActiveNode(root, activeUnitId);
        }
    }
    /**
     * Sets the global toggle state to _collapsed_ and clears the toggle state
     * for individual units.
     */
    collapseAll() {
        this.globalToggle$.next(TREE_TOGGLE.COLLAPSED);
        this.treeToggle$.next(new Map());
    }
    /**
     * Sets the global toggle state to _expanded_ and clears the toggle state
     * for individual units.
     */
    expandAll() {
        this.globalToggle$.next(TREE_TOGGLE.EXPANDED);
        this.treeToggle$.next(new Map());
    }
    /**
     * Indicates whether the give unit is expanded.
     *
     * The returned (boolean) expand state is driven by the global toggle
     * state (expand / collapse all) and the toggle state for individual units.
     * There's also the `minimalExpanded` taken into consideration.
     */
    isExpanded(unitId, level) {
        var _a;
        const toggleState = (_a = this.treeToggle$.value) === null || _a === void 0 ? void 0 : _a.get(unitId);
        if (this.globalToggle$.value === TREE_TOGGLE.COLLAPSED &&
            toggleState !== TREE_TOGGLE.EXPANDED) {
            return false;
        }
        return (
        // the current node is expanded
        toggleState === TREE_TOGGLE.EXPANDED ||
            // the node is not collapsed, but globally expanded ("expand all") or above
            // the minimum visible nodes
            ((this.globalToggle$.value === TREE_TOGGLE.EXPANDED ||
                level < this.minimalExpanded) &&
                toggleState !== TREE_TOGGLE.COLLAPSED));
    }
    toggle(unit) {
        const currentState = this.treeToggle$.value;
        currentState.set(unit.id, this.isExpanded(unit.id, unit.depthLevel)
            ? TREE_TOGGLE.COLLAPSED
            : TREE_TOGGLE.EXPANDED);
        this.treeToggle$.next(currentState);
    }
    /**
     * Expands all tree nodes till the active unit, to ensure that the
     * full tree is collapsed till the active item.
     *
     * This is useful while navigating the tree by the router.
     */
    expandUntilActiveNode(node, activeUnitId) {
        const hasActiveChild = (n, id) => {
            var _a;
            return !!((_a = n.children) === null || _a === void 0 ? void 0 : _a.find((child) => child.id === id || hasActiveChild(child, id)));
        };
        const findInvolvedTreeNodes = (n, activeItems = []) => {
            if (hasActiveChild(n, activeUnitId)) {
                activeItems.push(n.id);
            }
            n.children.forEach((child) => {
                findInvolvedTreeNodes(child, activeItems);
            });
            return activeItems;
        };
        const m = this.treeToggle$.value;
        findInvolvedTreeNodes(node).forEach((activeId) => {
            if (m.get(activeId) !== TREE_TOGGLE.EXPANDED) {
                m.set(activeId, TREE_TOGGLE.EXPANDED);
            }
        });
        if (m !== this.treeToggle$.value) {
            this.treeToggle$.next(m);
        }
    }
}
UnitTreeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitTreeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
UnitTreeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitTreeService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitTreeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,