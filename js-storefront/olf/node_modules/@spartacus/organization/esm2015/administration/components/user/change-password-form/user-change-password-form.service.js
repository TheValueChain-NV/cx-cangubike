import { Injectable } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { CustomFormValidators } from '@spartacus/storefront';
import { FormService } from '../../shared/form/form.service';
import * as i0 from "@angular/core";
export class UserChangePasswordFormService extends FormService {
    /**
     * @override
     * Adds the password and confirmPassword field. Also adds the customerId field,
     * so that the customerId can be used during persistent.
     */
    build() {
        const form = new FormGroup({});
        form.setControl('customerId', new FormControl(''));
        form.setControl('password', new FormControl('', [
            Validators.required,
            CustomFormValidators.passwordValidator,
        ]));
        form.setControl('confirmPassword', new FormControl('', [
            Validators.required,
            CustomFormValidators.passwordValidator,
        ]));
        form.setValidators(CustomFormValidators.passwordsMustMatch('password', 'confirmPassword'));
        this.form = form;
    }
    getForm(item) {
        // we need do cleanup, to avoid have filled form after next open of that
        this.form = null;
        return super.getForm(item);
    }
}
UserChangePasswordFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserChangePasswordFormService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
UserChangePasswordFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserChangePasswordFormService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserChangePasswordFormService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1jaGFuZ2UtcGFzc3dvcmQtZm9ybS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb21wb25lbnRzL3VzZXIvY2hhbmdlLXBhc3N3b3JkLWZvcm0vdXNlci1jaGFuZ2UtcGFzc3dvcmQtZm9ybS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOztBQUs3RCxNQUFNLE9BQU8sNkJBQThCLFNBQVEsV0FBZ0I7SUFDakU7Ozs7T0FJRztJQUNPLEtBQUs7UUFDYixNQUFNLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxVQUFVLENBQ2IsVUFBVSxFQUNWLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRTtZQUNsQixVQUFVLENBQUMsUUFBUTtZQUNuQixvQkFBb0IsQ0FBQyxpQkFBaUI7U0FDdkMsQ0FBQyxDQUNILENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxDQUNiLGlCQUFpQixFQUNqQixJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUU7WUFDbEIsVUFBVSxDQUFDLFFBQVE7WUFDbkIsb0JBQW9CLENBQUMsaUJBQWlCO1NBQ3ZDLENBQUMsQ0FDSCxDQUFDO1FBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FDaEIsb0JBQW9CLENBQUMsa0JBQWtCLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQ3ZFLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsT0FBTyxDQUFDLElBQVc7UUFDakIsd0VBQXdFO1FBQ3hFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDOzswSEFqQ1UsNkJBQTZCOzhIQUE3Qiw2QkFBNkIsY0FGNUIsTUFBTTsyRkFFUCw2QkFBNkI7a0JBSHpDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgQ3VzdG9tRm9ybVZhbGlkYXRvcnMgfSBmcm9tICdAc3BhcnRhY3VzL3N0b3JlZnJvbnQnO1xuaW1wb3J0IHsgRm9ybVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvZm9ybS9mb3JtLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVXNlckNoYW5nZVBhc3N3b3JkRm9ybVNlcnZpY2UgZXh0ZW5kcyBGb3JtU2VydmljZTxhbnk+IHtcbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBBZGRzIHRoZSBwYXNzd29yZCBhbmQgY29uZmlybVBhc3N3b3JkIGZpZWxkLiBBbHNvIGFkZHMgdGhlIGN1c3RvbWVySWQgZmllbGQsXG4gICAqIHNvIHRoYXQgdGhlIGN1c3RvbWVySWQgY2FuIGJlIHVzZWQgZHVyaW5nIHBlcnNpc3RlbnQuXG4gICAqL1xuICBwcm90ZWN0ZWQgYnVpbGQoKSB7XG4gICAgY29uc3QgZm9ybSA9IG5ldyBGb3JtR3JvdXAoe30pO1xuICAgIGZvcm0uc2V0Q29udHJvbCgnY3VzdG9tZXJJZCcsIG5ldyBGb3JtQ29udHJvbCgnJykpO1xuICAgIGZvcm0uc2V0Q29udHJvbChcbiAgICAgICdwYXNzd29yZCcsXG4gICAgICBuZXcgRm9ybUNvbnRyb2woJycsIFtcbiAgICAgICAgVmFsaWRhdG9ycy5yZXF1aXJlZCxcbiAgICAgICAgQ3VzdG9tRm9ybVZhbGlkYXRvcnMucGFzc3dvcmRWYWxpZGF0b3IsXG4gICAgICBdKVxuICAgICk7XG4gICAgZm9ybS5zZXRDb250cm9sKFxuICAgICAgJ2NvbmZpcm1QYXNzd29yZCcsXG4gICAgICBuZXcgRm9ybUNvbnRyb2woJycsIFtcbiAgICAgICAgVmFsaWRhdG9ycy5yZXF1aXJlZCxcbiAgICAgICAgQ3VzdG9tRm9ybVZhbGlkYXRvcnMucGFzc3dvcmRWYWxpZGF0b3IsXG4gICAgICBdKVxuICAgICk7XG4gICAgZm9ybS5zZXRWYWxpZGF0b3JzKFxuICAgICAgQ3VzdG9tRm9ybVZhbGlkYXRvcnMucGFzc3dvcmRzTXVzdE1hdGNoKCdwYXNzd29yZCcsICdjb25maXJtUGFzc3dvcmQnKVxuICAgICk7XG4gICAgdGhpcy5mb3JtID0gZm9ybTtcbiAgfVxuXG4gIGdldEZvcm0oaXRlbT86IFVzZXIpOiBGb3JtR3JvdXAge1xuICAgIC8vIHdlIG5lZWQgZG8gY2xlYW51cCwgdG8gYXZvaWQgaGF2ZSBmaWxsZWQgZm9ybSBhZnRlciBuZXh0IG9wZW4gb2YgdGhhdFxuICAgIHRoaXMuZm9ybSA9IG51bGw7XG4gICAgcmV0dXJuIHN1cGVyLmdldEZvcm0oaXRlbSk7XG4gIH1cbn1cbiJdfQ==