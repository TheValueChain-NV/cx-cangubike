import { ChangeDetectionStrategy, Component } from '@angular/core';
import { startWith, switchMap } from 'rxjs/operators';
import { ItemService } from '../../shared/item.service';
import { BudgetItemService } from '../services/budget-item.service';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/item.service";
import * as i2 from "../../shared/card/card.component";
import * as i3 from "../../shared/detail/toggle-status-action/toggle-status.component";
import * as i4 from "../../shared/detail/disable-info/disable-info.component";
import * as i5 from "@angular/common";
import * as i6 from "@spartacus/storefront";
import * as i7 from "@angular/router";
import * as i8 from "../../shared/item-exists.directive";
import * as i9 from "@spartacus/core";
export class BudgetDetailsComponent {
    constructor(itemService) {
        this.itemService = itemService;
        this.isInEditMode$ = this.itemService.isInEditMode$;
    }
    ngOnInit() {
        this.model$ = this.itemService.key$.pipe(switchMap((code) => this.itemService.load(code)), startWith({}));
    }
}
BudgetDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetDetailsComponent, deps: [{ token: i1.ItemService }], target: i0.ɵɵFactoryTarget.Component });
BudgetDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: BudgetDetailsComponent, selector: "cx-org-budget-details", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: BudgetItemService,
        },
    ], ngImport: i0, template: "<cx-org-card\n  *ngIf=\"model$ | async as model\"\n  i18nRoot=\"orgBudget.details\"\n  [cxFocus]=\"{ refreshFocus: model }\"\n>\n  <a\n    actions\n    class=\"link edit\"\n    [class.disabled]=\"!model.active || (isInEditMode$ | async)\"\n    [routerLink]=\"{ cxRoute: 'orgBudgetEdit', params: model } | cxUrl\"\n  >\n    {{ 'organization.edit' | cxTranslate }}\n  </a>\n\n  <cx-org-toggle-status actions i18nRoot=\"orgBudget\"></cx-org-toggle-status>\n\n  <cx-org-disable-info info i18nRoot=\"orgBudget\"> </cx-org-disable-info>\n\n  <section main class=\"details\" cxOrgItemExists>\n    <div class=\"property\">\n      <label>{{ 'orgBudget.name' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.name }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.code' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.code }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.startDate' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.startDate | cxDate }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.endDate' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.endDate | cxDate }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.active' | cxTranslate }}</label>\n      <span class=\"value\" [class.is-active]=\"model.active\">\n        {{\n          (model.active ? 'organization.enabled' : 'organization.disabled')\n            | cxTranslate\n        }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.amount' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.budget }} {{ model.currency?.isocode }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.unit' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.orgUnit\n          } | cxUrl\n        \"\n      >\n        {{ model.orgUnit?.name }}\n      </a>\n    </div>\n  </section>\n\n  <section main class=\"link-list\">\n    <a\n      *ngIf=\"model.code\"\n      class=\"link\"\n      [routerLink]=\"{ cxRoute: 'orgBudgetCostCenters', params: model } | cxUrl\"\n      routerLinkActive=\"is-current\"\n    >\n      {{ 'orgBudget.links.costCenters' | cxTranslate }}\n    </a>\n  </section>\n</cx-org-card>\n", components: [{ type: i2.CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: i3.ToggleStatusComponent, selector: "cx-org-toggle-status", inputs: ["i18nRoot", "key", "disabled"] }, { type: i4.DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i7.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i8.ItemExistsDirective, selector: "[cxOrgItemExists]" }, { type: i7.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }], pipes: { "async": i5.AsyncPipe, "cxUrl": i9.UrlPipe, "cxTranslate": i9.TranslatePipe, "cxDate": i9.CxDatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-budget-details',
                    templateUrl: './budget-details.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: ItemService,
                            useExisting: BudgetItemService,
                        },
                    ],
                    host: { class: 'content-wrapper' },
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVkZ2V0LWRldGFpbHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb21wb25lbnRzL2J1ZGdldC9kZXRhaWxzL2J1ZGdldC1kZXRhaWxzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29tcG9uZW50cy9idWRnZXQvZGV0YWlscy9idWRnZXQtZGV0YWlscy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBRzNFLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7Ozs7Ozs7OztBQWNwRSxNQUFNLE9BQU8sc0JBQXNCO0lBV2pDLFlBQXNCLFdBQWdDO1FBQWhDLGdCQUFXLEdBQVgsV0FBVyxDQUFxQjtRQVR0RCxrQkFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0lBU1UsQ0FBQztJQVAxRCxRQUFRO1FBQ04sSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3RDLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDaEQsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUNkLENBQUM7SUFDSixDQUFDOzttSEFUVSxzQkFBc0I7dUdBQXRCLHNCQUFzQiw2RkFSdEI7UUFDVDtZQUNFLE9BQU8sRUFBRSxXQUFXO1lBQ3BCLFdBQVcsRUFBRSxpQkFBaUI7U0FDL0I7S0FDRiwwQkNoQkgsbTlFQTJGQTsyRkR4RWEsc0JBQXNCO2tCQVpsQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFdBQVcsRUFBRSxpQ0FBaUM7b0JBQzlDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLFdBQVc7NEJBQ3BCLFdBQVcsRUFBRSxpQkFBaUI7eUJBQy9CO3FCQUNGO29CQUNELElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtpQkFDbkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJ1ZGdldCB9IGZyb20gJ0BzcGFydGFjdXMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3RhcnRXaXRoLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJdGVtU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9pdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgQnVkZ2V0SXRlbVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9idWRnZXQtaXRlbS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtb3JnLWJ1ZGdldC1kZXRhaWxzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2J1ZGdldC1kZXRhaWxzLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEl0ZW1TZXJ2aWNlLFxuICAgICAgdXNlRXhpc3Rpbmc6IEJ1ZGdldEl0ZW1TZXJ2aWNlLFxuICAgIH0sXG4gIF0sXG4gIGhvc3Q6IHsgY2xhc3M6ICdjb250ZW50LXdyYXBwZXInIH0sXG59KVxuZXhwb3J0IGNsYXNzIEJ1ZGdldERldGFpbHNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBtb2RlbCQ6IE9ic2VydmFibGU8QnVkZ2V0PjtcbiAgaXNJbkVkaXRNb2RlJCA9IHRoaXMuaXRlbVNlcnZpY2UuaXNJbkVkaXRNb2RlJDtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm1vZGVsJCA9IHRoaXMuaXRlbVNlcnZpY2Uua2V5JC5waXBlKFxuICAgICAgc3dpdGNoTWFwKChjb2RlKSA9PiB0aGlzLml0ZW1TZXJ2aWNlLmxvYWQoY29kZSkpLFxuICAgICAgc3RhcnRXaXRoKHt9KVxuICAgICk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaXRlbVNlcnZpY2U6IEl0ZW1TZXJ2aWNlPEJ1ZGdldD4pIHt9XG59XG4iLCI8Y3gtb3JnLWNhcmRcbiAgKm5nSWY9XCJtb2RlbCQgfCBhc3luYyBhcyBtb2RlbFwiXG4gIGkxOG5Sb290PVwib3JnQnVkZ2V0LmRldGFpbHNcIlxuICBbY3hGb2N1c109XCJ7IHJlZnJlc2hGb2N1czogbW9kZWwgfVwiXG4+XG4gIDxhXG4gICAgYWN0aW9uc1xuICAgIGNsYXNzPVwibGluayBlZGl0XCJcbiAgICBbY2xhc3MuZGlzYWJsZWRdPVwiIW1vZGVsLmFjdGl2ZSB8fCAoaXNJbkVkaXRNb2RlJCB8IGFzeW5jKVwiXG4gICAgW3JvdXRlckxpbmtdPVwieyBjeFJvdXRlOiAnb3JnQnVkZ2V0RWRpdCcsIHBhcmFtczogbW9kZWwgfSB8IGN4VXJsXCJcbiAgPlxuICAgIHt7ICdvcmdhbml6YXRpb24uZWRpdCcgfCBjeFRyYW5zbGF0ZSB9fVxuICA8L2E+XG5cbiAgPGN4LW9yZy10b2dnbGUtc3RhdHVzIGFjdGlvbnMgaTE4blJvb3Q9XCJvcmdCdWRnZXRcIj48L2N4LW9yZy10b2dnbGUtc3RhdHVzPlxuXG4gIDxjeC1vcmctZGlzYWJsZS1pbmZvIGluZm8gaTE4blJvb3Q9XCJvcmdCdWRnZXRcIj4gPC9jeC1vcmctZGlzYWJsZS1pbmZvPlxuXG4gIDxzZWN0aW9uIG1haW4gY2xhc3M9XCJkZXRhaWxzXCIgY3hPcmdJdGVtRXhpc3RzPlxuICAgIDxkaXYgY2xhc3M9XCJwcm9wZXJ0eVwiPlxuICAgICAgPGxhYmVsPnt7ICdvcmdCdWRnZXQubmFtZScgfCBjeFRyYW5zbGF0ZSB9fTwvbGFiZWw+XG4gICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+XG4gICAgICAgIHt7IG1vZGVsLm5hbWUgfX1cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJwcm9wZXJ0eVwiPlxuICAgICAgPGxhYmVsPnt7ICdvcmdCdWRnZXQuY29kZScgfCBjeFRyYW5zbGF0ZSB9fTwvbGFiZWw+XG4gICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+XG4gICAgICAgIHt7IG1vZGVsLmNvZGUgfX1cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJwcm9wZXJ0eVwiPlxuICAgICAgPGxhYmVsPnt7ICdvcmdCdWRnZXQuc3RhcnREYXRlJyB8IGN4VHJhbnNsYXRlIH19PC9sYWJlbD5cbiAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj5cbiAgICAgICAge3sgbW9kZWwuc3RhcnREYXRlIHwgY3hEYXRlIH19XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwicHJvcGVydHlcIj5cbiAgICAgIDxsYWJlbD57eyAnb3JnQnVkZ2V0LmVuZERhdGUnIHwgY3hUcmFuc2xhdGUgfX08L2xhYmVsPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPlxuICAgICAgICB7eyBtb2RlbC5lbmREYXRlIHwgY3hEYXRlIH19XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwicHJvcGVydHlcIj5cbiAgICAgIDxsYWJlbD57eyAnb3JnQnVkZ2V0LmFjdGl2ZScgfCBjeFRyYW5zbGF0ZSB9fTwvbGFiZWw+XG4gICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCIgW2NsYXNzLmlzLWFjdGl2ZV09XCJtb2RlbC5hY3RpdmVcIj5cbiAgICAgICAge3tcbiAgICAgICAgICAobW9kZWwuYWN0aXZlID8gJ29yZ2FuaXphdGlvbi5lbmFibGVkJyA6ICdvcmdhbml6YXRpb24uZGlzYWJsZWQnKVxuICAgICAgICAgICAgfCBjeFRyYW5zbGF0ZVxuICAgICAgICB9fVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cInByb3BlcnR5XCI+XG4gICAgICA8bGFiZWw+e3sgJ29yZ0J1ZGdldC5hbW91bnQnIHwgY3hUcmFuc2xhdGUgfX08L2xhYmVsPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPlxuICAgICAgICB7eyBtb2RlbC5idWRnZXQgfX0ge3sgbW9kZWwuY3VycmVuY3k/Lmlzb2NvZGUgfX1cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJwcm9wZXJ0eVwiPlxuICAgICAgPGxhYmVsPnt7ICdvcmdCdWRnZXQudW5pdCcgfCBjeFRyYW5zbGF0ZSB9fTwvbGFiZWw+XG4gICAgICA8YVxuICAgICAgICBjbGFzcz1cInZhbHVlXCJcbiAgICAgICAgW3JvdXRlckxpbmtdPVwiXG4gICAgICAgICAge1xuICAgICAgICAgICAgY3hSb3V0ZTogJ29yZ1VuaXREZXRhaWxzJyxcbiAgICAgICAgICAgIHBhcmFtczogbW9kZWwub3JnVW5pdFxuICAgICAgICAgIH0gfCBjeFVybFxuICAgICAgICBcIlxuICAgICAgPlxuICAgICAgICB7eyBtb2RlbC5vcmdVbml0Py5uYW1lIH19XG4gICAgICA8L2E+XG4gICAgPC9kaXY+XG4gIDwvc2VjdGlvbj5cblxuICA8c2VjdGlvbiBtYWluIGNsYXNzPVwibGluay1saXN0XCI+XG4gICAgPGFcbiAgICAgICpuZ0lmPVwibW9kZWwuY29kZVwiXG4gICAgICBjbGFzcz1cImxpbmtcIlxuICAgICAgW3JvdXRlckxpbmtdPVwieyBjeFJvdXRlOiAnb3JnQnVkZ2V0Q29zdENlbnRlcnMnLCBwYXJhbXM6IG1vZGVsIH0gfCBjeFVybFwiXG4gICAgICByb3V0ZXJMaW5rQWN0aXZlPVwiaXMtY3VycmVudFwiXG4gICAgPlxuICAgICAge3sgJ29yZ0J1ZGdldC5saW5rcy5jb3N0Q2VudGVycycgfCBjeFRyYW5zbGF0ZSB9fVxuICAgIDwvYT5cbiAgPC9zZWN0aW9uPlxuPC9jeC1vcmctY2FyZD5cbiJdfQ==