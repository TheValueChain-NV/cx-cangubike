import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ItemService } from '../../../../shared/item.service';
import { UnitAddressItemService } from '../services/unit-address-item.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../../shared/item.service";
import * as i2 from "./unit-address-form.service";
import * as i3 from "../../../services/current-unit.service";
import * as i4 from "../../../../shared/form/form.component";
import * as i5 from "@ng-select/ng-select";
import * as i6 from "@spartacus/storefront";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
import * as i9 from "@spartacus/core";
export class UnitAddressFormComponent {
    constructor(itemService, formService, currentUnitService) {
        this.itemService = itemService;
        this.formService = formService;
        this.currentUnitService = currentUnitService;
        this.form = this.itemService.getForm();
        this.key$ = this.itemService.key$;
        this.countries$ = this.formService.getCountries();
        this.titles$ = this.formService.getTitles();
        this.regions$ = this.formService.getRegions();
        this.unit$ = this.currentUnitService.item$;
    }
    ngOnInit() { }
}
UnitAddressFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitAddressFormComponent, deps: [{ token: i1.ItemService }, { token: i2.UnitAddressFormService }, { token: i3.CurrentUnitService }], target: i0.ɵɵFactoryTarget.Component });
UnitAddressFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitAddressFormComponent, selector: "cx-org-unit-address-form", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: UnitAddressItemService,
        },
    ], ngImport: i0, template: "<cx-org-form\n  i18nRoot=\"orgUnitAddress\"\n  [animateBack]=\"!(key$ | async)\"\n  [subtitle]=\"\n    'orgUnitAddress.details.subtitle' | cxTranslate: { item: (unit$ | async) }\n  \"\n>\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label aria-required=\"true\" formGroupName=\"country\">\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.country' | cxTranslate\n      }}</span>\n      <ng-select\n        class=\"country-select\"\n        formControlName=\"isocode\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"countries$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"isocode\"\n        placeholder=\"{{ 'orgUnitAddress.selectOne' | cxTranslate }}\"\n        appendTo=\"cx-org-list\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('country.isocode')\"></cx-form-errors>\n    </label>\n\n    <label aria-required=\"true\">\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.titles' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"titleCode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"titles$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        placeholder=\"{{ 'orgUnitAddress.selectOne' | cxTranslate }}\"\n        appendTo=\"cx-org-list\"\n      >\n      </ng-select>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.firstName' | cxTranslate\n      }}</span>\n      <input\n        aria-required=\"true\"\n        class=\"form-control\"\n        type=\"text\"\n        placeholder=\"{{ 'orgUnitAddress.firstName' | cxTranslate }}\"\n        formControlName=\"firstName\"\n      />\n      <cx-form-errors [control]=\"form.get('firstName')\"></cx-form-errors>\n    </label>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.lastName' | cxTranslate\n      }}</span>\n      <input\n        aria-required=\"true\"\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgUnitAddress.lastName' | cxTranslate }}\"\n        formControlName=\"lastName\"\n      />\n      <cx-form-errors [control]=\"form.get('lastName')\"></cx-form-errors>\n    </label>\n\n    <label class=\"full-width\">\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.address1' | cxTranslate\n      }}</span>\n      <input\n        aria-required=\"true\"\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgUnitAddress.streetAddress' | cxTranslate }}\"\n        formControlName=\"line1\"\n      />\n      <cx-form-errors [control]=\"form.get('line1')\"></cx-form-errors>\n    </label>\n\n    <label class=\"full-width\">\n      <span class=\"label-content\">{{\n        'orgUnitAddress.address2' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgUnitAddress.aptSuite' | cxTranslate }}\"\n        formControlName=\"line2\"\n      />\n    </label>\n\n    <label class=\"full-width\">\n      <span class=\"label-content\">{{\n        'orgUnitAddress.phoneNumber' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgUnitAddress.phoneNumber' | cxTranslate }}\"\n        formControlName=\"phone\"\n      />\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.city' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgUnitAddress.city' | cxTranslate }}\"\n        formControlName=\"town\"\n      />\n      <cx-form-errors [control]=\"form.get('town')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.zipCode' | cxTranslate\n      }}</span>\n      <input\n        aria-required=\"true\"\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgUnitAddress.zipCode' | cxTranslate }}\"\n        formControlName=\"postalCode\"\n      />\n      <cx-form-errors [control]=\"form.get('postalCode')\"></cx-form-errors>\n    </label>\n\n    <label></label>\n\n    <ng-container *ngIf=\"regions$ | async as regions\">\n      <label\n        class=\"full-width\"\n        aria-required=\"true\"\n        formGroupName=\"region\"\n        *ngIf=\"regions.length > 0\"\n      >\n        <span class=\"label-content required\">{{\n          'orgUnitAddress.state' | cxTranslate\n        }}</span>\n        <ng-select\n          class=\"region-select\"\n          formControlName=\"isocode\"\n          [searchable]=\"true\"\n          [clearable]=\"false\"\n          [items]=\"regions\"\n          bindLabel=\"name\"\n          bindValue=\"isocode\"\n          placeholder=\"{{ 'orgUnitAddress.selectOne' | cxTranslate }}\"\n          appendTo=\"cx-org-list\"\n        >\n        </ng-select>\n        <cx-form-errors [control]=\"form.get('region.isocode')\"></cx-form-errors>\n      </label>\n    </ng-container>\n  </ng-container>\n</cx-org-form>\n", components: [{ type: i4.FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { type: i5.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { type: i6.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }], pipes: { "async": i7.AsyncPipe, "cxTranslate": i9.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UnitAddressFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-org-unit-address-form',
                    templateUrl: './unit-address-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'content-wrapper' },
                    providers: [
                        {
                            provide: ItemService,
                            useExisting: UnitAddressItemService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.UnitAddressFormService }, { type: i3.CurrentUnitService }]; } });
//# sourceMappingURL=data:application/json;base64,