import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Effect, ofType } from '@ngrx/effects';
import { AuthActions, B2BUserRole, normalizeHttpError, StateUtils, } from '@spartacus/core';
import { from, of } from 'rxjs';
import { catchError, groupBy, map, mergeMap, switchMap, take, tap, withLatestFrom, } from 'rxjs/operators';
import { B2BUserActions, OrganizationActions, OrgUnitActions, PermissionActions, UserGroupActions, } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/b2b-user/b2b-user.connector";
import * as i3 from "@spartacus/core";
export class B2BUserEffects {
    constructor(actions$, b2bUserConnector, routingService, userService, userIdService) {
        this.actions$ = actions$;
        this.b2bUserConnector = b2bUserConnector;
        this.routingService = routingService;
        this.userService = userService;
        this.userIdService = userIdService;
        this.loadB2BUser$ = this.actions$.pipe(ofType(B2BUserActions.LOAD_B2B_USER), map((action) => action.payload), switchMap(({ userId, orgCustomerId }) => {
            return this.b2bUserConnector.get(userId, orgCustomerId).pipe(map((b2bUser) => {
                return new B2BUserActions.LoadB2BUserSuccess([b2bUser]);
            }), catchError((error) => of(new B2BUserActions.LoadB2BUserFail({
                orgCustomerId,
                error: normalizeHttpError(error),
            }))));
        }));
        this.createB2BUser$ = this.actions$.pipe(ofType(B2BUserActions.CREATE_B2B_USER), map((action) => action.payload), switchMap(({ userId, orgCustomer }) => this.b2bUserConnector.create(userId, orgCustomer).pipe(switchMap((data) => {
            const isAssignedToApprovers = orgCustomer.isAssignedToApprovers;
            // TODO Workaround for not known customerId while user creation (redireciton)
            return this.routingService.getRouterState().pipe(take(1), tap((route) => this.redirectToDetails(route, data)), switchMap(() => {
                const successActions = [
                    new B2BUserActions.CreateB2BUserSuccess(data),
                    new B2BUserActions.CreateB2BUserSuccess({ customerId: null }),
                    new OrganizationActions.OrganizationClearData(),
                ];
                if (isAssignedToApprovers) {
                    successActions.splice(1, 0, new OrgUnitActions.AssignApprover({
                        userId,
                        orgUnitId: orgCustomer.orgUnit.uid,
                        orgCustomerId: data.customerId,
                        roleId: B2BUserRole.APPROVER,
                    }));
                }
                return successActions;
            }));
        }), catchError((error) => from([
            new B2BUserActions.CreateB2BUserFail({
                orgCustomerId: orgCustomer.customerId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.updateB2BUser$ = this.actions$.pipe(ofType(B2BUserActions.UPDATE_B2B_USER), map((action) => action.payload), switchMap(({ userId, orgCustomerId, orgCustomer }) => {
            const isAssignedToApprovers = orgCustomer.isAssignedToApprovers;
            return this.b2bUserConnector
                .update(userId, orgCustomerId, orgCustomer)
                .pipe(switchMap((_data) => {
                const successActions = [
                    // TODO: change for 'payload: data' when backend API start to return user data on PATCH
                    new B2BUserActions.UpdateB2BUserSuccess(orgCustomer),
                ];
                if (isAssignedToApprovers) {
                    successActions.push(new OrgUnitActions.AssignApprover({
                        userId,
                        orgUnitId: orgCustomer.orgUnit.uid,
                        orgCustomerId,
                        roleId: B2BUserRole.APPROVER,
                    }));
                }
                return successActions;
            }), catchError((error) => from([
                new B2BUserActions.UpdateB2BUserFail({
                    orgCustomerId: orgCustomer.customerId,
                    error: normalizeHttpError(error),
                }),
                new OrganizationActions.OrganizationClearData(),
            ])));
        }));
        this.checkSelfEmailUpdate$ = this.actions$.pipe(ofType(B2BUserActions.UPDATE_B2B_USER_SUCCESS), map((action) => action.payload), withLatestFrom(this.userService.get(), this.userIdService.getUserId()), switchMap(([payload, currentUser]) => {
            const currentUserEmailMatch = payload.customerId === currentUser.customerId &&
                payload.email !== currentUser.displayUid;
            if (currentUserEmailMatch) {
                this.routingService.go({ cxRoute: 'login' });
            }
            return currentUserEmailMatch
                ? [new AuthActions.Logout()]
                : [new OrganizationActions.OrganizationClearData()];
        }));
        this.loadB2BUsers$ = this.actions$.pipe(ofType(B2BUserActions.LOAD_B2B_USERS), map((action) => action.payload), switchMap((payload) => this.b2bUserConnector.getList(payload.userId, payload.params).pipe(switchMap((b2bUsers) => {
            const { values, page } = StateUtils.normalizeListPage(b2bUsers, 'customerId');
            return [
                new B2BUserActions.LoadB2BUserSuccess(values),
                new B2BUserActions.LoadB2BUsersSuccess({
                    page,
                    params: payload.params,
                }),
            ];
        }), catchError((error) => of(new B2BUserActions.LoadB2BUsersFail({
            params: payload.params,
            error: normalizeHttpError(error),
        }))))));
        this.loadB2BUserApprovers$ = this.actions$.pipe(ofType(B2BUserActions.LOAD_B2B_USER_APPROVERS), map((action) => action.payload), groupBy(({ orgCustomerId, params }) => StateUtils.serializeParams(orgCustomerId, params)), mergeMap((group) => group.pipe(switchMap((payload) => this.b2bUserConnector
            .getApprovers(payload.userId, payload.orgCustomerId, payload.params)
            .pipe(switchMap((approvers) => {
            const { values, page } = StateUtils.normalizeListPage(approvers, 'customerId');
            return [
                new B2BUserActions.LoadB2BUserSuccess(values),
                new B2BUserActions.LoadB2BUserApproversSuccess({
                    orgCustomerId: payload.orgCustomerId,
                    page,
                    params: payload.params,
                }),
            ];
        }), catchError((error) => of(new B2BUserActions.LoadB2BUserApproversFail({
            orgCustomerId: payload.orgCustomerId,
            params: payload.params,
            error: normalizeHttpError(error),
        }))))))));
        this.loadB2BUserPermissions$ = this.actions$.pipe(ofType(B2BUserActions.LOAD_B2B_USER_PERMISSIONS), map((action) => action.payload), groupBy(({ orgCustomerId, params }) => StateUtils.serializeParams(orgCustomerId, params)), mergeMap((group) => group.pipe(switchMap((payload) => this.b2bUserConnector
            .getPermissions(payload.userId, payload.orgCustomerId, payload.params)
            .pipe(switchMap((permissions) => {
            const { values, page } = StateUtils.normalizeListPage(permissions, 'code');
            return [
                new PermissionActions.LoadPermissionSuccess(values),
                new B2BUserActions.LoadB2BUserPermissionsSuccess({
                    orgCustomerId: payload.orgCustomerId,
                    page,
                    params: payload.params,
                }),
            ];
        }), catchError((error) => of(new B2BUserActions.LoadB2BUserPermissionsFail({
            orgCustomerId: payload.orgCustomerId,
            params: payload.params,
            error: normalizeHttpError(error),
        }))))))));
        this.loadB2BUserUserGroups$ = this.actions$.pipe(ofType(B2BUserActions.LOAD_B2B_USER_USER_GROUPS), map((action) => action.payload), groupBy(({ orgCustomerId, params }) => StateUtils.serializeParams(orgCustomerId, params)), mergeMap((group) => group.pipe(switchMap((payload) => this.b2bUserConnector
            .getUserGroups(payload.userId, payload.orgCustomerId, payload.params)
            .pipe(switchMap((userGroups) => {
            const { values, page } = StateUtils.normalizeListPage(userGroups, 'uid');
            return [
                new UserGroupActions.LoadUserGroupSuccess(values),
                new B2BUserActions.LoadB2BUserUserGroupsSuccess({
                    orgCustomerId: payload.orgCustomerId,
                    page,
                    params: payload.params,
                }),
            ];
        }), catchError((error) => of(new B2BUserActions.LoadB2BUserUserGroupsFail({
            orgCustomerId: payload.orgCustomerId,
            params: payload.params,
            error: normalizeHttpError(error),
        }))))))));
        this.assignApproverToB2BUser$ = this.actions$.pipe(ofType(B2BUserActions.ASSIGN_B2B_USER_APPROVER), map((action) => action.payload), mergeMap((payload) => this.b2bUserConnector
            .assignApprover(payload.userId, payload.orgCustomerId, payload.approverId)
            .pipe(switchMap((data) => [
            new B2BUserActions.AssignB2BUserApproverSuccess({
                // Occ returned email, but we use customerId in store
                approverId: payload.approverId,
                selected: data.selected,
            }),
            // Clearing data in this case causes unexpected behavior (#10468)
            // new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new B2BUserActions.AssignB2BUserApproverFail({
                orgCustomerId: payload.orgCustomerId,
                approverId: payload.approverId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.unassignApproverFromB2BUser$ = this.actions$.pipe(ofType(B2BUserActions.UNASSIGN_B2B_USER_APPROVER), map((action) => action.payload), mergeMap((payload) => this.b2bUserConnector
            .unassignApprover(payload.userId, payload.orgCustomerId, payload.approverId)
            .pipe(switchMap((data) => [
            new B2BUserActions.UnassignB2BUserApproverSuccess({
                // Occ returned email, but we use customerId in store
                approverId: payload.approverId,
                selected: data.selected,
            }),
            // Clearing data in this case causes unexpected behavior (#10468)
            // new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new B2BUserActions.UnassignB2BUserApproverFail({
                orgCustomerId: payload.orgCustomerId,
                approverId: payload.approverId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.assignPermissionToB2BUser$ = this.actions$.pipe(ofType(B2BUserActions.ASSIGN_B2B_USER_PERMISSION), map((action) => action.payload), mergeMap((payload) => this.b2bUserConnector
            .assignPermission(payload.userId, payload.orgCustomerId, payload.permissionId)
            .pipe(switchMap((data) => [
            new B2BUserActions.AssignB2BUserPermissionSuccess({
                permissionId: data.id,
                selected: data.selected,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new B2BUserActions.AssignB2BUserPermissionFail({
                orgCustomerId: payload.orgCustomerId,
                permissionId: payload.permissionId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.unassignPermissionFromB2BUser$ = this.actions$.pipe(ofType(B2BUserActions.UNASSIGN_B2B_USER_PERMISSION), map((action) => action.payload), mergeMap((payload) => this.b2bUserConnector
            .unassignPermission(payload.userId, payload.orgCustomerId, payload.permissionId)
            .pipe(switchMap((data) => [
            new B2BUserActions.UnassignB2BUserPermissionSuccess({
                permissionId: data.id,
                selected: data.selected,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new B2BUserActions.UnassignB2BUserPermissionFail({
                orgCustomerId: payload.orgCustomerId,
                permissionId: payload.permissionId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.assignUserGroupToB2BUser$ = this.actions$.pipe(ofType(B2BUserActions.ASSIGN_B2B_USER_USER_GROUP), map((action) => action.payload), mergeMap((payload) => this.b2bUserConnector
            .assignUserGroup(payload.userId, payload.orgCustomerId, payload.userGroupId)
            .pipe(switchMap((data) => [
            new B2BUserActions.AssignB2BUserUserGroupSuccess({
                uid: data.id,
                selected: data.selected,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new B2BUserActions.AssignB2BUserUserGroupFail({
                orgCustomerId: payload.orgCustomerId,
                userGroupId: payload.userGroupId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.unassignUserGroupFromB2BUser$ = this.actions$.pipe(ofType(B2BUserActions.UNASSIGN_B2B_USER_USER_GROUP), map((action) => action.payload), mergeMap((payload) => this.b2bUserConnector
            .unassignUserGroup(payload.userId, payload.orgCustomerId, payload.userGroupId)
            .pipe(switchMap(
        // TODO: Workaround because occ doesn't respond here
        // (data) =>
        //   new B2BUserActions.DeleteB2BUserUserGroupSuccess({
        //     uid: data.id,
        //     selected: data.selected,
        //   })
        () => [
            new B2BUserActions.UnassignB2BUserUserGroupSuccess({
                uid: payload.userGroupId,
                selected: false,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new B2BUserActions.UnassignB2BUserUserGroupFail({
                orgCustomerId: payload.orgCustomerId,
                userGroupId: payload.userGroupId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
    }
    redirectToDetails(route, data) {
        var _a, _b, _c;
        if (((_c = (_b = (_a = route) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.context) === null || _c === void 0 ? void 0 : _c.id) !== '/organization/units') {
            this.routingService.go({
                cxRoute: 'orgUserDetails',
                params: data,
            });
        }
    }
}
B2BUserEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: B2BUserEffects, deps: [{ token: i1.Actions }, { token: i2.B2BUserConnector }, { token: i3.RoutingService }, { token: i3.UserService }, { token: i3.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
B2BUserEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: B2BUserEffects });
__decorate([
    Effect()
], B2BUserEffects.prototype, "loadB2BUser$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "createB2BUser$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "updateB2BUser$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "checkSelfEmailUpdate$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "loadB2BUsers$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "loadB2BUserApprovers$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "loadB2BUserPermissions$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "loadB2BUserUserGroups$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "assignApproverToB2BUser$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "unassignApproverFromB2BUser$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "assignPermissionToB2BUser$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "unassignPermissionFromB2BUser$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "assignUserGroupToB2BUser$", void 0);
__decorate([
    Effect()
], B2BUserEffects.prototype, "unassignUserGroupFromB2BUser$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: B2BUserEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.B2BUserConnector }, { type: i3.RoutingService }, { type: i3.UserService }, { type: i3.UserIdService }]; }, propDecorators: { loadB2BUser$: [], createB2BUser$: [], updateB2BUser$: [], checkSelfEmailUpdate$: [], loadB2BUsers$: [], loadB2BUserApprovers$: [], loadB2BUserPermissions$: [], loadB2BUserUserGroups$: [], assignApproverToB2BUser$: [], unassignApproverFromB2BUser$: [], assignPermissionToB2BUser$: [], unassignPermissionFromB2BUser$: [], assignUserGroupToB2BUser$: [], unassignUserGroupFromB2BUser$: [] } });
//# sourceMappingURL=data:application/json;base64,