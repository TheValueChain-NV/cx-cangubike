import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Effect, ofType } from '@ngrx/effects';
import { normalizeHttpError, StateUtils, } from '@spartacus/core';
import { from, of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { OrganizationActions, PermissionActions } from '../actions';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/permission/permission.connector";
export class PermissionEffects {
    constructor(actions$, permissionConnector) {
        this.actions$ = actions$;
        this.permissionConnector = permissionConnector;
        this.loadPermission$ = this.actions$.pipe(ofType(PermissionActions.LOAD_PERMISSION), map((action) => action.payload), switchMap(({ userId, permissionCode }) => {
            return this.permissionConnector.get(userId, permissionCode).pipe(map((permission) => {
                return new PermissionActions.LoadPermissionSuccess([permission]);
            }), catchError((error) => of(new PermissionActions.LoadPermissionFail({
                permissionCode,
                error: normalizeHttpError(error),
            }))));
        }));
        this.loadPermissions$ = this.actions$.pipe(ofType(PermissionActions.LOAD_PERMISSIONS), map((action) => action.payload), switchMap((payload) => this.permissionConnector.getList(payload.userId, payload.params).pipe(switchMap((permissions) => {
            const { values, page } = StateUtils.normalizeListPage(permissions, 'code');
            return [
                new PermissionActions.LoadPermissionSuccess(values),
                new PermissionActions.LoadPermissionsSuccess({
                    page,
                    params: payload.params,
                }),
            ];
        }), catchError((error) => of(new PermissionActions.LoadPermissionsFail({
            params: payload.params,
            error: normalizeHttpError(error),
        }))))));
        this.createPermission$ = this.actions$.pipe(ofType(PermissionActions.CREATE_PERMISSION), map((action) => action.payload), switchMap((payload) => this.permissionConnector.create(payload.userId, payload.permission).pipe(switchMap((data) => [
            new PermissionActions.CreatePermissionSuccess(data),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new PermissionActions.CreatePermissionFail({
                permissionCode: payload.permission.code,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.updatePermission$ = this.actions$.pipe(ofType(PermissionActions.UPDATE_PERMISSION), map((action) => action.payload), switchMap((payload) => this.permissionConnector
            .update(payload.userId, payload.permissionCode, payload.permission)
            .pipe(switchMap((data) => [
            new PermissionActions.UpdatePermissionSuccess(data),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new PermissionActions.UpdatePermissionFail({
                permissionCode: payload.permission.code,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.loadPermissionTypes$ = this.actions$.pipe(ofType(PermissionActions.LOAD_PERMISSION_TYPES), switchMap(() => this.permissionConnector.getTypes().pipe(map((permissionTypeList) => new PermissionActions.LoadPermissionTypesSuccess(permissionTypeList)), catchError((error) => of(new PermissionActions.LoadPermissionTypesFail({
            error: normalizeHttpError(error),
        }))))));
    }
}
PermissionEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionEffects, deps: [{ token: i1.Actions }, { token: i2.PermissionConnector }], target: i0.ɵɵFactoryTarget.Injectable });
PermissionEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionEffects });
__decorate([
    Effect()
], PermissionEffects.prototype, "loadPermission$", void 0);
__decorate([
    Effect()
], PermissionEffects.prototype, "loadPermissions$", void 0);
__decorate([
    Effect()
], PermissionEffects.prototype, "createPermission$", void 0);
__decorate([
    Effect()
], PermissionEffects.prototype, "updatePermission$", void 0);
__decorate([
    Effect()
], PermissionEffects.prototype, "loadPermissionTypes$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.PermissionConnector }]; }, propDecorators: { loadPermission$: [], loadPermissions$: [], createPermission$: [], updatePermission$: [], loadPermissionTypes$: [] } });
//# sourceMappingURL=data:application/json;base64,