import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./cost-center.adapter";
export class CostCenterConnector {
    constructor(adapter) {
        this.adapter = adapter;
    }
    get(userId, costCenterCode) {
        return this.adapter.load(userId, costCenterCode);
    }
    getList(userId, params) {
        return this.adapter.loadList(userId, params);
    }
    create(userId, costCenter) {
        return this.adapter.create(userId, costCenter);
    }
    update(userId, costCenterCode, costCenter) {
        return this.adapter.update(userId, costCenterCode, costCenter);
    }
    getBudgets(userId, costCenterCode, params) {
        return this.adapter.loadBudgets(userId, costCenterCode, params);
    }
    assignBudget(userId, costCenterCode, budgetCode) {
        return this.adapter.assignBudget(userId, costCenterCode, budgetCode);
    }
    unassignBudget(userId, costCenterCode, budgetCode) {
        return this.adapter.unassignBudget(userId, costCenterCode, budgetCode);
    }
}
CostCenterConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CostCenterConnector, deps: [{ token: i1.CostCenterAdapter }], target: i0.ɵɵFactoryTarget.Injectable });
CostCenterConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CostCenterConnector, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CostCenterConnector, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.CostCenterAdapter }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29zdC1jZW50ZXIuY29ubmVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlL2Nvbm5lY3RvcnMvY29zdC1jZW50ZXIvY29zdC1jZW50ZXIuY29ubmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQVMzQyxNQUFNLE9BQU8sbUJBQW1CO0lBQzlCLFlBQXNCLE9BQTBCO1FBQTFCLFlBQU8sR0FBUCxPQUFPLENBQW1CO0lBQUcsQ0FBQztJQUVwRCxHQUFHLENBQUMsTUFBYyxFQUFFLGNBQXNCO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxPQUFPLENBQ0wsTUFBYyxFQUNkLE1BQXFCO1FBRXJCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBYyxFQUFFLFVBQXNCO1FBQzNDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxNQUFNLENBQ0osTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLFVBQXNCO1FBRXRCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsVUFBVSxDQUNSLE1BQWMsRUFDZCxjQUFzQixFQUN0QixNQUFxQjtRQUVyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELFlBQVksQ0FDVixNQUFjLEVBQ2QsY0FBc0IsRUFDdEIsVUFBa0I7UUFFbEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxjQUFjLENBQ1osTUFBYyxFQUNkLGNBQXNCLEVBQ3RCLFVBQWtCO1FBRWxCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN6RSxDQUFDOztnSEFoRFUsbUJBQW1CO29IQUFuQixtQkFBbUIsY0FGbEIsTUFBTTsyRkFFUCxtQkFBbUI7a0JBSC9CLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29zdENlbnRlciwgRW50aXRpZXNNb2RlbCwgU2VhcmNoQ29uZmlnIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJ1ZGdldCB9IGZyb20gJy4uLy4uL21vZGVsL2J1ZGdldC5tb2RlbCc7XG5pbXBvcnQgeyBDb3N0Q2VudGVyQWRhcHRlciB9IGZyb20gJy4vY29zdC1jZW50ZXIuYWRhcHRlcic7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBDb3N0Q2VudGVyQ29ubmVjdG9yIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGFkYXB0ZXI6IENvc3RDZW50ZXJBZGFwdGVyKSB7fVxuXG4gIGdldCh1c2VySWQ6IHN0cmluZywgY29zdENlbnRlckNvZGU6IHN0cmluZyk6IE9ic2VydmFibGU8Q29zdENlbnRlcj4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIubG9hZCh1c2VySWQsIGNvc3RDZW50ZXJDb2RlKTtcbiAgfVxuXG4gIGdldExpc3QoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgcGFyYW1zPzogU2VhcmNoQ29uZmlnXG4gICk6IE9ic2VydmFibGU8RW50aXRpZXNNb2RlbDxDb3N0Q2VudGVyPj4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIubG9hZExpc3QodXNlcklkLCBwYXJhbXMpO1xuICB9XG5cbiAgY3JlYXRlKHVzZXJJZDogc3RyaW5nLCBjb3N0Q2VudGVyOiBDb3N0Q2VudGVyKTogT2JzZXJ2YWJsZTxDb3N0Q2VudGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5jcmVhdGUodXNlcklkLCBjb3N0Q2VudGVyKTtcbiAgfVxuXG4gIHVwZGF0ZShcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBjb3N0Q2VudGVyQ29kZTogc3RyaW5nLFxuICAgIGNvc3RDZW50ZXI6IENvc3RDZW50ZXJcbiAgKTogT2JzZXJ2YWJsZTxDb3N0Q2VudGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci51cGRhdGUodXNlcklkLCBjb3N0Q2VudGVyQ29kZSwgY29zdENlbnRlcik7XG4gIH1cblxuICBnZXRCdWRnZXRzKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIGNvc3RDZW50ZXJDb2RlOiBzdHJpbmcsXG4gICAgcGFyYW1zPzogU2VhcmNoQ29uZmlnXG4gICk6IE9ic2VydmFibGU8RW50aXRpZXNNb2RlbDxCdWRnZXQ+PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkQnVkZ2V0cyh1c2VySWQsIGNvc3RDZW50ZXJDb2RlLCBwYXJhbXMpO1xuICB9XG5cbiAgYXNzaWduQnVkZ2V0KFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIGNvc3RDZW50ZXJDb2RlOiBzdHJpbmcsXG4gICAgYnVkZ2V0Q29kZTogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5hc3NpZ25CdWRnZXQodXNlcklkLCBjb3N0Q2VudGVyQ29kZSwgYnVkZ2V0Q29kZSk7XG4gIH1cblxuICB1bmFzc2lnbkJ1ZGdldChcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBjb3N0Q2VudGVyQ29kZTogc3RyaW5nLFxuICAgIGJ1ZGdldENvZGU6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIudW5hc3NpZ25CdWRnZXQodXNlcklkLCBjb3N0Q2VudGVyQ29kZSwgYnVkZ2V0Q29kZSk7XG4gIH1cbn1cbiJdfQ==