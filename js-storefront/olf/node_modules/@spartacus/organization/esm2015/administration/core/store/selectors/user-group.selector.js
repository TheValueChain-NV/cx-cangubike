import { createSelector } from '@ngrx/store';
import { StateUtils, } from '@spartacus/core';
import { USER_GROUP_FEATURE, } from '../organization-state';
import { getB2BUsersState } from './b2b-user.selector';
import { getOrganizationState } from './feature.selector';
import { getPermissionsState } from './permission.selector';
export const getUserGroupManagementState = createSelector(getOrganizationState, (state) => state[USER_GROUP_FEATURE]);
export const getUserGroupsState = createSelector(getUserGroupManagementState, (state) => state && state.entities);
export const getUserGroup = (userGroupId) => createSelector(getUserGroupsState, (state) => StateUtils.entityLoaderStateSelector(state, userGroupId));
export const getUserGroupValue = (userGroupId) => {
    return createSelector(getUserGroup(userGroupId), (userGroupState) => StateUtils.loaderValueSelector(userGroupState));
};
export const getUserGroupList = (params) => createSelector(getUserGroupManagementState, (state) => StateUtils.denormalizeSearch(state, params));
export const getAvailableOrgCustomers = (code, params) => createSelector(getUserGroupManagementState, getB2BUsersState, (state, customers) => StateUtils.denormalizeCustomB2BSearch(state.customers, customers, params, code));
export const getAvailableOrderApprovalPermissions = (code, params) => createSelector(getUserGroupManagementState, getPermissionsState, (state, permissions) => StateUtils.denormalizeCustomB2BSearch(state.permissions, permissions, params, code));
export const getUserGroupState = (code) => createSelector(getUserGroupsState, (state) => StateUtils.entityLoaderStateSelector(state, code));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1ncm91cC5zZWxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29yZS9zdG9yZS9zZWxlY3RvcnMvdXNlci1ncm91cC5zZWxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUMvRCxPQUFPLEVBSUwsVUFBVSxHQUNYLE1BQU0saUJBQWlCLENBQUM7QUFHekIsT0FBTyxFQUlMLGtCQUFrQixHQUNuQixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTVELE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUdwQyxjQUFjLENBQ2hCLG9CQUFvQixFQUNwQixDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUN4RCxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBRzNCLGNBQWMsQ0FDaEIsMkJBQTJCLEVBQzNCLENBQUMsS0FBMEIsRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQ3hELENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FDMUIsV0FBbUIsRUFDeUQsRUFBRSxDQUM5RSxjQUFjLENBQ1osa0JBQWtCLEVBQ2xCLENBQUMsS0FBOEMsRUFBRSxFQUFFLENBQ2pELFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQzNELENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUMvQixXQUFtQixFQUNpQyxFQUFFO0lBQ3RELE9BQU8sY0FBYyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQ2xFLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsQ0FDL0MsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQzlCLE1BQW9CLEVBSXBCLEVBQUUsQ0FDRixjQUFjLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxLQUEwQixFQUFFLEVBQUUsQ0FDekUsVUFBVSxDQUFDLGlCQUFpQixDQUFZLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDdkQsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLENBQ3RDLElBQVksRUFDWixNQUFvQixFQUlwQixFQUFFLENBQ0YsY0FBYyxDQUNaLDJCQUEyQixFQUMzQixnQkFBZ0IsRUFDaEIsQ0FDRSxLQUEwQixFQUMxQixTQUFnRCxFQUNoRCxFQUFFLENBQ0YsVUFBVSxDQUFDLDBCQUEwQixDQUNuQyxLQUFLLENBQUMsU0FBUyxFQUNmLFNBQVMsRUFDVCxNQUFNLEVBQ04sSUFBSSxDQUNMLENBQ0osQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLG9DQUFvQyxHQUFHLENBQ2xELElBQVksRUFDWixNQUFvQixFQUlwQixFQUFFLENBQ0YsY0FBYyxDQUNaLDJCQUEyQixFQUMzQixtQkFBbUIsRUFDbkIsQ0FDRSxLQUEwQixFQUMxQixXQUFxRCxFQUNyRCxFQUFFLENBQ0YsVUFBVSxDQUFDLDBCQUEwQixDQUNuQyxLQUFLLENBQUMsV0FBVyxFQUNqQixXQUFXLEVBQ1gsTUFBTSxFQUNOLElBQUksQ0FDTCxDQUNKLENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUMvQixJQUFZLEVBQ2dFLEVBQUUsQ0FDOUUsY0FBYyxDQUNaLGtCQUFrQixFQUNsQixDQUFDLEtBQThDLEVBQUUsRUFBRSxDQUNqRCxVQUFVLENBQUMseUJBQXlCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUNwRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQge1xuICBCMkJVc2VyLFxuICBFbnRpdGllc01vZGVsLFxuICBTZWFyY2hDb25maWcsXG4gIFN0YXRlVXRpbHMsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBQZXJtaXNzaW9uIH0gZnJvbSAnLi4vLi4vbW9kZWwvcGVybWlzc2lvbi5tb2RlbCc7XG5pbXBvcnQgeyBVc2VyR3JvdXAgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyLWdyb3VwLm1vZGVsJztcbmltcG9ydCB7XG4gIE9yZ2FuaXphdGlvblN0YXRlLFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFVzZXJHcm91cE1hbmFnZW1lbnQsXG4gIFVTRVJfR1JPVVBfRkVBVFVSRSxcbn0gZnJvbSAnLi4vb3JnYW5pemF0aW9uLXN0YXRlJztcbmltcG9ydCB7IGdldEIyQlVzZXJzU3RhdGUgfSBmcm9tICcuL2IyYi11c2VyLnNlbGVjdG9yJztcbmltcG9ydCB7IGdldE9yZ2FuaXphdGlvblN0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9yJztcbmltcG9ydCB7IGdldFBlcm1pc3Npb25zU3RhdGUgfSBmcm9tICcuL3Blcm1pc3Npb24uc2VsZWN0b3InO1xuXG5leHBvcnQgY29uc3QgZ2V0VXNlckdyb3VwTWFuYWdlbWVudFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFVzZXJHcm91cE1hbmFnZW1lbnRcbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0T3JnYW5pemF0aW9uU3RhdGUsXG4gIChzdGF0ZTogT3JnYW5pemF0aW9uU3RhdGUpID0+IHN0YXRlW1VTRVJfR1JPVVBfRkVBVFVSRV1cbik7XG5cbmV4cG9ydCBjb25zdCBnZXRVc2VyR3JvdXBzU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxVc2VyR3JvdXA+XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldFVzZXJHcm91cE1hbmFnZW1lbnRTdGF0ZSxcbiAgKHN0YXRlOiBVc2VyR3JvdXBNYW5hZ2VtZW50KSA9PiBzdGF0ZSAmJiBzdGF0ZS5lbnRpdGllc1xuKTtcblxuZXhwb3J0IGNvbnN0IGdldFVzZXJHcm91cCA9IChcbiAgdXNlckdyb3VwSWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhPcmdhbml6YXRpb24sIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8VXNlckdyb3VwPj4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0VXNlckdyb3Vwc1N0YXRlLFxuICAgIChzdGF0ZTogU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxVc2VyR3JvdXA+KSA9PlxuICAgICAgU3RhdGVVdGlscy5lbnRpdHlMb2FkZXJTdGF0ZVNlbGVjdG9yKHN0YXRlLCB1c2VyR3JvdXBJZClcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldFVzZXJHcm91cFZhbHVlID0gKFxuICB1c2VyR3JvdXBJZDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aE9yZ2FuaXphdGlvbiwgVXNlckdyb3VwPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihnZXRVc2VyR3JvdXAodXNlckdyb3VwSWQpLCAodXNlckdyb3VwU3RhdGUpID0+XG4gICAgU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHVzZXJHcm91cFN0YXRlKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFVzZXJHcm91cExpc3QgPSAoXG4gIHBhcmFtczogU2VhcmNoQ29uZmlnXG4pOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxVc2VyR3JvdXA+PlxuPiA9PlxuICBjcmVhdGVTZWxlY3RvcihnZXRVc2VyR3JvdXBNYW5hZ2VtZW50U3RhdGUsIChzdGF0ZTogVXNlckdyb3VwTWFuYWdlbWVudCkgPT5cbiAgICBTdGF0ZVV0aWxzLmRlbm9ybWFsaXplU2VhcmNoPFVzZXJHcm91cD4oc3RhdGUsIHBhcmFtcylcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldEF2YWlsYWJsZU9yZ0N1c3RvbWVycyA9IChcbiAgY29kZTogc3RyaW5nLFxuICBwYXJhbXM6IFNlYXJjaENvbmZpZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPEVudGl0aWVzTW9kZWw8QjJCVXNlcj4+XG4+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldFVzZXJHcm91cE1hbmFnZW1lbnRTdGF0ZSxcbiAgICBnZXRCMkJVc2Vyc1N0YXRlLFxuICAgIChcbiAgICAgIHN0YXRlOiBVc2VyR3JvdXBNYW5hZ2VtZW50LFxuICAgICAgY3VzdG9tZXJzOiBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPEIyQlVzZXI+XG4gICAgKSA9PlxuICAgICAgU3RhdGVVdGlscy5kZW5vcm1hbGl6ZUN1c3RvbUIyQlNlYXJjaChcbiAgICAgICAgc3RhdGUuY3VzdG9tZXJzLFxuICAgICAgICBjdXN0b21lcnMsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgY29kZVxuICAgICAgKVxuICApO1xuXG5leHBvcnQgY29uc3QgZ2V0QXZhaWxhYmxlT3JkZXJBcHByb3ZhbFBlcm1pc3Npb25zID0gKFxuICBjb2RlOiBzdHJpbmcsXG4gIHBhcmFtczogU2VhcmNoQ29uZmlnXG4pOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxQZXJtaXNzaW9uPj5cbj4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0VXNlckdyb3VwTWFuYWdlbWVudFN0YXRlLFxuICAgIGdldFBlcm1pc3Npb25zU3RhdGUsXG4gICAgKFxuICAgICAgc3RhdGU6IFVzZXJHcm91cE1hbmFnZW1lbnQsXG4gICAgICBwZXJtaXNzaW9uczogU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxQZXJtaXNzaW9uPlxuICAgICkgPT5cbiAgICAgIFN0YXRlVXRpbHMuZGVub3JtYWxpemVDdXN0b21CMkJTZWFyY2goXG4gICAgICAgIHN0YXRlLnBlcm1pc3Npb25zLFxuICAgICAgICBwZXJtaXNzaW9ucyxcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBjb2RlXG4gICAgICApXG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRVc2VyR3JvdXBTdGF0ZSA9IChcbiAgY29kZTogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aE9yZ2FuaXphdGlvbiwgU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxVc2VyR3JvdXA+PiA9PlxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRVc2VyR3JvdXBzU3RhdGUsXG4gICAgKHN0YXRlOiBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPFVzZXJHcm91cD4pID0+XG4gICAgICBTdGF0ZVV0aWxzLmVudGl0eUxvYWRlclN0YXRlU2VsZWN0b3Ioc3RhdGUsIGNvZGUpXG4gICk7XG4iXX0=