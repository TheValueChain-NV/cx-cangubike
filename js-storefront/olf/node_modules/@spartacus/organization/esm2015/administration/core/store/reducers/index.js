import { InjectionToken } from '@angular/core';
import { combineReducers, } from '@ngrx/store';
import { AuthActions, SiteContextActions, StateUtils, } from '@spartacus/core';
import { OrganizationActions } from '../actions';
import { ADDRESS_ENTITIES, ADDRESS_LIST, B2B_USER_APPROVERS, B2B_USER_ENTITIES, B2B_USER_FEATURE, B2B_USER_PERMISSIONS, B2B_USER_USER_GROUPS, BUDGET_ENTITIES, BUDGET_FEATURE, BUDGET_LIST, COST_CENTER_ASSIGNED_BUDGETS, COST_CENTER_ENTITIES, COST_CENTER_FEATURE, COST_CENTER_LIST, ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_ASSIGNED_USERS, ORG_UNIT_ENTITIES, ORG_UNIT_FEATURE, ORG_UNIT_NODE_LIST, ORG_UNIT_TREE_ENTITY, PERMISSION_ENTITIES, PERMISSION_FEATURE, PERMISSION_LIST, PERMISSION_TYPES_LIST, USER_GROUP_AVAILABLE_CUSTOMERS, USER_GROUP_ENTITIES, USER_GROUP_FEATURE, USER_GROUP_LIST, USER_GROUP_PERMISSIONS, USER_LIST, } from '../organization-state';
import { b2bUserApproverListReducer, b2bUserEntitiesReducer, b2bUserPermissionListReducer, b2bUserUserGroupListReducer, userListReducer, } from './b2b-user.reducer';
import { budgetsEntitiesReducer, budgetsListReducer } from './budget.reducer';
import { costCenterAssignedBudgetsListReducer, costCentersEntitiesReducer, costCentersListReducer, } from './cost-center.reducer';
import { orgUnitAddressListReducer, orgUnitEntitiesReducer, orgUnitUserListReducer, } from './org-unit.reducer';
import { permissionsEntitiesReducer, permissionsListReducer, } from './permission.reducer';
import { userGroupAvailableOrderApprovalPermissionsListReducer, userGroupAvailablOrgCustomersListReducer, userGroupEntitiesReducer, userGroupsListReducer, } from './user-group.reducer';
export function getReducers() {
    return {
        [BUDGET_FEATURE]: combineReducers({
            entities: StateUtils.entityLoaderReducer(BUDGET_ENTITIES, budgetsEntitiesReducer),
            list: StateUtils.entityLoaderReducer(BUDGET_LIST, budgetsListReducer),
        }),
        [PERMISSION_FEATURE]: combineReducers({
            entities: StateUtils.entityLoaderReducer(PERMISSION_ENTITIES, permissionsEntitiesReducer),
            list: StateUtils.entityLoaderReducer(PERMISSION_LIST, permissionsListReducer),
            permissionTypes: StateUtils.entityLoaderReducer(PERMISSION_TYPES_LIST),
        }),
        [ORG_UNIT_FEATURE]: combineReducers({
            entities: StateUtils.entityLoaderReducer(ORG_UNIT_ENTITIES, orgUnitEntitiesReducer),
            availableOrgUnitNodes: StateUtils.entityLoaderReducer(ORG_UNIT_NODE_LIST),
            tree: StateUtils.entityLoaderReducer(ORG_UNIT_TREE_ENTITY),
            approvalProcesses: StateUtils.entityLoaderReducer(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES),
            users: StateUtils.entityLoaderReducer(ORG_UNIT_ASSIGNED_USERS, orgUnitUserListReducer),
            addressList: StateUtils.entityLoaderReducer(ADDRESS_LIST, orgUnitAddressListReducer),
            addressEntities: StateUtils.entityLoaderReducer(ADDRESS_ENTITIES),
        }),
        [USER_GROUP_FEATURE]: combineReducers({
            entities: StateUtils.entityLoaderReducer(USER_GROUP_ENTITIES, userGroupEntitiesReducer),
            list: StateUtils.entityLoaderReducer(USER_GROUP_LIST, userGroupsListReducer),
            permissions: StateUtils.entityLoaderReducer(USER_GROUP_PERMISSIONS, userGroupAvailableOrderApprovalPermissionsListReducer),
            customers: StateUtils.entityLoaderReducer(USER_GROUP_AVAILABLE_CUSTOMERS, userGroupAvailablOrgCustomersListReducer),
        }),
        [COST_CENTER_FEATURE]: combineReducers({
            entities: StateUtils.entityLoaderReducer(COST_CENTER_ENTITIES, costCentersEntitiesReducer),
            list: StateUtils.entityLoaderReducer(COST_CENTER_LIST, costCentersListReducer),
            budgets: StateUtils.entityLoaderReducer(COST_CENTER_ASSIGNED_BUDGETS, costCenterAssignedBudgetsListReducer),
        }),
        [B2B_USER_FEATURE]: combineReducers({
            entities: StateUtils.entityLoaderReducer(B2B_USER_ENTITIES, b2bUserEntitiesReducer),
            list: StateUtils.entityLoaderReducer(USER_LIST, userListReducer),
            approvers: StateUtils.entityLoaderReducer(B2B_USER_APPROVERS, b2bUserApproverListReducer),
            permissions: StateUtils.entityLoaderReducer(B2B_USER_PERMISSIONS, b2bUserPermissionListReducer),
            userGroups: StateUtils.entityLoaderReducer(B2B_USER_USER_GROUPS, b2bUserUserGroupListReducer),
        }),
    };
}
export const reducerToken = new InjectionToken('OrganizationReducers');
export const reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
export function clearOrganizationState(reducer) {
    return function (state, action) {
        if (action.type === OrganizationActions.CLEAR_ORGANIZATION_DATA) {
            state = undefined;
        }
        if (action.type === AuthActions.LOGOUT) {
            state = undefined;
        }
        if (action.type === SiteContextActions.LANGUAGE_CHANGE) {
            state = undefined;
        }
        return reducer(state, action);
    };
}
export const metaReducers = [clearOrganizationState];
//# sourceMappingURL=data:application/json;base64,