import { Injectable } from '@angular/core';
import { queueScheduler, using } from 'rxjs';
import { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';
import { CostCenterActions } from '../store/actions/index';
import { getAssignedBudgets, getCostCenter, getCostCenterList, getCostCenterState, getCostCenterValue, } from '../store/selectors/cost-center.selector';
import { getItemStatus } from '../utils/get-item-status';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class CostCenterService {
    constructor(store, userIdService) {
        this.store = store;
        this.userIdService = userIdService;
    }
    load(costCenterCode) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.LoadCostCenter({ userId, costCenterCode })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadList(params) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.LoadCostCenters({ userId, params })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getCostCenter(costCenterCode) {
        return this.store.select(getCostCenter(costCenterCode));
    }
    getCostCenterValue(costCenterCode) {
        return this.store
            .select(getCostCenterValue(costCenterCode))
            .pipe(filter(Boolean));
    }
    getCostCenterList(params) {
        return this.store.select(getCostCenterList(params));
    }
    getBudgetList(costCenterCode, params) {
        return this.store.select(getAssignedBudgets(costCenterCode, params));
    }
    get(costCenterCode) {
        const loading$ = this.getCostCenter(costCenterCode).pipe(auditTime(0), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.load(costCenterCode);
            }
        }));
        return using(() => loading$.subscribe(), () => this.getCostCenterValue(costCenterCode));
    }
    getList(params) {
        return this.getCostCenterList(params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadList(params);
            }
        }), filter((process) => process.success || process.error), map((result) => result.value));
    }
    getCostCenterState(costCenterCode) {
        return this.store.select(getCostCenterState(costCenterCode));
    }
    create(costCenter) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.CreateCostCenter({ userId, costCenter })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    update(costCenterCode, costCenter) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.UpdateCostCenter({
            userId,
            costCenterCode,
            costCenter,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getLoadingStatus(costCenterCode) {
        return getItemStatus(this.getCostCenter(costCenterCode));
    }
    loadBudgets(costCenterCode, params) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.LoadAssignedBudgets({
            userId,
            costCenterCode,
            params,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getBudgets(costCenterCode, params) {
        return this.getBudgetList(costCenterCode, params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadBudgets(costCenterCode, params);
            }
        }), filter((process) => process.success || process.error), map((result) => result.value));
    }
    assignBudget(costCenterCode, budgetCode) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.AssignBudget({
            userId,
            costCenterCode,
            budgetCode,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    unassignBudget(costCenterCode, budgetCode) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new CostCenterActions.UnassignBudget({
            userId,
            costCenterCode,
            budgetCode,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getErrorState(costCenterCode) {
        return this.getCostCenterState(costCenterCode).pipe(map((state) => state.error));
    }
}
CostCenterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CostCenterService, deps: [{ token: i1.Store }, { token: i2.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
CostCenterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CostCenterService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CostCenterService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,