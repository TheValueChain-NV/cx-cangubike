import { createSelector } from '@ngrx/store';
import { StateUtils, } from '@spartacus/core';
import { PERMISSION_FEATURE, PERMISSION_TYPES, } from '../organization-state';
import { getOrganizationState } from './feature.selector';
export const getPermissionManagementState = createSelector(getOrganizationState, (state) => state[PERMISSION_FEATURE]);
export const getPermissionsState = createSelector(getPermissionManagementState, (state) => state && state.entities);
export const getPermissionState = (permissionId) => createSelector(getPermissionsState, (state) => StateUtils.entityLoaderStateSelector(state, permissionId));
export const getPermissionTypesState = createSelector(getPermissionManagementState, (state) => state && state.permissionTypes);
export const getPermission = (permissionCode) => createSelector(getPermissionsState, (state) => StateUtils.entityLoaderStateSelector(state, permissionCode));
export const getPermissionValue = (permissionCode) => {
    return createSelector(getPermission(permissionCode), (permissionState) => StateUtils.loaderValueSelector(permissionState));
};
export const getPermissionList = (params) => createSelector(getPermissionManagementState, (state) => StateUtils.denormalizeSearch(state, params));
export const getPermissionTypes = () => createSelector(getPermissionTypesState, (state) => StateUtils.entityLoaderStateSelector(state, PERMISSION_TYPES));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbi5zZWxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29yZS9zdG9yZS9zZWxlY3RvcnMvcGVybWlzc2lvbi5zZWxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUMvRCxPQUFPLEVBR0wsVUFBVSxHQUVYLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUdMLGtCQUFrQixFQUNsQixnQkFBZ0IsR0FFakIsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUxRCxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FHckMsY0FBYyxDQUNoQixvQkFBb0IsRUFDcEIsQ0FBQyxLQUF3QixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FDeEQsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUc1QixjQUFjLENBQ2hCLDRCQUE0QixFQUM1QixDQUFDLEtBQTJCLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUSxDQUN6RCxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FDaEMsWUFBb0IsRUFJcEIsRUFBRSxDQUNGLGNBQWMsQ0FDWixtQkFBbUIsRUFDbkIsQ0FBQyxLQUErQyxFQUFFLEVBQUUsQ0FDbEQsVUFBVSxDQUFDLHlCQUF5QixDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FDNUQsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUdoQyxjQUFjLENBQ2hCLDRCQUE0QixFQUM1QixDQUFDLEtBQTJCLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsZUFBZSxDQUNoRSxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQzNCLGNBQXNCLEVBSXRCLEVBQUUsQ0FDRixjQUFjLENBQ1osbUJBQW1CLEVBQ25CLENBQUMsS0FBK0MsRUFBRSxFQUFFLENBQ2xELFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLENBQzlELENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUNoQyxjQUFzQixFQUMrQixFQUFFO0lBQ3ZELE9BQU8sY0FBYyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQ3ZFLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsQ0FDaEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQy9CLE1BQW9CLEVBSXBCLEVBQUUsQ0FDRixjQUFjLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxLQUEyQixFQUFFLEVBQUUsQ0FDM0UsVUFBVSxDQUFDLGlCQUFpQixDQUFhLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDeEQsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLEdBR2hDLEVBQUUsQ0FDRixjQUFjLENBQ1osdUJBQXVCLEVBQ3ZCLENBQUMsS0FBa0UsRUFBRSxFQUFFLENBQ3JFLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FDaEUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBNZW1vaXplZFNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHtcbiAgRW50aXRpZXNNb2RlbCxcbiAgU2VhcmNoQ29uZmlnLFxuICBTdGF0ZVV0aWxzLFxuICBPcmRlckFwcHJvdmFsUGVybWlzc2lvblR5cGUsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBQZXJtaXNzaW9uIH0gZnJvbSAnLi4vLi4vbW9kZWwvcGVybWlzc2lvbi5tb2RlbCc7XG5pbXBvcnQge1xuICBPcmdhbml6YXRpb25TdGF0ZSxcbiAgUGVybWlzc2lvbk1hbmFnZW1lbnQsXG4gIFBFUk1JU1NJT05fRkVBVFVSRSxcbiAgUEVSTUlTU0lPTl9UWVBFUyxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxufSBmcm9tICcuLi9vcmdhbml6YXRpb24tc3RhdGUnO1xuaW1wb3J0IHsgZ2V0T3JnYW5pemF0aW9uU3RhdGUgfSBmcm9tICcuL2ZlYXR1cmUuc2VsZWN0b3InO1xuXG5leHBvcnQgY29uc3QgZ2V0UGVybWlzc2lvbk1hbmFnZW1lbnRTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBQZXJtaXNzaW9uTWFuYWdlbWVudFxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRPcmdhbml6YXRpb25TdGF0ZSxcbiAgKHN0YXRlOiBPcmdhbml6YXRpb25TdGF0ZSkgPT4gc3RhdGVbUEVSTUlTU0lPTl9GRUFUVVJFXVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldFBlcm1pc3Npb25zU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxQZXJtaXNzaW9uPlxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRQZXJtaXNzaW9uTWFuYWdlbWVudFN0YXRlLFxuICAoc3RhdGU6IFBlcm1pc3Npb25NYW5hZ2VtZW50KSA9PiBzdGF0ZSAmJiBzdGF0ZS5lbnRpdGllc1xuKTtcblxuZXhwb3J0IGNvbnN0IGdldFBlcm1pc3Npb25TdGF0ZSA9IChcbiAgcGVybWlzc2lvbklkOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxQZXJtaXNzaW9uPlxuPiA9PlxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRQZXJtaXNzaW9uc1N0YXRlLFxuICAgIChzdGF0ZTogU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxQZXJtaXNzaW9uPikgPT5cbiAgICAgIFN0YXRlVXRpbHMuZW50aXR5TG9hZGVyU3RhdGVTZWxlY3RvcihzdGF0ZSwgcGVybWlzc2lvbklkKVxuICApO1xuXG5leHBvcnQgY29uc3QgZ2V0UGVybWlzc2lvblR5cGVzU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxPcmRlckFwcHJvdmFsUGVybWlzc2lvblR5cGVbXT5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0UGVybWlzc2lvbk1hbmFnZW1lbnRTdGF0ZSxcbiAgKHN0YXRlOiBQZXJtaXNzaW9uTWFuYWdlbWVudCkgPT4gc3RhdGUgJiYgc3RhdGUucGVybWlzc2lvblR5cGVzXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0UGVybWlzc2lvbiA9IChcbiAgcGVybWlzc2lvbkNvZGU6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPFBlcm1pc3Npb24+XG4+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldFBlcm1pc3Npb25zU3RhdGUsXG4gICAgKHN0YXRlOiBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPFBlcm1pc3Npb24+KSA9PlxuICAgICAgU3RhdGVVdGlscy5lbnRpdHlMb2FkZXJTdGF0ZVNlbGVjdG9yKHN0YXRlLCBwZXJtaXNzaW9uQ29kZSlcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldFBlcm1pc3Npb25WYWx1ZSA9IChcbiAgcGVybWlzc2lvbkNvZGU6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhPcmdhbml6YXRpb24sIFBlcm1pc3Npb24+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGdldFBlcm1pc3Npb24ocGVybWlzc2lvbkNvZGUpLCAocGVybWlzc2lvblN0YXRlKSA9PlxuICAgIFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3RvcihwZXJtaXNzaW9uU3RhdGUpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UGVybWlzc2lvbkxpc3QgPSAoXG4gIHBhcmFtczogU2VhcmNoQ29uZmlnXG4pOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxQZXJtaXNzaW9uPj5cbj4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoZ2V0UGVybWlzc2lvbk1hbmFnZW1lbnRTdGF0ZSwgKHN0YXRlOiBQZXJtaXNzaW9uTWFuYWdlbWVudCkgPT5cbiAgICBTdGF0ZVV0aWxzLmRlbm9ybWFsaXplU2VhcmNoPFBlcm1pc3Npb24+KHN0YXRlLCBwYXJhbXMpXG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRQZXJtaXNzaW9uVHlwZXMgPSAoKTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPE9yZGVyQXBwcm92YWxQZXJtaXNzaW9uVHlwZVtdPlxuPiA9PlxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRQZXJtaXNzaW9uVHlwZXNTdGF0ZSxcbiAgICAoc3RhdGU6IFN0YXRlVXRpbHMuRW50aXR5TG9hZGVyU3RhdGU8T3JkZXJBcHByb3ZhbFBlcm1pc3Npb25UeXBlW10+KSA9PlxuICAgICAgU3RhdGVVdGlscy5lbnRpdHlMb2FkZXJTdGF0ZVNlbGVjdG9yKHN0YXRlLCBQRVJNSVNTSU9OX1RZUEVTKVxuICApO1xuIl19