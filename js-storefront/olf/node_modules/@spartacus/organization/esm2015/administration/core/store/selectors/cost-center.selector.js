import { createSelector } from '@ngrx/store';
import { StateUtils, } from '@spartacus/core';
import { COST_CENTER_FEATURE, } from '../organization-state';
import { getBudgetsState } from './budget.selector';
import { getOrganizationState } from './feature.selector';
export const getCostCenterManagementState = createSelector(getOrganizationState, (state) => state[COST_CENTER_FEATURE]);
export const getCostCentersState = createSelector(getCostCenterManagementState, (state) => state && state.entities);
export const getCostCenter = (costCenterCode) => createSelector(getCostCentersState, (state) => StateUtils.entityLoaderStateSelector(state, costCenterCode));
export const getCostCenterValue = (costCenterCode) => {
    return createSelector(getCostCenter(costCenterCode), (costCenterState) => StateUtils.loaderValueSelector(costCenterState));
};
export const getCostCenterList = (params) => createSelector(getCostCenterManagementState, (state) => StateUtils.denormalizeSearch(state, params));
export const getAssignedBudgets = (code, params) => createSelector(getCostCenterManagementState, getBudgetsState, (state, budgets) => StateUtils.denormalizeCustomB2BSearch(state.budgets, budgets, params, code));
export const getCostCenterState = (code) => createSelector(getCostCentersState, (state) => StateUtils.entityLoaderStateSelector(state, code));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29zdC1jZW50ZXIuc2VsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvcmUvc3RvcmUvc2VsZWN0b3JzL2Nvc3QtY2VudGVyLnNlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQW9CLE1BQU0sYUFBYSxDQUFDO0FBQy9ELE9BQU8sRUFJTCxVQUFVLEdBQ1gsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBRUwsbUJBQW1CLEdBR3BCLE1BQU0sdUJBQXVCLENBQUM7QUFDL0IsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTFELE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUdyQyxjQUFjLENBQ2hCLG9CQUFvQixFQUNwQixDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUN6RCxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBRzVCLGNBQWMsQ0FDaEIsNEJBQTRCLEVBQzVCLENBQUMsS0FBMkIsRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQ3pELENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FDM0IsY0FBc0IsRUFJdEIsRUFBRSxDQUNGLGNBQWMsQ0FDWixtQkFBbUIsRUFDbkIsQ0FBQyxLQUErQyxFQUFFLEVBQUUsQ0FDbEQsVUFBVSxDQUFDLHlCQUF5QixDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FDOUQsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQ2hDLGNBQXNCLEVBQzJCLEVBQUU7SUFDbkQsT0FBTyxjQUFjLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FDdkUsVUFBVSxDQUFDLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxDQUNoRCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsTUFBb0IsRUFJcEIsRUFBRSxDQUNGLGNBQWMsQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLEtBQTJCLEVBQUUsRUFBRSxDQUMzRSxVQUFVLENBQUMsaUJBQWlCLENBQWEsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUN4RCxDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FDaEMsSUFBWSxFQUNaLE1BQW9CLEVBSXBCLEVBQUUsQ0FDRixjQUFjLENBQ1osNEJBQTRCLEVBQzVCLGVBQWUsRUFDZixDQUNFLEtBQTJCLEVBQzNCLE9BQTZDLEVBQzdDLEVBQUUsQ0FDRixVQUFVLENBQUMsMEJBQTBCLENBQ25DLEtBQUssQ0FBQyxPQUFPLEVBQ2IsT0FBTyxFQUNQLE1BQU0sRUFDTixJQUFJLENBQ0wsQ0FDSixDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FDaEMsSUFBWSxFQUlaLEVBQUUsQ0FDRixjQUFjLENBQ1osbUJBQW1CLEVBQ25CLENBQUMsS0FBK0MsRUFBRSxFQUFFLENBQ2xELFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQ3BELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciwgTWVtb2l6ZWRTZWxlY3RvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7XG4gIENvc3RDZW50ZXIsXG4gIEVudGl0aWVzTW9kZWwsXG4gIFNlYXJjaENvbmZpZyxcbiAgU3RhdGVVdGlscyxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IEJ1ZGdldCB9IGZyb20gJy4uLy4uL21vZGVsL2J1ZGdldC5tb2RlbCc7XG5pbXBvcnQge1xuICBDb3N0Q2VudGVyTWFuYWdlbWVudCxcbiAgQ09TVF9DRU5URVJfRkVBVFVSRSxcbiAgT3JnYW5pemF0aW9uU3RhdGUsXG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbn0gZnJvbSAnLi4vb3JnYW5pemF0aW9uLXN0YXRlJztcbmltcG9ydCB7IGdldEJ1ZGdldHNTdGF0ZSB9IGZyb20gJy4vYnVkZ2V0LnNlbGVjdG9yJztcbmltcG9ydCB7IGdldE9yZ2FuaXphdGlvblN0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9yJztcblxuZXhwb3J0IGNvbnN0IGdldENvc3RDZW50ZXJNYW5hZ2VtZW50U3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgQ29zdENlbnRlck1hbmFnZW1lbnRcbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0T3JnYW5pemF0aW9uU3RhdGUsXG4gIChzdGF0ZTogT3JnYW5pemF0aW9uU3RhdGUpID0+IHN0YXRlW0NPU1RfQ0VOVEVSX0ZFQVRVUkVdXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29zdENlbnRlcnNTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPENvc3RDZW50ZXI+XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldENvc3RDZW50ZXJNYW5hZ2VtZW50U3RhdGUsXG4gIChzdGF0ZTogQ29zdENlbnRlck1hbmFnZW1lbnQpID0+IHN0YXRlICYmIHN0YXRlLmVudGl0aWVzXG4pO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29zdENlbnRlciA9IChcbiAgY29zdENlbnRlckNvZGU6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPENvc3RDZW50ZXI+XG4+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldENvc3RDZW50ZXJzU3RhdGUsXG4gICAgKHN0YXRlOiBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPENvc3RDZW50ZXI+KSA9PlxuICAgICAgU3RhdGVVdGlscy5lbnRpdHlMb2FkZXJTdGF0ZVNlbGVjdG9yKHN0YXRlLCBjb3N0Q2VudGVyQ29kZSlcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldENvc3RDZW50ZXJWYWx1ZSA9IChcbiAgY29zdENlbnRlckNvZGU6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhPcmdhbml6YXRpb24sIEJ1ZGdldD4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoZ2V0Q29zdENlbnRlcihjb3N0Q2VudGVyQ29kZSksIChjb3N0Q2VudGVyU3RhdGUpID0+XG4gICAgU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yKGNvc3RDZW50ZXJTdGF0ZSlcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb3N0Q2VudGVyTGlzdCA9IChcbiAgcGFyYW1zOiBTZWFyY2hDb25maWdcbik6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxFbnRpdGllc01vZGVsPENvc3RDZW50ZXI+PlxuPiA9PlxuICBjcmVhdGVTZWxlY3RvcihnZXRDb3N0Q2VudGVyTWFuYWdlbWVudFN0YXRlLCAoc3RhdGU6IENvc3RDZW50ZXJNYW5hZ2VtZW50KSA9PlxuICAgIFN0YXRlVXRpbHMuZGVub3JtYWxpemVTZWFyY2g8Q29zdENlbnRlcj4oc3RhdGUsIHBhcmFtcylcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldEFzc2lnbmVkQnVkZ2V0cyA9IChcbiAgY29kZTogc3RyaW5nLFxuICBwYXJhbXM6IFNlYXJjaENvbmZpZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPEVudGl0aWVzTW9kZWw8QnVkZ2V0Pj5cbj4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0Q29zdENlbnRlck1hbmFnZW1lbnRTdGF0ZSxcbiAgICBnZXRCdWRnZXRzU3RhdGUsXG4gICAgKFxuICAgICAgc3RhdGU6IENvc3RDZW50ZXJNYW5hZ2VtZW50LFxuICAgICAgYnVkZ2V0czogU3RhdGVVdGlscy5FbnRpdHlMb2FkZXJTdGF0ZTxCdWRnZXQ+XG4gICAgKSA9PlxuICAgICAgU3RhdGVVdGlscy5kZW5vcm1hbGl6ZUN1c3RvbUIyQlNlYXJjaChcbiAgICAgICAgc3RhdGUuYnVkZ2V0cyxcbiAgICAgICAgYnVkZ2V0cyxcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBjb2RlXG4gICAgICApXG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRDb3N0Q2VudGVyU3RhdGUgPSAoXG4gIGNvZGU6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPENvc3RDZW50ZXI+XG4+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldENvc3RDZW50ZXJzU3RhdGUsXG4gICAgKHN0YXRlOiBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPENvc3RDZW50ZXI+KSA9PlxuICAgICAgU3RhdGVVdGlscy5lbnRpdHlMb2FkZXJTdGF0ZVNlbGVjdG9yKHN0YXRlLCBjb2RlKVxuICApO1xuIl19