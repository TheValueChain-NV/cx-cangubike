import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./user-group.adapter";
export class UserGroupConnector {
    constructor(adapter) {
        this.adapter = adapter;
    }
    get(userId, userGroupId) {
        return this.adapter.load(userId, userGroupId);
    }
    getList(userId, params) {
        return this.adapter.loadList(userId, params);
    }
    getAvailableOrderApprovalPermissions(userId, userGroupId, params) {
        return this.adapter.loadAvailableOrderApprovalPermissions(userId, userGroupId, params);
    }
    getAvailableOrgCustomers(userId, userGroupId, params) {
        return this.adapter.loadAvailableOrgCustomers(userId, userGroupId, params);
    }
    create(userId, userGroup) {
        return this.adapter.create(userId, userGroup);
    }
    delete(userId, userGroupId) {
        return this.adapter.delete(userId, userGroupId);
    }
    update(userId, userGroupId, userGroup) {
        return this.adapter.update(userId, userGroupId, userGroup);
    }
    assignMember(userId, userGroupId, orgCustomerId) {
        return this.adapter.assignMember(userId, userGroupId, orgCustomerId);
    }
    assignOrderApprovalPermission(userId, userGroupId, orderApprovalPermissionCode) {
        return this.adapter.assignOrderApprovalPermission(userId, userGroupId, orderApprovalPermissionCode);
    }
    unassignMember(userId, userGroupId, orgCustomerId) {
        return this.adapter.unassignMember(userId, userGroupId, orgCustomerId);
    }
    unassignAllMembers(userId, userGroupId) {
        return this.adapter.unassignAllMembers(userId, userGroupId);
    }
    unassignOrderApprovalPermission(userId, userGroupId, orderApprovalPermissionCode) {
        return this.adapter.unassignOrderApprovalPermission(userId, userGroupId, orderApprovalPermissionCode);
    }
}
UserGroupConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupConnector, deps: [{ token: i1.UserGroupAdapter }], target: i0.ɵɵFactoryTarget.Injectable });
UserGroupConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupConnector, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupConnector, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.UserGroupAdapter }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1ncm91cC5jb25uZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvcmUvY29ubmVjdG9ycy91c2VyLWdyb3VwL3VzZXItZ3JvdXAuY29ubmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQVUzQyxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCLFlBQXNCLE9BQXlCO1FBQXpCLFlBQU8sR0FBUCxPQUFPLENBQWtCO0lBQUcsQ0FBQztJQUVuRCxHQUFHLENBQUMsTUFBYyxFQUFFLFdBQW1CO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxPQUFPLENBQ0wsTUFBYyxFQUNkLE1BQXFCO1FBRXJCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxvQ0FBb0MsQ0FDbEMsTUFBYyxFQUNkLFdBQW1CLEVBQ25CLE1BQXFCO1FBRXJCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQ0FBcUMsQ0FDdkQsTUFBTSxFQUNOLFdBQVcsRUFDWCxNQUFNLENBQ1AsQ0FBQztJQUNKLENBQUM7SUFFRCx3QkFBd0IsQ0FDdEIsTUFBYyxFQUNkLFdBQW1CLEVBQ25CLE1BQXFCO1FBRXJCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBYyxFQUFFLFNBQW9CO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxNQUFNLENBQUMsTUFBYyxFQUFFLFdBQW1CO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxNQUFNLENBQ0osTUFBYyxFQUNkLFdBQW1CLEVBQ25CLFNBQW9CO1FBRXBCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsWUFBWSxDQUNWLE1BQWMsRUFDZCxXQUFtQixFQUNuQixhQUFxQjtRQUVyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELDZCQUE2QixDQUMzQixNQUFjLEVBQ2QsV0FBbUIsRUFDbkIsMkJBQW1DO1FBRW5DLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsQ0FDL0MsTUFBTSxFQUNOLFdBQVcsRUFDWCwyQkFBMkIsQ0FDNUIsQ0FBQztJQUNKLENBQUM7SUFFRCxjQUFjLENBQ1osTUFBYyxFQUNkLFdBQW1CLEVBQ25CLGFBQXFCO1FBRXJCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQsa0JBQWtCLENBQUMsTUFBYyxFQUFFLFdBQW1CO1FBQ3BELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELCtCQUErQixDQUM3QixNQUFjLEVBQ2QsV0FBbUIsRUFDbkIsMkJBQW1DO1FBRW5DLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQywrQkFBK0IsQ0FDakQsTUFBTSxFQUNOLFdBQVcsRUFDWCwyQkFBMkIsQ0FDNUIsQ0FBQztJQUNKLENBQUM7OytHQTVGVSxrQkFBa0I7bUhBQWxCLGtCQUFrQixjQUZqQixNQUFNOzJGQUVQLGtCQUFrQjtrQkFIOUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCMkJVc2VyLCBFbnRpdGllc01vZGVsLCBTZWFyY2hDb25maWcgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUGVybWlzc2lvbiB9IGZyb20gJy4uLy4uL21vZGVsL3Blcm1pc3Npb24ubW9kZWwnO1xuaW1wb3J0IHsgVXNlckdyb3VwIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlci1ncm91cC5tb2RlbCc7XG5pbXBvcnQgeyBVc2VyR3JvdXBBZGFwdGVyIH0gZnJvbSAnLi91c2VyLWdyb3VwLmFkYXB0ZXInO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVXNlckdyb3VwQ29ubmVjdG9yIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGFkYXB0ZXI6IFVzZXJHcm91cEFkYXB0ZXIpIHt9XG5cbiAgZ2V0KHVzZXJJZDogc3RyaW5nLCB1c2VyR3JvdXBJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxVc2VyR3JvdXA+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmxvYWQodXNlcklkLCB1c2VyR3JvdXBJZCk7XG4gIH1cblxuICBnZXRMaXN0KFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIHBhcmFtcz86IFNlYXJjaENvbmZpZ1xuICApOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8VXNlckdyb3VwPj4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIubG9hZExpc3QodXNlcklkLCBwYXJhbXMpO1xuICB9XG5cbiAgZ2V0QXZhaWxhYmxlT3JkZXJBcHByb3ZhbFBlcm1pc3Npb25zKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIHVzZXJHcm91cElkOiBzdHJpbmcsXG4gICAgcGFyYW1zPzogU2VhcmNoQ29uZmlnXG4gICk6IE9ic2VydmFibGU8RW50aXRpZXNNb2RlbDxQZXJtaXNzaW9uPj4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIubG9hZEF2YWlsYWJsZU9yZGVyQXBwcm92YWxQZXJtaXNzaW9ucyhcbiAgICAgIHVzZXJJZCxcbiAgICAgIHVzZXJHcm91cElkLFxuICAgICAgcGFyYW1zXG4gICAgKTtcbiAgfVxuXG4gIGdldEF2YWlsYWJsZU9yZ0N1c3RvbWVycyhcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICB1c2VyR3JvdXBJZDogc3RyaW5nLFxuICAgIHBhcmFtcz86IFNlYXJjaENvbmZpZ1xuICApOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8QjJCVXNlcj4+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmxvYWRBdmFpbGFibGVPcmdDdXN0b21lcnModXNlcklkLCB1c2VyR3JvdXBJZCwgcGFyYW1zKTtcbiAgfVxuXG4gIGNyZWF0ZSh1c2VySWQ6IHN0cmluZywgdXNlckdyb3VwOiBVc2VyR3JvdXApOiBPYnNlcnZhYmxlPFVzZXJHcm91cD4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuY3JlYXRlKHVzZXJJZCwgdXNlckdyb3VwKTtcbiAgfVxuXG4gIGRlbGV0ZSh1c2VySWQ6IHN0cmluZywgdXNlckdyb3VwSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8VXNlckdyb3VwPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5kZWxldGUodXNlcklkLCB1c2VyR3JvdXBJZCk7XG4gIH1cblxuICB1cGRhdGUoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgdXNlckdyb3VwSWQ6IHN0cmluZyxcbiAgICB1c2VyR3JvdXA6IFVzZXJHcm91cFxuICApOiBPYnNlcnZhYmxlPFVzZXJHcm91cD4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIudXBkYXRlKHVzZXJJZCwgdXNlckdyb3VwSWQsIHVzZXJHcm91cCk7XG4gIH1cblxuICBhc3NpZ25NZW1iZXIoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgdXNlckdyb3VwSWQ6IHN0cmluZyxcbiAgICBvcmdDdXN0b21lcklkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmFzc2lnbk1lbWJlcih1c2VySWQsIHVzZXJHcm91cElkLCBvcmdDdXN0b21lcklkKTtcbiAgfVxuXG4gIGFzc2lnbk9yZGVyQXBwcm92YWxQZXJtaXNzaW9uKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIHVzZXJHcm91cElkOiBzdHJpbmcsXG4gICAgb3JkZXJBcHByb3ZhbFBlcm1pc3Npb25Db2RlOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmFzc2lnbk9yZGVyQXBwcm92YWxQZXJtaXNzaW9uKFxuICAgICAgdXNlcklkLFxuICAgICAgdXNlckdyb3VwSWQsXG4gICAgICBvcmRlckFwcHJvdmFsUGVybWlzc2lvbkNvZGVcbiAgICApO1xuICB9XG5cbiAgdW5hc3NpZ25NZW1iZXIoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgdXNlckdyb3VwSWQ6IHN0cmluZyxcbiAgICBvcmdDdXN0b21lcklkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLnVuYXNzaWduTWVtYmVyKHVzZXJJZCwgdXNlckdyb3VwSWQsIG9yZ0N1c3RvbWVySWQpO1xuICB9XG5cbiAgdW5hc3NpZ25BbGxNZW1iZXJzKHVzZXJJZDogc3RyaW5nLCB1c2VyR3JvdXBJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLnVuYXNzaWduQWxsTWVtYmVycyh1c2VySWQsIHVzZXJHcm91cElkKTtcbiAgfVxuXG4gIHVuYXNzaWduT3JkZXJBcHByb3ZhbFBlcm1pc3Npb24oXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgdXNlckdyb3VwSWQ6IHN0cmluZyxcbiAgICBvcmRlckFwcHJvdmFsUGVybWlzc2lvbkNvZGU6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIudW5hc3NpZ25PcmRlckFwcHJvdmFsUGVybWlzc2lvbihcbiAgICAgIHVzZXJJZCxcbiAgICAgIHVzZXJHcm91cElkLFxuICAgICAgb3JkZXJBcHByb3ZhbFBlcm1pc3Npb25Db2RlXG4gICAgKTtcbiAgfVxufVxuIl19