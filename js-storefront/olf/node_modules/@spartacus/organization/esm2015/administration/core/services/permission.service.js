import { Injectable } from '@angular/core';
import { queueScheduler, using } from 'rxjs';
import { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';
import { PermissionActions } from '../store/actions/index';
import { getPermission, getPermissionList, getPermissionState, getPermissionTypes, getPermissionValue, } from '../store/selectors/permission.selector';
import { getItemStatus } from '../utils/get-item-status';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class PermissionService {
    constructor(store, userIdService) {
        this.store = store;
        this.userIdService = userIdService;
    }
    loadPermission(permissionCode) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new PermissionActions.LoadPermission({
            userId,
            permissionCode,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadPermissions(params) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new PermissionActions.LoadPermissions({ userId, params })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadPermissionTypes() {
        this.userIdService.takeUserId(true).subscribe(() => this.store.dispatch(new PermissionActions.LoadPermissionTypes()), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getPermission(permissionCode) {
        return this.store.select(getPermission(permissionCode));
    }
    getPermissionValue(permissionCode) {
        return this.store
            .select(getPermissionValue(permissionCode))
            .pipe(filter(Boolean));
    }
    getPermissionList(params) {
        return this.store.select(getPermissionList(params));
    }
    getPermissionTypeList() {
        return this.store.select(getPermissionTypes());
    }
    get(permissionCode) {
        const loading$ = this.getPermission(permissionCode).pipe(auditTime(0), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.loadPermission(permissionCode);
            }
        }));
        return using(() => loading$.subscribe(), () => this.getPermissionValue(permissionCode));
    }
    getTypes() {
        return this.getPermissionTypeList().pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadPermissionTypes();
            }
        }), filter((process) => process.success || process.error), map((result) => result.value));
    }
    getList(params) {
        return this.getPermissionList(params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadPermissions(params);
            }
        }), filter((process) => process.success || process.error), map((result) => result.value));
    }
    create(permission) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new PermissionActions.CreatePermission({ userId, permission })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    update(permissionCode, permission) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new PermissionActions.UpdatePermission({
            userId,
            permissionCode,
            permission,
        })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getLoadingStatus(permissionCode) {
        return getItemStatus(this.getPermission(permissionCode));
    }
    getPermissionState(code) {
        return this.store.select(getPermissionState(code));
    }
    getErrorState(permissionCode) {
        return this.getPermissionState(permissionCode).pipe(map((state) => state.error));
    }
}
PermissionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionService, deps: [{ token: i1.Store }, { token: i2.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
PermissionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PermissionService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,