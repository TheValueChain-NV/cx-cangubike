import { StateUtils } from '@spartacus/core';
import { B2B_USER_ENTITIES, PERMISSION_ENTITIES, USER_GROUP_AVAILABLE_CUSTOMERS, USER_GROUP_ENTITIES, USER_GROUP_LIST, USER_GROUP_PERMISSIONS, } from '../organization-state';
export const LOAD_USER_GROUP = '[UserGroup] Load UserGroup Data';
export const LOAD_USER_GROUP_FAIL = '[UserGroup] Load UserGroup Data Fail';
export const LOAD_USER_GROUP_SUCCESS = '[UserGroup] Load UserGroup Data Success';
export const LOAD_USER_GROUPS = '[UserGroup] Load UserGroups';
export const LOAD_USER_GROUPS_FAIL = '[UserGroup] Load UserGroups Fail';
export const LOAD_USER_GROUPS_SUCCESS = '[UserGroup] Load UserGroups Success';
export const LOAD_USER_GROUP_PERMISSIONS = '[UserGroup] Load Permissions Data';
export const LOAD_USER_GROUP_PERMISSIONS_FAIL = '[UserGroup] Load Permissions Data Fail';
export const LOAD_USER_GROUP_PERMISSIONS_SUCCESS = '[UserGroup] Load Permissions Data Success';
export const LOAD_USER_GROUP_AVAILABLE_CUSTOMERS = '[UserGroup] Load Customers Data';
export const LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_FAIL = '[UserGroup] Load Customers Data Fail';
export const LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS = '[UserGroup] Load Customers Data Success';
export const CREATE_USER_GROUP = '[UserGroup] Create UserGroup';
export const CREATE_USER_GROUP_FAIL = '[UserGroup] Create UserGroup Fail';
export const CREATE_USER_GROUP_SUCCESS = '[UserGroup] Create UserGroup Success';
export const USER_GROUP_ASSIGN_MEMBER = '[UserGroup] Assign Member';
export const USER_GROUP_ASSIGN_MEMBER_FAIL = '[UserGroup] Assign Member Fail';
export const USER_GROUP_ASSIGN_MEMBER_SUCCESS = '[UserGroup] Assign Member Success';
export const USER_GROUP_ASSIGN_PERMISSION = '[UserGroup] Assign Permissions';
export const USER_GROUP_ASSIGN_PERMISSION_FAIL = '[UserGroup] Assign Permissions Fail';
export const USER_GROUP_ASSIGN_PERMISSION_SUCCESS = '[UserGroup] Assign Permissions Success';
export const UPDATE_USER_GROUP = '[UserGroup] Update UserGroup';
export const UPDATE_USER_GROUP_FAIL = '[UserGroup] Update UserGroup Fail';
export const UPDATE_USER_GROUP_SUCCESS = '[UserGroup] Update UserGroup Success';
export const DELETE_USER_GROUP = '[UserGroup] Delete UserGroup';
export const DELETE_USER_GROUP_FAIL = '[UserGroup] Delete UserGroup Fail';
export const DELETE_USER_GROUP_SUCCESS = '[UserGroup] Delete UserGroup Success';
export const USER_GROUP_UNASSIGN_ALL_MEMBERS = '[UserGroup] Unassign Members';
export const USER_GROUP_UNASSIGN_ALL_MEMBERS_FAIL = '[UserGroup] Unassign Members Fail';
export const USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS = '[UserGroup] Unassign Members Success';
export const USER_GROUP_UNASSIGN_MEMBER = '[UserGroup] Unassign Member';
export const USER_GROUP_UNASSIGN_MEMBER_FAIL = '[UserGroup] Unassign Member Fail';
export const USER_GROUP_UNASSIGN_MEMBER_SUCCESS = '[UserGroup] Unassign Member Success';
export const USER_GROUP_UNASSIGN_PERMISSION = '[UserGroup] Unassign Permission';
export const USER_GROUP_UNASSIGN_PERMISSION_FAIL = '[UserGroup] Unassign Permission Fail';
export const USER_GROUP_UNASSIGN_PERMISSION_SUCCESS = '[UserGroup] Unassign Permission Success';
export class LoadUserGroup extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroupId);
        this.payload = payload;
        this.type = LOAD_USER_GROUP;
    }
}
export class LoadUserGroupFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);
        this.payload = payload;
        this.type = LOAD_USER_GROUP_FAIL;
    }
}
export class LoadUserGroupSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, Array.isArray(payload)
            ? payload.map((userGroup) => userGroup === null || userGroup === void 0 ? void 0 : userGroup.uid)
            : payload === null || payload === void 0 ? void 0 : payload.uid);
        this.payload = payload;
        this.type = LOAD_USER_GROUP_SUCCESS;
    }
}
export class LoadUserGroups extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(USER_GROUP_LIST, StateUtils.serializeSearchConfig(payload.params));
        this.payload = payload;
        this.type = LOAD_USER_GROUPS;
    }
}
export class LoadUserGroupsFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(USER_GROUP_LIST, StateUtils.serializeSearchConfig(payload.params), payload.error);
        this.payload = payload;
        this.type = LOAD_USER_GROUPS_FAIL;
    }
}
export class LoadUserGroupsSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(USER_GROUP_LIST, StateUtils.serializeSearchConfig(payload.params));
        this.payload = payload;
        this.type = LOAD_USER_GROUPS_SUCCESS;
    }
}
export class LoadPermissions extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(USER_GROUP_PERMISSIONS, StateUtils.serializeSearchConfig(payload.params, payload.userGroupId));
        this.payload = payload;
        this.type = LOAD_USER_GROUP_PERMISSIONS;
    }
}
export class LoadPermissionsFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(USER_GROUP_PERMISSIONS, StateUtils.serializeSearchConfig(payload.params, payload.userGroupId), payload.error);
        this.payload = payload;
        this.type = LOAD_USER_GROUP_PERMISSIONS_FAIL;
    }
}
export class LoadPermissionsSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(USER_GROUP_PERMISSIONS, StateUtils.serializeSearchConfig(payload.params, payload.userGroupId));
        this.payload = payload;
        this.type = LOAD_USER_GROUP_PERMISSIONS_SUCCESS;
    }
}
export class LoadAvailableOrgCustomers extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(USER_GROUP_AVAILABLE_CUSTOMERS, StateUtils.serializeSearchConfig(payload.params, payload.userGroupId));
        this.payload = payload;
        this.type = LOAD_USER_GROUP_AVAILABLE_CUSTOMERS;
    }
}
export class LoadAvailableOrgCustomersFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(USER_GROUP_AVAILABLE_CUSTOMERS, StateUtils.serializeSearchConfig(payload.params, payload.userGroupId), payload.error);
        this.payload = payload;
        this.type = LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_FAIL;
    }
}
export class LoadAvailableOrgCustomersSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(USER_GROUP_AVAILABLE_CUSTOMERS, StateUtils.serializeSearchConfig(payload.params, payload.userGroupId));
        this.payload = payload;
        this.type = LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS;
    }
}
export class CreateUserGroup extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroup.uid);
        this.payload = payload;
        this.type = CREATE_USER_GROUP;
    }
}
export class CreateUserGroupFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);
        this.payload = payload;
        this.type = CREATE_USER_GROUP_FAIL;
    }
}
export class CreateUserGroupSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = CREATE_USER_GROUP_SUCCESS;
    }
}
export class AssignMember extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.customerId);
        this.payload = payload;
        this.type = USER_GROUP_ASSIGN_MEMBER;
    }
}
export class AssignMemberFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.customerId, payload.error);
        this.payload = payload;
        this.type = USER_GROUP_ASSIGN_MEMBER_FAIL;
    }
}
export class AssignMemberSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.customerId, payload);
        this.payload = payload;
        this.type = USER_GROUP_ASSIGN_MEMBER_SUCCESS;
    }
}
export class AssignPermission extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionUid);
        this.payload = payload;
        this.type = USER_GROUP_ASSIGN_PERMISSION;
    }
}
export class AssignPermissionFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionUid, payload.error);
        this.payload = payload;
        this.type = USER_GROUP_ASSIGN_PERMISSION_FAIL;
    }
}
export class AssignPermissionSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionUid, payload);
        this.payload = payload;
        this.type = USER_GROUP_ASSIGN_PERMISSION_SUCCESS;
    }
}
export class UpdateUserGroup extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroup.uid);
        this.payload = payload;
        this.type = UPDATE_USER_GROUP;
    }
}
export class UpdateUserGroupFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);
        this.payload = payload;
        this.type = UPDATE_USER_GROUP_FAIL;
    }
}
export class UpdateUserGroupSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = UPDATE_USER_GROUP_SUCCESS;
    }
}
export class DeleteUserGroup extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroupId);
        this.payload = payload;
        this.type = DELETE_USER_GROUP;
    }
}
export class DeleteUserGroupFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);
        this.payload = payload;
        this.type = DELETE_USER_GROUP_FAIL;
    }
}
export class DeleteUserGroupSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = DELETE_USER_GROUP_SUCCESS;
    }
}
export class UnassignMember extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.customerId);
        this.payload = payload;
        this.type = USER_GROUP_UNASSIGN_MEMBER;
    }
}
export class UnassignMemberFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.customerId, payload.error);
        this.payload = payload;
        this.type = USER_GROUP_UNASSIGN_MEMBER_FAIL;
    }
}
export class UnassignMemberSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.customerId, payload);
        this.payload = payload;
        this.type = USER_GROUP_UNASSIGN_MEMBER_SUCCESS;
    }
}
export class UnassignAllMembers extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroupId);
        this.payload = payload;
        this.type = USER_GROUP_UNASSIGN_ALL_MEMBERS;
    }
}
export class UnassignAllMembersFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);
        this.payload = payload;
        this.type = USER_GROUP_UNASSIGN_ALL_MEMBERS_FAIL;
    }
}
export class UnassignAllMembersSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(USER_GROUP_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS;
    }
}
export class UnassignPermission extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionUid);
        this.payload = payload;
        this.type = USER_GROUP_UNASSIGN_PERMISSION;
    }
}
export class UnassignPermissionFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionUid, payload.error);
        this.payload = payload;
        this.type = USER_GROUP_UNASSIGN_PERMISSION_FAIL;
    }
}
export class UnassignPermissionSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PERMISSION_ENTITIES, payload.permissionUid, payload);
        this.payload = payload;
        this.type = USER_GROUP_UNASSIGN_PERMISSION_SUCCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,