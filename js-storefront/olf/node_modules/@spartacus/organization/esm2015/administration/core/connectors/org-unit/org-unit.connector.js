import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./org-unit.adapter";
export class OrgUnitConnector {
    constructor(adapter) {
        this.adapter = adapter;
    }
    get(userId, orgUnitId) {
        return this.adapter.load(userId, orgUnitId);
    }
    create(userId, orgUnit) {
        return this.adapter.create(userId, orgUnit);
    }
    update(userId, orgUnitId, orgUnit) {
        return this.adapter.update(userId, orgUnitId, orgUnit);
    }
    getList(userId) {
        return this.adapter.loadList(userId);
    }
    getApprovalProcesses(userId) {
        return this.adapter.loadApprovalProcesses(userId);
    }
    getTree(userId) {
        return this.adapter.loadTree(userId);
    }
    getUsers(userId, orgUnitId, roleId, params) {
        return this.adapter.loadUsers(userId, orgUnitId, roleId, params);
    }
    assignRole(userId, orgCustomerId, roleId) {
        return this.adapter.assignRole(userId, orgCustomerId, roleId);
    }
    unassignRole(userId, orgCustomerId, roleId) {
        return this.adapter.unassignRole(userId, orgCustomerId, roleId);
    }
    assignApprover(userId, orgUnitId, orgCustomerId, roleId) {
        return this.adapter.assignApprover(userId, orgUnitId, orgCustomerId, roleId);
    }
    unassignApprover(userId, orgUnitId, orgCustomerId, roleId) {
        return this.adapter.unassignApprover(userId, orgUnitId, orgCustomerId, roleId);
    }
    getAddresses(userId, orgUnitId) {
        return this.adapter.loadAddresses(userId, orgUnitId);
    }
    createAddress(userId, orgUnitId, address) {
        return this.adapter.createAddress(userId, orgUnitId, address);
    }
    updateAddress(userId, orgUnitId, addressId, address) {
        return this.adapter.updateAddress(userId, orgUnitId, addressId, address);
    }
    deleteAddress(userId, orgUnitId, addressId) {
        return this.adapter.deleteAddress(userId, orgUnitId, addressId);
    }
}
OrgUnitConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrgUnitConnector, deps: [{ token: i1.OrgUnitAdapter }], target: i0.ɵɵFactoryTarget.Injectable });
OrgUnitConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrgUnitConnector, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrgUnitConnector, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.OrgUnitAdapter }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JnLXVuaXQuY29ubmVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlL2Nvbm5lY3RvcnMvb3JnLXVuaXQvb3JnLXVuaXQuY29ubmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQWdCM0MsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixZQUFzQixPQUF1QjtRQUF2QixZQUFPLEdBQVAsT0FBTyxDQUFnQjtJQUFHLENBQUM7SUFFakQsR0FBRyxDQUFDLE1BQWMsRUFBRSxTQUFpQjtRQUNuQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQWMsRUFBRSxPQUFnQjtRQUNyQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsTUFBTSxDQUNKLE1BQWMsRUFDZCxTQUFpQixFQUNqQixPQUFnQjtRQUVoQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELE9BQU8sQ0FBQyxNQUFjO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELG9CQUFvQixDQUFDLE1BQWM7UUFDakMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxPQUFPLENBQUMsTUFBYztRQUNwQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxRQUFRLENBQ04sTUFBYyxFQUNkLFNBQWlCLEVBQ2pCLE1BQWMsRUFDZCxNQUFxQjtRQUVyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxVQUFVLENBQ1IsTUFBYyxFQUNkLGFBQXFCLEVBQ3JCLE1BQWM7UUFFZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELFlBQVksQ0FDVixNQUFjLEVBQ2QsYUFBcUIsRUFDckIsTUFBYztRQUVkLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQsY0FBYyxDQUNaLE1BQWMsRUFDZCxTQUFpQixFQUNqQixhQUFxQixFQUNyQixNQUFjO1FBRWQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FDaEMsTUFBTSxFQUNOLFNBQVMsRUFDVCxhQUFhLEVBQ2IsTUFBTSxDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsZ0JBQWdCLENBQ2QsTUFBYyxFQUNkLFNBQWlCLEVBQ2pCLGFBQXFCLEVBQ3JCLE1BQWM7UUFFZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQ2xDLE1BQU0sRUFDTixTQUFTLEVBQ1QsYUFBYSxFQUNiLE1BQU0sQ0FDUCxDQUFDO0lBQ0osQ0FBQztJQUVELFlBQVksQ0FDVixNQUFjLEVBQ2QsU0FBaUI7UUFFakIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELGFBQWEsQ0FDWCxNQUFjLEVBQ2QsU0FBaUIsRUFDakIsT0FBZ0I7UUFFaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxhQUFhLENBQ1gsTUFBYyxFQUNkLFNBQWlCLEVBQ2pCLFNBQWlCLEVBQ2pCLE9BQWdCO1FBRWhCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELGFBQWEsQ0FDWCxNQUFjLEVBQ2QsU0FBaUIsRUFDakIsU0FBaUI7UUFFakIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7OzZHQWxIVSxnQkFBZ0I7aUhBQWhCLGdCQUFnQixjQUZmLE1BQU07MkZBRVAsZ0JBQWdCO2tCQUg1QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEFkZHJlc3MsXG4gIEIyQkFwcHJvdmFsUHJvY2VzcyxcbiAgQjJCVW5pdCxcbiAgQjJCVXNlcixcbiAgRW50aXRpZXNNb2RlbCxcbiAgU2VhcmNoQ29uZmlnLFxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQjJCVW5pdE5vZGUgfSBmcm9tICcuLi8uLi9tb2RlbC91bml0LW5vZGUubW9kZWwnO1xuaW1wb3J0IHsgT3JnVW5pdEFkYXB0ZXIgfSBmcm9tICcuL29yZy11bml0LmFkYXB0ZXInO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgT3JnVW5pdENvbm5lY3RvciB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBhZGFwdGVyOiBPcmdVbml0QWRhcHRlcikge31cblxuICBnZXQodXNlcklkOiBzdHJpbmcsIG9yZ1VuaXRJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCMkJVbml0PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkKHVzZXJJZCwgb3JnVW5pdElkKTtcbiAgfVxuXG4gIGNyZWF0ZSh1c2VySWQ6IHN0cmluZywgb3JnVW5pdDogQjJCVW5pdCk6IE9ic2VydmFibGU8QjJCVW5pdD4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuY3JlYXRlKHVzZXJJZCwgb3JnVW5pdCk7XG4gIH1cblxuICB1cGRhdGUoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnVW5pdElkOiBzdHJpbmcsXG4gICAgb3JnVW5pdDogQjJCVW5pdFxuICApOiBPYnNlcnZhYmxlPEIyQlVuaXQ+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLnVwZGF0ZSh1c2VySWQsIG9yZ1VuaXRJZCwgb3JnVW5pdCk7XG4gIH1cblxuICBnZXRMaXN0KHVzZXJJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCMkJVbml0Tm9kZVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkTGlzdCh1c2VySWQpO1xuICB9XG5cbiAgZ2V0QXBwcm92YWxQcm9jZXNzZXModXNlcklkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEIyQkFwcHJvdmFsUHJvY2Vzc1tdPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkQXBwcm92YWxQcm9jZXNzZXModXNlcklkKTtcbiAgfVxuXG4gIGdldFRyZWUodXNlcklkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEIyQlVuaXROb2RlPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkVHJlZSh1c2VySWQpO1xuICB9XG5cbiAgZ2V0VXNlcnMoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnVW5pdElkOiBzdHJpbmcsXG4gICAgcm9sZUlkOiBzdHJpbmcsXG4gICAgcGFyYW1zPzogU2VhcmNoQ29uZmlnXG4gICk6IE9ic2VydmFibGU8RW50aXRpZXNNb2RlbDxCMkJVc2VyPj4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIubG9hZFVzZXJzKHVzZXJJZCwgb3JnVW5pdElkLCByb2xlSWQsIHBhcmFtcyk7XG4gIH1cblxuICBhc3NpZ25Sb2xlKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIG9yZ0N1c3RvbWVySWQ6IHN0cmluZyxcbiAgICByb2xlSWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuYXNzaWduUm9sZSh1c2VySWQsIG9yZ0N1c3RvbWVySWQsIHJvbGVJZCk7XG4gIH1cblxuICB1bmFzc2lnblJvbGUoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnQ3VzdG9tZXJJZDogc3RyaW5nLFxuICAgIHJvbGVJZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci51bmFzc2lnblJvbGUodXNlcklkLCBvcmdDdXN0b21lcklkLCByb2xlSWQpO1xuICB9XG5cbiAgYXNzaWduQXBwcm92ZXIoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnVW5pdElkOiBzdHJpbmcsXG4gICAgb3JnQ3VzdG9tZXJJZDogc3RyaW5nLFxuICAgIHJvbGVJZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5hc3NpZ25BcHByb3ZlcihcbiAgICAgIHVzZXJJZCxcbiAgICAgIG9yZ1VuaXRJZCxcbiAgICAgIG9yZ0N1c3RvbWVySWQsXG4gICAgICByb2xlSWRcbiAgICApO1xuICB9XG5cbiAgdW5hc3NpZ25BcHByb3ZlcihcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBvcmdVbml0SWQ6IHN0cmluZyxcbiAgICBvcmdDdXN0b21lcklkOiBzdHJpbmcsXG4gICAgcm9sZUlkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLnVuYXNzaWduQXBwcm92ZXIoXG4gICAgICB1c2VySWQsXG4gICAgICBvcmdVbml0SWQsXG4gICAgICBvcmdDdXN0b21lcklkLFxuICAgICAgcm9sZUlkXG4gICAgKTtcbiAgfVxuXG4gIGdldEFkZHJlc3NlcyhcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBvcmdVbml0SWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPEVudGl0aWVzTW9kZWw8QWRkcmVzcz4+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmxvYWRBZGRyZXNzZXModXNlcklkLCBvcmdVbml0SWQpO1xuICB9XG5cbiAgY3JlYXRlQWRkcmVzcyhcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBvcmdVbml0SWQ6IHN0cmluZyxcbiAgICBhZGRyZXNzOiBBZGRyZXNzXG4gICk6IE9ic2VydmFibGU8QWRkcmVzcz4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuY3JlYXRlQWRkcmVzcyh1c2VySWQsIG9yZ1VuaXRJZCwgYWRkcmVzcyk7XG4gIH1cblxuICB1cGRhdGVBZGRyZXNzKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIG9yZ1VuaXRJZDogc3RyaW5nLFxuICAgIGFkZHJlc3NJZDogc3RyaW5nLFxuICAgIGFkZHJlc3M6IEFkZHJlc3NcbiAgKTogT2JzZXJ2YWJsZTxBZGRyZXNzPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci51cGRhdGVBZGRyZXNzKHVzZXJJZCwgb3JnVW5pdElkLCBhZGRyZXNzSWQsIGFkZHJlc3MpO1xuICB9XG5cbiAgZGVsZXRlQWRkcmVzcyhcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBvcmdVbml0SWQ6IHN0cmluZyxcbiAgICBhZGRyZXNzSWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuZGVsZXRlQWRkcmVzcyh1c2VySWQsIG9yZ1VuaXRJZCwgYWRkcmVzc0lkKTtcbiAgfVxufVxuIl19