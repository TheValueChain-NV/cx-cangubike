import { StateUtils, } from '@spartacus/core';
import { ADDRESS_ENTITIES, ADDRESS_LIST, B2B_USER_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES, ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_ASSIGNED_USERS, ORG_UNIT_ENTITIES, ORG_UNIT_NODES, ORG_UNIT_NODE_LIST, ORG_UNIT_TREE, ORG_UNIT_TREE_ENTITY, } from '../organization-state';
export const LOAD_ORG_UNIT = '[B2BUnit] Load B2BUnit Data';
export const LOAD_ORG_UNIT_FAIL = '[B2BUnit] Load B2BUnit Data Fail';
export const LOAD_ORG_UNIT_SUCCESS = '[B2BUnit] Load B2BUnit Data Success';
export const LOAD_UNIT_NODE = '[B2BUnitNode] Load B2BUnitNode Data';
export const LOAD_UNIT_NODE_FAIL = '[B2BUnitNode] Load B2BUnitNode Data Fail';
export const LOAD_UNIT_NODE_SUCCESS = '[B2BUnitNode] Load B2BUnitNode Data Success';
export const LOAD_UNIT_NODES = '[B2BUnitNode] Load B2BUnitNodes';
export const LOAD_UNIT_NODES_FAIL = '[B2BUnitNode] Load B2BUnitNodes Fail';
export const LOAD_UNIT_NODES_SUCCESS = '[B2BUnitNode] Load B2BUnitNodes Success';
export const CREATE_ORG_UNIT = '[B2BUnit] Create B2BUnitNode';
export const CREATE_ORG_UNIT_FAIL = '[B2BUnit] Create B2BUnitNode Fail';
export const CREATE_ORG_UNIT_SUCCESS = '[B2BUnit] Create B2BUnitNode Success';
export const UPDATE_ORG_UNIT = '[B2BUnit] Update B2BUnitNode';
export const UPDATE_ORG_UNIT_FAIL = '[B2BUnit] Update B2BUnitNode Fail';
export const UPDATE_ORG_UNIT_SUCCESS = '[B2BUnit] Update B2BUnitNode Success';
export const LOAD_UNIT_TREE = '[B2BUnitNode] Load Tree';
export const LOAD_UNIT_TREE_FAIL = '[B2BUnitNode] Load Tree Fail';
export const LOAD_UNIT_TREE_SUCCESS = '[B2BUnitNode] Load Tree Success';
export const LOAD_APPROVAL_PROCESSES = '[B2BApprovalProcess] Load Approval Processes';
export const LOAD_APPROVAL_PROCESSES_FAIL = '[B2BApprovalProcess] Load Approval Processes Fail';
export const LOAD_APPROVAL_PROCESSES_SUCCESS = '[B2BApprovalProcess] Load Approval Processes Success';
export const LOAD_ASSIGNED_USERS = '[B2BUnit] Load Users';
export const LOAD_ASSIGNED_USERS_SUCCESS = '[B2BUnit] Load Users success';
export const LOAD_ASSIGNED_USERS_FAIL = '[B2BUnit] Load Users fail';
export const ASSIGN_ROLE = '[B2BUnit] Assign Role';
export const ASSIGN_ROLE_SUCCESS = '[B2BUnit] Assign Role success';
export const ASSIGN_ROLE_FAIL = '[B2BUnit] Assign Role fail';
export const UNASSIGN_ROLE = '[B2BUnit] Unassign Role';
export const UNASSIGN_ROLE_SUCCESS = '[B2BUnit] Unassign Role success';
export const UNASSIGN_ROLE_FAIL = '[B2BUnit] Unassign Role fail';
export const ASSIGN_APPROVER = '[B2BUnit] Assign Approver';
export const ASSIGN_APPROVER_SUCCESS = '[B2BUnit] Assign Approver success';
export const ASSIGN_APPROVER_FAIL = '[B2BUnit] Assign Approver fail';
export const UNASSIGN_APPROVER = '[B2BUnit] Unassign Approver';
export const UNASSIGN_APPROVER_SUCCESS = '[B2BUnit] Unassign Approver success';
export const UNASSIGN_APPROVER_FAIL = '[B2BUnit] Unassign Approver fail';
export const CREATE_ADDRESS = '[B2BUnit] Create address';
export const CREATE_ADDRESS_SUCCESS = '[B2BUnit] Create address success';
export const CREATE_ADDRESS_FAIL = '[B2BUnit] Create address fail';
export const UPDATE_ADDRESS = '[B2BUnit] Update address';
export const UPDATE_ADDRESS_SUCCESS = '[B2BUnit] Update address success';
export const UPDATE_ADDRESS_FAIL = '[B2BUnit] Update address fail';
export const DELETE_ADDRESS = '[B2BUnit] Delete address';
export const DELETE_ADDRESS_SUCCESS = '[B2BUnit] Delete address success';
export const DELETE_ADDRESS_FAIL = '[B2BUnit] Delete address fail';
export const LOAD_ADDRESS_SUCCESS = '[B2BUnit] Load address success';
export const LOAD_ADDRESSES = '[B2BUnit] Load addresses';
export const LOAD_ADDRESSES_SUCCESS = '[B2BUnit] Load addresses success';
export const LOAD_ADDRESSES_FAIL = '[B2BUnit] Load addresses fail';
export const CLEAR_ASSIGNED_USERS = '[B2BUnit] Clear Assigned Users';
export class LoadOrgUnit extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.orgUnitId);
        this.payload = payload;
        this.type = LOAD_ORG_UNIT;
    }
}
export class LoadOrgUnitFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.orgUnitId, payload.error);
        this.payload = payload;
        this.type = LOAD_ORG_UNIT_FAIL;
    }
}
export class LoadOrgUnitSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, Array.isArray(payload)
            ? payload.map((orgUnit) => orgUnit === null || orgUnit === void 0 ? void 0 : orgUnit.uid)
            : payload === null || payload === void 0 ? void 0 : payload.uid);
        this.payload = payload;
        this.type = LOAD_ORG_UNIT_SUCCESS;
    }
}
export class LoadOrgUnitNodes extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_NODE_LIST, ORG_UNIT_NODES);
        this.payload = payload;
        this.type = LOAD_UNIT_NODES;
    }
}
export class LoadOrgUnitNodesFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_NODE_LIST, ORG_UNIT_NODES, payload.error);
        this.payload = payload;
        this.type = LOAD_UNIT_NODES_FAIL;
    }
}
export class LoadOrgUnitNodesSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_NODE_LIST, ORG_UNIT_NODES);
        this.payload = payload;
        this.type = LOAD_UNIT_NODES_SUCCESS;
    }
}
export class CreateUnit extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.unit.uid);
        this.payload = payload;
        this.type = CREATE_ORG_UNIT;
    }
}
export class CreateUnitFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.unitCode, payload.error);
        this.payload = payload;
        this.type = CREATE_ORG_UNIT_FAIL;
    }
}
export class CreateUnitSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = CREATE_ORG_UNIT_SUCCESS;
    }
}
export class UpdateUnit extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.unit.uid);
        this.payload = payload;
        this.type = UPDATE_ORG_UNIT;
    }
}
export class UpdateUnitFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.unitCode, payload.error);
        this.payload = payload;
        this.type = UPDATE_ORG_UNIT_FAIL;
    }
}
export class UpdateUnitSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = UPDATE_ORG_UNIT_SUCCESS;
    }
}
export class LoadTree extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE);
        this.payload = payload;
        this.type = LOAD_UNIT_TREE;
    }
}
export class LoadTreeFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE, payload.error);
        this.payload = payload;
        this.type = LOAD_UNIT_TREE_FAIL;
    }
}
export class LoadTreeSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE);
        this.payload = payload;
        this.type = LOAD_UNIT_TREE_SUCCESS;
    }
}
export class LoadApprovalProcesses extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES);
        this.payload = payload;
        this.type = LOAD_APPROVAL_PROCESSES;
    }
}
export class LoadApprovalProcessesFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES, payload.error);
        this.payload = payload;
        this.type = LOAD_APPROVAL_PROCESSES_FAIL;
    }
}
export class LoadApprovalProcessesSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES);
        this.payload = payload;
        this.type = LOAD_APPROVAL_PROCESSES_SUCCESS;
    }
}
export class LoadAssignedUsers extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ORG_UNIT_ASSIGNED_USERS, StateUtils.serializeSearchConfig(payload.params, `${payload.orgUnitId},${payload.roleId}`));
        this.payload = payload;
        this.type = LOAD_ASSIGNED_USERS;
    }
}
export class ClearAssignedUsers extends StateUtils.EntityRemoveAction {
    constructor(payload) {
        super(ORG_UNIT_ASSIGNED_USERS, StateUtils.serializeSearchConfig(payload.params, `${payload.orgUnitId},${payload.roleId}`));
        this.payload = payload;
        this.type = CLEAR_ASSIGNED_USERS;
    }
}
export class LoadAssignedUsersFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ORG_UNIT_ASSIGNED_USERS, StateUtils.serializeSearchConfig(payload.params, `${payload.orgUnitId},${payload.roleId}`), payload.error);
        this.payload = payload;
        this.type = LOAD_ASSIGNED_USERS_FAIL;
    }
}
export class LoadAssignedUsersSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ORG_UNIT_ASSIGNED_USERS, StateUtils.serializeSearchConfig(payload.params, `${payload.orgUnitId},${payload.roleId}`));
        this.payload = payload;
        this.type = LOAD_ASSIGNED_USERS_SUCCESS;
    }
}
export class AssignRole extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId);
        this.payload = payload;
        this.type = ASSIGN_ROLE;
    }
}
export class AssignRoleFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);
        this.payload = payload;
        this.type = ASSIGN_ROLE_FAIL;
    }
}
export class AssignRoleSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = ASSIGN_ROLE_SUCCESS;
    }
}
export class UnassignRole extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId);
        this.payload = payload;
        this.type = UNASSIGN_ROLE;
    }
}
export class UnassignRoleFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);
        this.payload = payload;
        this.type = UNASSIGN_ROLE_FAIL;
    }
}
export class UnassignRoleSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = UNASSIGN_ROLE_SUCCESS;
    }
}
export class AssignApprover extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId);
        this.payload = payload;
        this.type = ASSIGN_APPROVER;
    }
}
export class AssignApproverFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);
        this.payload = payload;
        this.type = ASSIGN_APPROVER_FAIL;
    }
}
export class AssignApproverSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = ASSIGN_APPROVER_SUCCESS;
    }
}
export class UnassignApprover extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId);
        this.payload = payload;
        this.type = UNASSIGN_APPROVER;
    }
}
export class UnassignApproverFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);
        this.payload = payload;
        this.type = UNASSIGN_APPROVER_FAIL;
    }
}
export class UnassignApproverSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(B2B_USER_ENTITIES, payload.uid, payload);
        this.payload = payload;
        this.type = UNASSIGN_APPROVER_SUCCESS;
    }
}
export class CreateAddress extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.address.id);
        this.payload = payload;
        this.type = CREATE_ADDRESS;
    }
}
export class CreateAddressFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.addressId, payload.error);
        this.payload = payload;
        this.type = CREATE_ADDRESS_FAIL;
    }
}
export class CreateAddressSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.id, payload);
        this.payload = payload;
        this.type = CREATE_ADDRESS_SUCCESS;
    }
}
export class UpdateAddress extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.address.id);
        this.payload = payload;
        this.type = UPDATE_ADDRESS;
    }
}
export class UpdateAddressFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.addressId, payload.error);
        this.payload = payload;
        this.type = UPDATE_ADDRESS_FAIL;
    }
}
export class UpdateAddressSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.id, payload);
        this.payload = payload;
        this.type = UPDATE_ADDRESS_SUCCESS;
    }
}
export class DeleteAddress extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.addressId);
        this.payload = payload;
        this.type = DELETE_ADDRESS;
    }
}
export class DeleteAddressFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.addressId, payload.error);
        this.payload = payload;
        this.type = DELETE_ADDRESS_FAIL;
    }
}
export class DeleteAddressSuccess extends StateUtils.EntityRemoveAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, payload.id);
        this.payload = payload;
        this.type = DELETE_ADDRESS_SUCCESS;
    }
}
export class LoadAddressSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ADDRESS_ENTITIES, Array.isArray(payload)
            ? payload.map((address) => address === null || address === void 0 ? void 0 : address.id)
            : payload === null || payload === void 0 ? void 0 : payload.id);
        this.payload = payload;
        this.type = LOAD_ADDRESS_SUCCESS;
    }
}
export class LoadAddresses extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(ADDRESS_LIST, payload.orgUnitId);
        this.payload = payload;
        this.type = LOAD_ADDRESSES;
    }
}
export class LoadAddressesFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(ADDRESS_LIST, payload.orgUnitId, payload.error);
        this.payload = payload;
        this.type = LOAD_ADDRESSES_FAIL;
    }
}
export class LoadAddressesSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(ADDRESS_LIST, payload.orgUnitId);
        this.payload = payload;
        this.type = LOAD_ADDRESSES_SUCCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JnLXVuaXQuYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlL3N0b3JlL2FjdGlvbnMvb3JnLXVuaXQuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFNTCxVQUFVLEdBQ1gsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLFlBQVksRUFDWixpQkFBaUIsRUFDakIsMkJBQTJCLEVBQzNCLG9DQUFvQyxFQUNwQyx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLGNBQWMsRUFDZCxrQkFBa0IsRUFDbEIsYUFBYSxFQUNiLG9CQUFvQixHQUNyQixNQUFNLHVCQUF1QixDQUFDO0FBRS9CLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxrQ0FBa0MsQ0FBQztBQUNyRSxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxxQ0FBcUMsQ0FBQztBQUUzRSxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcscUNBQXFDLENBQUM7QUFDcEUsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsMENBQTBDLENBQUM7QUFDOUUsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQ2pDLDZDQUE2QyxDQUFDO0FBRWhELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxpQ0FBaUMsQ0FBQztBQUNqRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxzQ0FBc0MsQ0FBQztBQUMzRSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FDbEMseUNBQXlDLENBQUM7QUFFNUMsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLDhCQUE4QixDQUFDO0FBQzlELE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLG1DQUFtQyxDQUFDO0FBQ3hFLE1B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QUFtQixPQUE4QztRQUMvRCxLQUFLLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUR0QixZQUFPLEdBQVAsT0FBTyxDQUF1QztRQUR4RCxTQUFJLEdBQUcsY0FBYyxDQUFDO0lBRy9CLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRWhFLFlBQW1CLE9BQTBDO1FBQzNELEtBQUssQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFEckMsWUFBTyxHQUFQLE9BQU8sQ0FBbUM7UUFEcEQsU0FBSSxHQUFHLG1CQUFtQixDQUFDO0lBR3BDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxVQUFVLENBQUMsbUJBQW1CO0lBRXRFLFlBQ1MsT0FHTjtRQUVELEtBQUssQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBTGhDLFlBQU8sR0FBUCxPQUFPLENBR2I7UUFMTSxTQUFJLEdBQUcsc0JBQXNCLENBQUM7SUFRdkMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWRkcmVzcyxcbiAgQjJCQXBwcm92YWxQcm9jZXNzLFxuICBCMkJVbml0LFxuICBMaXN0TW9kZWwsXG4gIFNlYXJjaENvbmZpZyxcbiAgU3RhdGVVdGlscyxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IEIyQlVuaXROb2RlIH0gZnJvbSAnLi4vLi4vbW9kZWwvdW5pdC1ub2RlLm1vZGVsJztcbmltcG9ydCB7XG4gIEFERFJFU1NfRU5USVRJRVMsXG4gIEFERFJFU1NfTElTVCxcbiAgQjJCX1VTRVJfRU5USVRJRVMsXG4gIE9SR19VTklUX0FQUFJPVkFMX1BST0NFU1NFUyxcbiAgT1JHX1VOSVRfQVBQUk9WQUxfUFJPQ0VTU0VTX0VOVElUSUVTLFxuICBPUkdfVU5JVF9BU1NJR05FRF9VU0VSUyxcbiAgT1JHX1VOSVRfRU5USVRJRVMsXG4gIE9SR19VTklUX05PREVTLFxuICBPUkdfVU5JVF9OT0RFX0xJU1QsXG4gIE9SR19VTklUX1RSRUUsXG4gIE9SR19VTklUX1RSRUVfRU5USVRZLFxufSBmcm9tICcuLi9vcmdhbml6YXRpb24tc3RhdGUnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9PUkdfVU5JVCA9ICdbQjJCVW5pdF0gTG9hZCBCMkJVbml0IERhdGEnO1xuZXhwb3J0IGNvbnN0IExPQURfT1JHX1VOSVRfRkFJTCA9ICdbQjJCVW5pdF0gTG9hZCBCMkJVbml0IERhdGEgRmFpbCc7XG5leHBvcnQgY29uc3QgTE9BRF9PUkdfVU5JVF9TVUNDRVNTID0gJ1tCMkJVbml0XSBMb2FkIEIyQlVuaXQgRGF0YSBTdWNjZXNzJztcblxuZXhwb3J0IGNvbnN0IExPQURfVU5JVF9OT0RFID0gJ1tCMkJVbml0Tm9kZV0gTG9hZCBCMkJVbml0Tm9kZSBEYXRhJztcbmV4cG9ydCBjb25zdCBMT0FEX1VOSVRfTk9ERV9GQUlMID0gJ1tCMkJVbml0Tm9kZV0gTG9hZCBCMkJVbml0Tm9kZSBEYXRhIEZhaWwnO1xuZXhwb3J0IGNvbnN0IExPQURfVU5JVF9OT0RFX1NVQ0NFU1MgPVxuICAnW0IyQlVuaXROb2RlXSBMb2FkIEIyQlVuaXROb2RlIERhdGEgU3VjY2Vzcyc7XG5cbmV4cG9ydCBjb25zdCBMT0FEX1VOSVRfTk9ERVMgPSAnW0IyQlVuaXROb2RlXSBMb2FkIEIyQlVuaXROb2Rlcyc7XG5leHBvcnQgY29uc3QgTE9BRF9VTklUX05PREVTX0ZBSUwgPSAnW0IyQlVuaXROb2RlXSBMb2FkIEIyQlVuaXROb2RlcyBGYWlsJztcbmV4cG9ydCBjb25zdCBMT0FEX1VOSVRfTk9ERVNfU1VDQ0VTUyA9XG4gICdbQjJCVW5pdE5vZGVdIExvYWQgQjJCVW5pdE5vZGVzIFN1Y2Nlc3MnO1xuXG5leHBvcnQgY29uc3QgQ1JFQVRFX09SR19VTklUID0gJ1tCMkJVbml0XSBDcmVhdGUgQjJCVW5pdE5vZGUnO1xuZXhwb3J0IGNvbnN0IENSRUFURV9PUkdfVU5JVF9GQUlMID0gJ1tCMkJVbml0XSBDcmVhdGUgQjJCVW5pdE5vZGUgRmFpbCc7XG5leHBvcnQgY29uc3QgQ1JFQVRFX09SR19VTklUX1NVQ0NFU1MgPSAnW0IyQlVuaXRdIENyZWF0ZSBCMkJVbml0Tm9kZSBTdWNjZXNzJztcblxuZXhwb3J0IGNvbnN0IFVQREFURV9PUkdfVU5JVCA9ICdbQjJCVW5pdF0gVXBkYXRlIEIyQlVuaXROb2RlJztcbmV4cG9ydCBjb25zdCBVUERBVEVfT1JHX1VOSVRfRkFJTCA9ICdbQjJCVW5pdF0gVXBkYXRlIEIyQlVuaXROb2RlIEZhaWwnO1xuZXhwb3J0IGNvbnN0IFVQREFURV9PUkdfVU5JVF9TVUNDRVNTID0gJ1tCMkJVbml0XSBVcGRhdGUgQjJCVW5pdE5vZGUgU3VjY2Vzcyc7XG5cbmV4cG9ydCBjb25zdCBMT0FEX1VOSVRfVFJFRSA9ICdbQjJCVW5pdE5vZGVdIExvYWQgVHJlZSc7XG5leHBvcnQgY29uc3QgTE9BRF9VTklUX1RSRUVfRkFJTCA9ICdbQjJCVW5pdE5vZGVdIExvYWQgVHJlZSBGYWlsJztcbmV4cG9ydCBjb25zdCBMT0FEX1VOSVRfVFJFRV9TVUNDRVNTID0gJ1tCMkJVbml0Tm9kZV0gTG9hZCBUcmVlIFN1Y2Nlc3MnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9BUFBST1ZBTF9QUk9DRVNTRVMgPVxuICAnW0IyQkFwcHJvdmFsUHJvY2Vzc10gTG9hZCBBcHByb3ZhbCBQcm9jZXNzZXMnO1xuZXhwb3J0IGNvbnN0IExPQURfQVBQUk9WQUxfUFJPQ0VTU0VTX0ZBSUwgPVxuICAnW0IyQkFwcHJvdmFsUHJvY2Vzc10gTG9hZCBBcHByb3ZhbCBQcm9jZXNzZXMgRmFpbCc7XG5leHBvcnQgY29uc3QgTE9BRF9BUFBST1ZBTF9QUk9DRVNTRVNfU1VDQ0VTUyA9XG4gICdbQjJCQXBwcm92YWxQcm9jZXNzXSBMb2FkIEFwcHJvdmFsIFByb2Nlc3NlcyBTdWNjZXNzJztcblxuZXhwb3J0IGNvbnN0IExPQURfQVNTSUdORURfVVNFUlMgPSAnW0IyQlVuaXRdIExvYWQgVXNlcnMnO1xuZXhwb3J0IGNvbnN0IExPQURfQVNTSUdORURfVVNFUlNfU1VDQ0VTUyA9ICdbQjJCVW5pdF0gTG9hZCBVc2VycyBzdWNjZXNzJztcbmV4cG9ydCBjb25zdCBMT0FEX0FTU0lHTkVEX1VTRVJTX0ZBSUwgPSAnW0IyQlVuaXRdIExvYWQgVXNlcnMgZmFpbCc7XG5cbmV4cG9ydCBjb25zdCBBU1NJR05fUk9MRSA9ICdbQjJCVW5pdF0gQXNzaWduIFJvbGUnO1xuZXhwb3J0IGNvbnN0IEFTU0lHTl9ST0xFX1NVQ0NFU1MgPSAnW0IyQlVuaXRdIEFzc2lnbiBSb2xlIHN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IEFTU0lHTl9ST0xFX0ZBSUwgPSAnW0IyQlVuaXRdIEFzc2lnbiBSb2xlIGZhaWwnO1xuXG5leHBvcnQgY29uc3QgVU5BU1NJR05fUk9MRSA9ICdbQjJCVW5pdF0gVW5hc3NpZ24gUm9sZSc7XG5leHBvcnQgY29uc3QgVU5BU1NJR05fUk9MRV9TVUNDRVNTID0gJ1tCMkJVbml0XSBVbmFzc2lnbiBSb2xlIHN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IFVOQVNTSUdOX1JPTEVfRkFJTCA9ICdbQjJCVW5pdF0gVW5hc3NpZ24gUm9sZSBmYWlsJztcblxuZXhwb3J0IGNvbnN0IEFTU0lHTl9BUFBST1ZFUiA9ICdbQjJCVW5pdF0gQXNzaWduIEFwcHJvdmVyJztcbmV4cG9ydCBjb25zdCBBU1NJR05fQVBQUk9WRVJfU1VDQ0VTUyA9ICdbQjJCVW5pdF0gQXNzaWduIEFwcHJvdmVyIHN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IEFTU0lHTl9BUFBST1ZFUl9GQUlMID0gJ1tCMkJVbml0XSBBc3NpZ24gQXBwcm92ZXIgZmFpbCc7XG5cbmV4cG9ydCBjb25zdCBVTkFTU0lHTl9BUFBST1ZFUiA9ICdbQjJCVW5pdF0gVW5hc3NpZ24gQXBwcm92ZXInO1xuZXhwb3J0IGNvbnN0IFVOQVNTSUdOX0FQUFJPVkVSX1NVQ0NFU1MgPSAnW0IyQlVuaXRdIFVuYXNzaWduIEFwcHJvdmVyIHN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IFVOQVNTSUdOX0FQUFJPVkVSX0ZBSUwgPSAnW0IyQlVuaXRdIFVuYXNzaWduIEFwcHJvdmVyIGZhaWwnO1xuXG5leHBvcnQgY29uc3QgQ1JFQVRFX0FERFJFU1MgPSAnW0IyQlVuaXRdIENyZWF0ZSBhZGRyZXNzJztcbmV4cG9ydCBjb25zdCBDUkVBVEVfQUREUkVTU19TVUNDRVNTID0gJ1tCMkJVbml0XSBDcmVhdGUgYWRkcmVzcyBzdWNjZXNzJztcbmV4cG9ydCBjb25zdCBDUkVBVEVfQUREUkVTU19GQUlMID0gJ1tCMkJVbml0XSBDcmVhdGUgYWRkcmVzcyBmYWlsJztcblxuZXhwb3J0IGNvbnN0IFVQREFURV9BRERSRVNTID0gJ1tCMkJVbml0XSBVcGRhdGUgYWRkcmVzcyc7XG5leHBvcnQgY29uc3QgVVBEQVRFX0FERFJFU1NfU1VDQ0VTUyA9ICdbQjJCVW5pdF0gVXBkYXRlIGFkZHJlc3Mgc3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgVVBEQVRFX0FERFJFU1NfRkFJTCA9ICdbQjJCVW5pdF0gVXBkYXRlIGFkZHJlc3MgZmFpbCc7XG5cbmV4cG9ydCBjb25zdCBERUxFVEVfQUREUkVTUyA9ICdbQjJCVW5pdF0gRGVsZXRlIGFkZHJlc3MnO1xuZXhwb3J0IGNvbnN0IERFTEVURV9BRERSRVNTX1NVQ0NFU1MgPSAnW0IyQlVuaXRdIERlbGV0ZSBhZGRyZXNzIHN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IERFTEVURV9BRERSRVNTX0ZBSUwgPSAnW0IyQlVuaXRdIERlbGV0ZSBhZGRyZXNzIGZhaWwnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9BRERSRVNTX1NVQ0NFU1MgPSAnW0IyQlVuaXRdIExvYWQgYWRkcmVzcyBzdWNjZXNzJztcblxuZXhwb3J0IGNvbnN0IExPQURfQUREUkVTU0VTID0gJ1tCMkJVbml0XSBMb2FkIGFkZHJlc3Nlcyc7XG5leHBvcnQgY29uc3QgTE9BRF9BRERSRVNTRVNfU1VDQ0VTUyA9ICdbQjJCVW5pdF0gTG9hZCBhZGRyZXNzZXMgc3VjY2Vzcyc7XG5leHBvcnQgY29uc3QgTE9BRF9BRERSRVNTRVNfRkFJTCA9ICdbQjJCVW5pdF0gTG9hZCBhZGRyZXNzZXMgZmFpbCc7XG5cbmV4cG9ydCBjb25zdCBDTEVBUl9BU1NJR05FRF9VU0VSUyA9ICdbQjJCVW5pdF0gQ2xlYXIgQXNzaWduZWQgVXNlcnMnO1xuXG5leHBvcnQgY2xhc3MgTG9hZE9yZ1VuaXQgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9PUkdfVU5JVDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgdXNlcklkOiBzdHJpbmc7IG9yZ1VuaXRJZDogc3RyaW5nIH0pIHtcbiAgICBzdXBlcihPUkdfVU5JVF9FTlRJVElFUywgcGF5bG9hZC5vcmdVbml0SWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkT3JnVW5pdEZhaWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9PUkdfVU5JVF9GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogeyBvcmdVbml0SWQ6IHN0cmluZzsgZXJyb3I6IGFueSB9KSB7XG4gICAgc3VwZXIoT1JHX1VOSVRfRU5USVRJRVMsIHBheWxvYWQub3JnVW5pdElkLCBwYXlsb2FkLmVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZE9yZ1VuaXRTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfT1JHX1VOSVRfU1VDQ0VTUztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogQjJCVW5pdCB8IEIyQlVuaXRbXSkge1xuICAgIHN1cGVyKFxuICAgICAgT1JHX1VOSVRfRU5USVRJRVMsXG4gICAgICBBcnJheS5pc0FycmF5KHBheWxvYWQpXG4gICAgICAgID8gcGF5bG9hZC5tYXAoKG9yZ1VuaXQpID0+IG9yZ1VuaXQ/LnVpZClcbiAgICAgICAgOiBwYXlsb2FkPy51aWRcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkT3JnVW5pdE5vZGVzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVU5JVF9OT0RFUztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoT1JHX1VOSVRfTk9ERV9MSVNULCBPUkdfVU5JVF9OT0RFUyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRPcmdVbml0Tm9kZXNGYWlsIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVU5JVF9OT0RFU19GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogYW55KSB7XG4gICAgc3VwZXIoT1JHX1VOSVRfTk9ERV9MSVNULCBPUkdfVU5JVF9OT0RFUywgcGF5bG9hZC5lcnJvcik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRPcmdVbml0Tm9kZXNTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVU5JVF9OT0RFU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogQjJCVW5pdE5vZGVbXSkge1xuICAgIHN1cGVyKE9SR19VTklUX05PREVfTElTVCwgT1JHX1VOSVRfTk9ERVMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDcmVhdGVVbml0IGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IENSRUFURV9PUkdfVU5JVDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgdXNlcklkOiBzdHJpbmc7IHVuaXQ6IEIyQlVuaXQgfSkge1xuICAgIHN1cGVyKE9SR19VTklUX0VOVElUSUVTLCBwYXlsb2FkLnVuaXQudWlkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ3JlYXRlVW5pdEZhaWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ1JFQVRFX09SR19VTklUX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IHVuaXRDb2RlOiBzdHJpbmc7IGVycm9yOiBhbnkgfSkge1xuICAgIHN1cGVyKE9SR19VTklUX0VOVElUSUVTLCBwYXlsb2FkLnVuaXRDb2RlLCBwYXlsb2FkLmVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ3JlYXRlVW5pdFN1Y2Nlc3MgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ1JFQVRFX09SR19VTklUX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBCMkJVbml0KSB7XG4gICAgc3VwZXIoT1JHX1VOSVRfRU5USVRJRVMsIHBheWxvYWQudWlkLCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlVW5pdCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfT1JHX1VOSVQ7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7IHVzZXJJZDogc3RyaW5nOyB1bml0Q29kZTogc3RyaW5nOyB1bml0OiBCMkJVbml0IH1cbiAgKSB7XG4gICAgc3VwZXIoT1JHX1VOSVRfRU5USVRJRVMsIHBheWxvYWQudW5pdC51aWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVVbml0RmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfT1JHX1VOSVRfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgdW5pdENvZGU6IHN0cmluZzsgZXJyb3I6IGFueSB9KSB7XG4gICAgc3VwZXIoT1JHX1VOSVRfRU5USVRJRVMsIHBheWxvYWQudW5pdENvZGUsIHBheWxvYWQuZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVVbml0U3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfT1JHX1VOSVRfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IEIyQlVuaXQpIHtcbiAgICBzdXBlcihPUkdfVU5JVF9FTlRJVElFUywgcGF5bG9hZC51aWQsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkVHJlZSBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1VOSVRfVFJFRTtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgdXNlcklkOiBzdHJpbmcgfSkge1xuICAgIHN1cGVyKE9SR19VTklUX1RSRUVfRU5USVRZLCBPUkdfVU5JVF9UUkVFKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZFRyZWVGYWlsIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVU5JVF9UUkVFX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IGVycm9yOiBhbnkgfSkge1xuICAgIHN1cGVyKE9SR19VTklUX1RSRUVfRU5USVRZLCBPUkdfVU5JVF9UUkVFLCBwYXlsb2FkLmVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZFRyZWVTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVU5JVF9UUkVFX1NVQ0NFU1M7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IEIyQlVuaXROb2RlKSB7XG4gICAgc3VwZXIoT1JHX1VOSVRfVFJFRV9FTlRJVFksIE9SR19VTklUX1RSRUUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkQXBwcm92YWxQcm9jZXNzZXMgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9BUFBST1ZBTF9QUk9DRVNTRVM7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiB7IHVzZXJJZDogc3RyaW5nIH0pIHtcbiAgICBzdXBlcihPUkdfVU5JVF9BUFBST1ZBTF9QUk9DRVNTRVNfRU5USVRJRVMsIE9SR19VTklUX0FQUFJPVkFMX1BST0NFU1NFUyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRBcHByb3ZhbFByb2Nlc3Nlc0ZhaWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9BUFBST1ZBTF9QUk9DRVNTRVNfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgZXJyb3I6IGFueSB9KSB7XG4gICAgc3VwZXIoXG4gICAgICBPUkdfVU5JVF9BUFBST1ZBTF9QUk9DRVNTRVNfRU5USVRJRVMsXG4gICAgICBPUkdfVU5JVF9BUFBST1ZBTF9QUk9DRVNTRVMsXG4gICAgICBwYXlsb2FkLmVycm9yXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZEFwcHJvdmFsUHJvY2Vzc2VzU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0FQUFJPVkFMX1BST0NFU1NFU19TVUNDRVNTO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBCMkJBcHByb3ZhbFByb2Nlc3NbXSkge1xuICAgIHN1cGVyKE9SR19VTklUX0FQUFJPVkFMX1BST0NFU1NFU19FTlRJVElFUywgT1JHX1VOSVRfQVBQUk9WQUxfUFJPQ0VTU0VTKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZEFzc2lnbmVkVXNlcnMgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9BU1NJR05FRF9VU0VSUztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgICAgb3JnVW5pdElkOiBzdHJpbmc7XG4gICAgICByb2xlSWQ6IHN0cmluZztcbiAgICAgIHBhcmFtczogU2VhcmNoQ29uZmlnO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoXG4gICAgICBPUkdfVU5JVF9BU1NJR05FRF9VU0VSUyxcbiAgICAgIFN0YXRlVXRpbHMuc2VyaWFsaXplU2VhcmNoQ29uZmlnKFxuICAgICAgICBwYXlsb2FkLnBhcmFtcyxcbiAgICAgICAgYCR7cGF5bG9hZC5vcmdVbml0SWR9LCR7cGF5bG9hZC5yb2xlSWR9YFxuICAgICAgKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENsZWFyQXNzaWduZWRVc2VycyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5UmVtb3ZlQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IENMRUFSX0FTU0lHTkVEX1VTRVJTO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgb3JnVW5pdElkOiBzdHJpbmc7XG4gICAgICByb2xlSWQ6IHN0cmluZztcbiAgICAgIHBhcmFtczogU2VhcmNoQ29uZmlnO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoXG4gICAgICBPUkdfVU5JVF9BU1NJR05FRF9VU0VSUyxcbiAgICAgIFN0YXRlVXRpbHMuc2VyaWFsaXplU2VhcmNoQ29uZmlnKFxuICAgICAgICBwYXlsb2FkLnBhcmFtcyxcbiAgICAgICAgYCR7cGF5bG9hZC5vcmdVbml0SWR9LCR7cGF5bG9hZC5yb2xlSWR9YFxuICAgICAgKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRBc3NpZ25lZFVzZXJzRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0FTU0lHTkVEX1VTRVJTX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XG4gICAgICBvcmdVbml0SWQ6IHN0cmluZztcbiAgICAgIHJvbGVJZDogc3RyaW5nO1xuICAgICAgcGFyYW1zOiBTZWFyY2hDb25maWc7XG4gICAgICBlcnJvcjogYW55O1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoXG4gICAgICBPUkdfVU5JVF9BU1NJR05FRF9VU0VSUyxcbiAgICAgIFN0YXRlVXRpbHMuc2VyaWFsaXplU2VhcmNoQ29uZmlnKFxuICAgICAgICBwYXlsb2FkLnBhcmFtcyxcbiAgICAgICAgYCR7cGF5bG9hZC5vcmdVbml0SWR9LCR7cGF5bG9hZC5yb2xlSWR9YFxuICAgICAgKSxcbiAgICAgIHBheWxvYWQuZXJyb3JcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkQXNzaWduZWRVc2Vyc1N1Y2Nlc3MgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9BU1NJR05FRF9VU0VSU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgb3JnVW5pdElkOiBzdHJpbmc7XG4gICAgICByb2xlSWQ6IHN0cmluZztcbiAgICAgIHBhZ2U6IExpc3RNb2RlbDtcbiAgICAgIHBhcmFtczogU2VhcmNoQ29uZmlnO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoXG4gICAgICBPUkdfVU5JVF9BU1NJR05FRF9VU0VSUyxcbiAgICAgIFN0YXRlVXRpbHMuc2VyaWFsaXplU2VhcmNoQ29uZmlnKFxuICAgICAgICBwYXlsb2FkLnBhcmFtcyxcbiAgICAgICAgYCR7cGF5bG9hZC5vcmdVbml0SWR9LCR7cGF5bG9hZC5yb2xlSWR9YFxuICAgICAgKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFzc2lnblJvbGUgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQVNTSUdOX1JPTEU7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XG4gICAgICB1c2VySWQ6IHN0cmluZztcbiAgICAgIG9yZ0N1c3RvbWVySWQ6IHN0cmluZztcbiAgICAgIHJvbGVJZDogc3RyaW5nO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoQjJCX1VTRVJfRU5USVRJRVMsIHBheWxvYWQub3JnQ3VzdG9tZXJJZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFzc2lnblJvbGVGYWlsIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IEFTU0lHTl9ST0xFX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XG4gICAgICBvcmdDdXN0b21lcklkOiBzdHJpbmc7XG4gICAgICBlcnJvcjogYW55O1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoQjJCX1VTRVJfRU5USVRJRVMsIHBheWxvYWQub3JnQ3VzdG9tZXJJZCwgcGF5bG9hZC5lcnJvcik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFzc2lnblJvbGVTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IEFTU0lHTl9ST0xFX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7IHVpZDogc3RyaW5nOyByb2xlSWQ6IHN0cmluZzsgc2VsZWN0ZWQ6IGJvb2xlYW4gfVxuICApIHtcbiAgICBzdXBlcihCMkJfVVNFUl9FTlRJVElFUywgcGF5bG9hZC51aWQsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVbmFzc2lnblJvbGUgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gVU5BU1NJR05fUk9MRTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgICAgb3JnQ3VzdG9tZXJJZDogc3RyaW5nO1xuICAgICAgcm9sZUlkOiBzdHJpbmc7XG4gICAgfVxuICApIHtcbiAgICBzdXBlcihCMkJfVVNFUl9FTlRJVElFUywgcGF5bG9hZC5vcmdDdXN0b21lcklkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVW5hc3NpZ25Sb2xlRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVTkFTU0lHTl9ST0xFX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XG4gICAgICBvcmdDdXN0b21lcklkOiBzdHJpbmc7XG4gICAgICBlcnJvcjogYW55O1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoQjJCX1VTRVJfRU5USVRJRVMsIHBheWxvYWQub3JnQ3VzdG9tZXJJZCwgcGF5bG9hZC5lcnJvcik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVuYXNzaWduUm9sZVN1Y2Nlc3MgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gVU5BU1NJR05fUk9MRV9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDogeyB1aWQ6IHN0cmluZzsgcm9sZUlkOiBzdHJpbmc7IHNlbGVjdGVkOiBib29sZWFuIH1cbiAgKSB7XG4gICAgc3VwZXIoQjJCX1VTRVJfRU5USVRJRVMsIHBheWxvYWQudWlkLCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXNzaWduQXBwcm92ZXIgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQVNTSUdOX0FQUFJPVkVSO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgdXNlcklkOiBzdHJpbmc7XG4gICAgICBvcmdVbml0SWQ6IHN0cmluZztcbiAgICAgIG9yZ0N1c3RvbWVySWQ6IHN0cmluZztcbiAgICAgIHJvbGVJZDogc3RyaW5nO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoQjJCX1VTRVJfRU5USVRJRVMsIHBheWxvYWQub3JnQ3VzdG9tZXJJZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFzc2lnbkFwcHJvdmVyRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBBU1NJR05fQVBQUk9WRVJfRkFJTDtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIG9yZ0N1c3RvbWVySWQ6IHN0cmluZztcbiAgICAgIGVycm9yOiBhbnk7XG4gICAgfVxuICApIHtcbiAgICBzdXBlcihCMkJfVVNFUl9FTlRJVElFUywgcGF5bG9hZC5vcmdDdXN0b21lcklkLCBwYXlsb2FkLmVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXNzaWduQXBwcm92ZXJTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IEFTU0lHTl9BUFBST1ZFUl9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDogeyB1aWQ6IHN0cmluZzsgcm9sZUlkOiBzdHJpbmc7IHNlbGVjdGVkOiBib29sZWFuIH1cbiAgKSB7XG4gICAgc3VwZXIoQjJCX1VTRVJfRU5USVRJRVMsIHBheWxvYWQudWlkLCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVW5hc3NpZ25BcHByb3ZlciBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVTkFTU0lHTl9BUFBST1ZFUjtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgICAgb3JnVW5pdElkOiBzdHJpbmc7XG4gICAgICBvcmdDdXN0b21lcklkOiBzdHJpbmc7XG4gICAgICByb2xlSWQ6IHN0cmluZztcbiAgICB9XG4gICkge1xuICAgIHN1cGVyKEIyQl9VU0VSX0VOVElUSUVTLCBwYXlsb2FkLm9yZ0N1c3RvbWVySWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVbmFzc2lnbkFwcHJvdmVyRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVTkFTU0lHTl9BUFBST1ZFUl9GQUlMO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgb3JnQ3VzdG9tZXJJZDogc3RyaW5nO1xuICAgICAgZXJyb3I6IGFueTtcbiAgICB9XG4gICkge1xuICAgIHN1cGVyKEIyQl9VU0VSX0VOVElUSUVTLCBwYXlsb2FkLm9yZ0N1c3RvbWVySWQsIHBheWxvYWQuZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVbmFzc2lnbkFwcHJvdmVyU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVTkFTU0lHTl9BUFBST1ZFUl9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDogeyB1aWQ6IHN0cmluZzsgcm9sZUlkOiBzdHJpbmc7IHNlbGVjdGVkOiBib29sZWFuIH1cbiAgKSB7XG4gICAgc3VwZXIoQjJCX1VTRVJfRU5USVRJRVMsIHBheWxvYWQudWlkLCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ3JlYXRlQWRkcmVzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDUkVBVEVfQUREUkVTUztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHsgdXNlcklkOiBzdHJpbmc7IG9yZ1VuaXRJZDogc3RyaW5nOyBhZGRyZXNzOiBBZGRyZXNzIH1cbiAgKSB7XG4gICAgc3VwZXIoQUREUkVTU19FTlRJVElFUywgcGF5bG9hZC5hZGRyZXNzLmlkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ3JlYXRlQWRkcmVzc0ZhaWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ1JFQVRFX0FERFJFU1NfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgYWRkcmVzc0lkOiBzdHJpbmc7IGVycm9yOiBhbnkgfSkge1xuICAgIHN1cGVyKEFERFJFU1NfRU5USVRJRVMsIHBheWxvYWQuYWRkcmVzc0lkLCBwYXlsb2FkLmVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ3JlYXRlQWRkcmVzc1N1Y2Nlc3MgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ1JFQVRFX0FERFJFU1NfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IEFkZHJlc3MpIHtcbiAgICBzdXBlcihBRERSRVNTX0VOVElUSUVTLCBwYXlsb2FkLmlkLCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlQWRkcmVzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfQUREUkVTUztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgICAgb3JnVW5pdElkOiBzdHJpbmc7XG4gICAgICBhZGRyZXNzSWQ6IHN0cmluZztcbiAgICAgIGFkZHJlc3M6IEFkZHJlc3M7XG4gICAgfVxuICApIHtcbiAgICBzdXBlcihBRERSRVNTX0VOVElUSUVTLCBwYXlsb2FkLmFkZHJlc3MuaWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVBZGRyZXNzRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfQUREUkVTU19GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogeyBhZGRyZXNzSWQ6IHN0cmluZzsgZXJyb3I6IGFueSB9KSB7XG4gICAgc3VwZXIoQUREUkVTU19FTlRJVElFUywgcGF5bG9hZC5hZGRyZXNzSWQsIHBheWxvYWQuZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVBZGRyZXNzU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBVUERBVEVfQUREUkVTU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogQWRkcmVzcykge1xuICAgIHN1cGVyKEFERFJFU1NfRU5USVRJRVMsIHBheWxvYWQuaWQsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZWxldGVBZGRyZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IERFTEVURV9BRERSRVNTO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgdXNlcklkOiBzdHJpbmc7XG4gICAgICBvcmdVbml0SWQ6IHN0cmluZztcbiAgICAgIGFkZHJlc3NJZDogc3RyaW5nO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoQUREUkVTU19FTlRJVElFUywgcGF5bG9hZC5hZGRyZXNzSWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZWxldGVBZGRyZXNzRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBERUxFVEVfQUREUkVTU19GQUlMO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogeyBhZGRyZXNzSWQ6IHN0cmluZzsgZXJyb3I6IGFueSB9KSB7XG4gICAgc3VwZXIoQUREUkVTU19FTlRJVElFUywgcGF5bG9hZC5hZGRyZXNzSWQsIHBheWxvYWQuZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZWxldGVBZGRyZXNzU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5UmVtb3ZlQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IERFTEVURV9BRERSRVNTX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBBZGRyZXNzKSB7XG4gICAgc3VwZXIoQUREUkVTU19FTlRJVElFUywgcGF5bG9hZC5pZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRBZGRyZXNzU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0FERFJFU1NfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IEFkZHJlc3MgfCBBZGRyZXNzW10pIHtcbiAgICBzdXBlcihcbiAgICAgIEFERFJFU1NfRU5USVRJRVMsXG4gICAgICBBcnJheS5pc0FycmF5KHBheWxvYWQpXG4gICAgICAgID8gcGF5bG9hZC5tYXAoKGFkZHJlc3MpID0+IGFkZHJlc3M/LmlkKVxuICAgICAgICA6IHBheWxvYWQ/LmlkXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZEFkZHJlc3NlcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5TG9hZEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0FERFJFU1NFUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgdXNlcklkOiBzdHJpbmc7IG9yZ1VuaXRJZDogc3RyaW5nIH0pIHtcbiAgICBzdXBlcihBRERSRVNTX0xJU1QsIHBheWxvYWQub3JnVW5pdElkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZEFkZHJlc3Nlc0ZhaWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9BRERSRVNTRVNfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHsgb3JnVW5pdElkOiBzdHJpbmc7IGVycm9yOiBhbnkgfSkge1xuICAgIHN1cGVyKEFERFJFU1NfTElTVCwgcGF5bG9hZC5vcmdVbml0SWQsIHBheWxvYWQuZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkQWRkcmVzc2VzU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0FERFJFU1NFU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgcGFnZTogTGlzdE1vZGVsO1xuICAgICAgb3JnVW5pdElkOiBzdHJpbmc7XG4gICAgfVxuICApIHtcbiAgICBzdXBlcihBRERSRVNTX0xJU1QsIHBheWxvYWQub3JnVW5pdElkKTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBPcmdVbml0QWN0aW9uID1cbiAgfCBMb2FkT3JnVW5pdE5vZGVzXG4gIHwgTG9hZE9yZ1VuaXROb2Rlc0ZhaWxcbiAgfCBMb2FkT3JnVW5pdE5vZGVzU3VjY2Vzc1xuICB8IExvYWRPcmdVbml0XG4gIHwgTG9hZE9yZ1VuaXRGYWlsXG4gIHwgTG9hZE9yZ1VuaXRTdWNjZXNzXG4gIHwgQ3JlYXRlVW5pdFxuICB8IENyZWF0ZVVuaXRGYWlsXG4gIHwgQ3JlYXRlVW5pdFN1Y2Nlc3NcbiAgfCBVcGRhdGVVbml0XG4gIHwgVXBkYXRlVW5pdEZhaWxcbiAgfCBVcGRhdGVVbml0U3VjY2Vzc1xuICB8IExvYWRUcmVlXG4gIHwgTG9hZFRyZWVTdWNjZXNzXG4gIHwgTG9hZFRyZWVGYWlsXG4gIHwgTG9hZEFwcHJvdmFsUHJvY2Vzc2VzXG4gIHwgTG9hZEFwcHJvdmFsUHJvY2Vzc2VzU3VjY2Vzc1xuICB8IExvYWRBcHByb3ZhbFByb2Nlc3Nlc0ZhaWxcbiAgfCBBc3NpZ25Sb2xlXG4gIHwgQXNzaWduUm9sZVN1Y2Nlc3NcbiAgfCBBc3NpZ25Sb2xlRmFpbFxuICB8IFVuYXNzaWduUm9sZVxuICB8IFVuYXNzaWduUm9sZVN1Y2Nlc3NcbiAgfCBVbmFzc2lnblJvbGVGYWlsXG4gIHwgQXNzaWduQXBwcm92ZXJcbiAgfCBBc3NpZ25BcHByb3ZlclN1Y2Nlc3NcbiAgfCBBc3NpZ25BcHByb3ZlckZhaWxcbiAgfCBVbmFzc2lnbkFwcHJvdmVyXG4gIHwgVW5hc3NpZ25BcHByb3ZlclN1Y2Nlc3NcbiAgfCBVbmFzc2lnbkFwcHJvdmVyRmFpbFxuICB8IENyZWF0ZUFkZHJlc3NcbiAgfCBDcmVhdGVBZGRyZXNzU3VjY2Vzc1xuICB8IENyZWF0ZUFkZHJlc3NGYWlsXG4gIHwgVXBkYXRlQWRkcmVzc1xuICB8IFVwZGF0ZUFkZHJlc3NTdWNjZXNzXG4gIHwgVXBkYXRlQWRkcmVzc0ZhaWxcbiAgfCBEZWxldGVBZGRyZXNzXG4gIHwgRGVsZXRlQWRkcmVzc1N1Y2Nlc3NcbiAgfCBEZWxldGVBZGRyZXNzRmFpbFxuICB8IExvYWRBZGRyZXNzZXNcbiAgfCBMb2FkQWRkcmVzc2VzRmFpbFxuICB8IExvYWRBZGRyZXNzZXNTdWNjZXNzXG4gIHwgTG9hZEFkZHJlc3NTdWNjZXNzXG4gIHwgQ2xlYXJBc3NpZ25lZFVzZXJzO1xuIl19