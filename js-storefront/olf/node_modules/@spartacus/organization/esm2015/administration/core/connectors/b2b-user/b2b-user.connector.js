import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./b2b-user.adapter";
export class B2BUserConnector {
    constructor(adapter) {
        this.adapter = adapter;
    }
    get(userId, orgUnitCustomerId) {
        return this.adapter.load(userId, orgUnitCustomerId);
    }
    create(userId, orgCustomer) {
        return this.adapter.create(userId, orgCustomer);
    }
    update(userId, orgCustomerId, orgCustomer) {
        return this.adapter.update(userId, orgCustomerId, orgCustomer);
    }
    getList(userId, params) {
        return this.adapter.loadList(userId, params);
    }
    getApprovers(userId, orgUnitCustomerId, params) {
        return this.adapter.loadApprovers(userId, orgUnitCustomerId, params);
    }
    assignApprover(userId, orgCustomerId, approverId) {
        return this.adapter.assignApprover(userId, orgCustomerId, approverId);
    }
    unassignApprover(userId, orgCustomerId, approverId) {
        return this.adapter.unassignApprover(userId, orgCustomerId, approverId);
    }
    getPermissions(userId, orgUnitCustomerId, params) {
        return this.adapter.loadPermissions(userId, orgUnitCustomerId, params);
    }
    assignPermission(userId, orgCustomerId, permissionId) {
        return this.adapter.assignPermission(userId, orgCustomerId, permissionId);
    }
    unassignPermission(userId, orgCustomerId, permissionId) {
        return this.adapter.unassignPermission(userId, orgCustomerId, permissionId);
    }
    getUserGroups(userId, orgUnitCustomerId, params) {
        return this.adapter.loadUserGroups(userId, orgUnitCustomerId, params);
    }
    assignUserGroup(userId, orgCustomerId, userGroupId) {
        return this.adapter.assignUserGroup(userId, orgCustomerId, userGroupId);
    }
    unassignUserGroup(userId, orgCustomerId, userGroupId) {
        return this.adapter.unassignUserGroup(userId, orgCustomerId, userGroupId);
    }
}
B2BUserConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: B2BUserConnector, deps: [{ token: i1.B2BUserAdapter }], target: i0.ɵɵFactoryTarget.Injectable });
B2BUserConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: B2BUserConnector, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: B2BUserConnector, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.B2BUserAdapter }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJiLXVzZXIuY29ubmVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hZG1pbmlzdHJhdGlvbi9jb3JlL2Nvbm5lY3RvcnMvYjJiLXVzZXIvYjJiLXVzZXIuY29ubmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQVUzQyxNQUFNLE9BQU8sZ0JBQWdCO0lBQzNCLFlBQXNCLE9BQXVCO1FBQXZCLFlBQU8sR0FBUCxPQUFPLENBQWdCO0lBQUcsQ0FBQztJQUVqRCxHQUFHLENBQUMsTUFBYyxFQUFFLGlCQUF5QjtRQUMzQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxNQUFNLENBQUMsTUFBYyxFQUFFLFdBQW9CO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxNQUFNLENBQ0osTUFBYyxFQUNkLGFBQXFCLEVBQ3JCLFdBQW9CO1FBRXBCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsT0FBTyxDQUNMLE1BQWMsRUFDZCxNQUFxQjtRQUVyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsWUFBWSxDQUNWLE1BQWMsRUFDZCxpQkFBeUIsRUFDekIsTUFBcUI7UUFFckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELGNBQWMsQ0FDWixNQUFjLEVBQ2QsYUFBcUIsRUFDckIsVUFBa0I7UUFFbEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxnQkFBZ0IsQ0FDZCxNQUFjLEVBQ2QsYUFBcUIsRUFDckIsVUFBa0I7UUFFbEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELGNBQWMsQ0FDWixNQUFjLEVBQ2QsaUJBQXlCLEVBQ3pCLE1BQXFCO1FBRXJCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRCxnQkFBZ0IsQ0FDZCxNQUFjLEVBQ2QsYUFBcUIsRUFDckIsWUFBb0I7UUFFcEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELGtCQUFrQixDQUNoQixNQUFjLEVBQ2QsYUFBcUIsRUFDckIsWUFBb0I7UUFFcEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELGFBQWEsQ0FDWCxNQUFjLEVBQ2QsaUJBQXlCLEVBQ3pCLE1BQXFCO1FBRXJCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxlQUFlLENBQ2IsTUFBYyxFQUNkLGFBQXFCLEVBQ3JCLFdBQW1CO1FBRW5CLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsaUJBQWlCLENBQ2YsTUFBYyxFQUNkLGFBQXFCLEVBQ3JCLFdBQW1CO1FBRW5CLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzVFLENBQUM7OzZHQWhHVSxnQkFBZ0I7aUhBQWhCLGdCQUFnQixjQUZmLE1BQU07MkZBRVAsZ0JBQWdCO2tCQUg1QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEIyQlVzZXIsIEVudGl0aWVzTW9kZWwsIFNlYXJjaENvbmZpZyB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQZXJtaXNzaW9uIH0gZnJvbSAnLi4vLi4vbW9kZWwvcGVybWlzc2lvbi5tb2RlbCc7XG5pbXBvcnQgeyBVc2VyR3JvdXAgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyLWdyb3VwLm1vZGVsJztcbmltcG9ydCB7IEIyQlVzZXJBZGFwdGVyIH0gZnJvbSAnLi9iMmItdXNlci5hZGFwdGVyJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEIyQlVzZXJDb25uZWN0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgYWRhcHRlcjogQjJCVXNlckFkYXB0ZXIpIHt9XG5cbiAgZ2V0KHVzZXJJZDogc3RyaW5nLCBvcmdVbml0Q3VzdG9tZXJJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCMkJVc2VyPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkKHVzZXJJZCwgb3JnVW5pdEN1c3RvbWVySWQpO1xuICB9XG5cbiAgY3JlYXRlKHVzZXJJZDogc3RyaW5nLCBvcmdDdXN0b21lcjogQjJCVXNlcik6IE9ic2VydmFibGU8QjJCVXNlcj4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuY3JlYXRlKHVzZXJJZCwgb3JnQ3VzdG9tZXIpO1xuICB9XG5cbiAgdXBkYXRlKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIG9yZ0N1c3RvbWVySWQ6IHN0cmluZyxcbiAgICBvcmdDdXN0b21lcjogQjJCVXNlclxuICApOiBPYnNlcnZhYmxlPEIyQlVzZXI+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLnVwZGF0ZSh1c2VySWQsIG9yZ0N1c3RvbWVySWQsIG9yZ0N1c3RvbWVyKTtcbiAgfVxuXG4gIGdldExpc3QoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgcGFyYW1zPzogU2VhcmNoQ29uZmlnXG4gICk6IE9ic2VydmFibGU8RW50aXRpZXNNb2RlbDxCMkJVc2VyPj4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIubG9hZExpc3QodXNlcklkLCBwYXJhbXMpO1xuICB9XG5cbiAgZ2V0QXBwcm92ZXJzKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIG9yZ1VuaXRDdXN0b21lcklkOiBzdHJpbmcsXG4gICAgcGFyYW1zPzogU2VhcmNoQ29uZmlnXG4gICk6IE9ic2VydmFibGU8RW50aXRpZXNNb2RlbDxCMkJVc2VyPj4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIubG9hZEFwcHJvdmVycyh1c2VySWQsIG9yZ1VuaXRDdXN0b21lcklkLCBwYXJhbXMpO1xuICB9XG5cbiAgYXNzaWduQXBwcm92ZXIoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnQ3VzdG9tZXJJZDogc3RyaW5nLFxuICAgIGFwcHJvdmVySWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuYXNzaWduQXBwcm92ZXIodXNlcklkLCBvcmdDdXN0b21lcklkLCBhcHByb3ZlcklkKTtcbiAgfVxuXG4gIHVuYXNzaWduQXBwcm92ZXIoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnQ3VzdG9tZXJJZDogc3RyaW5nLFxuICAgIGFwcHJvdmVySWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIudW5hc3NpZ25BcHByb3Zlcih1c2VySWQsIG9yZ0N1c3RvbWVySWQsIGFwcHJvdmVySWQpO1xuICB9XG5cbiAgZ2V0UGVybWlzc2lvbnMoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnVW5pdEN1c3RvbWVySWQ6IHN0cmluZyxcbiAgICBwYXJhbXM/OiBTZWFyY2hDb25maWdcbiAgKTogT2JzZXJ2YWJsZTxFbnRpdGllc01vZGVsPFBlcm1pc3Npb24+PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkUGVybWlzc2lvbnModXNlcklkLCBvcmdVbml0Q3VzdG9tZXJJZCwgcGFyYW1zKTtcbiAgfVxuXG4gIGFzc2lnblBlcm1pc3Npb24oXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnQ3VzdG9tZXJJZDogc3RyaW5nLFxuICAgIHBlcm1pc3Npb25JZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5hc3NpZ25QZXJtaXNzaW9uKHVzZXJJZCwgb3JnQ3VzdG9tZXJJZCwgcGVybWlzc2lvbklkKTtcbiAgfVxuXG4gIHVuYXNzaWduUGVybWlzc2lvbihcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBvcmdDdXN0b21lcklkOiBzdHJpbmcsXG4gICAgcGVybWlzc2lvbklkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLnVuYXNzaWduUGVybWlzc2lvbih1c2VySWQsIG9yZ0N1c3RvbWVySWQsIHBlcm1pc3Npb25JZCk7XG4gIH1cblxuICBnZXRVc2VyR3JvdXBzKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIG9yZ1VuaXRDdXN0b21lcklkOiBzdHJpbmcsXG4gICAgcGFyYW1zPzogU2VhcmNoQ29uZmlnXG4gICk6IE9ic2VydmFibGU8RW50aXRpZXNNb2RlbDxVc2VyR3JvdXA+PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkVXNlckdyb3Vwcyh1c2VySWQsIG9yZ1VuaXRDdXN0b21lcklkLCBwYXJhbXMpO1xuICB9XG5cbiAgYXNzaWduVXNlckdyb3VwKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIG9yZ0N1c3RvbWVySWQ6IHN0cmluZyxcbiAgICB1c2VyR3JvdXBJZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5hc3NpZ25Vc2VyR3JvdXAodXNlcklkLCBvcmdDdXN0b21lcklkLCB1c2VyR3JvdXBJZCk7XG4gIH1cblxuICB1bmFzc2lnblVzZXJHcm91cChcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBvcmdDdXN0b21lcklkOiBzdHJpbmcsXG4gICAgdXNlckdyb3VwSWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIudW5hc3NpZ25Vc2VyR3JvdXAodXNlcklkLCBvcmdDdXN0b21lcklkLCB1c2VyR3JvdXBJZCk7XG4gIH1cbn1cbiJdfQ==