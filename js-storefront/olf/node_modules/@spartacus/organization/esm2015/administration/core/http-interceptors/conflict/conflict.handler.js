import { Injectable } from '@angular/core';
import { GlobalMessageType, HttpErrorHandler, HttpResponseStatus, } from '@spartacus/core';
import * as i0 from "@angular/core";
export class OrganizationConflictHandler extends HttpErrorHandler {
    constructor() {
        super(...arguments);
        this.responseStatus = HttpResponseStatus.CONFLICT;
        this.budgetMask = /Budget with code \[(.*)\] already exists/;
        this.userMask = /User already exists/;
        this.userGroupMask = /Member Permission with the same id already exists/;
        this.unitMask = /Organizational unit with uid \[(.*)\] already exists/;
    }
    hasMatch(errorResponse) {
        return super.hasMatch(errorResponse) && this.matchMask(errorResponse);
    }
    handleError(request, response) {
        return this.getErrors(response).forEach(({ message }) => {
            var _a, _b;
            // Handle budget conflict
            this.handleConflict(message, this.budgetMask, 'budget');
            // Handle user email conflict
            this.handleConflict(message, this.userMask, 'user', (_a = request === null || request === void 0 ? void 0 : request.body) === null || _a === void 0 ? void 0 : _a.email);
            // Handle user group conflict
            this.handleConflict(message, this.userGroupMask, 'userGroup', (_b = request === null || request === void 0 ? void 0 : request.body) === null || _b === void 0 ? void 0 : _b.uid);
            // Handle unit conflict
            this.handleConflict(message, this.unitMask, 'unit');
        });
    }
    matchMask(response) {
        return this.getErrors(response).some((error) => [this.budgetMask, this.userMask, this.userGroupMask, this.unitMask].some((mask) => mask.test(error.message)));
    }
    handleConflict(message, mask, key, code) {
        var _a;
        const result = message.match(mask);
        const params = { code: (_a = result === null || result === void 0 ? void 0 : result[1]) !== null && _a !== void 0 ? _a : code };
        if (result) {
            this.globalMessageService.add({ key: `organization.httpHandlers.conflict.${key}`, params }, GlobalMessageType.MSG_TYPE_ERROR);
        }
    }
    getErrors(response) {
        var _a;
        return (((_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) || []).filter((error) => error.type === 'AlreadyExistsError');
    }
    getPriority() {
        return 0 /* NORMAL */;
    }
}
OrganizationConflictHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrganizationConflictHandler, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
OrganizationConflictHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrganizationConflictHandler, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrganizationConflictHandler, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmxpY3QuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmdhbml6YXRpb24vYWRtaW5pc3RyYXRpb24vY29yZS9odHRwLWludGVyY2VwdG9ycy9jb25mbGljdC9jb25mbGljdC5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUVMLGlCQUFpQixFQUNqQixnQkFBZ0IsRUFDaEIsa0JBQWtCLEdBRW5CLE1BQU0saUJBQWlCLENBQUM7O0FBS3pCLE1BQU0sT0FBTywyQkFBNEIsU0FBUSxnQkFBZ0I7SUFIakU7O1FBSUUsbUJBQWMsR0FBRyxrQkFBa0IsQ0FBQyxRQUFRLENBQUM7UUFFbkMsZUFBVSxHQUFHLDBDQUEwQyxDQUFDO1FBQ3hELGFBQVEsR0FBRyxxQkFBcUIsQ0FBQztRQUNqQyxrQkFBYSxHQUFHLG1EQUFtRCxDQUFDO1FBQ3BFLGFBQVEsR0FBRyxzREFBc0QsQ0FBQztLQXlEN0U7SUF2REMsUUFBUSxDQUFDLGFBQWdDO1FBQ3ZDLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBeUIsRUFBRSxRQUEyQjtRQUNoRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQWMsRUFBRSxFQUFFOztZQUNsRSx5QkFBeUI7WUFDekIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN4RCw2QkFBNkI7WUFDN0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsSUFBSSwwQ0FBRSxLQUFLLENBQUMsQ0FBQztZQUMxRSw2QkFBNkI7WUFDN0IsSUFBSSxDQUFDLGNBQWMsQ0FDakIsT0FBTyxFQUNQLElBQUksQ0FBQyxhQUFhLEVBQ2xCLFdBQVcsRUFDWCxNQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxJQUFJLDBDQUFFLEdBQUcsQ0FDbkIsQ0FBQztZQUNGLHVCQUF1QjtZQUN2QixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVTLFNBQVMsQ0FBQyxRQUEyQjtRQUM3QyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDN0MsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUN0RSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQ25DLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFUyxjQUFjLENBQ3RCLE9BQWUsRUFDZixJQUFZLEVBQ1osR0FBVyxFQUNYLElBQWE7O1FBRWIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxNQUFNLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxNQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRyxDQUFDLENBQUMsbUNBQUksSUFBSSxFQUFFLENBQUM7UUFDN0MsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUMzQixFQUFFLEdBQUcsRUFBRSxzQ0FBc0MsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQzVELGlCQUFpQixDQUFDLGNBQWMsQ0FDakMsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVTLFNBQVMsQ0FBQyxRQUEyQjs7UUFDN0MsT0FBTyxDQUFDLENBQUEsTUFBQSxRQUFRLENBQUMsS0FBSywwQ0FBRSxNQUFNLEtBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUMxQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxvQkFBb0IsQ0FDL0MsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXO1FBQ1Qsc0JBQXVCO0lBQ3pCLENBQUM7O3dIQTlEVSwyQkFBMkI7NEhBQTNCLDJCQUEyQixjQUYxQixNQUFNOzJGQUVQLDJCQUEyQjtrQkFIdkMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge1xuICBFcnJvck1vZGVsLFxuICBHbG9iYWxNZXNzYWdlVHlwZSxcbiAgSHR0cEVycm9ySGFuZGxlcixcbiAgSHR0cFJlc3BvbnNlU3RhdHVzLFxuICBQcmlvcml0eSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIE9yZ2FuaXphdGlvbkNvbmZsaWN0SGFuZGxlciBleHRlbmRzIEh0dHBFcnJvckhhbmRsZXIge1xuICByZXNwb25zZVN0YXR1cyA9IEh0dHBSZXNwb25zZVN0YXR1cy5DT05GTElDVDtcblxuICBwcm90ZWN0ZWQgYnVkZ2V0TWFzayA9IC9CdWRnZXQgd2l0aCBjb2RlIFxcWyguKilcXF0gYWxyZWFkeSBleGlzdHMvO1xuICBwcm90ZWN0ZWQgdXNlck1hc2sgPSAvVXNlciBhbHJlYWR5IGV4aXN0cy87XG4gIHByb3RlY3RlZCB1c2VyR3JvdXBNYXNrID0gL01lbWJlciBQZXJtaXNzaW9uIHdpdGggdGhlIHNhbWUgaWQgYWxyZWFkeSBleGlzdHMvO1xuICBwcm90ZWN0ZWQgdW5pdE1hc2sgPSAvT3JnYW5pemF0aW9uYWwgdW5pdCB3aXRoIHVpZCBcXFsoLiopXFxdIGFscmVhZHkgZXhpc3RzLztcblxuICBoYXNNYXRjaChlcnJvclJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzdXBlci5oYXNNYXRjaChlcnJvclJlc3BvbnNlKSAmJiB0aGlzLm1hdGNoTWFzayhlcnJvclJlc3BvbnNlKTtcbiAgfVxuXG4gIGhhbmRsZUVycm9yKHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgIHJldHVybiB0aGlzLmdldEVycm9ycyhyZXNwb25zZSkuZm9yRWFjaCgoeyBtZXNzYWdlIH06IEVycm9yTW9kZWwpID0+IHtcbiAgICAgIC8vIEhhbmRsZSBidWRnZXQgY29uZmxpY3RcbiAgICAgIHRoaXMuaGFuZGxlQ29uZmxpY3QobWVzc2FnZSwgdGhpcy5idWRnZXRNYXNrLCAnYnVkZ2V0Jyk7XG4gICAgICAvLyBIYW5kbGUgdXNlciBlbWFpbCBjb25mbGljdFxuICAgICAgdGhpcy5oYW5kbGVDb25mbGljdChtZXNzYWdlLCB0aGlzLnVzZXJNYXNrLCAndXNlcicsIHJlcXVlc3Q/LmJvZHk/LmVtYWlsKTtcbiAgICAgIC8vIEhhbmRsZSB1c2VyIGdyb3VwIGNvbmZsaWN0XG4gICAgICB0aGlzLmhhbmRsZUNvbmZsaWN0KFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICB0aGlzLnVzZXJHcm91cE1hc2ssXG4gICAgICAgICd1c2VyR3JvdXAnLFxuICAgICAgICByZXF1ZXN0Py5ib2R5Py51aWRcbiAgICAgICk7XG4gICAgICAvLyBIYW5kbGUgdW5pdCBjb25mbGljdFxuICAgICAgdGhpcy5oYW5kbGVDb25mbGljdChtZXNzYWdlLCB0aGlzLnVuaXRNYXNrLCAndW5pdCcpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIG1hdGNoTWFzayhyZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFcnJvcnMocmVzcG9uc2UpLnNvbWUoKGVycm9yKSA9PlxuICAgICAgW3RoaXMuYnVkZ2V0TWFzaywgdGhpcy51c2VyTWFzaywgdGhpcy51c2VyR3JvdXBNYXNrLCB0aGlzLnVuaXRNYXNrXS5zb21lKFxuICAgICAgICAobWFzaykgPT4gbWFzay50ZXN0KGVycm9yLm1lc3NhZ2UpXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBoYW5kbGVDb25mbGljdChcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgbWFzazogUmVnRXhwLFxuICAgIGtleTogc3RyaW5nLFxuICAgIGNvZGU/OiBzdHJpbmdcbiAgKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gbWVzc2FnZS5tYXRjaChtYXNrKTtcbiAgICBjb25zdCBwYXJhbXMgPSB7IGNvZGU6IHJlc3VsdD8uWzFdID8/IGNvZGUgfTtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICB0aGlzLmdsb2JhbE1lc3NhZ2VTZXJ2aWNlLmFkZChcbiAgICAgICAgeyBrZXk6IGBvcmdhbml6YXRpb24uaHR0cEhhbmRsZXJzLmNvbmZsaWN0LiR7a2V5fWAsIHBhcmFtcyB9LFxuICAgICAgICBHbG9iYWxNZXNzYWdlVHlwZS5NU0dfVFlQRV9FUlJPUlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0RXJyb3JzKHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSk6IEVycm9yTW9kZWxbXSB7XG4gICAgcmV0dXJuIChyZXNwb25zZS5lcnJvcj8uZXJyb3JzIHx8IFtdKS5maWx0ZXIoXG4gICAgICAoZXJyb3IpID0+IGVycm9yLnR5cGUgPT09ICdBbHJlYWR5RXhpc3RzRXJyb3InXG4gICAgKTtcbiAgfVxuXG4gIGdldFByaW9yaXR5KCk6IFByaW9yaXR5IHtcbiAgICByZXR1cm4gUHJpb3JpdHkuTk9STUFMO1xuICB9XG59XG4iXX0=