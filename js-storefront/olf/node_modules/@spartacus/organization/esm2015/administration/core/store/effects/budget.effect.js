import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Effect, ofType } from '@ngrx/effects';
import { from, of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { normalizeHttpError, StateUtils } from '@spartacus/core';
import { BudgetActions, OrganizationActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/budget/budget.connector";
export class BudgetEffects {
    constructor(actions$, budgetConnector) {
        this.actions$ = actions$;
        this.budgetConnector = budgetConnector;
        this.loadBudget$ = this.actions$.pipe(ofType(BudgetActions.LOAD_BUDGET), map((action) => action.payload), switchMap(({ userId, budgetCode }) => {
            return this.budgetConnector.get(userId, budgetCode).pipe(map((budget) => {
                return new BudgetActions.LoadBudgetSuccess([budget]);
            }), catchError((error) => of(new BudgetActions.LoadBudgetFail({
                budgetCode,
                error: normalizeHttpError(error),
            }))));
        }));
        this.loadBudgets$ = this.actions$.pipe(ofType(BudgetActions.LOAD_BUDGETS), map((action) => action.payload), switchMap((payload) => this.budgetConnector.getList(payload.userId, payload.params).pipe(switchMap((budgets) => {
            const { values, page } = StateUtils.normalizeListPage(budgets, 'code');
            return [
                new BudgetActions.LoadBudgetSuccess(values),
                new BudgetActions.LoadBudgetsSuccess({
                    page,
                    params: payload.params,
                }),
            ];
        }), catchError((error) => of(new BudgetActions.LoadBudgetsFail({
            params: payload.params,
            error: normalizeHttpError(error),
        }))))));
        this.createBudget$ = this.actions$.pipe(ofType(BudgetActions.CREATE_BUDGET), map((action) => action.payload), switchMap((payload) => this.budgetConnector.create(payload.userId, payload.budget).pipe(switchMap((data) => [
            new BudgetActions.CreateBudgetSuccess(data),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new BudgetActions.CreateBudgetFail({
                budgetCode: payload.budget.code,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.updateBudget$ = this.actions$.pipe(ofType(BudgetActions.UPDATE_BUDGET), map((action) => action.payload), switchMap((payload) => this.budgetConnector
            .update(payload.userId, payload.budgetCode, payload.budget)
            .pipe(switchMap((data) => [
            new BudgetActions.UpdateBudgetSuccess(data),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new BudgetActions.UpdateBudgetFail({
                budgetCode: payload.budget.code,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
    }
}
BudgetEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetEffects, deps: [{ token: i1.Actions }, { token: i2.BudgetConnector }], target: i0.ɵɵFactoryTarget.Injectable });
BudgetEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetEffects });
__decorate([
    Effect()
], BudgetEffects.prototype, "loadBudget$", void 0);
__decorate([
    Effect()
], BudgetEffects.prototype, "loadBudgets$", void 0);
__decorate([
    Effect()
], BudgetEffects.prototype, "createBudget$", void 0);
__decorate([
    Effect()
], BudgetEffects.prototype, "updateBudget$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.BudgetConnector }]; }, propDecorators: { loadBudget$: [], loadBudgets$: [], createBudget$: [], updateBudget$: [] } });
//# sourceMappingURL=data:application/json;base64,