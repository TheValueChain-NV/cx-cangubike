import { Injectable } from '@angular/core';
import { queueScheduler, using } from 'rxjs';
import { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';
import { BudgetActions } from '../store/index';
import { getBudget, getBudgetList, getBudgetValue, } from '../store/selectors/budget.selector';
import { getItemStatus } from '../utils/get-item-status';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class BudgetService {
    constructor(store, userIdService) {
        this.store = store;
        this.userIdService = userIdService;
    }
    loadBudget(budgetCode) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new BudgetActions.LoadBudget({ userId, budgetCode })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    loadBudgets(params) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new BudgetActions.LoadBudgets({ userId, params })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getBudgetState(budgetCode) {
        return this.store.select(getBudget(budgetCode));
    }
    getBudgetValue(budgetCode) {
        return this.store.select(getBudgetValue(budgetCode)).pipe(filter(Boolean));
    }
    getBudgetList(params) {
        return this.store.select(getBudgetList(params));
    }
    get(budgetCode) {
        const loading$ = this.getBudgetState(budgetCode).pipe(auditTime(0), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.loadBudget(budgetCode);
            }
        }));
        return using(() => loading$.subscribe(), () => this.getBudgetValue(budgetCode));
    }
    getList(params) {
        return this.getBudgetList(params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadBudgets(params);
            }
        }), filter((process) => process.success || process.error), map((result) => result.value));
    }
    getCostCenters(budgetCode) {
        return this.get(budgetCode).pipe(map((budget) => {
            var _a;
            return ({
                values: (_a = budget.costCenters) !== null && _a !== void 0 ? _a : [],
            });
        }));
    }
    getErrorState(budgetCode) {
        return this.getBudgetState(budgetCode).pipe(map((state) => state.error));
    }
    create(budget) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new BudgetActions.CreateBudget({ userId, budget })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    update(budgetCode, budget) {
        this.userIdService.takeUserId(true).subscribe((userId) => this.store.dispatch(new BudgetActions.UpdateBudget({ userId, budgetCode, budget })), () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    getLoadingStatus(budgetCode) {
        return getItemStatus(this.getBudgetState(budgetCode));
    }
}
BudgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetService, deps: [{ token: i1.Store }, { token: i2.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
BudgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BudgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,