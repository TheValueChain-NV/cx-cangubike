import { createSelector } from '@ngrx/store';
import { StateUtils, } from '@spartacus/core';
import { B2B_USER_FEATURE, USER_GROUP_FEATURE, } from '../organization-state';
import { getOrganizationState } from './feature.selector';
import { getPermissionsState } from './permission.selector';
export const getB2BUserManagementState = createSelector(getOrganizationState, (state) => state[B2B_USER_FEATURE]);
export const getB2BUsersState = createSelector(getB2BUserManagementState, (state) => state && state.entities);
export const getB2BUserState = (orgCustomerId) => createSelector(getB2BUsersState, (state) => StateUtils.entityLoaderStateSelector(state, orgCustomerId));
export const getB2BUserValue = (orgCustomerId) => {
    return createSelector(getB2BUserState(orgCustomerId), (b2BUserState) => StateUtils.loaderValueSelector(b2BUserState));
};
export const getUserList = (params) => createSelector(getB2BUserManagementState, (state) => StateUtils.denormalizeSearch(state, params));
export const getB2BUserApprovers = (code, params) => createSelector(getB2BUserManagementState, getB2BUsersState, (state, approvers) => StateUtils.denormalizeCustomB2BSearch(state.approvers, approvers, params, code));
export const getB2BUserPermissions = (code, params) => createSelector(getB2BUserManagementState, getPermissionsState, (state, permissions) => StateUtils.denormalizeCustomB2BSearch(state.permissions, permissions, params, code));
// avoid circular dependency
const getUserGroupsState = createSelector(getOrganizationState, (state) => state[USER_GROUP_FEATURE].entities);
export const getB2BUserUserGroups = (code, params) => createSelector(getB2BUserManagementState, getUserGroupsState, (state, userGroups) => StateUtils.denormalizeCustomB2BSearch(state.userGroups, userGroups, params, code));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJiLXVzZXIuc2VsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FkbWluaXN0cmF0aW9uL2NvcmUvc3RvcmUvc2VsZWN0b3JzL2IyYi11c2VyLnNlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQW9CLE1BQU0sYUFBYSxDQUFDO0FBQy9ELE9BQU8sRUFJTCxVQUFVLEdBQ1gsTUFBTSxpQkFBaUIsQ0FBQztBQUd6QixPQUFPLEVBRUwsZ0JBQWdCLEVBR2hCLGtCQUFrQixHQUNuQixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTVELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUdsQyxjQUFjLENBQ2hCLG9CQUFvQixFQUNwQixDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUN0RCxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBR3pCLGNBQWMsQ0FDaEIseUJBQXlCLEVBQ3pCLENBQUMsS0FBd0IsRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQ3RELENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FDN0IsYUFBcUIsRUFDcUQsRUFBRSxDQUM1RSxjQUFjLENBQ1osZ0JBQWdCLEVBQ2hCLENBQUMsS0FBNEMsRUFBRSxFQUFFLENBQy9DLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQzdELENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FDN0IsYUFBcUIsRUFDNkIsRUFBRTtJQUNwRCxPQUFPLGNBQWMsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUNyRSxVQUFVLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQzdDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FDekIsTUFBb0IsRUFJcEIsRUFBRSxDQUNGLGNBQWMsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUNyRSxVQUFVLENBQUMsaUJBQWlCLENBQVUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUNyRCxDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FDakMsSUFBWSxFQUNaLE1BQW9CLEVBSXBCLEVBQUUsQ0FDRixjQUFjLENBQ1oseUJBQXlCLEVBQ3pCLGdCQUFnQixFQUNoQixDQUNFLEtBQXdCLEVBQ3hCLFNBQWdELEVBQ2hELEVBQUUsQ0FDRixVQUFVLENBQUMsMEJBQTBCLENBQ25DLEtBQUssQ0FBQyxTQUFTLEVBQ2YsU0FBUyxFQUNULE1BQU0sRUFDTixJQUFJLENBQ0wsQ0FDSixDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FDbkMsSUFBWSxFQUNaLE1BQW9CLEVBSXBCLEVBQUUsQ0FDRixjQUFjLENBQ1oseUJBQXlCLEVBQ3pCLG1CQUFtQixFQUNuQixDQUNFLEtBQXdCLEVBQ3hCLFdBQXFELEVBQ3JELEVBQUUsQ0FDRixVQUFVLENBQUMsMEJBQTBCLENBQ25DLEtBQUssQ0FBQyxXQUFXLEVBQ2pCLFdBQVcsRUFDWCxNQUFNLEVBQ04sSUFBSSxDQUNMLENBQ0osQ0FBQztBQUVKLDRCQUE0QjtBQUM1QixNQUFNLGtCQUFrQixHQUdwQixjQUFjLENBQ2hCLG9CQUFvQixFQUNwQixDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFFBQVEsQ0FDakUsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQ2xDLElBQVksRUFDWixNQUFvQixFQUlwQixFQUFFLENBQ0YsY0FBYyxDQUNaLHlCQUF5QixFQUN6QixrQkFBa0IsRUFDbEIsQ0FDRSxLQUF3QixFQUN4QixVQUFtRCxFQUNuRCxFQUFFLENBQ0YsVUFBVSxDQUFDLDBCQUEwQixDQUNuQyxLQUFLLENBQUMsVUFBVSxFQUNoQixVQUFVLEVBQ1YsTUFBTSxFQUNOLElBQUksQ0FDTCxDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciwgTWVtb2l6ZWRTZWxlY3RvciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7XG4gIEIyQlVzZXIsXG4gIEVudGl0aWVzTW9kZWwsXG4gIFNlYXJjaENvbmZpZyxcbiAgU3RhdGVVdGlscyxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IFBlcm1pc3Npb24gfSBmcm9tICcuLi8uLi9tb2RlbC9wZXJtaXNzaW9uLm1vZGVsJztcbmltcG9ydCB7IFVzZXJHcm91cCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXItZ3JvdXAubW9kZWwnO1xuaW1wb3J0IHtcbiAgQjJCVXNlck1hbmFnZW1lbnQsXG4gIEIyQl9VU0VSX0ZFQVRVUkUsXG4gIE9yZ2FuaXphdGlvblN0YXRlLFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFVTRVJfR1JPVVBfRkVBVFVSRSxcbn0gZnJvbSAnLi4vb3JnYW5pemF0aW9uLXN0YXRlJztcbmltcG9ydCB7IGdldE9yZ2FuaXphdGlvblN0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9yJztcbmltcG9ydCB7IGdldFBlcm1pc3Npb25zU3RhdGUgfSBmcm9tICcuL3Blcm1pc3Npb24uc2VsZWN0b3InO1xuXG5leHBvcnQgY29uc3QgZ2V0QjJCVXNlck1hbmFnZW1lbnRTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoT3JnYW5pemF0aW9uLFxuICBCMkJVc2VyTWFuYWdlbWVudFxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRPcmdhbml6YXRpb25TdGF0ZSxcbiAgKHN0YXRlOiBPcmdhbml6YXRpb25TdGF0ZSkgPT4gc3RhdGVbQjJCX1VTRVJfRkVBVFVSRV1cbik7XG5cbmV4cG9ydCBjb25zdCBnZXRCMkJVc2Vyc1N0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFN0YXRlVXRpbHMuRW50aXR5TG9hZGVyU3RhdGU8QjJCVXNlcj5cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0QjJCVXNlck1hbmFnZW1lbnRTdGF0ZSxcbiAgKHN0YXRlOiBCMkJVc2VyTWFuYWdlbWVudCkgPT4gc3RhdGUgJiYgc3RhdGUuZW50aXRpZXNcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRCMkJVc2VyU3RhdGUgPSAoXG4gIG9yZ0N1c3RvbWVySWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhPcmdhbml6YXRpb24sIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8QjJCVXNlcj4+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldEIyQlVzZXJzU3RhdGUsXG4gICAgKHN0YXRlOiBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPEIyQlVzZXI+KSA9PlxuICAgICAgU3RhdGVVdGlscy5lbnRpdHlMb2FkZXJTdGF0ZVNlbGVjdG9yKHN0YXRlLCBvcmdDdXN0b21lcklkKVxuICApO1xuXG5leHBvcnQgY29uc3QgZ2V0QjJCVXNlclZhbHVlID0gKFxuICBvcmdDdXN0b21lcklkOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoT3JnYW5pemF0aW9uLCBCMkJVc2VyPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihnZXRCMkJVc2VyU3RhdGUob3JnQ3VzdG9tZXJJZCksIChiMkJVc2VyU3RhdGUpID0+XG4gICAgU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yKGIyQlVzZXJTdGF0ZSlcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRVc2VyTGlzdCA9IChcbiAgcGFyYW1zOiBTZWFyY2hDb25maWdcbik6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxFbnRpdGllc01vZGVsPEIyQlVzZXI+PlxuPiA9PlxuICBjcmVhdGVTZWxlY3RvcihnZXRCMkJVc2VyTWFuYWdlbWVudFN0YXRlLCAoc3RhdGU6IEIyQlVzZXJNYW5hZ2VtZW50KSA9PlxuICAgIFN0YXRlVXRpbHMuZGVub3JtYWxpemVTZWFyY2g8QjJCVXNlcj4oc3RhdGUsIHBhcmFtcylcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGdldEIyQlVzZXJBcHByb3ZlcnMgPSAoXG4gIGNvZGU6IHN0cmluZyxcbiAgcGFyYW1zOiBTZWFyY2hDb25maWdcbik6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE9yZ2FuaXphdGlvbixcbiAgU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxFbnRpdGllc01vZGVsPEIyQlVzZXI+PlxuPiA9PlxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRCMkJVc2VyTWFuYWdlbWVudFN0YXRlLFxuICAgIGdldEIyQlVzZXJzU3RhdGUsXG4gICAgKFxuICAgICAgc3RhdGU6IEIyQlVzZXJNYW5hZ2VtZW50LFxuICAgICAgYXBwcm92ZXJzOiBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPEIyQlVzZXI+XG4gICAgKSA9PlxuICAgICAgU3RhdGVVdGlscy5kZW5vcm1hbGl6ZUN1c3RvbUIyQlNlYXJjaChcbiAgICAgICAgc3RhdGUuYXBwcm92ZXJzLFxuICAgICAgICBhcHByb3ZlcnMsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgY29kZVxuICAgICAgKVxuICApO1xuXG5leHBvcnQgY29uc3QgZ2V0QjJCVXNlclBlcm1pc3Npb25zID0gKFxuICBjb2RlOiBzdHJpbmcsXG4gIHBhcmFtczogU2VhcmNoQ29uZmlnXG4pOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxQZXJtaXNzaW9uPj5cbj4gPT5cbiAgY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0QjJCVXNlck1hbmFnZW1lbnRTdGF0ZSxcbiAgICBnZXRQZXJtaXNzaW9uc1N0YXRlLFxuICAgIChcbiAgICAgIHN0YXRlOiBCMkJVc2VyTWFuYWdlbWVudCxcbiAgICAgIHBlcm1pc3Npb25zOiBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPFBlcm1pc3Npb24+XG4gICAgKSA9PlxuICAgICAgU3RhdGVVdGlscy5kZW5vcm1hbGl6ZUN1c3RvbUIyQlNlYXJjaChcbiAgICAgICAgc3RhdGUucGVybWlzc2lvbnMsXG4gICAgICAgIHBlcm1pc3Npb25zLFxuICAgICAgICBwYXJhbXMsXG4gICAgICAgIGNvZGVcbiAgICAgIClcbiAgKTtcblxuLy8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jeVxuY29uc3QgZ2V0VXNlckdyb3Vwc1N0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFN0YXRlVXRpbHMuRW50aXR5TG9hZGVyU3RhdGU8VXNlckdyb3VwPlxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRPcmdhbml6YXRpb25TdGF0ZSxcbiAgKHN0YXRlOiBPcmdhbml6YXRpb25TdGF0ZSkgPT4gc3RhdGVbVVNFUl9HUk9VUF9GRUFUVVJFXS5lbnRpdGllc1xuKTtcblxuZXhwb3J0IGNvbnN0IGdldEIyQlVzZXJVc2VyR3JvdXBzID0gKFxuICBjb2RlOiBzdHJpbmcsXG4gIHBhcmFtczogU2VhcmNoQ29uZmlnXG4pOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhPcmdhbml6YXRpb24sXG4gIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxVc2VyR3JvdXA+PlxuPiA9PlxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRCMkJVc2VyTWFuYWdlbWVudFN0YXRlLFxuICAgIGdldFVzZXJHcm91cHNTdGF0ZSxcbiAgICAoXG4gICAgICBzdGF0ZTogQjJCVXNlck1hbmFnZW1lbnQsXG4gICAgICB1c2VyR3JvdXBzOiBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclN0YXRlPFVzZXJHcm91cD5cbiAgICApID0+XG4gICAgICBTdGF0ZVV0aWxzLmRlbm9ybWFsaXplQ3VzdG9tQjJCU2VhcmNoKFxuICAgICAgICBzdGF0ZS51c2VyR3JvdXBzLFxuICAgICAgICB1c2VyR3JvdXBzLFxuICAgICAgICBwYXJhbXMsXG4gICAgICAgIGNvZGVcbiAgICAgIClcbiAgKTtcbiJdfQ==