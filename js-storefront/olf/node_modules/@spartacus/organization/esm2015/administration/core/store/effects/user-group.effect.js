import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Effect, ofType } from '@ngrx/effects';
import { normalizeHttpError, StateUtils, } from '@spartacus/core';
import { from, of } from 'rxjs';
import { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';
import { B2BUserActions, OrganizationActions, PermissionActions, UserGroupActions, } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/user-group/user-group.connector";
export class UserGroupEffects {
    constructor(actions$, userGroupConnector) {
        this.actions$ = actions$;
        this.userGroupConnector = userGroupConnector;
        this.loadUserGroup$ = this.actions$.pipe(ofType(UserGroupActions.LOAD_USER_GROUP), map((action) => action.payload), switchMap(({ userId, userGroupId }) => {
            return this.userGroupConnector.get(userId, userGroupId).pipe(map((userGroup) => {
                return new UserGroupActions.LoadUserGroupSuccess([userGroup]);
            }), catchError((error) => of(new UserGroupActions.LoadUserGroupFail({
                userGroupId,
                error: normalizeHttpError(error),
            }))));
        }));
        this.loadUserGroups$ = this.actions$.pipe(ofType(UserGroupActions.LOAD_USER_GROUPS), map((action) => action.payload), switchMap((payload) => this.userGroupConnector.getList(payload.userId, payload.params).pipe(switchMap((userGroups) => {
            const { values, page } = StateUtils.normalizeListPage(userGroups, 'uid');
            return [
                new UserGroupActions.LoadUserGroupSuccess(values),
                new UserGroupActions.LoadUserGroupsSuccess({
                    page,
                    params: payload.params,
                }),
            ];
        }), catchError((error) => of(new UserGroupActions.LoadUserGroupsFail({
            params: payload.params,
            error: normalizeHttpError(error),
        }))))));
        this.loadAvailableOrderApprovalPermissions$ = this.actions$.pipe(ofType(UserGroupActions.LOAD_USER_GROUP_PERMISSIONS), map((action) => action.payload), groupBy(({ userGroupId, params }) => StateUtils.serializeParams(userGroupId, params)), mergeMap((group) => group.pipe(switchMap((payload) => this.userGroupConnector
            .getAvailableOrderApprovalPermissions(payload.userId, payload.userGroupId, payload.params)
            .pipe(switchMap((permissions) => {
            const { values, page } = StateUtils.normalizeListPage(permissions, 'code');
            return [
                new PermissionActions.LoadPermissionSuccess(values),
                new UserGroupActions.LoadPermissionsSuccess({
                    userGroupId: payload.userGroupId,
                    page,
                    params: payload.params,
                }),
            ];
        }), catchError((error) => of(new UserGroupActions.LoadPermissionsFail({
            userGroupId: payload.userGroupId,
            params: payload.params,
            error: normalizeHttpError(error),
        }))))))));
        this.loadAvailableOrgCustomers$ = this.actions$.pipe(ofType(UserGroupActions.LOAD_USER_GROUP_AVAILABLE_CUSTOMERS), map((action) => action.payload), groupBy(({ userGroupId, params }) => StateUtils.serializeParams(userGroupId, params)), mergeMap((group) => group.pipe(switchMap((payload) => this.userGroupConnector
            .getAvailableOrgCustomers(payload.userId, payload.userGroupId, payload.params)
            .pipe(switchMap((customers) => {
            const { values, page } = StateUtils.normalizeListPage(customers, 'customerId');
            return [
                new B2BUserActions.LoadB2BUserSuccess(values),
                new UserGroupActions.LoadAvailableOrgCustomersSuccess({
                    userGroupId: payload.userGroupId,
                    page,
                    params: payload.params,
                }),
            ];
        }), catchError((error) => of(new UserGroupActions.LoadAvailableOrgCustomersFail({
            userGroupId: payload.userGroupId,
            params: payload.params,
            error: normalizeHttpError(error),
        }))))))));
        this.createUserGroup$ = this.actions$.pipe(ofType(UserGroupActions.CREATE_USER_GROUP), map((action) => action.payload), switchMap((payload) => this.userGroupConnector.create(payload.userId, payload.userGroup).pipe(switchMap((data) => [
            new UserGroupActions.CreateUserGroupSuccess(data),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new UserGroupActions.CreateUserGroupFail({
                userGroupId: payload.userGroup.uid,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.updateUserGroup$ = this.actions$.pipe(ofType(UserGroupActions.UPDATE_USER_GROUP), map((action) => action.payload), switchMap((payload) => this.userGroupConnector
            .update(payload.userId, payload.userGroupId, payload.userGroup)
            .pipe(switchMap(() => [
            // TODO: Workaround for empty PATCH response:
            new UserGroupActions.UpdateUserGroupSuccess(payload.userGroup),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new UserGroupActions.UpdateUserGroupFail({
                userGroupId: payload.userGroup.uid,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.deleteUserGroup$ = this.actions$.pipe(ofType(UserGroupActions.DELETE_USER_GROUP), map((action) => action.payload), switchMap((payload) => this.userGroupConnector.delete(payload.userId, payload.userGroupId).pipe(switchMap((data) => [
            new UserGroupActions.DeleteUserGroupSuccess(data),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new UserGroupActions.DeleteUserGroupFail({
                userGroupId: payload.userGroupId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.assignPermissionToUserGroup$ = this.actions$.pipe(ofType(UserGroupActions.USER_GROUP_ASSIGN_PERMISSION), map((action) => action.payload), mergeMap((payload) => this.userGroupConnector
            .assignOrderApprovalPermission(payload.userId, payload.userGroupId, payload.permissionUid)
            .pipe(switchMap((data) => [
            new UserGroupActions.AssignPermissionSuccess({
                permissionUid: data.id,
                selected: data.selected,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new UserGroupActions.AssignPermissionFail({
                userGroupId: payload.userGroupId,
                permissionUid: payload.permissionUid,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.assignMemberUnitUserGroup$ = this.actions$.pipe(ofType(UserGroupActions.USER_GROUP_ASSIGN_MEMBER), map((action) => action.payload), mergeMap((payload) => this.userGroupConnector
            .assignMember(payload.userId, payload.userGroupId, payload.customerId)
            .pipe(switchMap(() => [
            new UserGroupActions.AssignMemberSuccess({
                customerId: payload.customerId,
                selected: true,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new UserGroupActions.AssignMemberFail({
                userGroupId: payload.userGroupId,
                customerId: payload.customerId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.unassignMemberFromUserGroup$ = this.actions$.pipe(ofType(UserGroupActions.USER_GROUP_UNASSIGN_MEMBER), map((action) => action.payload), mergeMap((payload) => this.userGroupConnector
            .unassignMember(payload.userId, payload.userGroupId, payload.customerId)
            .pipe(switchMap(() => [
            new UserGroupActions.UnassignMemberSuccess({
                customerId: payload.customerId,
                selected: false,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new UserGroupActions.UnassignMemberFail({
                userGroupId: payload.userGroupId,
                customerId: payload.customerId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.unassignPermissionFromUserGroup$ = this.actions$.pipe(ofType(UserGroupActions.USER_GROUP_UNASSIGN_PERMISSION), map((action) => action.payload), mergeMap((payload) => this.userGroupConnector
            .unassignOrderApprovalPermission(payload.userId, payload.userGroupId, payload.permissionUid)
            .pipe(switchMap((data) => [
            new UserGroupActions.UnassignPermissionSuccess({
                permissionUid: data.id,
                selected: data.selected,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new UserGroupActions.UnassignPermissionFail({
                userGroupId: payload.userGroupId,
                permissionUid: payload.permissionUid,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
        this.unassignAllMembersFromUserGroup$ = this.actions$.pipe(ofType(UserGroupActions.USER_GROUP_UNASSIGN_ALL_MEMBERS), map((action) => action.payload), switchMap((payload) => this.userGroupConnector
            .unassignAllMembers(payload.userId, payload.userGroupId)
            .pipe(switchMap(() => [
            new UserGroupActions.UnassignAllMembersSuccess({
                selected: false,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new UserGroupActions.UnassignAllMembersFail({
                userGroupId: payload.userGroupId,
                error: normalizeHttpError(error),
            }),
            new OrganizationActions.OrganizationClearData(),
        ])))));
    }
}
UserGroupEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupEffects, deps: [{ token: i1.Actions }, { token: i2.UserGroupConnector }], target: i0.ɵɵFactoryTarget.Injectable });
UserGroupEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupEffects });
__decorate([
    Effect()
], UserGroupEffects.prototype, "loadUserGroup$", void 0);
__decorate([
    Effect()
], UserGroupEffects.prototype, "loadUserGroups$", void 0);
__decorate([
    Effect()
], UserGroupEffects.prototype, "loadAvailableOrderApprovalPermissions$", void 0);
__decorate([
    Effect()
], UserGroupEffects.prototype, "loadAvailableOrgCustomers$", void 0);
__decorate([
    Effect()
], UserGroupEffects.prototype, "createUserGroup$", void 0);
__decorate([
    Effect()
], UserGroupEffects.prototype, "updateUserGroup$", void 0);
__decorate([
    Effect()
], UserGroupEffects.prototype, "deleteUserGroup$", void 0);
__decorate([
    Effect()
], UserGroupEffects.prototype, "assignPermissionToUserGroup$", void 0);
__decorate([
    Effect()
], UserGroupEffects.prototype, "assignMemberUnitUserGroup$", void 0);
__decorate([
    Effect()
], UserGroupEffects.prototype, "unassignMemberFromUserGroup$", void 0);
__decorate([
    Effect()
], UserGroupEffects.prototype, "unassignPermissionFromUserGroup$", void 0);
__decorate([
    Effect()
], UserGroupEffects.prototype, "unassignAllMembersFromUserGroup$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserGroupEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.UserGroupConnector }]; }, propDecorators: { loadUserGroup$: [], loadUserGroups$: [], loadAvailableOrderApprovalPermissions$: [], loadAvailableOrgCustomers$: [], createUserGroup$: [], updateUserGroup$: [], deleteUserGroup$: [], assignPermissionToUserGroup$: [], assignMemberUnitUserGroup$: [], unassignMemberFromUserGroup$: [], unassignPermissionFromUserGroup$: [], unassignAllMembersFromUserGroup$: [] } });
//# sourceMappingURL=data:application/json;base64,