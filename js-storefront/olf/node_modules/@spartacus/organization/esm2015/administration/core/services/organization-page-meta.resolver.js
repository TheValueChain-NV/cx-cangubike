import { Injectable } from '@angular/core';
import { PageMetaResolver, PageType, } from '@spartacus/core';
import { combineLatest, defer, of } from 'rxjs';
import { distinctUntilChanged, map, shareReplay, switchMap, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
/**
 * Resolves the page data for Organization Pages.
 *
 * Breadcrumbs are built in this implementation only.
 *
 * @property {string} ORGANIZATION_SEMANTIC_ROUTE the default root path for organization pages.
 * @property {string} ORGANIZATION_TRANSLATION_KEY the default i18n key for the organization breadcrumb label.
 */
export class OrganizationPageMetaResolver extends PageMetaResolver {
    constructor(contentPageMetaResolver, translation, semanticPath, routingService) {
        super();
        this.contentPageMetaResolver = contentPageMetaResolver;
        this.translation = translation;
        this.semanticPath = semanticPath;
        this.routingService = routingService;
        this.pageTemplate = 'CompanyPageTemplate';
        this.pageType = PageType.CONTENT_PAGE;
        /**
         * Translation key for the breadcrumb of Organization home page
         */
        this.ORGANIZATION_TRANSLATION_KEY = 'organization.breadcrumb';
        /**
         * The semantic route of the organization landing page. It's used to recognize whether
         * we are on this page. In such a case we avoid showing the breadcrumb for this page.
         */
        this.ORGANIZATION_SEMANTIC_ROUTE = 'organization';
        /**
         * Breadcrumb of the Organization page.
         * It's empty when the current page is the Organization page.
         */
        this.organizationPageBreadcrumb$ = defer(() => this.routingService.getRouterState()).pipe(map((routerState) => { var _a; return (_a = routerState === null || routerState === void 0 ? void 0 : routerState.state) === null || _a === void 0 ? void 0 : _a.semanticRoute; }), distinctUntilChanged(), switchMap((semanticRoute) => semanticRoute === this.ORGANIZATION_SEMANTIC_ROUTE
            ? of([])
            : this.translation.translate(this.ORGANIZATION_TRANSLATION_KEY).pipe(map((label) => [
                {
                    label,
                    link: this.semanticPath.get(this.ORGANIZATION_SEMANTIC_ROUTE),
                },
            ]))));
        /**
         * Breadcrumbs returned in the method #resolveBreadcrumbs.
         */
        this.breadcrumbs$ = combineLatest([
            this.organizationPageBreadcrumb$,
            defer(() => this.contentPageMetaResolver.resolveBreadcrumbs()),
        ]).pipe(map(([organizationPageBreadcrumb, breadcrumbs = []]) => {
            const [home, ...restBreadcrumbs] = breadcrumbs;
            return [home, ...organizationPageBreadcrumb, ...restBreadcrumbs];
        }), shareReplay({ bufferSize: 1, refCount: true }));
    }
    resolveTitle() {
        return this.contentPageMetaResolver.resolveTitle();
    }
    resolveDescription() {
        return this.contentPageMetaResolver.resolveDescription();
    }
    resolveRobots() {
        return this.contentPageMetaResolver.resolveRobots();
    }
    /**
     * Returns list of breadcrumbs for:
     * - the home page
     * - the organization home page
     * - the organization's child pages (i.e. cost center list)
     * - sub-routes of the organization's child pages (i.e. cost center details, edit cost center, ...)
     */
    resolveBreadcrumbs() {
        return this.breadcrumbs$;
    }
}
OrganizationPageMetaResolver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrganizationPageMetaResolver, deps: [{ token: i1.ContentPageMetaResolver }, { token: i1.TranslationService }, { token: i1.SemanticPathService }, { token: i1.RoutingService }], target: i0.ɵɵFactoryTarget.Injectable });
OrganizationPageMetaResolver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrganizationPageMetaResolver, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrganizationPageMetaResolver, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ContentPageMetaResolver }, { type: i1.TranslationService }, { type: i1.SemanticPathService }, { type: i1.RoutingService }]; } });
//# sourceMappingURL=data:application/json;base64,