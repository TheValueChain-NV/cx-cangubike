import { Store } from '@ngrx/store';
import { B2BUser, EntitiesModel, SearchConfig, StateWithProcess, UserIdService } from '@spartacus/core';
import { Observable } from 'rxjs';
import { OrganizationItemStatus } from '../model/organization-item-status';
import { Permission } from '../model/permission.model';
import { UserGroup } from '../model/user-group.model';
import { StateWithOrganization } from '../store/organization-state';
import * as i0 from "@angular/core";
export declare class UserGroupService {
    protected store: Store<StateWithOrganization | StateWithProcess<void>>;
    protected userIdService: UserIdService;
    constructor(store: Store<StateWithOrganization | StateWithProcess<void>>, userIdService: UserIdService);
    load(userGroupId: string): void;
    loadList(params?: SearchConfig): void;
    private getUserGroup;
    private getUserGroupValue;
    private getUserGroupList;
    private getAvailableOrgCustomersList;
    private getAvailableOrderApprovalPermissionsList;
    get(userGroupUid: string): Observable<UserGroup>;
    getList(params: SearchConfig): Observable<EntitiesModel<UserGroup>>;
    create(userGroup: UserGroup): void;
    update(userGroupId: string, userGroup: UserGroup): void;
    getLoadingStatus(budgetCode: string): Observable<OrganizationItemStatus<UserGroup>>;
    delete(userGroupId: string): void;
    loadAvailableOrgCustomers(userGroupId: string, params: SearchConfig): void;
    loadAvailableOrderApprovalPermissions(userGroupId: string, params: SearchConfig): void;
    getAvailableOrgCustomers(userGroupId: string, params: SearchConfig): Observable<EntitiesModel<B2BUser>>;
    getAvailableOrderApprovalPermissions(userGroupId: string, params: SearchConfig): Observable<EntitiesModel<Permission>>;
    assignMember(userGroupId: string, customerId: string): void;
    unassignMember(userGroupId: string, customerId: string): void;
    unassignAllMembers(userGroupId: string): void;
    assignPermission(userGroupId: string, permissionUid: string): void;
    unassignPermission(userGroupId: string, permissionUid: string): void;
    private getUserGroupState;
    getErrorState(code: any): Observable<boolean>;
    static ɵfac: i0.ɵɵFactoryDeclaration<UserGroupService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<UserGroupService>;
}
