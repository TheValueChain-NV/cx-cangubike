import { Store } from '@ngrx/store';
import { Address, B2BApprovalProcess, B2BUnit, B2BUser, CostCenter, EntitiesModel, SearchConfig, StateWithProcess, UserIdService } from '@spartacus/core';
import { Observable } from 'rxjs';
import { OrganizationItemStatus } from '../model/organization-item-status';
import { B2BUnitNode } from '../model/unit-node.model';
import { StateWithOrganization } from '../store/organization-state';
import * as i0 from "@angular/core";
export declare class OrgUnitService {
    protected store: Store<StateWithOrganization | StateWithProcess<void>>;
    protected userIdService: UserIdService;
    constructor(store: Store<StateWithOrganization | StateWithProcess<void>>, userIdService: UserIdService);
    clearAssignedUsersList(orgUnitId: string, roleId: string, params: SearchConfig): void;
    load(orgUnitId: string): void;
    loadList(): void;
    loadTree(): void;
    loadApprovalProcesses(): void;
    loadUsers(orgUnitId: string, roleId: string, params: SearchConfig): void;
    loadAddresses(orgUnitId: string): void;
    private getOrgUnit;
    private getOrgUnitValue;
    private getTreeState;
    private getOrgUnitsList;
    private getAddressesState;
    private getAddressState;
    private getAssignedUsers;
    private getApprovalProcessesList;
    get(orgUnitId: string): Observable<B2BUnit>;
    getCostCenters(orgUnitId: string): Observable<EntitiesModel<CostCenter>>;
    protected findUnitChildrenInTree(orginitId: any, unit: B2BUnitNode): B2BUnitNode[];
    getChildUnits(orgUnitId: string): Observable<EntitiesModel<B2BUnitNode>>;
    getTree(): Observable<B2BUnitNode>;
    getApprovalProcesses(): Observable<B2BApprovalProcess[]>;
    getList(): Observable<B2BUnitNode[]>;
    getActiveUnitList(): Observable<B2BUnitNode[]>;
    protected sortUnitList(a: B2BUnitNode, b: B2BUnitNode): 1 | -1 | 0;
    getUsers(orgUnitId: string, roleId: string, params: SearchConfig): Observable<EntitiesModel<B2BUser>>;
    getErrorState(orgCustomerId: any): Observable<boolean>;
    create(unit: B2BUnit): void;
    update(unitCode: string, unit: B2BUnit): void;
    getLoadingStatus(orgUnitId: string): Observable<OrganizationItemStatus<B2BUnit>>;
    assignRole(orgCustomerId: string, roleId: string): void;
    unassignRole(orgCustomerId: string, roleId: string): void;
    assignApprover(orgUnitId: string, orgCustomerId: string, roleId: string): void;
    unassignApprover(orgUnitId: string, orgCustomerId: string, roleId: string): void;
    createAddress(orgUnitId: string, address: Address): void;
    getAddresses(orgUnitId: string): Observable<EntitiesModel<Address>>;
    getAddress(orgUnitId: string, addressId: string): Observable<Address>;
    updateAddress(orgUnitId: string, addressId: string, address: Address): void;
    getAddressLoadingStatus(addressId: string): Observable<OrganizationItemStatus<Address>>;
    deleteAddress(orgUnitId: string, addressId: string): void;
    private getOrgUnitState;
    static ɵfac: i0.ɵɵFactoryDeclaration<OrgUnitService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<OrgUnitService>;
}
