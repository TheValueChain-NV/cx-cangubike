(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@spartacus/organization/administration/core'), require('@angular/common/http'), require('@spartacus/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@spartacus/organization/administration/occ', ['exports', '@angular/core', '@spartacus/organization/administration/core', '@angular/common/http', '@spartacus/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.organization = global.spartacus.organization || {}, global.spartacus.organization.administration = global.spartacus.organization.administration || {}, global.spartacus.organization.administration.occ = {}), global.ng.core, global.spartacus.organization.administration.core, global.ng.common.http, global.core, global.ng.common));
}(this, (function (exports, i0, core, i1, i2, common) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var OccBudgetAdapter = /** @class */ (function () {
        function OccBudgetAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccBudgetAdapter.prototype.load = function (userId, budgetCode) {
            return this.http
                .get(this.getBudgetEndpoint(userId, budgetCode))
                .pipe(this.converter.pipeable(core.BUDGET_NORMALIZER));
        };
        OccBudgetAdapter.prototype.loadList = function (userId, params) {
            return this.http
                .get(this.getBudgetsEndpoint(userId, params))
                .pipe(this.converter.pipeable(core.BUDGETS_NORMALIZER));
        };
        OccBudgetAdapter.prototype.create = function (userId, budget) {
            var convertedBudget = this.converter.convert(budget, core.BUDGET_SERIALIZER);
            return this.http
                .post(this.getBudgetsEndpoint(userId), convertedBudget)
                .pipe(this.converter.pipeable(core.BUDGET_NORMALIZER));
        };
        OccBudgetAdapter.prototype.update = function (userId, budgetCode, budget) {
            var convertedBudget = this.converter.convert(budget, core.BUDGET_SERIALIZER);
            return this.http
                .patch(this.getBudgetEndpoint(userId, budgetCode), convertedBudget)
                .pipe(this.converter.pipeable(core.BUDGET_NORMALIZER));
        };
        OccBudgetAdapter.prototype.getBudgetEndpoint = function (userId, budgetCode) {
            return this.occEndpoints.buildUrl('budget', {
                urlParams: { userId: userId, budgetCode: budgetCode },
            });
        };
        OccBudgetAdapter.prototype.getBudgetsEndpoint = function (userId, params) {
            return this.occEndpoints.buildUrl('budgets', {
                urlParams: { userId: userId },
                queryParams: params,
            });
        };
        return OccBudgetAdapter;
    }());
    OccBudgetAdapter.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccBudgetAdapter, deps: [{ token: i1__namespace.HttpClient }, { token: i2__namespace.OccEndpointsService }, { token: i2__namespace.ConverterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccBudgetAdapter.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccBudgetAdapter });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccBudgetAdapter, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.HttpClient }, { type: i2__namespace.OccEndpointsService }, { type: i2__namespace.ConverterService }]; } });

    var OccCostCenterAdapter = /** @class */ (function () {
        function OccCostCenterAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccCostCenterAdapter.prototype.load = function (userId, costCenterCode) {
            return this.http
                .get(this.getCostCenterEndpoint(userId, costCenterCode))
                .pipe(this.converter.pipeable(i2.COST_CENTER_NORMALIZER));
        };
        OccCostCenterAdapter.prototype.loadList = function (userId, params) {
            return this.http
                .get(this.getAllCostCentersEndpoint(userId, params))
                .pipe(this.converter.pipeable(i2.COST_CENTERS_NORMALIZER));
        };
        OccCostCenterAdapter.prototype.create = function (userId, costCenter) {
            costCenter = this.converter.convert(costCenter, i2.COST_CENTER_SERIALIZER);
            return this.http
                .post(this.getCostCentersEndpoint(userId), costCenter)
                .pipe(this.converter.pipeable(i2.COST_CENTER_NORMALIZER));
        };
        OccCostCenterAdapter.prototype.update = function (userId, costCenterCode, costCenter) {
            costCenter = this.converter.convert(costCenter, i2.COST_CENTER_SERIALIZER);
            return this.http
                .patch(this.getCostCenterEndpoint(userId, costCenterCode), costCenter)
                .pipe(this.converter.pipeable(i2.COST_CENTER_NORMALIZER));
        };
        OccCostCenterAdapter.prototype.loadBudgets = function (userId, costCenterCode, params) {
            return this.http
                .get(this.getBudgetsEndpoint(userId, costCenterCode, params))
                .pipe(this.converter.pipeable(core.BUDGETS_NORMALIZER));
        };
        OccCostCenterAdapter.prototype.assignBudget = function (userId, costCenterCode, budgetCode) {
            return this.http.post(this.getBudgetsEndpoint(userId, costCenterCode, { budgetCode: budgetCode }), null);
        };
        OccCostCenterAdapter.prototype.unassignBudget = function (userId, costCenterCode, budgetCode) {
            return this.http.delete(this.getBudgetEndpoint(userId, costCenterCode, budgetCode));
        };
        OccCostCenterAdapter.prototype.getCostCenterEndpoint = function (userId, costCenterCode) {
            return this.occEndpoints.buildUrl('costCenter', {
                urlParams: { userId: userId, costCenterCode: costCenterCode },
            });
        };
        OccCostCenterAdapter.prototype.getCostCentersEndpoint = function (userId, params) {
            return this.occEndpoints.buildUrl('costCenters', {
                urlParams: { userId: userId },
                queryParams: params,
            });
        };
        OccCostCenterAdapter.prototype.getAllCostCentersEndpoint = function (userId, params) {
            return this.occEndpoints.buildUrl('costCentersAll', {
                urlParams: { userId: userId },
                queryParams: params,
            });
        };
        OccCostCenterAdapter.prototype.getBudgetsEndpoint = function (userId, costCenterCode, params) {
            return this.occEndpoints.buildUrl('costCenterBudgets', {
                urlParams: { userId: userId, costCenterCode: costCenterCode },
                queryParams: params,
            });
        };
        OccCostCenterAdapter.prototype.getBudgetEndpoint = function (userId, costCenterCode, budgetCode) {
            return this.occEndpoints.buildUrl('costCenterBudget', {
                urlParams: {
                    userId: userId,
                    costCenterCode: costCenterCode,
                    budgetCode: budgetCode,
                },
            });
        };
        return OccCostCenterAdapter;
    }());
    OccCostCenterAdapter.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccCostCenterAdapter, deps: [{ token: i1__namespace.HttpClient }, { token: i2__namespace.OccEndpointsService }, { token: i2__namespace.ConverterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccCostCenterAdapter.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccCostCenterAdapter });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccCostCenterAdapter, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.HttpClient }, { type: i2__namespace.OccEndpointsService }, { type: i2__namespace.ConverterService }]; } });

    var OccOrgUnitAdapter = /** @class */ (function () {
        function OccOrgUnitAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccOrgUnitAdapter.prototype.load = function (userId, orgUnitId) {
            return this.http
                .get(this.getOrgUnitEndpoint(userId, orgUnitId))
                .pipe(this.converter.pipeable(core.B2BUNIT_NORMALIZER));
        };
        OccOrgUnitAdapter.prototype.create = function (userId, orgUnit) {
            return this.http
                .post(this.getOrgUnitsEndpoint(userId), orgUnit)
                .pipe(this.converter.pipeable(core.B2BUNIT_NORMALIZER));
        };
        OccOrgUnitAdapter.prototype.update = function (userId, orgUnitId, orgUnit) {
            orgUnit = this.converter.convert(orgUnit, core.B2BUNIT_SERIALIZER);
            return this.http
                .patch(this.getOrgUnitEndpoint(userId, orgUnitId), orgUnit)
                .pipe(this.converter.pipeable(core.B2BUNIT_NORMALIZER));
        };
        OccOrgUnitAdapter.prototype.loadTree = function (userId) {
            return this.http
                .get(this.getOrgUnitsTreeEndpoint(userId))
                .pipe(this.converter.pipeable(core.B2BUNIT_NODE_NORMALIZER));
        };
        OccOrgUnitAdapter.prototype.loadList = function (userId) {
            return this.http
                .get(this.getAvailableOrgUnitsEndpoint(userId))
                .pipe(this.converter.pipeable(core.B2BUNIT_NODE_LIST_NORMALIZER));
        };
        OccOrgUnitAdapter.prototype.loadApprovalProcesses = function (userId) {
            return this.http
                .get(this.getOrgUnitsApprovalProcessesEndpoint(userId))
                .pipe(this.converter.pipeable(core.B2BUNIT_APPROVAL_PROCESSES_NORMALIZER));
        };
        OccOrgUnitAdapter.prototype.loadUsers = function (userId, orgUnitId, roleId, params) {
            return this.http
                .get(this.getUsersEndpoint(userId, orgUnitId, roleId, params))
                .pipe(this.converter.pipeable(core.B2B_USERS_NORMALIZER));
        };
        OccOrgUnitAdapter.prototype.assignRole = function (userId, orgCustomerId, roleId) {
            return this.http.post(this.getRolesEndpoint(userId, orgCustomerId, { roleId: roleId }), null);
        };
        OccOrgUnitAdapter.prototype.unassignRole = function (userId, orgCustomerId, roleId) {
            return this.http.delete(this.getRoleEndpoint(userId, orgCustomerId, roleId));
        };
        OccOrgUnitAdapter.prototype.assignApprover = function (userId, orgUnitId, orgCustomerId, roleId) {
            return this.http.post(this.getApproversEndpoint(userId, orgUnitId, orgCustomerId, { roleId: roleId }), null);
        };
        OccOrgUnitAdapter.prototype.unassignApprover = function (userId, orgUnitId, orgCustomerId, roleId) {
            return this.http.delete(this.getApproverEndpoint(userId, orgUnitId, orgCustomerId, roleId));
        };
        OccOrgUnitAdapter.prototype.loadAddresses = function (userId, orgUnitId) {
            return this.http
                .get(this.getAddressesEndpoint(userId, orgUnitId))
                .pipe(this.converter.pipeable(i2.ADDRESS_LIST_NORMALIZER));
        };
        OccOrgUnitAdapter.prototype.createAddress = function (userId, orgUnitId, address) {
            address = this.converter.convert(address, i2.ADDRESS_SERIALIZER);
            return this.http
                .post(this.getAddressesEndpoint(userId, orgUnitId), address)
                .pipe(this.converter.pipeable(i2.ADDRESS_NORMALIZER));
        };
        OccOrgUnitAdapter.prototype.updateAddress = function (userId, orgUnitId, addressId, address) {
            address = this.converter.convert(address, i2.ADDRESS_SERIALIZER);
            return this.http
                .patch(this.getAddressEndpoint(userId, orgUnitId, addressId), address)
                .pipe(this.converter.pipeable(i2.ADDRESS_NORMALIZER));
        };
        OccOrgUnitAdapter.prototype.deleteAddress = function (userId, orgUnitId, addressId) {
            return this.http
                .delete(this.getAddressEndpoint(userId, orgUnitId, addressId))
                .pipe(this.converter.pipeable(i2.ADDRESS_NORMALIZER));
        };
        OccOrgUnitAdapter.prototype.getOrgUnitEndpoint = function (userId, orgUnitId) {
            return this.occEndpoints.buildUrl('orgUnit', {
                urlParams: { userId: userId, orgUnitId: orgUnitId },
            });
        };
        OccOrgUnitAdapter.prototype.getOrgUnitsEndpoint = function (userId) {
            return this.occEndpoints.buildUrl('orgUnits', { urlParams: { userId: userId } });
        };
        OccOrgUnitAdapter.prototype.getAvailableOrgUnitsEndpoint = function (userId) {
            return this.occEndpoints.buildUrl('orgUnitsAvailable', {
                urlParams: { userId: userId },
            });
        };
        OccOrgUnitAdapter.prototype.getOrgUnitsTreeEndpoint = function (userId) {
            return this.occEndpoints.buildUrl('orgUnitsTree', {
                urlParams: { userId: userId },
            });
        };
        OccOrgUnitAdapter.prototype.getOrgUnitsApprovalProcessesEndpoint = function (userId) {
            return this.occEndpoints.buildUrl('orgUnitsApprovalProcesses', {
                urlParams: { userId: userId },
            });
        };
        OccOrgUnitAdapter.prototype.getUsersEndpoint = function (userId, orgUnitId, roleId, params) {
            return this.occEndpoints.buildUrl('orgUnitUsers', {
                urlParams: {
                    userId: userId,
                    orgUnitId: orgUnitId,
                    roleId: roleId,
                },
                queryParams: params,
            });
        };
        OccOrgUnitAdapter.prototype.getRolesEndpoint = function (userId, orgCustomerId, params) {
            return this.occEndpoints.buildUrl('orgUnitUserRoles', {
                urlParams: { userId: userId, orgCustomerId: orgCustomerId },
                queryParams: params,
            });
        };
        OccOrgUnitAdapter.prototype.getRoleEndpoint = function (userId, orgCustomerId, roleId) {
            return this.occEndpoints.buildUrl('orgUnitUserRole', {
                urlParams: {
                    userId: userId,
                    orgCustomerId: orgCustomerId,
                    roleId: roleId,
                },
            });
        };
        OccOrgUnitAdapter.prototype.getApproversEndpoint = function (userId, orgUnitId, orgCustomerId, params) {
            return this.occEndpoints.buildUrl('orgUnitApprovers', {
                urlParams: { userId: userId, orgUnitId: orgUnitId, orgCustomerId: orgCustomerId },
                queryParams: params,
            });
        };
        OccOrgUnitAdapter.prototype.getApproverEndpoint = function (userId, orgUnitId, orgCustomerId, roleId) {
            return this.occEndpoints.buildUrl('orgUnitApprover', {
                urlParams: {
                    userId: userId,
                    orgUnitId: orgUnitId,
                    orgCustomerId: orgCustomerId,
                    roleId: roleId,
                },
            });
        };
        OccOrgUnitAdapter.prototype.getAddressesEndpoint = function (userId, orgUnitId) {
            return this.occEndpoints.buildUrl('orgUnitsAddresses', {
                urlParams: {
                    userId: userId,
                    orgUnitId: orgUnitId,
                },
            });
        };
        OccOrgUnitAdapter.prototype.getAddressEndpoint = function (userId, orgUnitId, addressId) {
            return this.occEndpoints.buildUrl('orgUnitsAddress', {
                urlParams: {
                    userId: userId,
                    orgUnitId: orgUnitId,
                    addressId: addressId,
                },
            });
        };
        return OccOrgUnitAdapter;
    }());
    OccOrgUnitAdapter.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitAdapter, deps: [{ token: i1__namespace.HttpClient }, { token: i2__namespace.OccEndpointsService }, { token: i2__namespace.ConverterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccOrgUnitAdapter.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitAdapter });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitAdapter, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.HttpClient }, { type: i2__namespace.OccEndpointsService }, { type: i2__namespace.ConverterService }]; } });

    var OccUserGroupAdapter = /** @class */ (function () {
        function OccUserGroupAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccUserGroupAdapter.prototype.load = function (userId, userGroupId) {
            return this.http
                .get(this.getUserGroupEndpoint(userId, userGroupId))
                .pipe(this.converter.pipeable(core.USER_GROUP_NORMALIZER));
        };
        OccUserGroupAdapter.prototype.loadList = function (userId, params) {
            return this.http
                .get(this.getUserGroupsEndpoint(userId, params))
                .pipe(this.converter.pipeable(core.USER_GROUPS_NORMALIZER));
        };
        OccUserGroupAdapter.prototype.loadAvailableOrderApprovalPermissions = function (userId, userGroupId, params) {
            return this.http
                .get(this.getPermissionsEndpoint(userId, userGroupId, params))
                .pipe(this.converter.pipeable(core.PERMISSIONS_NORMALIZER));
        };
        OccUserGroupAdapter.prototype.loadAvailableOrgCustomers = function (userId, userGroupId, params) {
            return this.http
                .get(this.getAvailableCustomersEndpoint(userId, userGroupId, params))
                .pipe(this.converter.pipeable(core.B2B_USERS_NORMALIZER));
        };
        OccUserGroupAdapter.prototype.create = function (userId, userGroup) {
            userGroup = this.converter.convert(userGroup, core.USER_GROUP_SERIALIZER);
            return this.http
                .post(this.getUserGroupsEndpoint(userId), userGroup)
                .pipe(this.converter.pipeable(core.USER_GROUP_NORMALIZER));
        };
        OccUserGroupAdapter.prototype.delete = function (userId, userGroupId) {
            return this.http
                .delete(this.getUserGroupEndpoint(userId, userGroupId))
                .pipe(this.converter.pipeable(core.USER_GROUP_NORMALIZER));
        };
        OccUserGroupAdapter.prototype.update = function (userId, userGroupId, userGroup) {
            userGroup = this.converter.convert(userGroup, core.USER_GROUP_SERIALIZER);
            return this.http
                .patch(this.getUserGroupEndpoint(userId, userGroupId), userGroup)
                .pipe(this.converter.pipeable(core.USER_GROUP_NORMALIZER));
        };
        OccUserGroupAdapter.prototype.assignMember = function (userId, userGroupId, orgCustomerId) {
            return this.http.post(this.getMembersEndpoint(userId, userGroupId, {
                orgCustomerId: orgCustomerId,
            }), null);
        };
        OccUserGroupAdapter.prototype.assignOrderApprovalPermission = function (userId, userGroupId, orderApprovalPermissionCode) {
            return this.http.post(this.getOrderApprovalPermissionsEndpoint(userId, userGroupId, {
                orderApprovalPermissionCode: orderApprovalPermissionCode,
            }), null);
        };
        OccUserGroupAdapter.prototype.unassignMember = function (userId, userGroupId, orgCustomerId) {
            return this.http.delete(this.getMemberEndpoint(userId, userGroupId, orgCustomerId));
        };
        OccUserGroupAdapter.prototype.unassignAllMembers = function (userId, userGroupId) {
            return this.http.delete(this.getMembersEndpoint(userId, userGroupId));
        };
        OccUserGroupAdapter.prototype.unassignOrderApprovalPermission = function (userId, userGroupId, orderApprovalPermissionCode) {
            return this.http.delete(this.getOrderApprovalPermissionEndpoint(userId, userGroupId, orderApprovalPermissionCode));
        };
        OccUserGroupAdapter.prototype.getUserGroupEndpoint = function (userId, userGroupId) {
            return this.occEndpoints.buildUrl('userGroup', {
                urlParams: {
                    userId: userId,
                    userGroupId: userGroupId,
                },
            });
        };
        OccUserGroupAdapter.prototype.getUserGroupsEndpoint = function (userId, params) {
            return this.occEndpoints.buildUrl('userGroups', {
                urlParams: { userId: userId },
                queryParams: params,
            });
        };
        OccUserGroupAdapter.prototype.getAvailableCustomersEndpoint = function (userId, userGroupId, params) {
            return this.occEndpoints.buildUrl('userGroupAvailableOrgCustomers', {
                urlParams: { userId: userId, userGroupId: userGroupId },
                queryParams: params,
            });
        };
        OccUserGroupAdapter.prototype.getPermissionsEndpoint = function (userId, userGroupId, params) {
            return this.occEndpoints.buildUrl('userGroupAvailableOrderApprovalPermissions', { urlParams: { userId: userId, userGroupId: userGroupId }, queryParams: params });
        };
        OccUserGroupAdapter.prototype.getMemberEndpoint = function (userId, userGroupId, orgCustomerId) {
            return this.occEndpoints.buildUrl('userGroupMember', {
                urlParams: {
                    userId: userId,
                    userGroupId: userGroupId,
                    orgCustomerId: orgCustomerId,
                },
            });
        };
        OccUserGroupAdapter.prototype.getMembersEndpoint = function (userId, userGroupId, params) {
            return this.occEndpoints.buildUrl('userGroupMembers', {
                urlParams: { userId: userId, userGroupId: userGroupId },
                queryParams: params,
            });
        };
        OccUserGroupAdapter.prototype.getOrderApprovalPermissionsEndpoint = function (userId, userGroupId, params) {
            return this.occEndpoints.buildUrl('userGroupOrderApprovalPermissions', {
                urlParams: { userId: userId, userGroupId: userGroupId },
                queryParams: params,
            });
        };
        OccUserGroupAdapter.prototype.getOrderApprovalPermissionEndpoint = function (userId, userGroupId, orderApprovalPermissionCode) {
            return this.occEndpoints.buildUrl('userGroupOrderApprovalPermission', {
                urlParams: {
                    userId: userId,
                    userGroupId: userGroupId,
                    orderApprovalPermissionCode: orderApprovalPermissionCode,
                },
            });
        };
        return OccUserGroupAdapter;
    }());
    OccUserGroupAdapter.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccUserGroupAdapter, deps: [{ token: i1__namespace.HttpClient }, { token: i2__namespace.OccEndpointsService }, { token: i2__namespace.ConverterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccUserGroupAdapter.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccUserGroupAdapter });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccUserGroupAdapter, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.HttpClient }, { type: i2__namespace.OccEndpointsService }, { type: i2__namespace.ConverterService }]; } });

    var OccPermissionAdapter = /** @class */ (function () {
        function OccPermissionAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccPermissionAdapter.prototype.load = function (userId, permissionCode) {
            return this.http
                .get(this.getPermissionEndpoint(userId, permissionCode))
                .pipe(this.converter.pipeable(core.PERMISSION_NORMALIZER));
        };
        OccPermissionAdapter.prototype.loadList = function (userId, params) {
            return this.http
                .get(this.getPermissionsEndpoint(userId, params))
                .pipe(this.converter.pipeable(core.PERMISSIONS_NORMALIZER));
        };
        OccPermissionAdapter.prototype.create = function (userId, permission) {
            permission = this.converter.convert(permission, core.PERMISSION_SERIALIZER);
            return this.http
                .post(this.getPermissionsEndpoint(userId), permission)
                .pipe(this.converter.pipeable(core.PERMISSION_NORMALIZER));
        };
        OccPermissionAdapter.prototype.update = function (userId, permissionCode, permission) {
            permission = this.converter.convert(permission, core.PERMISSION_SERIALIZER);
            return this.http
                .patch(this.getPermissionEndpoint(userId, permissionCode), permission)
                .pipe(this.converter.pipeable(core.PERMISSION_NORMALIZER));
        };
        OccPermissionAdapter.prototype.loadTypes = function () {
            return this.http
                .get(this.getPermissionTypesEndpoint())
                .pipe(this.converter.pipeable(core.PERMISSION_TYPES_NORMALIZER));
        };
        OccPermissionAdapter.prototype.getPermissionEndpoint = function (userId, orderApprovalPermissionCode) {
            return this.occEndpoints.buildUrl('permission', {
                urlParams: {
                    userId: userId,
                    orderApprovalPermissionCode: orderApprovalPermissionCode,
                },
            });
        };
        OccPermissionAdapter.prototype.getPermissionsEndpoint = function (userId, params) {
            return this.occEndpoints.buildUrl('permissions', {
                urlParams: { userId: userId },
                queryParams: params,
            });
        };
        OccPermissionAdapter.prototype.getPermissionTypesEndpoint = function () {
            return this.occEndpoints.buildUrl('orderApprovalPermissionTypes');
        };
        return OccPermissionAdapter;
    }());
    OccPermissionAdapter.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionAdapter, deps: [{ token: i1__namespace.HttpClient }, { token: i2__namespace.OccEndpointsService }, { token: i2__namespace.ConverterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccPermissionAdapter.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionAdapter });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionAdapter, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.HttpClient }, { type: i2__namespace.OccEndpointsService }, { type: i2__namespace.ConverterService }]; } });

    var OccB2BUserAdapter = /** @class */ (function () {
        function OccB2BUserAdapter(http, occEndpoints, converter) {
            this.http = http;
            this.occEndpoints = occEndpoints;
            this.converter = converter;
        }
        OccB2BUserAdapter.prototype.load = function (userId, orgUnitCustomerId) {
            return this.http
                .get(this.getB2BUserEndpoint(userId, orgUnitCustomerId))
                .pipe(this.converter.pipeable(core.B2B_USER_NORMALIZER));
        };
        OccB2BUserAdapter.prototype.loadList = function (userId, params) {
            return this.http
                .get(this.getB2BUsersEndpoint(userId, params))
                .pipe(this.converter.pipeable(core.B2B_USERS_NORMALIZER));
        };
        OccB2BUserAdapter.prototype.create = function (userId, orgCustomer) {
            orgCustomer = this.converter.convert(orgCustomer, core.B2B_USER_SERIALIZER);
            return this.http
                .post(this.getB2BUsersEndpoint(userId), orgCustomer)
                .pipe(this.converter.pipeable(core.B2B_USER_NORMALIZER));
        };
        OccB2BUserAdapter.prototype.update = function (userId, orgCustomerId, orgCustomer) {
            orgCustomer = this.converter.convert(orgCustomer, core.B2B_USER_SERIALIZER);
            return this.http
                .patch(this.getB2BUserEndpoint(userId, orgCustomerId), orgCustomer)
                .pipe(this.converter.pipeable(core.B2B_USER_NORMALIZER));
        };
        OccB2BUserAdapter.prototype.loadApprovers = function (userId, orgCustomerId, params) {
            return this.http
                .get(this.getApproversEndpoint(userId, orgCustomerId, params))
                .pipe(this.converter.pipeable(core.B2B_USERS_NORMALIZER));
        };
        OccB2BUserAdapter.prototype.assignApprover = function (userId, orgCustomerId, approverId) {
            return this.http.post(this.getApproverEndpoint(userId, orgCustomerId, approverId), null);
        };
        OccB2BUserAdapter.prototype.unassignApprover = function (userId, orgCustomerId, approverId) {
            return this.http.delete(this.getApproverEndpoint(userId, orgCustomerId, approverId));
        };
        OccB2BUserAdapter.prototype.loadPermissions = function (userId, orgCustomerId, params) {
            return this.http
                .get(this.getPermissionsEndpoint(userId, orgCustomerId, params))
                .pipe(this.converter.pipeable(core.PERMISSIONS_NORMALIZER));
        };
        OccB2BUserAdapter.prototype.assignPermission = function (userId, orgCustomerId, permissionId) {
            return this.http.post(this.getPermissionEndpoint(userId, orgCustomerId, permissionId), null);
        };
        OccB2BUserAdapter.prototype.unassignPermission = function (userId, orgCustomerId, permissionId) {
            return this.http.delete(this.getPermissionEndpoint(userId, orgCustomerId, permissionId));
        };
        OccB2BUserAdapter.prototype.loadUserGroups = function (userId, orgCustomerId, params) {
            return this.http
                .get(this.getUserGroupsEndpoint(userId, orgCustomerId, params))
                .pipe(this.converter.pipeable(core.USER_GROUPS_NORMALIZER));
        };
        OccB2BUserAdapter.prototype.assignUserGroup = function (userId, orgCustomerId, userGroupId) {
            return this.http.post(this.getUserGroupEndpoint(userId, orgCustomerId, userGroupId), null);
        };
        OccB2BUserAdapter.prototype.unassignUserGroup = function (userId, orgCustomerId, userGroupId) {
            return this.http.delete(this.getUserGroupEndpoint(userId, orgCustomerId, userGroupId));
        };
        OccB2BUserAdapter.prototype.getB2BUserEndpoint = function (userId, orgCustomerId) {
            return this.occEndpoints.buildUrl('b2bUser', {
                urlParams: {
                    userId: userId,
                    orgCustomerId: orgCustomerId,
                },
            });
        };
        OccB2BUserAdapter.prototype.getB2BUsersEndpoint = function (userId, params) {
            return this.occEndpoints.buildUrl('b2bUsers', {
                urlParams: { userId: userId },
                queryParams: params,
            });
        };
        OccB2BUserAdapter.prototype.getApproverEndpoint = function (userId, orgCustomerId, approverId) {
            return this.occEndpoints.buildUrl('b2bUserApprover', {
                urlParams: {
                    userId: userId,
                    orgCustomerId: orgCustomerId,
                    approverId: approverId,
                },
            });
        };
        OccB2BUserAdapter.prototype.getApproversEndpoint = function (userId, orgCustomerId, params) {
            return this.occEndpoints.buildUrl('b2bUserApprovers', {
                urlParams: { userId: userId, orgCustomerId: orgCustomerId },
                queryParams: params,
            });
        };
        OccB2BUserAdapter.prototype.getPermissionEndpoint = function (userId, orgCustomerId, premissionId) {
            return this.occEndpoints.buildUrl('b2bUserPermission', {
                urlParams: {
                    userId: userId,
                    orgCustomerId: orgCustomerId,
                    premissionId: premissionId,
                },
            });
        };
        OccB2BUserAdapter.prototype.getPermissionsEndpoint = function (userId, orgCustomerId, params) {
            return this.occEndpoints.buildUrl('b2bUserPermissions', {
                urlParams: {
                    userId: userId,
                    orgCustomerId: orgCustomerId,
                },
                queryParams: params,
            });
        };
        OccB2BUserAdapter.prototype.getUserGroupEndpoint = function (userId, orgCustomerId, userGroupId) {
            return this.occEndpoints.buildUrl('b2bUserUserGroup', {
                urlParams: {
                    userId: userId,
                    orgCustomerId: orgCustomerId,
                    userGroupId: userGroupId,
                },
            });
        };
        OccB2BUserAdapter.prototype.getUserGroupsEndpoint = function (userId, orgCustomerId, params) {
            return this.occEndpoints.buildUrl('b2bUserUserGroups', {
                urlParams: { userId: userId, orgCustomerId: orgCustomerId },
                queryParams: params,
            });
        };
        return OccB2BUserAdapter;
    }());
    OccB2BUserAdapter.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccB2BUserAdapter, deps: [{ token: i1__namespace.HttpClient }, { token: i2__namespace.OccEndpointsService }, { token: i2__namespace.ConverterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccB2BUserAdapter.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccB2BUserAdapter });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccB2BUserAdapter, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.HttpClient }, { type: i2__namespace.OccEndpointsService }, { type: i2__namespace.ConverterService }]; } });

    var defaultOccOrganizationConfig = {
        backend: {
            occ: {
                endpoints: {
                    budgets: '/users/${userId}/budgets',
                    budget: '/users/${userId}/budgets/${budgetCode}',
                    orgUnitsAvailable: '/users/${userId}/availableOrgUnitNodes',
                    orgUnitsTree: '/users/${userId}/orgUnitsRootNodeTree',
                    orgUnitsApprovalProcesses: '/users/${userId}/orgUnitsAvailableApprovalProcesses',
                    orgUnits: '/users/${userId}/orgUnits',
                    orgUnit: '/users/${userId}/orgUnits/${orgUnitId}',
                    orgUnitUsers: '/users/${userId}/orgUnits/${orgUnitId}/availableUsers/${roleId}',
                    orgUnitApprovers: '/users/${userId}/orgUnits/${orgUnitId}/orgCustomers/${orgCustomerId}/roles',
                    orgUnitApprover: '/users/${userId}/orgUnits/${orgUnitId}/orgCustomers/${orgCustomerId}/roles/${roleId}',
                    orgUnitUserRoles: '/users/${userId}/orgCustomers/${orgCustomerId}/roles',
                    orgUnitUserRole: '/users/${userId}/orgCustomers/${orgCustomerId}/roles/${roleId}',
                    orgUnitsAddresses: '/users/${userId}/orgUnits/${orgUnitId}/addresses',
                    orgUnitsAddress: '/users/${userId}/orgUnits/${orgUnitId}/addresses/${addressId}',
                    userGroups: '/users/${userId}/orgUnitUserGroups',
                    userGroup: '/users/${userId}/orgUnitUserGroups/${userGroupId}',
                    userGroupAvailableOrderApprovalPermissions: '/users/${userId}/orgUnitUserGroups/${userGroupId}/availableOrderApprovalPermissions',
                    userGroupAvailableOrgCustomers: '/users/${userId}/orgUnitUserGroups/${userGroupId}/availableOrgCustomers',
                    userGroupMembers: '/users/${userId}/orgUnitUserGroups/${userGroupId}/members',
                    userGroupMember: '/users/${userId}/orgUnitUserGroups/${userGroupId}/members/${orgCustomerId}',
                    userGroupOrderApprovalPermissions: '/users/${userId}/orgUnitUserGroups/${userGroupId}/orderApprovalPermissions',
                    userGroupOrderApprovalPermission: '/users/${userId}/orgUnitUserGroups/${userGroupId}/orderApprovalPermissions/${orderApprovalPermissionCode}',
                    costCenters: '/costcenters',
                    costCenter: '/costcenters/${costCenterCode}',
                    costCentersAll: '/costcentersall',
                    costCenterBudgets: '/costcenters/${costCenterCode}/budgets',
                    costCenterBudget: '/costcenters/${costCenterCode}/budgets/${budgetCode}',
                    permissions: '/users/${userId}/orderApprovalPermissions',
                    permission: '/users/${userId}/orderApprovalPermissions/${orderApprovalPermissionCode}',
                    orderApprovalPermissionTypes: '/orderApprovalPermissionTypes',
                    b2bUsers: '/users/${userId}/orgCustomers',
                    b2bUser: '/users/${userId}/orgCustomers/${orgCustomerId}',
                    b2bUserApprovers: '/users/${userId}/orgCustomers/${orgCustomerId}/approvers',
                    b2bUserApprover: '/users/${userId}/orgCustomers/${orgCustomerId}/approvers/${approverId}',
                    b2bUserUserGroups: '/users/${userId}/orgCustomers/${orgCustomerId}/orgUserGroups',
                    b2bUserUserGroup: '/users/${userId}/orgCustomers/${orgCustomerId}/orgUserGroups/${userGroupId}',
                    b2bUserPermissions: '/users/${userId}/orgCustomers/${orgCustomerId}/permissions',
                    b2bUserPermission: '/users/${userId}/orgCustomers/${orgCustomerId}/permissions/${premissionId}',
                },
            },
        },
    };

    var OccBudgetSerializer = /** @class */ (function () {
        function OccBudgetSerializer() {
        }
        OccBudgetSerializer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            if (source.startDate) {
                target.startDate = i2.TimeUtils.convertDateToDatetime(source.startDate);
            }
            if (source.endDate) {
                target.endDate = i2.TimeUtils.convertDateToDatetime(source.endDate, true);
            }
            return target;
        };
        return OccBudgetSerializer;
    }());
    OccBudgetSerializer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccBudgetSerializer, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccBudgetSerializer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccBudgetSerializer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccBudgetSerializer, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return []; } });

    var OccB2BUserNormalizer = /** @class */ (function () {
        function OccB2BUserNormalizer() {
        }
        OccB2BUserNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            target.email = source === null || source === void 0 ? void 0 : source.uid;
            return target;
        };
        return OccB2BUserNormalizer;
    }());
    OccB2BUserNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccB2BUserNormalizer, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccB2BUserNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccB2BUserNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccB2BUserNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return []; } });

    var OccB2bUserSerializer = /** @class */ (function () {
        function OccB2bUserSerializer() {
        }
        OccB2bUserSerializer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            delete target.isAssignedToApprovers;
            if (target.active === false) {
                target.roles = [];
            }
            return target;
        };
        return OccB2bUserSerializer;
    }());
    OccB2bUserSerializer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccB2bUserSerializer, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccB2bUserSerializer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccB2bUserSerializer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccB2bUserSerializer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return []; } });

    var OccBudgetListNormalizer = /** @class */ (function () {
        function OccBudgetListNormalizer(converter) {
            this.converter = converter;
        }
        OccBudgetListNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            target.values = source.budgets.map(function (budget) { return (Object.assign({}, _this.converter.convert(budget, core.BUDGET_NORMALIZER))); });
            return target;
        };
        return OccBudgetListNormalizer;
    }());
    OccBudgetListNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccBudgetListNormalizer, deps: [{ token: i2__namespace.ConverterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccBudgetListNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccBudgetListNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccBudgetListNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.ConverterService }]; } });

    var OccBudgetNormalizer = /** @class */ (function () {
        function OccBudgetNormalizer() {
        }
        OccBudgetNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            if (source.startDate) {
                target.startDate = i2.TimeUtils.convertDatetimeToDate(source.startDate);
            }
            if (source.endDate) {
                target.endDate = i2.TimeUtils.convertDatetimeToDate(source.endDate);
            }
            return target;
        };
        return OccBudgetNormalizer;
    }());
    OccBudgetNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccBudgetNormalizer, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccBudgetNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccBudgetNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccBudgetNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var OccOrgUnitApprovalProcessNormalizer = /** @class */ (function () {
        function OccOrgUnitApprovalProcessNormalizer() {
        }
        OccOrgUnitApprovalProcessNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = __spreadArray([], __read(source.approvalProcesses));
            }
            return target;
        };
        return OccOrgUnitApprovalProcessNormalizer;
    }());
    OccOrgUnitApprovalProcessNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitApprovalProcessNormalizer, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccOrgUnitApprovalProcessNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitApprovalProcessNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitApprovalProcessNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return []; } });

    var OccOrgUnitNodeListNormalizer = /** @class */ (function () {
        function OccOrgUnitNodeListNormalizer() {
        }
        OccOrgUnitNodeListNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = __spreadArray([], __read(source.unitNodes));
            }
            return target;
        };
        return OccOrgUnitNodeListNormalizer;
    }());
    OccOrgUnitNodeListNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitNodeListNormalizer, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccOrgUnitNodeListNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitNodeListNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitNodeListNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var OccOrgUnitNodeNormalizer = /** @class */ (function () {
        function OccOrgUnitNodeNormalizer() {
        }
        OccOrgUnitNodeNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            return target;
        };
        return OccOrgUnitNodeNormalizer;
    }());
    OccOrgUnitNodeNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitNodeNormalizer, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccOrgUnitNodeNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitNodeNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitNodeNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var OccOrgUnitNormalizer = /** @class */ (function () {
        function OccOrgUnitNormalizer() {
        }
        OccOrgUnitNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            return target;
        };
        return OccOrgUnitNormalizer;
    }());
    OccOrgUnitNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitNormalizer, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccOrgUnitNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccOrgUnitNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var OccPermissionListNormalizer = /** @class */ (function () {
        function OccPermissionListNormalizer(converter) {
            this.converter = converter;
        }
        OccPermissionListNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            target.values = source.orderApprovalPermissions.map(function (permission) { return (Object.assign({}, _this.converter.convert(permission, core.PERMISSION_NORMALIZER))); });
            return target;
        };
        return OccPermissionListNormalizer;
    }());
    OccPermissionListNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionListNormalizer, deps: [{ token: i2__namespace.ConverterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccPermissionListNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionListNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionListNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.ConverterService }]; } });

    var OccPermissionNormalizer = /** @class */ (function () {
        function OccPermissionNormalizer() {
        }
        OccPermissionNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            return target;
        };
        return OccPermissionNormalizer;
    }());
    OccPermissionNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionNormalizer, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccPermissionNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var OccPermissionTypeListNormalizer = /** @class */ (function () {
        function OccPermissionTypeListNormalizer(converter) {
            this.converter = converter;
        }
        OccPermissionTypeListNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            target = source.orderApprovalPermissionTypes.map(function (permissionType) { return _this.converter.convert(permissionType, core.PERMISSION_TYPE_NORMALIZER); });
            return target;
        };
        return OccPermissionTypeListNormalizer;
    }());
    OccPermissionTypeListNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionTypeListNormalizer, deps: [{ token: i2__namespace.ConverterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccPermissionTypeListNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionTypeListNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionTypeListNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.ConverterService }]; } });

    var OccPermissionTypeNormalizer = /** @class */ (function () {
        function OccPermissionTypeNormalizer() {
        }
        OccPermissionTypeNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            return target;
        };
        return OccPermissionTypeNormalizer;
    }());
    OccPermissionTypeNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionTypeNormalizer, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccPermissionTypeNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionTypeNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccPermissionTypeNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return []; } });

    var OccUserGroupListNormalizer = /** @class */ (function () {
        function OccUserGroupListNormalizer(converter) {
            this.converter = converter;
        }
        OccUserGroupListNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            target.values = source.orgUnitUserGroups.map(function (userGroup) { return (Object.assign({}, _this.converter.convert(userGroup, core.USER_GROUP_NORMALIZER))); });
            return target;
        };
        return OccUserGroupListNormalizer;
    }());
    OccUserGroupListNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccUserGroupListNormalizer, deps: [{ token: i2__namespace.ConverterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccUserGroupListNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccUserGroupListNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccUserGroupListNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.ConverterService }]; } });

    var OccUserGroupNormalizer = /** @class */ (function () {
        function OccUserGroupNormalizer() {
        }
        OccUserGroupNormalizer.prototype.convert = function (source, target) {
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            return target;
        };
        return OccUserGroupNormalizer;
    }());
    OccUserGroupNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccUserGroupNormalizer, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccUserGroupNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccUserGroupNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccUserGroupNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return []; } });

    var OccUserListNormalizer = /** @class */ (function () {
        function OccUserListNormalizer(converter) {
            this.converter = converter;
        }
        OccUserListNormalizer.prototype.convert = function (source, target) {
            var _this = this;
            if (target === undefined) {
                target = Object.assign({}, source);
            }
            target.values = source.users.map(function (b2bUser) { return (Object.assign({}, _this.converter.convert(b2bUser, core.B2B_USER_NORMALIZER))); });
            return target;
        };
        return OccUserListNormalizer;
    }());
    OccUserListNormalizer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccUserListNormalizer, deps: [{ token: i2__namespace.ConverterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OccUserListNormalizer.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccUserListNormalizer, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OccUserListNormalizer, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.ConverterService }]; } });

    var AdministrationOccModule = /** @class */ (function () {
        function AdministrationOccModule() {
        }
        return AdministrationOccModule;
    }());
    AdministrationOccModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationOccModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AdministrationOccModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationOccModule, imports: [common.CommonModule, i2.CostCenterOccModule] });
    AdministrationOccModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationOccModule, providers: [
            i2.provideDefaultConfig(defaultOccOrganizationConfig),
            {
                provide: core.BudgetAdapter,
                useClass: OccBudgetAdapter,
            },
            {
                provide: core.BUDGET_NORMALIZER,
                useExisting: OccBudgetNormalizer,
                multi: true,
            },
            {
                provide: core.BUDGET_SERIALIZER,
                useExisting: OccBudgetSerializer,
                multi: true,
            },
            {
                provide: core.BUDGETS_NORMALIZER,
                useExisting: OccBudgetListNormalizer,
                multi: true,
            },
            {
                provide: core.OrgUnitAdapter,
                useClass: OccOrgUnitAdapter,
            },
            {
                provide: core.B2BUNIT_NORMALIZER,
                useExisting: OccOrgUnitNormalizer,
                multi: true,
            },
            {
                provide: core.B2BUNIT_NODE_NORMALIZER,
                useExisting: OccOrgUnitNodeNormalizer,
                multi: true,
            },
            {
                provide: core.B2BUNIT_NODE_LIST_NORMALIZER,
                useExisting: OccOrgUnitNodeListNormalizer,
                multi: true,
            },
            {
                provide: core.B2BUNIT_APPROVAL_PROCESSES_NORMALIZER,
                useExisting: OccOrgUnitApprovalProcessNormalizer,
                multi: true,
            },
            {
                provide: core.UserGroupAdapter,
                useClass: OccUserGroupAdapter,
            },
            {
                provide: core.USER_GROUP_NORMALIZER,
                useExisting: OccUserGroupNormalizer,
                multi: true,
            },
            {
                provide: core.USER_GROUPS_NORMALIZER,
                useExisting: OccUserGroupListNormalizer,
                multi: true,
            },
            {
                provide: core.PermissionAdapter,
                useClass: OccPermissionAdapter,
            },
            {
                provide: core.PERMISSION_NORMALIZER,
                useExisting: OccPermissionNormalizer,
                multi: true,
            },
            {
                provide: core.PERMISSIONS_NORMALIZER,
                useExisting: OccPermissionListNormalizer,
                multi: true,
            },
            {
                provide: core.PERMISSION_TYPE_NORMALIZER,
                useExisting: OccPermissionTypeNormalizer,
                multi: true,
            },
            {
                provide: core.PERMISSION_TYPES_NORMALIZER,
                useExisting: OccPermissionTypeListNormalizer,
                multi: true,
            },
            {
                provide: core.CostCenterAdapter,
                useClass: OccCostCenterAdapter,
            },
            {
                provide: core.B2BUserAdapter,
                useClass: OccB2BUserAdapter,
            },
            {
                provide: core.B2B_USER_NORMALIZER,
                useExisting: OccB2BUserNormalizer,
                multi: true,
            },
            {
                provide: core.B2B_USER_SERIALIZER,
                useExisting: OccB2bUserSerializer,
                multi: true,
            },
            {
                provide: core.B2B_USERS_NORMALIZER,
                useExisting: OccUserListNormalizer,
                multi: true,
            },
        ], imports: [[common.CommonModule, i2.CostCenterOccModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationOccModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule, i2.CostCenterOccModule],
                        providers: [
                            i2.provideDefaultConfig(defaultOccOrganizationConfig),
                            {
                                provide: core.BudgetAdapter,
                                useClass: OccBudgetAdapter,
                            },
                            {
                                provide: core.BUDGET_NORMALIZER,
                                useExisting: OccBudgetNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.BUDGET_SERIALIZER,
                                useExisting: OccBudgetSerializer,
                                multi: true,
                            },
                            {
                                provide: core.BUDGETS_NORMALIZER,
                                useExisting: OccBudgetListNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.OrgUnitAdapter,
                                useClass: OccOrgUnitAdapter,
                            },
                            {
                                provide: core.B2BUNIT_NORMALIZER,
                                useExisting: OccOrgUnitNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.B2BUNIT_NODE_NORMALIZER,
                                useExisting: OccOrgUnitNodeNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.B2BUNIT_NODE_LIST_NORMALIZER,
                                useExisting: OccOrgUnitNodeListNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.B2BUNIT_APPROVAL_PROCESSES_NORMALIZER,
                                useExisting: OccOrgUnitApprovalProcessNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.UserGroupAdapter,
                                useClass: OccUserGroupAdapter,
                            },
                            {
                                provide: core.USER_GROUP_NORMALIZER,
                                useExisting: OccUserGroupNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.USER_GROUPS_NORMALIZER,
                                useExisting: OccUserGroupListNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.PermissionAdapter,
                                useClass: OccPermissionAdapter,
                            },
                            {
                                provide: core.PERMISSION_NORMALIZER,
                                useExisting: OccPermissionNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.PERMISSIONS_NORMALIZER,
                                useExisting: OccPermissionListNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.PERMISSION_TYPE_NORMALIZER,
                                useExisting: OccPermissionTypeNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.PERMISSION_TYPES_NORMALIZER,
                                useExisting: OccPermissionTypeListNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.CostCenterAdapter,
                                useClass: OccCostCenterAdapter,
                            },
                            {
                                provide: core.B2BUserAdapter,
                                useClass: OccB2BUserAdapter,
                            },
                            {
                                provide: core.B2B_USER_NORMALIZER,
                                useExisting: OccB2BUserNormalizer,
                                multi: true,
                            },
                            {
                                provide: core.B2B_USER_SERIALIZER,
                                useExisting: OccB2bUserSerializer,
                                multi: true,
                            },
                            {
                                provide: core.B2B_USERS_NORMALIZER,
                                useExisting: OccUserListNormalizer,
                                multi: true,
                            },
                        ],
                    }]
            }] });

    // Imported for side effects (module augmentation)

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AdministrationOccModule = AdministrationOccModule;
    exports.OccB2BUserAdapter = OccB2BUserAdapter;
    exports.OccB2BUserNormalizer = OccB2BUserNormalizer;
    exports.OccB2bUserSerializer = OccB2bUserSerializer;
    exports.OccBudgetAdapter = OccBudgetAdapter;
    exports.OccBudgetListNormalizer = OccBudgetListNormalizer;
    exports.OccBudgetNormalizer = OccBudgetNormalizer;
    exports.OccBudgetSerializer = OccBudgetSerializer;
    exports.OccCostCenterAdapter = OccCostCenterAdapter;
    exports.OccOrgUnitAdapter = OccOrgUnitAdapter;
    exports.OccOrgUnitApprovalProcessNormalizer = OccOrgUnitApprovalProcessNormalizer;
    exports.OccOrgUnitNodeListNormalizer = OccOrgUnitNodeListNormalizer;
    exports.OccOrgUnitNodeNormalizer = OccOrgUnitNodeNormalizer;
    exports.OccOrgUnitNormalizer = OccOrgUnitNormalizer;
    exports.OccPermissionAdapter = OccPermissionAdapter;
    exports.OccPermissionListNormalizer = OccPermissionListNormalizer;
    exports.OccPermissionNormalizer = OccPermissionNormalizer;
    exports.OccPermissionTypeListNormalizer = OccPermissionTypeListNormalizer;
    exports.OccPermissionTypeNormalizer = OccPermissionTypeNormalizer;
    exports.OccUserGroupAdapter = OccUserGroupAdapter;
    exports.OccUserGroupListNormalizer = OccUserGroupListNormalizer;
    exports.OccUserGroupNormalizer = OccUserGroupNormalizer;
    exports.OccUserListNormalizer = OccUserListNormalizer;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=spartacus-organization-administration-occ.umd.js.map
