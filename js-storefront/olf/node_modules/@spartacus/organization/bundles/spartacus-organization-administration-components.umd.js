(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@spartacus/core'), require('@angular/common'), require('@angular/forms'), require('@angular/router'), require('rxjs/operators'), require('@spartacus/storefront'), require('rxjs'), require('@spartacus/organization/administration/root'), require('@spartacus/organization/administration/core'), require('@ng-select/ng-select'), require('@spartacus/user/profile/root')) :
    typeof define === 'function' && define.amd ? define('@spartacus/organization/administration/components', ['exports', '@angular/core', '@spartacus/core', '@angular/common', '@angular/forms', '@angular/router', 'rxjs/operators', '@spartacus/storefront', 'rxjs', '@spartacus/organization/administration/root', '@spartacus/organization/administration/core', '@ng-select/ng-select', '@spartacus/user/profile/root'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.organization = global.spartacus.organization || {}, global.spartacus.organization.administration = global.spartacus.organization.administration || {}, global.spartacus.organization.administration.components = {}), global.ng.core, global.core, global.ng.common, global.ng.forms, global.ng.router, global.rxjs.operators, global.storefront, global.rxjs, global.spartacus.organization.administration.root, global.spartacus.organization.administration.core, global['ng-select'], global.i2$2));
}(this, (function (exports, i0, i3, i5, i8, i2, operators, i1, rxjs, root, i2$1, i5$1, i2$2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);

    /**
     * Abstract Base class for all organization entities. This class simplifies
     * the various entity implementation, that only differ by dependencies and
     * data model.
     */
    var CurrentItemService = /** @class */ (function () {
        function CurrentItemService(routingService) {
            var _this = this;
            this.routingService = routingService;
            /**
             * Observes the key for the active organization item. The active key is observed
             * from the list of route parameters. The full route parameter list is evaluated,
             * including child routes.
             *
             * To allow for specific ("semantic") route parameters, the route parameter _key_ is
             * retrieved from the `getParamKey`.
             */
            this.key$ = this.routingService
                .getParams()
                .pipe(operators.pluck(this.getParamKey()), operators.distinctUntilChanged());
            /**
             * Observes the active item.
             *
             * The active item is loaded by the active `key$`.
             */
            this.item$ = this.key$.pipe(operators.switchMap(function (code) { return (code ? _this.getItem(code) : rxjs.of(null)); }));
            /**
             * Observes the b2bUnit based on the unitCode route parameter.
             */
            this.b2bUnit$ = this.routingService
                .getParams()
                .pipe(operators.pluck(root.ROUTE_PARAMS.unitCode), operators.distinctUntilChanged());
        }
        CurrentItemService.prototype.getRouterParam = function (paramKey) {
            return this.routingService
                .getParams()
                .pipe(operators.map(function (params) { return params[paramKey]; }));
        };
        return CurrentItemService;
    }());
    CurrentItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentItemService, deps: [{ token: i3__namespace.RoutingService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CurrentItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentItemService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentItemService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i3__namespace.RoutingService }]; } });

    var FormService = /** @class */ (function () {
        function FormService() {
        }
        FormService.prototype.getForm = function (item) {
            if (this.form && !!item) {
                this.patchData(item);
                return this.form;
            }
            if (!this.form) {
                this.build(item);
            }
            // while we should be able to reset with initial value, this doesn't always work
            // hence, we're patching afterwards.
            this.form.reset();
            this.form.enable();
            this.patchData(item);
            return this.form;
        };
        FormService.prototype.patchData = function (item) {
            this.toggleFreeze(item);
            this.form.patchValue(Object.assign(Object.assign({}, this.defaultValue), item));
        };
        FormService.prototype.toggleFreeze = function (item) {
            var _a, _b;
            if (this.form.enabled && ((_a = item) === null || _a === void 0 ? void 0 : _a.active) === false) {
                this.form.disable();
            }
            if (this.form.disabled && ((_b = item) === null || _b === void 0 ? void 0 : _b.active) === true) {
                this.form.enable();
            }
        };
        Object.defineProperty(FormService.prototype, "defaultValue", {
            /**
             * returns the default form value.
             */
            get: function () {
                return {};
            },
            enumerable: false,
            configurable: true
        });
        return FormService;
    }());
    FormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: FormService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: FormService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: FormService, decorators: [{
                type: i0.Injectable
            }] });

    /**
     * Provides CRUD operations for all organization entities.
     *
     * This base class simplifies the various entity implementation, and ensures a consistent
     * component implementation.
     */
    var ItemService = /** @class */ (function () {
        function ItemService(currentItemService, routingService, formService) {
            var _this = this;
            this.currentItemService = currentItemService;
            this.routingService = routingService;
            this.formService = formService;
            this.key$ = this.currentItemService.key$;
            this.current$ = this.currentItemService.item$;
            this.isInEditMode$ = new rxjs.BehaviorSubject(false);
            /**
             * Returns the current business unit code.
             *
             * The current unit is driven by the route parameter.
             */
            this.unit$ = this.currentItemService.b2bUnit$;
            this.error$ = this.key$.pipe(operators.switchMap(function (key) { return _this.currentItemService.getError(key); }));
        }
        ItemService.prototype.save = function (form, key) {
            if (form.invalid) {
                form.markAllAsTouched();
                i1.FormUtils.deepUpdateValueAndValidity(form);
                return rxjs.of();
            }
            else {
                /**
                 * This assignment is needed to re-use form value after `form.disable()` call
                 * In some cases value was converted by `form.disable()` into empty object
                 */
                var formValue = form.value;
                form.disable();
                return key ? this.update(key, formValue) : this.create(formValue);
            }
        };
        ItemService.prototype.getForm = function (item) {
            return this.formService.getForm(item);
        };
        /**
         * Launches the detailed route for the given item item.
         */
        ItemService.prototype.launchDetails = function (item) {
            var cxRoute = this.getDetailsRoute();
            var params = this.buildRouteParams(item);
            if (cxRoute && item && Object.keys(item).length > 0) {
                this.routingService.go({ cxRoute: cxRoute, params: params });
            }
        };
        /**
         * Returns the route parameters that are used when launching the
         * details page. The route parameters default to the actual item,
         * but can be further populated in implementations.
         *
         * Customized route parameters are useful in case the actual item
         * doesn't match the expected route parameters. You can manipulate
         * the parameter data.
         */
        ItemService.prototype.buildRouteParams = function (item) {
            return item;
        };
        ItemService.prototype.getRouterParam = function (key) {
            return this.currentItemService.getRouterParam(key);
        };
        /**
         * Sets to true when the user is on the entity item form page
         */
        ItemService.prototype.setEditMode = function (isInEdit) {
            this.isInEditMode$.next(isInEdit);
        };
        return ItemService;
    }());
    ItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemService, deps: [{ token: CurrentItemService }, { token: i3__namespace.RoutingService }, { token: FormService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: CurrentItemService }, { type: i3__namespace.RoutingService }, { type: FormService }]; } });

    var DEFAULT_INFO_TIMEOUT = 3000;
    var MessageService = /** @class */ (function () {
        function MessageService() {
            this.data$ = new rxjs.ReplaySubject();
        }
        MessageService.prototype.get = function () {
            return this.data$;
        };
        MessageService.prototype.add = function (message) {
            message = Object.assign(Object.assign({}, this.getDefaultMessage(message)), message);
            message.events = new rxjs.Subject();
            this.data$.next(message);
            return message.events;
        };
        MessageService.prototype.close = function (message) {
            message.next({ close: true });
        };
        /**
         * Sets the message type to INFO, and adds a default timeout
         * for info messages.
         */
        MessageService.prototype.getDefaultMessage = function (message) {
            var defaultMessage = {
                type: i3.GlobalMessageType.MSG_TYPE_INFO,
            };
            if (!message.type ||
                (message.type === i3.GlobalMessageType.MSG_TYPE_INFO && !message.timeout)) {
                defaultMessage.timeout = DEFAULT_INFO_TIMEOUT;
            }
            return defaultMessage;
        };
        MessageService.prototype.clear = function () {
            this.data$.next();
        };
        return MessageService;
    }());
    MessageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MessageService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MessageService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MessageService, decorators: [{
                type: i0.Injectable
            }] });

    var ItemActiveDirective = /** @class */ (function () {
        function ItemActiveDirective(itemService, messageService) {
            this.itemService = itemService;
            this.messageService = messageService;
        }
        ItemActiveDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription = this.itemService.current$
                .pipe(operators.distinctUntilChanged(function (previous, current) { return (previous === null || previous === void 0 ? void 0 : previous.active) === (current === null || current === void 0 ? void 0 : current.active); }), operators.filter(function (item) { return item && (item === null || item === void 0 ? void 0 : item.active) === false; }))
                .subscribe(function (item) { return _this.handleDisabledItems(item); });
        };
        ItemActiveDirective.prototype.handleDisabledItems = function (item) {
            this.messageService.add({
                message: {
                    key: 'organization.notification.disabled',
                    params: { item: item },
                },
                type: i3.GlobalMessageType.MSG_TYPE_ERROR,
            });
        };
        ItemActiveDirective.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        };
        return ItemActiveDirective;
    }());
    ItemActiveDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemActiveDirective, deps: [{ token: ItemService }, { token: MessageService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    ItemActiveDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.5", type: ItemActiveDirective, selector: "[cxOrgItemActive]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemActiveDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[cxOrgItemActive]',
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: MessageService }]; } });

    var ItemActiveModule = /** @class */ (function () {
        function ItemActiveModule() {
        }
        return ItemActiveModule;
    }());
    ItemActiveModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemActiveModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ItemActiveModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemActiveModule, declarations: [ItemActiveDirective], imports: [i5.CommonModule], exports: [ItemActiveDirective] });
    ItemActiveModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemActiveModule, imports: [[i5.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemActiveModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule],
                        declarations: [ItemActiveDirective],
                        exports: [ItemActiveDirective],
                    }]
            }] });

    var MessageData = /** @class */ (function () {
        function MessageData() {
        }
        return MessageData;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    // eslint-disable-next-line @angular-eslint/directive-class-suffix
    var BaseMessageComponent = /** @class */ (function () {
        function BaseMessageComponent(messageData, platformId) {
            this.messageData = messageData;
            this.platformId = platformId;
            this.terminated = false;
        }
        BaseMessageComponent.prototype.ngOnInit = function () {
            var _a;
            this.message = (_a = this.messageData.message) !== null && _a !== void 0 ? _a : {};
            this.messageTitle = this.messageData.messageTitle;
            this.type = this.resolveType();
            this.messageIcon = this.messageData.messageIcon;
            if (this.messageData.timeout) {
                this.handleAutoHide();
            }
        };
        BaseMessageComponent.prototype.close = function () {
            this.messageData.events.next({ close: true });
        };
        BaseMessageComponent.prototype.resolveType = function () {
            if (!this.messageData.type ||
                this.messageData.type === i3.GlobalMessageType.MSG_TYPE_INFO) {
                return 'info';
            }
            if (this.messageData.type === i3.GlobalMessageType.MSG_TYPE_ERROR) {
                return 'error';
            }
            if (this.messageData.type === i3.GlobalMessageType.MSG_TYPE_WARNING) {
                return 'warning';
            }
        };
        BaseMessageComponent.prototype.handleAutoHide = function () {
            var _this = this;
            if (i5.isPlatformBrowser(this.platformId)) {
                // we don't want to run this logic when doing SSR
                setTimeout(function () {
                    _this.close();
                }, this.messageData.timeout);
            }
        };
        return BaseMessageComponent;
    }());
    BaseMessageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BaseMessageComponent, deps: [{ token: MessageData }, { token: i0.PLATFORM_ID }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    BaseMessageComponent.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.5", type: BaseMessageComponent, host: { properties: { "class": "this.type", "class.terminated": "this.terminated" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BaseMessageComponent, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () {
            return [{ type: MessageData }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }];
        }, propDecorators: { type: [{
                    type: i0.HostBinding,
                    args: ['class']
                }], terminated: [{
                    type: i0.HostBinding,
                    args: ['class.terminated']
                }] } });

    var NotificationMessageComponent = /** @class */ (function (_super) {
        __extends(NotificationMessageComponent, _super);
        function NotificationMessageComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.closeIcon = i1.ICON_TYPE.CLOSE;
            return _this;
        }
        return NotificationMessageComponent;
    }(BaseMessageComponent));
    NotificationMessageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NotificationMessageComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    NotificationMessageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: NotificationMessageComponent, selector: "cx-org-notification", usesInheritance: true, ngImport: i0__namespace, template: "<div\n  class=\"inner\"\n  [cxFocus]=\"{ autofocus: true, focusOnEscape: true }\"\n  (esc)=\"close()\"\n>\n  <cx-icon *ngIf=\"messageIcon\" [type]=\"messageIcon\"></cx-icon>\n  <p>{{ message | cxTranslate }}</p>\n  <button class=\"close\" (click)=\"close()\" type=\"button\">\n    <cx-icon [type]=\"closeIcon\"></cx-icon>\n  </button>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }], directives: [{ type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NotificationMessageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-notification',
                        templateUrl: './notification-message.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var MessageRenderService = /** @class */ (function () {
        function MessageRenderService(componentFactoryResolver) {
            this.componentFactoryResolver = componentFactoryResolver;
        }
        MessageRenderService.prototype.getComponent = function (msg) {
            return this.componentFactoryResolver.resolveComponentFactory(msg.component || NotificationMessageComponent);
        };
        MessageRenderService.prototype.getInjector = function (componentData, parent) {
            return i0.Injector.create({
                providers: [
                    {
                        provide: MessageData,
                        useValue: componentData,
                    },
                ],
                parent: parent,
            });
        };
        return MessageRenderService;
    }());
    MessageRenderService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MessageRenderService, deps: [{ token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessageRenderService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MessageRenderService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MessageRenderService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }]; } });

    var MessageComponent = /** @class */ (function () {
        function MessageComponent(messageService, renderService) {
            this.messageService = messageService;
            this.renderService = renderService;
            this.subscription = new rxjs.Subscription();
        }
        MessageComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.subscription.add(this.messageService.get().subscribe(function (msg) {
                var _a;
                if (msg) {
                    _this.render(msg);
                }
                else {
                    (_a = _this.vcr) === null || _a === void 0 ? void 0 : _a.clear();
                }
            }));
        };
        MessageComponent.prototype.render = function (msg) {
            var _this = this;
            var ref = this.vcr.createComponent(this.renderService.getComponent(msg), 0, this.renderService.getInjector(msg, this.vcr.injector));
            ref.injector.get(i0.ChangeDetectorRef).markForCheck();
            this.subscription.add(msg.events
                .pipe(operators.filter(function (event) { return !!event.close; }))
                .subscribe(function () { return _this.terminate(ref); }));
        };
        /**
         * Terminates the message component in 2 steps. It starts to toggle the terminate
         * state of the component and shortly after destroys the component completely. The
         * termination state allows the CSS layer to play an animation before destroying.
         */
        MessageComponent.prototype.terminate = function (ref) {
            ref.instance.terminated = true;
            ref.injector.get(i0.ChangeDetectorRef).markForCheck();
            setTimeout(function () {
                ref.destroy();
            }, 500);
        };
        MessageComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        return MessageComponent;
    }());
    MessageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MessageComponent, deps: [{ token: MessageService }, { token: MessageRenderService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MessageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: MessageComponent, selector: "cx-org-message", viewQueries: [{ propertyName: "vcr", first: true, predicate: ["vcr"], descendants: true, read: i0.ViewContainerRef }], ngImport: i0__namespace, template: "<ng-container #vcr></ng-container>\n", changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MessageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-message',
                        templateUrl: './message.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: MessageService }, { type: MessageRenderService }]; }, propDecorators: { vcr: [{
                    type: i0.ViewChild,
                    args: ['vcr', { read: i0.ViewContainerRef }]
                }] } });

    var NotificationMessageModule = /** @class */ (function () {
        function NotificationMessageModule() {
        }
        return NotificationMessageModule;
    }());
    NotificationMessageModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NotificationMessageModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    NotificationMessageModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NotificationMessageModule, declarations: [NotificationMessageComponent], imports: [i5.CommonModule, i3.I18nModule, i1.IconModule, i1.KeyboardFocusModule] });
    NotificationMessageModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NotificationMessageModule, imports: [[i5.CommonModule, i3.I18nModule, i1.IconModule, i1.KeyboardFocusModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NotificationMessageModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i3.I18nModule, i1.IconModule, i1.KeyboardFocusModule],
                        declarations: [NotificationMessageComponent],
                    }]
            }] });

    var MessageModule = /** @class */ (function () {
        function MessageModule() {
        }
        return MessageModule;
    }());
    MessageModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MessageModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessageModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MessageModule, declarations: [MessageComponent], imports: [i5.CommonModule, NotificationMessageModule], exports: [MessageComponent] });
    MessageModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MessageModule, imports: [[i5.CommonModule, NotificationMessageModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MessageModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, NotificationMessageModule],
                        declarations: [MessageComponent],
                        exports: [MessageComponent],
                    }]
            }] });

    var CardComponent = /** @class */ (function () {
        function CardComponent(itemService, messageService) {
            var _this = this;
            this.itemService = itemService;
            this.messageService = messageService;
            this.previous = true;
            this.showHint = false;
            this.iconTypes = i1.ICON_TYPE;
            this.item$ = this.itemService.current$.pipe(operators.tap(function (item) { return _this.refreshMessages(item); }));
        }
        /**
         * The views are router based, which means if we close a view, the router outlet is
         * cleaned immediately. To prevent this, we're closing the view manually, before
         * navigating back.
         */
        CardComponent.prototype.closeView = function (event) {
            event.stopPropagation();
            this.view.toggle(true);
            setTimeout(function () {
                var _a;
                (_a = event.target) === null || _a === void 0 ? void 0 : _a.parentElement.click();
            }, 500);
            return false;
        };
        Object.defineProperty(CardComponent.prototype, "previousLabel", {
            get: function () {
                return this.previous;
            },
            enumerable: false,
            configurable: true
        });
        CardComponent.prototype.refreshMessages = function (item) {
            var _a, _b;
            if (this.itemKey !== undefined &&
                (item === null || item === void 0 ? void 0 : item.code) !== this.itemKey &&
                (item === null || item === void 0 ? void 0 : item.uid) !== this.itemKey &&
                (item === null || item === void 0 ? void 0 : item.customerId) !== this.itemKey) {
                this.messageService.clear();
            }
            this.itemKey = (_b = (_a = item === null || item === void 0 ? void 0 : item.code) !== null && _a !== void 0 ? _a : item === null || item === void 0 ? void 0 : item.uid) !== null && _b !== void 0 ? _b : item === null || item === void 0 ? void 0 : item.customerId;
        };
        return CardComponent;
    }());
    CardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CardComponent, deps: [{ token: ItemService }, { token: MessageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CardComponent, selector: "cx-org-card", inputs: { i18nRoot: "i18nRoot", previous: "previous", subtitle: "subtitle", showHint: "showHint" }, host: { classAttribute: "content-wrapper" }, providers: [MessageService], viewQueries: [{ propertyName: "view", first: true, predicate: i1.ViewComponent, descendants: true, read: i1.ViewComponent }], ngImport: i0__namespace, template: "<cx-view class=\"card\">\n  <div class=\"header\">\n    <div class=\"title-bar\">\n      <div class=\"title\">\n        <h3>\n          {{ i18nRoot + '.title' | cxTranslate: { item: item$ | async } }}\n          <button\n            *ngIf=\"showHint\"\n            [cxPopover]=\"detailHint\"\n            [cxPopoverOptions]=\"{\n              placement: 'auto',\n              class: 'hint-popover',\n              appendToBody: true,\n              displayCloseButton: true\n            }\"\n          >\n            <cx-icon [type]=\"iconTypes.INFO\"> </cx-icon>\n          </button>\n        </h3>\n        <h4>\n          {{\n            subtitle ||\n              (i18nRoot + '.subtitle' | cxTranslate: { item: item$ | async })\n          }}\n        </h4>\n      </div>\n      <div class=\"actions\">\n        <ng-content select=\"[actions]\"></ng-content>\n      </div>\n    </div>\n    <a *ngIf=\"!!previous\" class=\"link close\" routerLink=\"../\">\n      <cx-icon\n        *ngIf=\"previous === true; else prevLabel\"\n        type=\"CLOSE\"\n        (click)=\"closeView($event)\"\n      ></cx-icon>\n      <ng-template #prevLabel>{{ previousLabel | cxTranslate }}</ng-template>\n    </a>\n  </div>\n\n  <div class=\"main\">\n    <cx-org-message></cx-org-message>\n    <ng-content select=\"[info]\"></ng-content>\n    <ng-content select=\"[main]\"></ng-content>\n  </div>\n</cx-view>\n\n<router-outlet></router-outlet>\n\n<ng-template #detailHint>\n  <p>\n    {{ i18nRoot + '.hint' | cxTranslate }}\n  </p>\n</ng-template>\n", components: [{ type: i1__namespace.ViewComponent, selector: "cx-view", inputs: ["position", "hidden"], outputs: ["hiddenChange"] }, { type: i1__namespace.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { type: MessageComponent, selector: "cx-org-message" }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.PopoverDirective, selector: "[cxPopover]", inputs: ["cxPopover", "cxPopoverOptions"], outputs: ["openPopover", "closePopover"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2__namespace.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-card',
                        templateUrl: './card.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [MessageService],
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: MessageService }]; }, propDecorators: { i18nRoot: [{
                    type: i0.Input
                }], previous: [{
                    type: i0.Input
                }], subtitle: [{
                    type: i0.Input
                }], showHint: [{
                    type: i0.Input
                }], view: [{
                    type: i0.ViewChild,
                    args: [i1.ViewComponent, { read: i1.ViewComponent }]
                }] } });

    /**
     * Provides a reusable card UI component for the organization split views.
     *
     * The component does not intend to provide a complete set of card features, it's just
     * a reusable component inside the organization UI.
     */
    var CardModule = /** @class */ (function () {
        function CardModule() {
        }
        return CardModule;
    }());
    CardModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CardModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CardModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CardModule, declarations: [CardComponent], imports: [i5.CommonModule,
            i1.SplitViewModule,
            i2.RouterModule,
            i3.I18nModule,
            i1.IconModule,
            i3.UrlModule,
            MessageModule,
            i1.PopoverModule], exports: [CardComponent] });
    CardModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CardModule, imports: [[
                i5.CommonModule,
                i1.SplitViewModule,
                i2.RouterModule,
                i3.I18nModule,
                i1.IconModule,
                i3.UrlModule,
                MessageModule,
                i1.PopoverModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CardModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i1.SplitViewModule,
                            i2.RouterModule,
                            i3.I18nModule,
                            i1.IconModule,
                            i3.UrlModule,
                            MessageModule,
                            i1.PopoverModule,
                        ],
                        declarations: [CardComponent],
                        exports: [CardComponent],
                    }]
            }] });

    var DISABLED_STATUS = 'DISABLED';
    /**
     * Reusable component for creating and editing organization items. The component does not
     * know anything about form specific.
     */
    var FormComponent = /** @class */ (function () {
        function FormComponent(itemService, messageService) {
            var _this = this;
            this.itemService = itemService;
            this.messageService = messageService;
            this.animateBack = true;
            this.form$ = this.itemService.current$.pipe(operators.map(function (item) {
                _this.setI18nRoot(item);
                if (!item) {
                    // we trick the form builder...
                    item = {};
                }
                return _this.itemService.getForm(item);
            }));
            /**
             * To handle the case of receiving a negative response during creation an item
             */
            this.disabled$ = this.form$.pipe(operators.switchMap(function (form) { return form.statusChanges; }), operators.map(function (status) { return status === DISABLED_STATUS; }));
        }
        FormComponent.prototype.save = function (form) {
            var _this = this;
            this.itemService.key$
                .pipe(operators.first(), operators.switchMap(function (key) { return _this.itemService.save(form, key).pipe(operators.take(1), operators.map(function (data) { return ({
                item: data.item,
                status: data.status,
                action: key ? 'update' : 'create',
            }); })); }))
                .subscribe(function (_a) {
                var item = _a.item, action = _a.action, status = _a.status;
                if (status === i2$1.LoadStatus.SUCCESS) {
                    _this.itemService.launchDetails(item);
                    _this.notify(item, action);
                }
                form.enable();
            });
        };
        FormComponent.prototype.notify = function (item, action) {
            this.messageService.add({
                message: {
                    key: this.i18nRoot + ".messages." + action,
                    params: {
                        item: item,
                    },
                },
            });
        };
        FormComponent.prototype.setI18nRoot = function (item) {
            // concatenate the i18n root with .edit or .create suffix
            this.i18n = this.i18nRoot + (item ? '.edit' : '.create');
        };
        FormComponent.prototype.back = function (event, card) {
            if (this.animateBack) {
                card.closeView(event);
            }
        };
        FormComponent.prototype.ngOnInit = function () {
            this.itemService.setEditMode(true);
        };
        FormComponent.prototype.ngOnDestroy = function () {
            this.itemService.setEditMode(false);
        };
        return FormComponent;
    }());
    FormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: FormComponent, deps: [{ token: ItemService }, { token: MessageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: FormComponent, selector: "cx-org-form", inputs: { i18nRoot: "i18nRoot", animateBack: "animateBack", subtitle: "subtitle" }, host: { classAttribute: "content-wrapper" }, ngImport: i0__namespace, template: "<form *ngIf=\"form$ | async as form\" (submit)=\"save(form)\">\n  <cx-org-card\n    #card\n    [previous]=\"false\"\n    [i18nRoot]=\"i18n\"\n    cxOrgItemActive\n    [subtitle]=\"subtitle\"\n    [cxFocus]=\"{ autofocus: 'input', refreshFocus: form }\"\n  >\n    <button\n      actions\n      class=\"button primary\"\n      [disabled]=\"form.disabled || (disabled$ | async)\"\n    >\n      {{ 'organization.save' | cxTranslate }}\n    </button>\n    <button actions class=\"link\" routerLink=\"../\" type=\"button\">\n      <!--\n        We leverage the soft-close feature from the split view, so that the animation\n        has time to kick in before the router outlet is deleted.\n       -->\n      <span (click)=\"back($event, card)\">{{\n        'organization.cancel' | cxTranslate\n      }}</span>\n    </button>\n\n    <section main class=\"details\">\n      <ng-content select=\"[main]\" ngProjectAs=\"[main]\"></ng-content>\n    </section>\n  </cx-org-card>\n</form>\n", components: [{ type: CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i8__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8__namespace.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: ItemActiveDirective, selector: "[cxOrgItemActive]" }, { type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i2__namespace.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["routerLink", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: FormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-form',
                        templateUrl: './form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: MessageService }]; }, propDecorators: { i18nRoot: [{
                    type: i0.Input
                }], animateBack: [{
                    type: i0.Input
                }], subtitle: [{
                    type: i0.Input
                }] } });

    var FormModule = /** @class */ (function () {
        function FormModule() {
        }
        return FormModule;
    }());
    FormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: FormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: FormModule, declarations: [FormComponent], imports: [i5.CommonModule,
            i8.FormsModule,
            i3.I18nModule,
            i2.RouterModule,
            CardModule,
            MessageModule,
            ItemActiveModule,
            i1.KeyboardFocusModule], exports: [FormComponent] });
    FormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: FormModule, providers: [MessageService], imports: [[
                i5.CommonModule,
                i8.FormsModule,
                i3.I18nModule,
                i2.RouterModule,
                CardModule,
                MessageModule,
                ItemActiveModule,
                i1.KeyboardFocusModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: FormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i8.FormsModule,
                            i3.I18nModule,
                            i2.RouterModule,
                            CardModule,
                            MessageModule,
                            ItemActiveModule,
                            i1.KeyboardFocusModule,
                        ],
                        declarations: [FormComponent],
                        providers: [MessageService],
                        exports: [FormComponent],
                    }]
            }] });

    /**
     * The `ListService` deals with the table structure, list data and
     * pagination of tables inside the b2b organization.
     *
     * @property {OrganizationTableType} tableType
     *   Used to load the table structure configuration and generate table outlets.
     * @property {PaginationModel} pagination$
     *   The pagination state of the listing.
     */
    var ListService = /** @class */ (function () {
        function ListService(tableService) {
            this.tableService = tableService;
            /**
             * The default table structure is used to add the default configuration for all
             * organization list related tables. This avoids a lot of boilerplate configuration.
             */
            this.defaultTableStructure = {
                options: { layout: i1.TableLayout.VERTICAL_STACKED },
                lg: { options: { layout: i1.TableLayout.VERTICAL } },
            };
            /**
             * The ghost data contains an empty list of objects that is used in the UI
             * to render the HTML elements.
             *
             * This list contains 10 items, so that the ghost will show 10 rows by default.
             */
            this.ghostData = { values: new Array(10) };
            this.notification$ = new rxjs.Subject();
            /**
             * The pagination state of the listing.
             *
             * The pagination size defaults to 10, but can be overridden by the
             * table configuration for each entity type.
             */
            this.pagination$ = new rxjs.BehaviorSubject({
                pageSize: 10,
            });
        }
        Object.defineProperty(ListService.prototype, "viewType", {
            get: function () {
                return this.tableType;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListService.prototype, "domainType", {
            get: function () {
                var _a;
                return (_a = this._domainType) !== null && _a !== void 0 ? _a : this.viewType;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Indicates the unique key for the item model. The key is different for various
         * organizations, i.e. `budget.code`, `user.uid`.
         */
        ListService.prototype.key = function () {
            return 'code';
        };
        /**
         * Loads the data by delegating to the `load` method, which must be implemented
         * in specific implementations of this abstract class.
         *
         * The load method is streamed from the `pagination$` stream, which is initialized
         * with default pagination and structure drive properties.
         */
        ListService.prototype.getData = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return this.pagination$.pipe(
            // we merge any configured pagination from the table structure
            operators.switchMap(function (pagination) { return _this.getStructure().pipe(operators.map(function (config) { var _a; return (Object.assign(Object.assign({}, pagination), (_a = config.options) === null || _a === void 0 ? void 0 : _a.pagination)); })); }), operators.switchMap(function (pagination) { return _this.load.apply(_this, __spreadArray([pagination], __read(args))); }), operators.startWith(this.ghostData));
        };
        /**
         * Returns the `TableStructure` for the `OrganizationTableType`.
         *
         * The table structure is build by the `TableService` based on configuration.
         * The `defaultTableStructure` is deep merged as a fallback configuration.
         */
        ListService.prototype.getStructure = function () {
            return this.tableService.buildStructure(this.viewType, this.defaultTableStructure);
        };
        /**
         * Views the page.
         */
        ListService.prototype.view = function (pagination, nextPage) {
            this.pagination$.next(Object.assign(Object.assign({}, pagination), { currentPage: nextPage }));
        };
        /**
         * Updates the sort code for the PaginationModel.
         *
         * The `currentPage` is reset to 0.
         */
        ListService.prototype.sort = function (pagination, _obsoleteSort) {
            this.view(pagination, 0);
        };
        /**
         * Indicates whether the given data equals to the ghost data.
         *
         * This is used to validate the initial loading state, which is
         * different from the loading state; the loading state occurs
         * while sorting and paginating, where as the initial loading state
         * only happens at the very first load.
         */
        ListService.prototype.hasGhostData = function (data) {
            return data === this.ghostData;
        };
        return ListService;
    }());
    ListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ListService, deps: [{ token: i1__namespace.TableService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ListService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ListService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }]; } });

    var ListComponent = /** @class */ (function () {
        function ListComponent(service, organizationItemService) {
            var _this = this;
            this.service = service;
            this.organizationItemService = organizationItemService;
            this.hasGhostData = false;
            this.viewType = this.service.viewType;
            this.domainType = this.service.domainType;
            this.iconTypes = i1.ICON_TYPE;
            /**
             * The current key represents the current selected item from the dataset.
             * This key is used to load the item details as well as highlight the item in
             * a list of items.
             */
            this.currentKey$ = this.organizationItemService.key$;
            this.structure$ = this.service.getStructure();
            this.listData$ = this.service
                .getData()
                .pipe(operators.tap(function (data) {
                var _a;
                _this.sortCode = (_a = data.pagination) === null || _a === void 0 ? void 0 : _a.sort;
                _this.hasGhostData = _this.service.hasGhostData(data);
            }));
            this.key = this.service.key();
        }
        /**
         * Returns the total number of items.
         */
        ListComponent.prototype.getListCount = function (dataTable) {
            var _a;
            return (_a = dataTable.pagination) === null || _a === void 0 ? void 0 : _a.totalResults;
        };
        /**
         * Browses to the given page number
         */
        ListComponent.prototype.browse = function (pagination, pageNumber) {
            this.service.view(pagination, pageNumber);
        };
        /**
         * Navigates to the detailed view of the selected list item.
         */
        ListComponent.prototype.launchItem = function (event) {
            this.organizationItemService.launchDetails(event);
        };
        /**
         * Sorts the list.
         */
        ListComponent.prototype.sort = function (pagination) {
            this.service.sort(Object.assign(Object.assign({}, pagination), { sort: this.sortCode }));
        };
        return ListComponent;
    }());
    ListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ListComponent, deps: [{ token: ListService }, { token: ItemService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ListComponent, selector: "cx-org-list", inputs: { key: "key" }, host: { properties: { "class.ghost": "this.hasGhostData", "class": "this.viewType" } }, ngImport: i0__namespace, template: "<cx-split-view [hideMode]=\"false\">\n  <ng-container *ngIf=\"structure$ | async as structure\">\n    <cx-view class=\"list\" *ngIf=\"listData$ | async as data\">\n      <div class=\"header\">\n        <div class=\"title\">\n          <h3>\n            {{\n              viewType + '.header' | cxTranslate: { count: getListCount(data) }\n            }}\n            <button\n              [cxPopover]=\"listHint\"\n              [cxPopoverOptions]=\"{\n                placement: 'auto',\n                class: 'hint-popover',\n                appendToBody: true,\n                displayCloseButton: true\n              }\"\n            >\n              <cx-icon [type]=\"iconTypes.INFO\"> </cx-icon>\n            </button>\n          </h3>\n        </div>\n\n        <div class=\"actions\">\n          <label>\n            <span *ngIf=\"data.pagination?.sort\">{{\n              structure.type + '.sortBy' | cxTranslate\n            }}</span>\n            <ng-select\n              name=\"sort\"\n              class=\"sort\"\n              *ngIf=\"data.pagination?.sort\"\n              [searchable]=\"false\"\n              [clearable]=\"false\"\n              (change)=\"sort(data.pagination)\"\n              [tabIndex]=\"0\"\n              [(ngModel)]=\"sortCode\"\n              [attr.aria-label]=\"\n                (sortCode\n                  ? structure.type + '.sort.' + sortCode\n                  : structure.type + '.sortBy'\n                ) | cxTranslate\n              \"\n            >\n              <ng-option *ngFor=\"let sort of data.sorts\" [value]=\"sort.code\">\n                {{ structure.type + '.sort.' + sort.code | cxTranslate }}\n              </ng-option>\n            </ng-select>\n          </label>\n\n          <ng-content select=\"[actions]\"></ng-content>\n\n          <a\n            class=\"button primary create\"\n            [routerLink]=\"{ cxRoute: structure.type + 'Create' } | cxUrl\"\n            routerLinkActive=\"disabled\"\n          >\n            {{ 'organization.add' | cxTranslate }}\n          </a>\n        </div>\n      </div>\n\n      <cx-table\n        *ngIf=\"data.values?.length > 0; else emptyList\"\n        [structure]=\"structure\"\n        [data]=\"data.values\"\n        [i18nRoot]=\"domainType\"\n        [currentItem]=\"{ property: key, value: currentKey$ | async }\"\n        (launch)=\"launchItem($event)\"\n        [cxFocus]=\"{ trap: 'both' }\"\n      >\n      </cx-table>\n\n      <div class=\"footer\">\n        <cx-pagination\n          [pagination]=\"data.pagination\"\n          (viewPageEvent)=\"browse(data.pagination, $event)\"\n        ></cx-pagination>\n      </div>\n    </cx-view>\n\n    <!-- nested split views are rendered inside child routes -->\n    <router-outlet></router-outlet>\n  </ng-container>\n</cx-split-view>\n\n<ng-template #emptyList>\n  <p class=\"instruction is-empty\">\n    {{ 'organization.messages.emptyList' | cxTranslate }}\n  </p>\n</ng-template>\n\n<ng-template #listHint>\n  <p>\n    {{ viewType + '.hint' | cxTranslate }}\n  </p>\n</ng-template>\n", components: [{ type: i1__namespace.SplitViewComponent, selector: "cx-split-view", inputs: ["hideMode"] }, { type: i1__namespace.ViewComponent, selector: "cx-view", inputs: ["position", "hidden"], outputs: ["hiddenChange"] }, { type: i1__namespace.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { type: i5__namespace$1.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { type: i5__namespace$1.ɵr, selector: "ng-option", inputs: ["disabled", "value"] }, { type: i1__namespace.TableComponent, selector: "cx-table", inputs: ["structure", "data", "i18nRoot", "currentItem"], outputs: ["launch"] }, { type: i1__namespace.PaginationComponent, selector: "cx-pagination", inputs: ["pageRoute", "queryParam", "defaultPage", "pagination"], outputs: ["viewPageEvent"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.PopoverDirective, selector: "[cxPopover]", inputs: ["cxPopover", "cxPopoverOptions"], outputs: ["openPopover", "closePopover"] }, { type: i8__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2__namespace.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }, { type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i2__namespace.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe, "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-list',
                        templateUrl: './list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ListService }, { type: ItemService }]; }, propDecorators: { hasGhostData: [{
                    type: i0.HostBinding,
                    args: ['class.ghost']
                }], viewType: [{
                    type: i0.HostBinding,
                    args: ['class']
                }], key: [{
                    type: i0.Input
                }] } });

    var ListModule = /** @class */ (function () {
        function ListModule() {
        }
        return ListModule;
    }());
    ListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ListModule, declarations: [ListComponent], imports: [i5.CommonModule,
            i2.RouterModule,
            i1.SplitViewModule,
            i1.TableModule,
            i1.IconModule,
            i3.UrlModule,
            i3.I18nModule,
            i1.PaginationModule,
            i5$1.NgSelectModule,
            i8.FormsModule,
            MessageModule,
            i1.KeyboardFocusModule,
            i1.PopoverModule], exports: [ListComponent] });
    ListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ListModule, imports: [[
                i5.CommonModule,
                i2.RouterModule,
                i1.SplitViewModule,
                i1.TableModule,
                i1.IconModule,
                i3.UrlModule,
                i3.I18nModule,
                i1.PaginationModule,
                i5$1.NgSelectModule,
                i8.FormsModule,
                MessageModule,
                i1.KeyboardFocusModule,
                i1.PopoverModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i2.RouterModule,
                            i1.SplitViewModule,
                            i1.TableModule,
                            i1.IconModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            i1.PaginationModule,
                            i5$1.NgSelectModule,
                            i8.FormsModule,
                            MessageModule,
                            i1.KeyboardFocusModule,
                            i1.PopoverModule,
                        ],
                        declarations: [ListComponent],
                        exports: [ListComponent],
                    }]
            }] });

    var CellComponent = /** @class */ (function () {
        function CellComponent(outlet) {
            this.outlet = outlet;
        }
        Object.defineProperty(CellComponent.prototype, "tabIndex", {
            get: function () {
                return -1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CellComponent.prototype, "model", {
            get: function () {
                return this.outlet.context;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CellComponent.prototype, "property", {
            get: function () {
                var _a, _b, _c;
                return (_a = this.model) === null || _a === void 0 ? void 0 : _a[(_c = (_b = this.outlet) === null || _b === void 0 ? void 0 : _b.context) === null || _c === void 0 ? void 0 : _c._field];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CellComponent.prototype, "linkable", {
            /**
             * Indicates wether the cell is linkable.
             *
             * If the cells is linkable, an anchor link is created to the detailed route
             * of the given `_type`.
             *
             * Defaults to `true`.
             */
            get: function () {
                var _a;
                return this.property !== undefined && ((_a = this.cellOptions.linkable) !== null && _a !== void 0 ? _a : true);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CellComponent.prototype, "cellOptions", {
            /**
             * Helper method to access the cell options.
             */
            get: function () {
                var _a, _b, _c, _d, _e;
                return ((_e = (_c = (_b = (_a = this.outlet.context) === null || _a === void 0 ? void 0 : _a._options) === null || _b === void 0 ? void 0 : _b.cells) === null || _c === void 0 ? void 0 : _c[(_d = this.outlet.context) === null || _d === void 0 ? void 0 : _d._field]) !== null && _e !== void 0 ? _e : {});
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CellComponent.prototype, "route", {
            /**
             * Generates the configurable route to the detail page of the given context item.
             */
            get: function () {
                return this.outlet.context._type + 'Details';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CellComponent.prototype, "routeModel", {
            get: function () {
                return this.outlet.context;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CellComponent.prototype, "type", {
            get: function () {
                return this.model._type;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CellComponent.prototype, "hasItem", {
            /**
             * Indicates whether the item is loaded.
             */
            get: function () {
                return !!this.item && Object.keys(this.item).length > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CellComponent.prototype, "item", {
            get: function () {
                if (!this.outlet.context) {
                    return null;
                }
                var _a = this.outlet.context, _field = _a._field, _options = _a._options, _type = _a._type, _i18nRoot = _a._i18nRoot, all = __rest(_a, ["_field", "_options", "_type", "_i18nRoot"]);
                return all;
            },
            enumerable: false,
            configurable: true
        });
        return CellComponent;
    }());
    CellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CellComponent, deps: [{ token: i1__namespace.OutletContextData }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CellComponent, selector: "cx-org-cell", ngImport: i0__namespace, template: "<a\n  *ngIf=\"linkable; else text\"\n  [routerLink]=\"{ cxRoute: route, params: routeModel } | cxUrl\"\n  [tabIndex]=\"tabIndex\"\n>\n  <ng-container *ngTemplateOutlet=\"text\"></ng-container>\n</a>\n\n<ng-template #text>\n  <span class=\"text\" title=\"{{ property }}\">{{ property }}</span>\n</ng-template>\n", directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-cell',
                        templateUrl: './cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.OutletContextData }]; } });

    var AssignCellComponent = /** @class */ (function (_super) {
        __extends(AssignCellComponent, _super);
        function AssignCellComponent(outlet, organizationItemService, messageService, organizationSubListService) {
            var _this = _super.call(this, outlet) || this;
            _this.outlet = outlet;
            _this.organizationItemService = organizationItemService;
            _this.messageService = messageService;
            _this.organizationSubListService = organizationSubListService;
            return _this;
        }
        Object.defineProperty(AssignCellComponent.prototype, "isAssigned", {
            get: function () {
                var _a;
                return (_a = this.item) === null || _a === void 0 ? void 0 : _a.selected;
            },
            enumerable: false,
            configurable: true
        });
        AssignCellComponent.prototype.toggleAssign = function () {
            var _this = this;
            var isAssigned = this.isAssigned;
            this.organizationItemService.key$
                .pipe(operators.first(), operators.switchMap(function (key) { return isAssigned
                ? _this.unassign(key, _this.link)
                : _this.assign(key, _this.link); }), operators.take(1), operators.filter(function (data) { return data.status === i2$1.LoadStatus.SUCCESS; }))
                .subscribe(function (data) { return _this.notify(data.item, isAssigned ? 'unassigned' : 'assigned'); });
        };
        AssignCellComponent.prototype.assign = function (key, linkKey) {
            return this.organizationSubListService.assign(key, linkKey);
        };
        AssignCellComponent.prototype.unassign = function (key, linkKey) {
            return this.organizationSubListService.unassign(key, linkKey);
        };
        Object.defineProperty(AssignCellComponent.prototype, "link", {
            /**
             * Returns the key for the linked object.
             *
             * At the moment, we're using a generic approach to assign objects,
             * but the object do not have a normalized shape. Therefor, we need
             * to evaluate the context to return the right key for the associated
             * item.
             */
            get: function () {
                var _a, _b;
                return ((_b = (_a = this.outlet.context.code) !== null && _a !== void 0 ? _a : this.outlet.context.customerId) !== null && _b !== void 0 ? _b : this.outlet.context.uid);
            },
            enumerable: false,
            configurable: true
        });
        AssignCellComponent.prototype.notify = function (item, state) {
            this.messageService.add({
                message: {
                    key: this.organizationSubListService.viewType + "." + state,
                    params: {
                        item: item,
                    },
                },
            });
        };
        return AssignCellComponent;
    }(CellComponent));
    AssignCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AssignCellComponent, deps: [{ token: i1__namespace.OutletContextData }, { token: ItemService }, { token: MessageService }, { token: ListService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AssignCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: AssignCellComponent, selector: "cx-org-assign-cell", usesInheritance: true, ngImport: i0__namespace, template: "\n    <button type=\"button\" *ngIf=\"hasItem\" (click)=\"toggleAssign()\" class=\"link\">\n      {{ isAssigned ? 'unassign' : 'assign' }}\n    </button>\n  ", isInline: true, directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AssignCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-assign-cell',
                        template: "\n    <button type=\"button\" *ngIf=\"hasItem\" (click)=\"toggleAssign()\" class=\"link\">\n      {{ isAssigned ? 'unassign' : 'assign' }}\n    </button>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.OutletContextData }, { type: ItemService }, { type: MessageService }, { type: ListService }]; } });

    var SubListComponent = /** @class */ (function (_super) {
        __extends(SubListComponent, _super);
        function SubListComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.hostClass = '';
            _this.previous = true;
            _this.key = _this.service.key();
            _this.showHint = false;
            _this.hasGhostData = false;
            _this.listData$ = _this.currentKey$.pipe(operators.switchMap(function (key) { return _this.service.getData(key); }), operators.tap(function (data) {
                _this.hasGhostData = _this.service.hasGhostData(data);
            }));
            _this.dataStructure$ = _this.service.getStructure();
            return _this;
        }
        Object.defineProperty(SubListComponent.prototype, "routerKey", {
            set: function (key) {
                this.subKey$ = this.organizationItemService.getRouterParam(key);
            },
            enumerable: false,
            configurable: true
        });
        return SubListComponent;
    }(ListComponent));
    SubListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SubListComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    SubListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: SubListComponent, selector: "cx-org-sub-list", inputs: { previous: "previous", key: "key", showHint: "showHint", routerKey: "routerKey" }, host: { properties: { "class.ghost": "this.hasGhostData" }, classAttribute: "content-wrapper" }, viewQueries: [{ propertyName: "messageService", first: true, predicate: MessageService, descendants: true, read: MessageService }], usesInheritance: true, ngImport: i0__namespace, template: "<cx-org-card\n  [previous]=\"previous\"\n  [i18nRoot]=\"viewType\"\n  [showHint]=\"showHint\"\n  [cxFocus]=\"{ autofocus: true }\"\n>\n  <ng-content select=\"[actions]\" ngProjectAs=\"[actions]\"></ng-content>\n  <ng-content select=\"[main]\" ngProjectAs=\"[main]\"></ng-content>\n  <ng-content select=\"[info]\" ngProjectAs=\"[info]\"></ng-content>\n\n  <ng-container main *ngIf=\"dataStructure$ | async as structure\">\n    <ng-container *ngIf=\"listData$ | async as data\">\n      <section>\n        <cx-table\n          *ngIf=\"data.values?.length > 0; else emptyList\"\n          [structure]=\"structure\"\n          [data]=\"data.values\"\n          [i18nRoot]=\"domainType\"\n          [currentItem]=\"{ property: key, value: subKey$ | async }\"\n        >\n        </cx-table>\n      </section>\n\n      <div class=\"footer\" *ngIf=\"data.pagination?.totalPages > 1\">\n        <cx-pagination\n          [pagination]=\"data.pagination\"\n          (viewPageEvent)=\"browse(data.pagination, $event)\"\n        ></cx-pagination>\n      </div>\n    </ng-container>\n  </ng-container>\n</cx-org-card>\n\n<ng-template #emptyList>\n  <p class=\"is-empty\">{{ 'organization.messages.emptyList' | cxTranslate }}</p>\n</ng-template>\n", components: [{ type: CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: i1__namespace.TableComponent, selector: "cx-table", inputs: ["structure", "data", "i18nRoot", "currentItem"], outputs: ["launch"] }, { type: i1__namespace.PaginationComponent, selector: "cx-pagination", inputs: ["pageRoute", "queryParam", "defaultPage", "pagination"], outputs: ["viewPageEvent"] }], directives: [{ type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SubListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-sub-list',
                        templateUrl: './sub-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                    }]
            }], propDecorators: { messageService: [{
                    type: i0.ViewChild,
                    args: [MessageService, { read: MessageService }]
                }], previous: [{
                    type: i0.Input
                }], key: [{
                    type: i0.Input
                }], showHint: [{
                    type: i0.Input
                }], routerKey: [{
                    type: i0.Input
                }], hasGhostData: [{
                    type: i0.HostBinding,
                    args: ['class.ghost']
                }] } });

    var SubListModule = /** @class */ (function () {
        function SubListModule() {
        }
        return SubListModule;
    }());
    SubListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SubListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SubListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SubListModule, declarations: [SubListComponent, AssignCellComponent], imports: [i5.CommonModule,
            i3.I18nModule,
            CardModule,
            i1.TableModule,
            i1.PaginationModule,
            MessageModule,
            i1.KeyboardFocusModule], exports: [SubListComponent] });
    SubListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SubListModule, imports: [[
                i5.CommonModule,
                i3.I18nModule,
                CardModule,
                i1.TableModule,
                i1.PaginationModule,
                MessageModule,
                i1.KeyboardFocusModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SubListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i3.I18nModule,
                            CardModule,
                            i1.TableModule,
                            i1.PaginationModule,
                            MessageModule,
                            i1.KeyboardFocusModule,
                        ],
                        declarations: [SubListComponent, AssignCellComponent],
                        exports: [SubListComponent],
                    }]
            }] });

    var SharedOrganizationModule = /** @class */ (function () {
        function SharedOrganizationModule() {
        }
        return SharedOrganizationModule;
    }());
    SharedOrganizationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SharedOrganizationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SharedOrganizationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SharedOrganizationModule, imports: [ListModule, SubListModule, FormModule] });
    SharedOrganizationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SharedOrganizationModule, imports: [[ListModule, SubListModule, FormModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SharedOrganizationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [ListModule, SubListModule, FormModule],
                    }]
            }] });

    // This is not for the public API
    // TODO:#my-account-architecture - Number.MAX_VALUE?
    var MAX_OCC_INTEGER_VALUE = 2147483647;

    var ItemExistsDirective = /** @class */ (function () {
        function ItemExistsDirective(itemService, messageService) {
            this.itemService = itemService;
            this.messageService = messageService;
        }
        ItemExistsDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription = this.itemService.error$
                .pipe(operators.filter(function (error) { return error; }))
                .subscribe(function () { return _this.handleErrorMessage(); });
        };
        ItemExistsDirective.prototype.handleErrorMessage = function () {
            this.messageService.add({
                message: {
                    key: 'organization.notification.notExist',
                },
                type: i3.GlobalMessageType.MSG_TYPE_ERROR,
            });
        };
        ItemExistsDirective.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        };
        return ItemExistsDirective;
    }());
    ItemExistsDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemExistsDirective, deps: [{ token: ItemService }, { token: MessageService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    ItemExistsDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.5", type: ItemExistsDirective, selector: "[cxOrgItemExists]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemExistsDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[cxOrgItemExists]',
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: MessageService }]; } });

    /**
     * Renders a confirmation message and cancel/confirm button in the message component.
     */
    var ConfirmationMessageComponent = /** @class */ (function (_super) {
        __extends(ConfirmationMessageComponent, _super);
        function ConfirmationMessageComponent(data, platformId, messageService) {
            var _this = _super.call(this, data, platformId) || this;
            _this.data = data;
            _this.platformId = platformId;
            _this.messageService = messageService;
            _this.cancelText = {
                key: 'organization.confirmation.cancel',
            };
            _this.confirmText = {
                key: 'organization.confirmation.confirm',
            };
            return _this;
        }
        ConfirmationMessageComponent.prototype.ngOnInit = function () {
            var _a, _b;
            _super.prototype.ngOnInit.call(this);
            this.cancelText = (_a = this.messageData.cancel) !== null && _a !== void 0 ? _a : this.cancelText;
            this.confirmText = (_b = this.messageData.confirm) !== null && _b !== void 0 ? _b : this.confirmText;
        };
        /**
         * Emits a confirmation event to the data events.
         *
         * The original author of the event message or other parties can observe
         * the event data.
         */
        ConfirmationMessageComponent.prototype.confirm = function () {
            this.data.events.next({ confirm: true });
        };
        return ConfirmationMessageComponent;
    }(BaseMessageComponent));
    ConfirmationMessageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ConfirmationMessageComponent, deps: [{ token: MessageData }, { token: i0.PLATFORM_ID }, { token: MessageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConfirmationMessageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ConfirmationMessageComponent, selector: "cx-org-confirmation", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"inner\" [cxFocus]=\"{ focusOnEscape: true }\" (esc)=\"close()\">\n  <p class=\"messageTitle\" *ngIf=\"messageTitle\">\n    {{ messageTitle | cxTranslate }}\n  </p>\n  <div class=\"message\">\n    <cx-icon *ngIf=\"messageIcon\" [type]=\"messageIcon\"></cx-icon>\n    <p>\n      {{ message | cxTranslate }}\n    </p>\n  </div>\n  <div class=\"actions\" [cxFocus]=\"{ autofocus: 'button.primary' }\">\n    <button class=\"button cancel\" (click)=\"close()\">\n      {{ cancelText | cxTranslate }}\n    </button>\n\n    <button class=\"button primary confirm\" (click)=\"confirm()\">\n      {{ confirmText | cxTranslate }}\n    </button>\n  </div>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }], directives: [{ type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ConfirmationMessageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-confirmation',
                        templateUrl: './confirmation-message.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: MessageData }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }, { type: MessageService }];
        } });

    var DisableInfoService = /** @class */ (function () {
        function DisableInfoService() {
        }
        DisableInfoService.prototype.isItemDisabled = function (item) {
            return (item === null || item === void 0 ? void 0 : item.active) === false;
        };
        DisableInfoService.prototype.isParentDisabled = function (item) {
            var _a;
            return (((_a = (item.orgUnit || item.unit || item.parentOrgUnit)) === null || _a === void 0 ? void 0 : _a.active) === false &&
                !this.isRootUnit(item));
        };
        DisableInfoService.prototype.isRootUnit = function (item) {
            var _a, _b;
            return ((item === null || item === void 0 ? void 0 : item.uid) &&
                (item === null || item === void 0 ? void 0 : item.name) &&
                !((_a = item) === null || _a === void 0 ? void 0 : _a.orgUnit) &&
                !((_b = item) === null || _b === void 0 ? void 0 : _b.unit) &&
                (!(item === null || item === void 0 ? void 0 : item.parentOrgUnit) || (item === null || item === void 0 ? void 0 : item.uid) === (item === null || item === void 0 ? void 0 : item.parentOrgUnit)));
        };
        return DisableInfoService;
    }());
    DisableInfoService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DisableInfoService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DisableInfoService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DisableInfoService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DisableInfoService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    /**
     * Reusable component in the my-company is to toggle the disabled state for
     * my company entities.
     */
    var ToggleStatusComponent = /** @class */ (function () {
        function ToggleStatusComponent(itemService, messageService, disableInfoService) {
            this.itemService = itemService;
            this.messageService = messageService;
            this.disableInfoService = disableInfoService;
            /**
             * The key input can be used to add a custom key.
             *
             * Most _organization_ entities use the `code` key, but there is some variations.
             */
            this.key = 'code';
            /**
             * resolves the current item.
             */
            this.current$ = this.itemService.current$;
            /**
             * resolves if the user is currently in the edit form.
             */
            this.isInEditMode$ = this.itemService.isInEditMode$;
            this.subscription = new rxjs.Subscription();
        }
        ToggleStatusComponent.prototype.toggle = function (item) {
            var _this = this;
            if (!item.active) {
                // we do ask for confirmation when the entity gets activated
                this.update(item);
            }
            else {
                if (!this.confirmation) {
                    this.confirmation = this.messageService.add({
                        message: {
                            key: this.i18nRoot + '.messages.deactivate',
                            params: { item: item },
                        },
                        messageTitle: {
                            key: this.i18nRoot + '.messages.deactivateTitle',
                            params: { item: item },
                        },
                        confirm: {
                            key: 'organization.confirmation.disable',
                        },
                        component: ConfirmationMessageComponent,
                    });
                    this.subscription.add(this.confirmation.pipe(operators.first()).subscribe(function (event) {
                        if (event.close) {
                            _this.confirmation = null;
                        }
                        if (event.confirm) {
                            _this.messageService.close(_this.confirmation);
                            _this.update(item);
                            _this.confirmation = null;
                        }
                    }));
                }
            }
        };
        /**
         * Indicates whether the status can be toggled or not.
         */
        ToggleStatusComponent.prototype.isDisabled = function (item) {
            var _a;
            return ((_a = this.disabled) !== null && _a !== void 0 ? _a : (this.disableInfoService.isParentDisabled(item) ||
                this.disableInfoService.isRootUnit(item)));
        };
        ToggleStatusComponent.prototype.update = function (item) {
            var _this = this;
            this.itemService
                .update(item[this.key], this.getPatchedItem(item))
                .pipe(operators.take(1), operators.filter(function (data) { return data.status === i2$1.LoadStatus.SUCCESS; }))
                .subscribe(function (data) { return _this.notify(Object.assign(Object.assign({}, item), data.item)); });
        };
        ToggleStatusComponent.prototype.getPatchedItem = function (item) {
            var patch = {};
            patch[this.key] = item[this.key];
            patch.active = !item.active;
            return patch;
        };
        ToggleStatusComponent.prototype.notify = function (item) {
            this.messageService.add({
                message: {
                    key: this.i18nRoot + ".messages." + (item.active ? 'confirmEnabled' : 'confirmDisabled'),
                    params: { item: item },
                },
            });
        };
        ToggleStatusComponent.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        };
        return ToggleStatusComponent;
    }());
    ToggleStatusComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ToggleStatusComponent, deps: [{ token: ItemService }, { token: MessageService }, { token: DisableInfoService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ToggleStatusComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ToggleStatusComponent, selector: "cx-org-toggle-status", inputs: { i18nRoot: "i18nRoot", key: "key", disabled: "disabled" }, host: { classAttribute: "content-wrapper" }, ngImport: i0__namespace, template: "<button\n  *ngIf=\"current$ | async as item\"\n  class=\"button active\"\n  [disabled]=\"\n    isDisabled(item) ||\n    ((isInEditMode$ | async) && item.active && disabled !== true)\n  \"\n  (click)=\"toggle(item)\"\n>\n  {{ 'organization.' + (item.active ? 'disable' : 'enable') | cxTranslate }}\n</button>\n", directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ToggleStatusComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-toggle-status',
                        templateUrl: './toggle-status.component.html',
                        host: { class: 'content-wrapper' },
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: MessageService }, { type: DisableInfoService }]; }, propDecorators: { i18nRoot: [{
                    type: i0.Input
                }], key: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }] } });

    var ConfirmationMessageModule = /** @class */ (function () {
        function ConfirmationMessageModule() {
        }
        return ConfirmationMessageModule;
    }());
    ConfirmationMessageModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ConfirmationMessageModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConfirmationMessageModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ConfirmationMessageModule, declarations: [ConfirmationMessageComponent], imports: [i5.CommonModule,
            i3.I18nModule,
            i1.IconModule,
            i1.KeyboardFocusModule,
            i3.FeaturesConfigModule] });
    ConfirmationMessageModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ConfirmationMessageModule, imports: [[
                i5.CommonModule,
                i3.I18nModule,
                i1.IconModule,
                i1.KeyboardFocusModule,
                i3.FeaturesConfigModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ConfirmationMessageModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i3.I18nModule,
                            i1.IconModule,
                            i1.KeyboardFocusModule,
                            i3.FeaturesConfigModule,
                        ],
                        declarations: [ConfirmationMessageComponent],
                    }]
            }] });

    var ToggleStatusModule = /** @class */ (function () {
        function ToggleStatusModule() {
        }
        return ToggleStatusModule;
    }());
    ToggleStatusModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ToggleStatusModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ToggleStatusModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ToggleStatusModule, declarations: [ToggleStatusComponent], imports: [i5.CommonModule, i3.I18nModule, MessageModule, ConfirmationMessageModule], exports: [ToggleStatusComponent] });
    ToggleStatusModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ToggleStatusModule, imports: [[i5.CommonModule, i3.I18nModule, MessageModule, ConfirmationMessageModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ToggleStatusModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i3.I18nModule, MessageModule, ConfirmationMessageModule],
                        declarations: [ToggleStatusComponent],
                        exports: [ToggleStatusComponent],
                    }]
            }] });

    /**
     * Reusable component in the my-company is to delete an item (if it's possible)
     */
    var DeleteItemComponent = /** @class */ (function () {
        function DeleteItemComponent(itemService, messageService) {
            this.itemService = itemService;
            this.messageService = messageService;
            /**
             * The key input can be used to add a custom key.
             *
             * Most _organization_ entities use the `code` key, but there is some variations.
             */
            this.key = 'code';
            /**
             * resolves the current item.
             */
            this.current$ = this.itemService.current$;
            /**
             * resolves if the user is currently in the edit form.
             */
            this.isInEditMode$ = this.itemService.isInEditMode$;
            this.subscription = new rxjs.Subscription();
        }
        DeleteItemComponent.prototype.delete = function (item) {
            var _this = this;
            if (!this.confirmation) {
                this.confirmation = this.messageService.add({
                    message: {
                        key: this.i18nRoot + '.messages.delete',
                        params: { item: item },
                    },
                    messageTitle: {
                        key: this.i18nRoot + '.messages.deleteTitle',
                        params: { item: item },
                    },
                    component: ConfirmationMessageComponent,
                });
                this.subscription.add(this.confirmation.pipe(operators.first()).subscribe(function (event) {
                    if (event.close) {
                        _this.confirmation = null;
                    }
                    if (event.confirm) {
                        _this.messageService.close(_this.confirmation);
                        _this.confirmDelete(item);
                        _this.confirmation = null;
                    }
                }));
            }
        };
        DeleteItemComponent.prototype.confirmDelete = function (item) {
            var _this = this;
            this.itemService
                .delete(item[this.key], this.additionalParam)
                .pipe(operators.take(1), operators.filter(function (data) { return data.status === i2$1.LoadStatus.SUCCESS; }))
                .subscribe(function (data) { return _this.notify(Object.assign(Object.assign({}, item), data.item)); });
        };
        DeleteItemComponent.prototype.notify = function (item) {
            this.messageService.add({
                message: {
                    key: this.i18nRoot + ".messages.deleted",
                    params: { item: item },
                },
            });
        };
        DeleteItemComponent.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        };
        return DeleteItemComponent;
    }());
    DeleteItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DeleteItemComponent, deps: [{ token: ItemService }, { token: MessageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DeleteItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: DeleteItemComponent, selector: "cx-org-delete-item", inputs: { i18nRoot: "i18nRoot", key: "key", additionalParam: "additionalParam" }, host: { classAttribute: "content-wrapper" }, ngImport: i0__namespace, template: "<button\n  *ngIf=\"current$ | async as item\"\n  class=\"button active\"\n  [disabled]=\"isInEditMode$ | async\"\n  (click)=\"delete(item)\"\n>\n  {{ 'organization.delete' | cxTranslate }}\n</button>\n", directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DeleteItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-delete-item',
                        templateUrl: './delete-item.component.html',
                        host: { class: 'content-wrapper' },
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: MessageService }]; }, propDecorators: { i18nRoot: [{
                    type: i0.Input
                }], key: [{
                    type: i0.Input
                }], additionalParam: [{
                    type: i0.Input
                }] } });

    var DeleteItemModule = /** @class */ (function () {
        function DeleteItemModule() {
        }
        return DeleteItemModule;
    }());
    DeleteItemModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DeleteItemModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DeleteItemModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DeleteItemModule, declarations: [DeleteItemComponent], imports: [i5.CommonModule, i3.I18nModule, MessageModule, ConfirmationMessageModule], exports: [DeleteItemComponent] });
    DeleteItemModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DeleteItemModule, imports: [[i5.CommonModule, i3.I18nModule, MessageModule, ConfirmationMessageModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DeleteItemModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i3.I18nModule, MessageModule, ConfirmationMessageModule],
                        declarations: [DeleteItemComponent],
                        exports: [DeleteItemComponent],
                    }]
            }] });

    var DisableInfoComponent = /** @class */ (function () {
        function DisableInfoComponent(itemService, disableInfoService) {
            this.itemService = itemService;
            this.disableInfoService = disableInfoService;
            /**
             * Flag to enable display custom message(s) even if no condition has been met
             */
            this.displayCustomInfo = false;
            /**
             * resolves the current item.
             */
            this.current$ = this.itemService.current$;
            this.iconTypes = i1.ICON_TYPE;
        }
        Object.defineProperty(DisableInfoComponent.prototype, "defaultInfoConfig", {
            get: function () {
                return {
                    disabledCreate: false,
                    disabledEdit: true,
                    disabledEnable: true,
                    disabledDisable: false,
                };
            },
            enumerable: false,
            configurable: true
        });
        DisableInfoComponent.prototype.ngOnInit = function () {
            this.displayInfoConfig = Object.assign(Object.assign({}, this.defaultInfoConfig), this.displayInfoConfig);
        };
        DisableInfoComponent.prototype.displayDisabledCreate = function (item) {
            var _a;
            return (((_a = this.displayInfoConfig) === null || _a === void 0 ? void 0 : _a.disabledCreate) &&
                this.disableInfoService.isItemDisabled(item));
        };
        DisableInfoComponent.prototype.displayDisabledEdit = function (item) {
            var _a;
            return (((_a = this.displayInfoConfig) === null || _a === void 0 ? void 0 : _a.disabledEdit) &&
                this.disableInfoService.isItemDisabled(item));
        };
        DisableInfoComponent.prototype.displayDisabledEnable = function (item) {
            var _a;
            return (((_a = this.displayInfoConfig) === null || _a === void 0 ? void 0 : _a.disabledEnable) &&
                this.disableInfoService.isParentDisabled(item));
        };
        DisableInfoComponent.prototype.displayDisabledDisable = function (item) {
            var _a;
            return (((_a = this.displayInfoConfig) === null || _a === void 0 ? void 0 : _a.disabledDisable) &&
                this.disableInfoService.isRootUnit(item));
        };
        return DisableInfoComponent;
    }());
    DisableInfoComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DisableInfoComponent, deps: [{ token: ItemService }, { token: DisableInfoService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DisableInfoComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: DisableInfoComponent, selector: "cx-org-disable-info", inputs: { i18nRoot: "i18nRoot", displayInfoConfig: "displayInfoConfig", displayCustomInfo: "displayCustomInfo" }, host: { classAttribute: "content-wrapper" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"current$ | async as item\">\n  <section\n    *ngIf=\"\n      displayDisabledCreate(item) ||\n      displayDisabledEdit(item) ||\n      displayDisabledEnable(item) ||\n      displayDisabledDisable(item) ||\n      displayCustomInfo\n    \"\n  >\n    <cx-icon [type]=\"iconTypes.INFO\"></cx-icon>\n    <ul>\n      <li *ngIf=\"displayDisabledEnable(item)\">\n        {{ i18nRoot + '.info.disabledEnable' | cxTranslate }}\n      </li>\n      <li *ngIf=\"displayDisabledCreate(item)\">\n        {{ i18nRoot + '.info.disabledCreate' | cxTranslate }}\n      </li>\n      <li *ngIf=\"displayDisabledEdit(item)\">\n        {{ i18nRoot + '.info.disabledEdit' | cxTranslate }}\n      </li>\n      <li *ngIf=\"displayDisabledDisable(item)\">\n        {{ i18nRoot + '.info.disabledDisable' | cxTranslate }}\n      </li>\n      <ng-content></ng-content>\n    </ul>\n  </section>\n</ng-container>\n", components: [{ type: i1__namespace.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DisableInfoComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-disable-info',
                        templateUrl: './disable-info.component.html',
                        host: { class: 'content-wrapper' },
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: DisableInfoService }]; }, propDecorators: { i18nRoot: [{
                    type: i0.Input
                }], displayInfoConfig: [{
                    type: i0.Input
                }], displayCustomInfo: [{
                    type: i0.Input
                }] } });

    var DisableInfoModule = /** @class */ (function () {
        function DisableInfoModule() {
        }
        return DisableInfoModule;
    }());
    DisableInfoModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DisableInfoModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DisableInfoModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DisableInfoModule, declarations: [DisableInfoComponent], imports: [i5.CommonModule, i1.IconModule, i3.I18nModule], exports: [DisableInfoComponent] });
    DisableInfoModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DisableInfoModule, imports: [[i5.CommonModule, i1.IconModule, i3.I18nModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DisableInfoModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i1.IconModule, i3.I18nModule],
                        declarations: [DisableInfoComponent],
                        exports: [DisableInfoComponent],
                    }]
            }] });

    var SubListService = /** @class */ (function (_super) {
        __extends(SubListService, _super);
        function SubListService() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            /**
             * The default table structure for sub lists is only showing tables with vertical layout.
             */
            _this.defaultTableStructure = {
                options: { layout: i1.TableLayout.VERTICAL },
            };
            /**
             * @override This sub list will show 3 items.
             */
            _this.ghostData = { values: new Array(3) };
            return _this;
        }
        // TODO: abstract
        SubListService.prototype.assign = function (_key) {
            var _args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                _args[_i - 1] = arguments[_i];
            }
            return rxjs.of();
        };
        SubListService.prototype.unassign = function (_key) {
            var _args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                _args[_i - 1] = arguments[_i];
            }
            return rxjs.of();
        };
        /**
         * As we can't filter with the backend API, we do this client side.
         */
        SubListService.prototype.filterSelected = function (list) {
            if (!list) {
                return list;
            }
            var pagination = list.pagination, sorts = list.sorts, values = list.values;
            return {
                pagination: pagination,
                sorts: sorts,
                values: values.filter(function (value) { return value.selected; }),
            };
        };
        return SubListService;
    }(ListService));
    SubListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SubListService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    SubListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SubListService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: SubListService, decorators: [{
                type: i0.Injectable
            }] });

    var ActiveLinkCellComponent = /** @class */ (function (_super) {
        __extends(ActiveLinkCellComponent, _super);
        function ActiveLinkCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ActiveLinkCellComponent.prototype, "tabIndex", {
            get: function () {
                return 0;
            },
            enumerable: false,
            configurable: true
        });
        return ActiveLinkCellComponent;
    }(CellComponent));
    ActiveLinkCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ActiveLinkCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ActiveLinkCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ActiveLinkCellComponent, selector: "cx-org-active-link-cell", usesInheritance: true, ngImport: i0__namespace, template: "<a\n  *ngIf=\"linkable; else text\"\n  [routerLink]=\"{ cxRoute: route, params: routeModel } | cxUrl\"\n  [tabIndex]=\"tabIndex\"\n>\n  <ng-container *ngTemplateOutlet=\"text\"></ng-container>\n</a>\n\n<ng-template #text>\n  <span class=\"text\" title=\"{{ property }}\">{{ property }}</span>\n</ng-template>\n", directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ActiveLinkCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-active-link-cell',
                        templateUrl: '../cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var AmountCellComponent = /** @class */ (function (_super) {
        __extends(AmountCellComponent, _super);
        function AmountCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(AmountCellComponent.prototype, "property", {
            get: function () {
                if (this.budget && this.currency) {
                    return this.budget + ' ' + this.currency;
                }
                return;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AmountCellComponent.prototype, "budget", {
            get: function () {
                return this.model.budget;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AmountCellComponent.prototype, "currency", {
            get: function () {
                var _a;
                return ((_a = this.model.currency) === null || _a === void 0 ? void 0 : _a.isocode) || this.model.currency;
            },
            enumerable: false,
            configurable: true
        });
        return AmountCellComponent;
    }(CellComponent));
    AmountCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AmountCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    AmountCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: AmountCellComponent, selector: "cx-org-amount-cell", usesInheritance: true, ngImport: i0__namespace, template: "<a\n  *ngIf=\"linkable; else text\"\n  [routerLink]=\"{ cxRoute: route, params: routeModel } | cxUrl\"\n  [tabIndex]=\"tabIndex\"\n>\n  <ng-container *ngTemplateOutlet=\"text\"></ng-container>\n</a>\n\n<ng-template #text>\n  <span class=\"text\" title=\"{{ property }}\">{{ property }}</span>\n</ng-template>\n", directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AmountCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-amount-cell',
                        templateUrl: '../cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var DateRangeCellComponent = /** @class */ (function (_super) {
        __extends(DateRangeCellComponent, _super);
        function DateRangeCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DateRangeCellComponent.prototype, "linkable", {
            get: function () {
                var _a;
                return this.hasRange && ((_a = this.cellOptions.linkable) !== null && _a !== void 0 ? _a : true);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateRangeCellComponent.prototype, "hasRange", {
            get: function () {
                return !!this.model.startDate && !!this.model.endDate;
            },
            enumerable: false,
            configurable: true
        });
        return DateRangeCellComponent;
    }(CellComponent));
    DateRangeCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DateRangeCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    DateRangeCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: DateRangeCellComponent, selector: "cx-org-date-range-cell", usesInheritance: true, ngImport: i0__namespace, template: "<a\n  *ngIf=\"linkable; else text\"\n  [routerLink]=\"{ cxRoute: route, params: routeModel } | cxUrl\"\n  [tabindex]=\"tabIndex\"\n>\n  <ng-container *ngTemplateOutlet=\"text\"></ng-container>\n</a>\n\n<ng-template #text>\n  <span\n    class=\"text\"\n    title=\"{{ model.startDate | cxDate }} - {{ model.endDate | cxDate }}\"\n    *ngIf=\"hasRange\"\n  >\n    {{ model.startDate | cxDate }} - {{ model.endDate | cxDate }}\n  </span>\n</ng-template>\n", directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "cxUrl": i3__namespace.UrlPipe, "cxDate": i3__namespace.CxDatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DateRangeCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-date-range-cell',
                        templateUrl: './date-range-cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var LimitCellComponent = /** @class */ (function (_super) {
        __extends(LimitCellComponent, _super);
        function LimitCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(LimitCellComponent.prototype, "isTimeSpanThreshold", {
            get: function () {
                var _a;
                return (((_a = this.model.orderApprovalPermissionType) === null || _a === void 0 ? void 0 : _a.code) ===
                    'B2BOrderThresholdTimespanPermission');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LimitCellComponent.prototype, "isOrderThreshold", {
            get: function () {
                var _a;
                return (((_a = this.model.orderApprovalPermissionType) === null || _a === void 0 ? void 0 : _a.code) ===
                    'B2BOrderThresholdPermission');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LimitCellComponent.prototype, "isExceedPermission", {
            get: function () {
                var _a;
                return (((_a = this.model.orderApprovalPermissionType) === null || _a === void 0 ? void 0 : _a.code) ===
                    'B2BBudgetExceededPermission');
            },
            enumerable: false,
            configurable: true
        });
        return LimitCellComponent;
    }(CellComponent));
    LimitCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: LimitCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    LimitCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: LimitCellComponent, selector: "cx-org-limit-cell", usesInheritance: true, ngImport: i0__namespace, template: "<a\n  *ngIf=\"linkable; else threshold\"\n  [routerLink]=\"{ cxRoute: route, params: routeModel } | cxUrl\"\n  [tabindex]=\"tabIndex\"\n>\n  <ng-container *ngTemplateOutlet=\"threshold\"></ng-container>\n</a>\n\n<ng-template #threshold>\n  <span\n    class=\"text\"\n    title=\"{{ model.threshold }} {{ model.currency?.symbol }} {{\n      'orgPurchaseLimit.per.' + model.periodRange | cxTranslate\n    }}\"\n    *ngIf=\"isTimeSpanThreshold\"\n  >\n    {{ model.threshold }} {{ model.currency?.symbol }}\n    {{ 'orgPurchaseLimit.per.' + model.periodRange | cxTranslate }}\n  </span>\n\n  <span\n    class=\"text\"\n    title=\"{{ model.threshold }} {{ model.currency?.symbol }}\"\n    *ngIf=\"isOrderThreshold\"\n  >\n    {{ model.threshold }} {{ model.currency?.symbol }}\n  </span>\n\n  <span\n    class=\"text\"\n    title=\"{{ model.orderApprovalPermissionType.name }}\"\n    *ngIf=\"isExceedPermission\"\n  >\n    {{ model.orderApprovalPermissionType.name }}\n  </span>\n</ng-template>\n", directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "cxUrl": i3__namespace.UrlPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: LimitCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-limit-cell',
                        templateUrl: './limit-cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var RolesCellComponent = /** @class */ (function (_super) {
        __extends(RolesCellComponent, _super);
        function RolesCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return RolesCellComponent;
    }(CellComponent));
    RolesCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: RolesCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    RolesCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: RolesCellComponent, selector: "cx-org-roles-cell", usesInheritance: true, ngImport: i0__namespace, template: "<a\n  *ngIf=\"linkable; else text\"\n  [routerLink]=\"{ cxRoute: route, params: routeModel } | cxUrl\"\n  [tabindex]=\"tabIndex\"\n>\n  <ng-container *ngTemplateOutlet=\"text\"></ng-container>\n</a>\n\n<ng-template #text>\n  <ul class=\"text\">\n    <li\n      *ngFor=\"let role of model.roles\"\n      class=\"li\"\n      [innerText]=\"'organization.userRoles.' + role | cxTranslate\"\n    ></li>\n    <li *ngIf=\"model.roles?.length === 0\">-</li>\n  </ul>\n</ng-template>\n", directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "cxUrl": i3__namespace.UrlPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: RolesCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-roles-cell',
                        templateUrl: './roles-cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var StatusCellComponent = /** @class */ (function (_super) {
        __extends(StatusCellComponent, _super);
        function StatusCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(StatusCellComponent.prototype, "label", {
            get: function () {
                if (this.isActive === undefined) {
                    return;
                }
                return this.isActive ? 'organization.enabled' : 'organization.disabled';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StatusCellComponent.prototype, "isActive", {
            get: function () {
                return this.model.active;
            },
            enumerable: false,
            configurable: true
        });
        return StatusCellComponent;
    }(CellComponent));
    StatusCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: StatusCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    StatusCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: StatusCellComponent, selector: "cx-org-status-cell", usesInheritance: true, ngImport: i0__namespace, template: "<a\n  *ngIf=\"linkable; else text\"\n  [routerLink]=\"{ cxRoute: route, params: routeModel } | cxUrl\"\n  [tabindex]=\"tabIndex\"\n>\n  <ng-container *ngTemplateOutlet=\"text\"></ng-container>\n</a>\n\n<ng-template #text>\n  <span\n    class=\"text\"\n    title=\"{{ label | cxTranslate }}\"\n    [class.is-active]=\"isActive\"\n    *ngIf=\"label\"\n  >\n    {{ label | cxTranslate }}</span\n  >\n</ng-template>\n", directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "cxUrl": i3__namespace.UrlPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: StatusCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-status-cell',
                        templateUrl: './status-cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var UnitCellComponent = /** @class */ (function (_super) {
        __extends(UnitCellComponent, _super);
        function UnitCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(UnitCellComponent.prototype, "property", {
            get: function () {
                var _a, _b, _c;
                return (_b = (_a = this.model.unit) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : (_c = this.model.orgUnit) === null || _c === void 0 ? void 0 : _c.name;
            },
            enumerable: false,
            configurable: true
        });
        return UnitCellComponent;
    }(CellComponent));
    UnitCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitCellComponent, selector: "cx-org-unit-cell", usesInheritance: true, ngImport: i0__namespace, template: "<a\n  *ngIf=\"linkable; else text\"\n  [routerLink]=\"{ cxRoute: route, params: routeModel } | cxUrl\"\n  [tabIndex]=\"tabIndex\"\n>\n  <ng-container *ngTemplateOutlet=\"text\"></ng-container>\n</a>\n\n<ng-template #text>\n  <span class=\"text\" title=\"{{ property }}\">{{ property }}</span>\n</ng-template>\n", directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-cell',
                        templateUrl: '../cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var CellModule = /** @class */ (function () {
        function CellModule() {
        }
        return CellModule;
    }());
    CellModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CellModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CellModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CellModule, declarations: [CellComponent,
            ActiveLinkCellComponent,
            AmountCellComponent,
            DateRangeCellComponent,
            LimitCellComponent,
            RolesCellComponent,
            StatusCellComponent,
            UnitCellComponent], imports: [i5.CommonModule, i2.RouterModule, i3.UrlModule, i3.I18nModule, i1.IconModule] });
    CellModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CellModule, imports: [[i5.CommonModule, i2.RouterModule, i3.UrlModule, i3.I18nModule, i1.IconModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CellModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i2.RouterModule, i3.UrlModule, i3.I18nModule, i1.IconModule],
                        declarations: [
                            CellComponent,
                            ActiveLinkCellComponent,
                            AmountCellComponent,
                            DateRangeCellComponent,
                            LimitCellComponent,
                            RolesCellComponent,
                            StatusCellComponent,
                            UnitCellComponent,
                        ],
                    }]
            }] });

    exports.OrganizationTableType = void 0;
    (function (OrganizationTableType) {
        OrganizationTableType["BUDGET"] = "orgBudget";
        OrganizationTableType["BUDGET_ASSIGNED_COST_CENTERS"] = "orgBudgetAssignedCostCenters";
        OrganizationTableType["COST_CENTER"] = "orgCostCenter";
        OrganizationTableType["COST_CENTER_BUDGETS"] = "orgCostCenterBudgets";
        OrganizationTableType["COST_CENTER_ASSIGNED_BUDGETS"] = "orgCostCenterAssignedBudgets";
        OrganizationTableType["UNIT"] = "orgUnit";
        OrganizationTableType["UNIT_USERS"] = "orgUnitUsers";
        OrganizationTableType["UNIT_CHILDREN"] = "orgUnitChildren";
        OrganizationTableType["UNIT_APPROVERS"] = "orgUnitApprovers";
        OrganizationTableType["UNIT_ASSIGNED_APPROVERS"] = "orgUnitAssignedApprovers";
        OrganizationTableType["UNIT_ADDRESS"] = "orgUnitAddress";
        OrganizationTableType["UNIT_COST_CENTERS"] = "orgUnitCostCenters";
        OrganizationTableType["USER_GROUP"] = "orgUserGroup";
        OrganizationTableType["USER_GROUP_USERS"] = "orgUserGroupUsers";
        OrganizationTableType["USER_GROUP_ASSIGNED_USERS"] = "orgUserGroupAssignedUsers";
        OrganizationTableType["USER_GROUP_PERMISSIONS"] = "orgUserGroupPermissions";
        OrganizationTableType["USER_GROUP_ASSIGNED_PERMISSIONS"] = "orgUserGroupAssignedPermissions";
        OrganizationTableType["USER"] = "orgUser";
        OrganizationTableType["USER_APPROVERS"] = "orgUserApprovers";
        OrganizationTableType["USER_ASSIGNED_APPROVERS"] = "orgUserAssignedApprovers";
        OrganizationTableType["USER_PERMISSIONS"] = "orgUserPermissions";
        OrganizationTableType["USER_ASSIGNED_PERMISSIONS"] = "orgUserAssignedPermissions";
        OrganizationTableType["USER_USER_GROUPS"] = "orgUserUserGroups";
        OrganizationTableType["USER_ASSIGNED_USER_GROUPS"] = "orgUserAssignedUserGroups";
        OrganizationTableType["PERMISSION"] = "orgPurchaseLimit";
    })(exports.OrganizationTableType || (exports.OrganizationTableType = {}));

    var CostCenterDetailsCellComponent = /** @class */ (function (_super) {
        __extends(CostCenterDetailsCellComponent, _super);
        function CostCenterDetailsCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CostCenterDetailsCellComponent;
    }(CellComponent));
    CostCenterDetailsCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterDetailsCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    CostCenterDetailsCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CostCenterDetailsCellComponent, selector: "cx-org-cost-center-details-cell", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #details>\n  <div class=\"popover-details\">\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.name' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgCostCenterDetails',\n            params: model\n          } | cxUrl\n        \"\n      >\n        {{ model.name }}\n      </a>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.code' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.code }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.active' | cxTranslate }}</label>\n      <span\n        class=\"value\"\n        [class.is-active]=\"model.active\"\n        [class.is-inactive]=\"!model.active\"\n      >\n        {{\n          (model.active ? 'organization.enabled' : 'organization.disabled')\n            | cxTranslate\n        }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.currency' | cxTranslate }}</label>\n\n      <span class=\"value\">\n        {{ model.currency?.isocode }}\n      </span>\n    </div>\n\n    <div class=\"property\" *ngIf=\"model.unit\">\n      <label>{{ 'orgCostCenter.unit' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.unit\n          } | cxUrl\n        \"\n      >\n        {{ model.unit?.name }}\n      </a>\n    </div>\n  </div>\n</ng-template>\n\n<button\n  class=\"button text\"\n  [cxPopover]=\"details\"\n  [cxPopoverOptions]=\"{\n    placement: 'auto',\n    class: 'my-company-popover',\n    appendToBody: true,\n    displayCloseButton: true\n  }\"\n>\n  {{ model.name }}\n</button>\n", directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.PopoverDirective, selector: "[cxPopover]", inputs: ["cxPopover", "cxPopoverOptions"], outputs: ["openPopover", "closePopover"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterDetailsCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-cost-center-details-cell',
                        templateUrl: './cost-center-details-cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var BudgetCostCenterListService = /** @class */ (function (_super) {
        __extends(BudgetCostCenterListService, _super);
        function BudgetCostCenterListService(tableService, budgetService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.budgetService = budgetService;
            _this.tableType = exports.OrganizationTableType.BUDGET_ASSIGNED_COST_CENTERS;
            _this._domainType = exports.OrganizationTableType.COST_CENTER;
            return _this;
        }
        BudgetCostCenterListService.prototype.load = function (_pagination, code) {
            var _this = this;
            return this.budgetService.getCostCenters(code).pipe(operators.filter(function (list) { return Boolean(list); }), operators.map(function (costCenter) { return _this.filterSelected(costCenter); }));
        };
        /**
         * As we can't filter with the backend API, we do this client side.
         */
        BudgetCostCenterListService.prototype.filterSelected = function (_a) {
            var pagination = _a.pagination, sorts = _a.sorts, values = _a.values;
            return {
                pagination: pagination,
                sorts: sorts,
                values: values.filter(function (value) { return value.active; }),
            };
        };
        return BudgetCostCenterListService;
    }(SubListService));
    BudgetCostCenterListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetCostCenterListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.BudgetService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BudgetCostCenterListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetCostCenterListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetCostCenterListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.BudgetService }]; } });

    var BudgetCostCenterListComponent = /** @class */ (function () {
        function BudgetCostCenterListComponent() {
        }
        return BudgetCostCenterListComponent;
    }());
    BudgetCostCenterListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetCostCenterListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    BudgetCostCenterListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: BudgetCostCenterListComponent, selector: "cx-org-budget-cost-center-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: BudgetCostCenterListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list></cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetCostCenterListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-budget-cost-center-list',
                        templateUrl: './budget-cost-center-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: BudgetCostCenterListService,
                            },
                        ],
                    }]
            }] });

    var CurrentBudgetService = /** @class */ (function (_super) {
        __extends(CurrentBudgetService, _super);
        function CurrentBudgetService(routingService, budgetService) {
            var _this = _super.call(this, routingService) || this;
            _this.routingService = routingService;
            _this.budgetService = budgetService;
            return _this;
        }
        CurrentBudgetService.prototype.getDetailsRoute = function () {
            return 'orgBudgetDetails';
        };
        CurrentBudgetService.prototype.getParamKey = function () {
            return root.ROUTE_PARAMS.budgetCode;
        };
        CurrentBudgetService.prototype.getItem = function (code) {
            return this.budgetService.get(code);
        };
        CurrentBudgetService.prototype.getError = function (code) {
            return this.budgetService.getErrorState(code);
        };
        return CurrentBudgetService;
    }(CurrentItemService));
    CurrentBudgetService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentBudgetService, deps: [{ token: i3__namespace.RoutingService }, { token: i2__namespace$1.BudgetService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CurrentBudgetService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentBudgetService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentBudgetService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.RoutingService }, { type: i2__namespace$1.BudgetService }]; } });

    var BudgetFormService = /** @class */ (function (_super) {
        __extends(BudgetFormService, _super);
        function BudgetFormService(datePickerService) {
            var _this = _super.call(this) || this;
            _this.datePickerService = datePickerService;
            return _this;
        }
        BudgetFormService.prototype.build = function () {
            var _this = this;
            var form = new i8.FormGroup({});
            form.setControl('code', new i8.FormControl('', [
                i8.Validators.required,
                i1.CustomFormValidators.noSpecialCharacters,
            ]));
            form.setControl('name', new i8.FormControl('', i8.Validators.required));
            form.setControl('startDate', new i8.FormControl('', [
                i8.Validators.required,
                i1.CustomFormValidators.patternValidation(function (date) { return _this.datePickerService.isValidFormat(date); }),
            ]));
            form.setControl('endDate', new i8.FormControl('', [
                i8.Validators.required,
                i1.CustomFormValidators.patternValidation(function (date) { return _this.datePickerService.isValidFormat(date); }),
            ]));
            form.setControl('budget', new i8.FormControl('', [
                i8.Validators.required,
                i1.CustomFormValidators.mustBePositive,
            ]));
            form.setControl('currency', new i8.FormGroup({
                isocode: new i8.FormControl(undefined, i8.Validators.required),
            }));
            form.setControl('orgUnit', new i8.FormGroup({
                uid: new i8.FormControl(undefined, i8.Validators.required),
            }));
            form.setValidators(i1.CustomFormValidators.dateRange('startDate', 'endDate', function (date) { return _this.datePickerService.getDate(date); }));
            this.form = form;
        };
        return BudgetFormService;
    }(FormService));
    BudgetFormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetFormService, deps: [{ token: i1__namespace.DatePickerService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BudgetFormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetFormService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetFormService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.DatePickerService }]; } });

    var BudgetItemService = /** @class */ (function (_super) {
        __extends(BudgetItemService, _super);
        function BudgetItemService(currentItemService, routingService, formService, budgetService) {
            var _this = _super.call(this, currentItemService, routingService, formService) || this;
            _this.currentItemService = currentItemService;
            _this.routingService = routingService;
            _this.formService = formService;
            _this.budgetService = budgetService;
            return _this;
        }
        /**
         * @override
         * Returns the budget for the given code.
         *
         * Loads the budget each time, to ensure accurate data is resolved.
         */
        BudgetItemService.prototype.load = function (code) {
            this.budgetService.loadBudget(code);
            return this.budgetService.get(code);
        };
        BudgetItemService.prototype.update = function (code, value) {
            this.budgetService.update(code, value);
            return this.budgetService.getLoadingStatus(value.code);
        };
        BudgetItemService.prototype.create = function (value) {
            this.budgetService.create(value);
            return this.budgetService.getLoadingStatus(value.code);
        };
        /**
         * @override
         * Returns 'budgetDetails'
         */
        BudgetItemService.prototype.getDetailsRoute = function () {
            return 'orgBudgetDetails';
        };
        return BudgetItemService;
    }(ItemService));
    BudgetItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetItemService, deps: [{ token: CurrentBudgetService }, { token: i3__namespace.RoutingService }, { token: BudgetFormService }, { token: i2__namespace$1.BudgetService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BudgetItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetItemService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetItemService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: CurrentBudgetService }, { type: i3__namespace.RoutingService }, { type: BudgetFormService }, { type: i2__namespace$1.BudgetService }]; } });

    var BudgetDetailsComponent = /** @class */ (function () {
        function BudgetDetailsComponent(itemService) {
            this.itemService = itemService;
            this.isInEditMode$ = this.itemService.isInEditMode$;
        }
        BudgetDetailsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.model$ = this.itemService.key$.pipe(operators.switchMap(function (code) { return _this.itemService.load(code); }), operators.startWith({}));
        };
        return BudgetDetailsComponent;
    }());
    BudgetDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetDetailsComponent, deps: [{ token: ItemService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BudgetDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: BudgetDetailsComponent, selector: "cx-org-budget-details", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: BudgetItemService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-card\n  *ngIf=\"model$ | async as model\"\n  i18nRoot=\"orgBudget.details\"\n  [cxFocus]=\"{ refreshFocus: model }\"\n>\n  <a\n    actions\n    class=\"link edit\"\n    [class.disabled]=\"!model.active || (isInEditMode$ | async)\"\n    [routerLink]=\"{ cxRoute: 'orgBudgetEdit', params: model } | cxUrl\"\n  >\n    {{ 'organization.edit' | cxTranslate }}\n  </a>\n\n  <cx-org-toggle-status actions i18nRoot=\"orgBudget\"></cx-org-toggle-status>\n\n  <cx-org-disable-info info i18nRoot=\"orgBudget\"> </cx-org-disable-info>\n\n  <section main class=\"details\" cxOrgItemExists>\n    <div class=\"property\">\n      <label>{{ 'orgBudget.name' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.name }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.code' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.code }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.startDate' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.startDate | cxDate }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.endDate' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.endDate | cxDate }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.active' | cxTranslate }}</label>\n      <span class=\"value\" [class.is-active]=\"model.active\">\n        {{\n          (model.active ? 'organization.enabled' : 'organization.disabled')\n            | cxTranslate\n        }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.amount' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.budget }} {{ model.currency?.isocode }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.unit' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.orgUnit\n          } | cxUrl\n        \"\n      >\n        {{ model.orgUnit?.name }}\n      </a>\n    </div>\n  </section>\n\n  <section main class=\"link-list\">\n    <a\n      *ngIf=\"model.code\"\n      class=\"link\"\n      [routerLink]=\"{ cxRoute: 'orgBudgetCostCenters', params: model } | cxUrl\"\n      routerLinkActive=\"is-current\"\n    >\n      {{ 'orgBudget.links.costCenters' | cxTranslate }}\n    </a>\n  </section>\n</cx-org-card>\n", components: [{ type: CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: ToggleStatusComponent, selector: "cx-org-toggle-status", inputs: ["i18nRoot", "key", "disabled"] }, { type: DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: ItemExistsDirective, selector: "[cxOrgItemExists]" }, { type: i2__namespace.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxUrl": i3__namespace.UrlPipe, "cxTranslate": i3__namespace.TranslatePipe, "cxDate": i3__namespace.CxDatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-budget-details',
                        templateUrl: './budget-details.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: BudgetItemService,
                            },
                        ],
                        host: { class: 'content-wrapper' },
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }]; } });

    function createCodeForEntityName(name, code) {
        var _a;
        if (!code.value) {
            var codeFromName = (_a = name.value) === null || _a === void 0 ? void 0 : _a.replace(/\s+/g, '-').toLowerCase();
            code.patchValue(codeFromName);
        }
    }

    var BudgetFormComponent = /** @class */ (function () {
        function BudgetFormComponent(itemService, unitService, currencyService) {
            var _this = this;
            this.itemService = itemService;
            this.unitService = unitService;
            this.currencyService = currencyService;
            this.form = this.itemService.getForm();
            this.units$ = this.unitService.getActiveUnitList().pipe(operators.tap(function (units) {
                var _a, _b, _c;
                if (units.length === 1) {
                    (_b = (_a = _this.form) === null || _a === void 0 ? void 0 : _a.get('orgUnit.uid')) === null || _b === void 0 ? void 0 : _b.setValue((_c = units[0]) === null || _c === void 0 ? void 0 : _c.id);
                }
            }));
            this.currencies$ = this.currencyService.getAll().pipe(operators.tap(function (currency) {
                var _a, _b, _c;
                if (currency.length === 1) {
                    (_b = (_a = _this.form) === null || _a === void 0 ? void 0 : _a.get('currency.isocode')) === null || _b === void 0 ? void 0 : _b.setValue((_c = currency[0]) === null || _c === void 0 ? void 0 : _c.isocode);
                }
            }));
        }
        BudgetFormComponent.prototype.ngOnInit = function () {
            this.unitService.loadList();
        };
        BudgetFormComponent.prototype.createCodeWithName = function (name, code) {
            createCodeForEntityName(name, code);
        };
        return BudgetFormComponent;
    }());
    BudgetFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetFormComponent, deps: [{ token: ItemService }, { token: i2__namespace$1.OrgUnitService }, { token: i3__namespace.CurrencyService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BudgetFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: BudgetFormComponent, selector: "cx-org-budget-form", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: BudgetItemService,
            },
            {
                provide: CurrentItemService,
                useExisting: CurrentBudgetService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-form i18nRoot=\"orgBudget\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgBudget.name' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgBudget.name' | cxTranslate }}\"\n        formControlName=\"name\"\n        (blur)=\"createCodeWithName(form.get('name'), form.get('code'))\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgBudget.code' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgBudget.code' | cxTranslate }}\"\n        formControlName=\"code\"\n      />\n      <cx-form-errors [control]=\"form.get('code')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{\n        'orgBudget.startDate' | cxTranslate\n      }}</span>\n      <cx-date-picker\n        [control]=\"form.get('startDate')\"\n        [max]=\"form.get('endDate').value\"\n        (update)=\"form.get('endDate').updateValueAndValidity()\"\n      ></cx-date-picker>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{ 'orgBudget.endDate' | cxTranslate }}</span>\n      <cx-date-picker\n        [control]=\"form.get('endDate')\"\n        [min]=\"form.get('startDate').value\"\n        (update)=\"form.get('startDate').updateValueAndValidity()\"\n      ></cx-date-picker>\n    </label>\n\n    <label aria-required=\"true\" [formGroup]=\"form.get('currency')\">\n      <span class=\"label-content required\">{{\n        'orgBudget.currency' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"isocode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"currencies$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"isocode\"\n        [class.invalid]=\"form.get('currency.isocode').invalid\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgBudget.currency' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('currency.isocode')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{ 'orgBudget.amount' | cxTranslate }}</span>\n      <input\n        aria-required=\"true\"\n        type=\"number\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgBudget.amount' | cxTranslate }}\"\n        formControlName=\"budget\"\n        min=\"0\"\n      />\n      <cx-form-errors [control]=\"form.get('budget')\"></cx-form-errors>\n    </label>\n\n    <label\n      aria-required=\"true\"\n      *ngIf=\"units$ | async as units\"\n      [formGroup]=\"form.get('orgUnit')\"\n    >\n      <span class=\"label-content required\">{{\n        'orgBudget.businessUnits' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"units\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        [readonly]=\"form.get('orgUnit.uid').disabled\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgBudget.businessUnits' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('orgUnit.uid')\"></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n", components: [{ type: FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { type: i1__namespace.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { type: i1__namespace.DatePickerComponent, selector: "cx-date-picker", inputs: ["control", "min", "max"], outputs: ["update"] }, { type: i5__namespace$1.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { type: i8__namespace.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-budget-form',
                        templateUrl: './budget-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: BudgetItemService,
                            },
                            {
                                provide: CurrentItemService,
                                useExisting: CurrentBudgetService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: i2__namespace$1.OrgUnitService }, { type: i3__namespace.CurrencyService }]; } });

    /**
     * Service to populate Budget data to `Table` data. Budget
     * data is driven by the table configuration, using the `OrganizationTables.BUDGET`.
     */
    var BudgetListService = /** @class */ (function (_super) {
        __extends(BudgetListService, _super);
        function BudgetListService(tableService, budgetService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.budgetService = budgetService;
            _this.tableType = exports.OrganizationTableType.BUDGET;
            return _this;
        }
        BudgetListService.prototype.load = function (pagination) {
            var _this = this;
            return this.budgetService.getList(pagination).pipe(operators.filter(function (list) { return Boolean(list); }), operators.map(function (raw) { return _this.convertBudgets(raw); }));
        };
        /**
         * Populates budget data to a convenient table data model, so that we
         * can skip specific conversion in the view logic where possible.
         */
        BudgetListService.prototype.convertBudgets = function (_b) {
            var pagination = _b.pagination, sorts = _b.sorts, values = _b.values;
            var budgetModels = {
                pagination: pagination,
                sorts: sorts,
                values: values.map(function (value) {
                    var _a;
                    return (Object.assign(Object.assign({}, value), { currency: (_a = value.currency) === null || _a === void 0 ? void 0 : _a.isocode, unit: value.orgUnit }));
                }),
            };
            return budgetModels;
        };
        return BudgetListService;
    }(ListService));
    BudgetListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.BudgetService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BudgetListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.BudgetService }]; } });

    var BudgetRoutePageMetaResolver = /** @class */ (function (_super) {
        __extends(BudgetRoutePageMetaResolver, _super);
        function BudgetRoutePageMetaResolver(translation, currentItemService) {
            var _this = _super.call(this, translation) || this;
            _this.currentItemService = currentItemService;
            return _this;
        }
        BudgetRoutePageMetaResolver.prototype.getParams = function () {
            return this.currentItemService.item$;
        };
        return BudgetRoutePageMetaResolver;
    }(i3.DefaultRoutePageMetaResolver));
    BudgetRoutePageMetaResolver.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetRoutePageMetaResolver, deps: [{ token: i3__namespace.TranslationService }, { token: CurrentBudgetService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BudgetRoutePageMetaResolver.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetRoutePageMetaResolver, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetRoutePageMetaResolver, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i3__namespace.TranslationService }, { type: CurrentBudgetService }]; } });

    var _a$5;
    var budgetCmsConfig = {
        cmsComponents: {
            ManageBudgetsListComponent: {
                component: ListComponent,
                providers: [
                    {
                        provide: ListService,
                        useExisting: BudgetListService,
                    },
                    {
                        provide: ItemService,
                        useExisting: BudgetItemService,
                    },
                ],
                childRoutes: {
                    parent: {
                        data: {
                            cxPageMeta: {
                                breadcrumb: 'orgBudget.breadcrumbs.list',
                                resolver: BudgetRoutePageMetaResolver,
                            },
                        },
                    },
                    children: [
                        {
                            path: 'create',
                            component: BudgetFormComponent,
                        },
                        {
                            path: ":" + root.ROUTE_PARAMS.budgetCode,
                            component: BudgetDetailsComponent,
                            data: {
                                cxPageMeta: {
                                    breadcrumb: 'orgBudget.breadcrumbs.details',
                                },
                            },
                            children: [
                                {
                                    path: "edit",
                                    component: BudgetFormComponent,
                                },
                                {
                                    path: 'cost-centers',
                                    component: BudgetCostCenterListComponent,
                                },
                            ],
                        },
                    ],
                },
                guards: [i3.AuthGuard, i2$1.AdminGuard],
            },
        },
    };
    function budgetTableConfigFactory() {
        return budgetTableConfig;
    }
    var budgetTableConfig = {
        table: (_a$5 = {},
            _a$5[exports.OrganizationTableType.BUDGET] = {
                cells: ['name', 'active', 'amount', 'dateRange', 'unit'],
                options: {
                    cells: {
                        name: {
                            dataComponent: ActiveLinkCellComponent,
                        },
                        active: {
                            dataComponent: StatusCellComponent,
                        },
                        amount: {
                            dataComponent: AmountCellComponent,
                        },
                        dateRange: {
                            dataComponent: DateRangeCellComponent,
                        },
                        unit: {
                            dataComponent: UnitCellComponent,
                        },
                    },
                },
            },
            _a$5[exports.OrganizationTableType.BUDGET_ASSIGNED_COST_CENTERS] = {
                cells: ['name'],
                options: {
                    cells: {
                        name: {
                            dataComponent: CostCenterDetailsCellComponent,
                        },
                    },
                    pagination: {
                        pageSize: MAX_OCC_INTEGER_VALUE,
                    },
                },
            },
            _a$5),
    };

    var BudgetCostCenterListModule = /** @class */ (function () {
        function BudgetCostCenterListModule() {
        }
        return BudgetCostCenterListModule;
    }());
    BudgetCostCenterListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetCostCenterListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BudgetCostCenterListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetCostCenterListModule, declarations: [BudgetCostCenterListComponent], imports: [i5.CommonModule, SubListModule] });
    BudgetCostCenterListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetCostCenterListModule, imports: [[i5.CommonModule, SubListModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetCostCenterListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, SubListModule],
                        declarations: [BudgetCostCenterListComponent],
                    }]
            }] });

    var ItemExistsModule = /** @class */ (function () {
        function ItemExistsModule() {
        }
        return ItemExistsModule;
    }());
    ItemExistsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemExistsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ItemExistsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemExistsModule, declarations: [ItemExistsDirective], imports: [i5.CommonModule], exports: [ItemExistsDirective] });
    ItemExistsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemExistsModule, imports: [[i5.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ItemExistsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule],
                        declarations: [ItemExistsDirective],
                        exports: [ItemExistsDirective],
                    }]
            }] });

    var BudgetDetailsModule = /** @class */ (function () {
        function BudgetDetailsModule() {
        }
        return BudgetDetailsModule;
    }());
    BudgetDetailsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetDetailsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BudgetDetailsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetDetailsModule, declarations: [BudgetDetailsComponent], imports: [i5.CommonModule,
            CardModule,
            i2.RouterModule,
            i3.UrlModule,
            i3.I18nModule,
            ToggleStatusModule,
            ItemExistsModule,
            DisableInfoModule,
            i1.KeyboardFocusModule] });
    BudgetDetailsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetDetailsModule, imports: [[
                i5.CommonModule,
                CardModule,
                i2.RouterModule,
                i3.UrlModule,
                i3.I18nModule,
                ToggleStatusModule,
                ItemExistsModule,
                DisableInfoModule,
                i1.KeyboardFocusModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetDetailsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            CardModule,
                            i2.RouterModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            ToggleStatusModule,
                            ItemExistsModule,
                            DisableInfoModule,
                            i1.KeyboardFocusModule,
                        ],
                        declarations: [BudgetDetailsComponent],
                    }]
            }] });

    var BudgetFormModule = /** @class */ (function () {
        function BudgetFormModule() {
        }
        return BudgetFormModule;
    }());
    BudgetFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BudgetFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetFormModule, declarations: [BudgetFormComponent], imports: [i5.CommonModule,
            i2.RouterModule,
            FormModule,
            i5$1.NgSelectModule,
            i3.UrlModule,
            i3.I18nModule,
            i8.ReactiveFormsModule,
            i1.FormErrorsModule,
            ItemActiveModule,
            i1.DatePickerModule] });
    BudgetFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetFormModule, imports: [[
                i5.CommonModule,
                i2.RouterModule,
                FormModule,
                i5$1.NgSelectModule,
                i3.UrlModule,
                i3.I18nModule,
                i8.ReactiveFormsModule,
                i1.FormErrorsModule,
                ItemActiveModule,
                i1.DatePickerModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i2.RouterModule,
                            FormModule,
                            i5$1.NgSelectModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            i8.ReactiveFormsModule,
                            i1.FormErrorsModule,
                            ItemActiveModule,
                            i1.DatePickerModule,
                        ],
                        declarations: [BudgetFormComponent],
                    }]
            }] });

    var BudgetComponentsModule = /** @class */ (function () {
        function BudgetComponentsModule() {
        }
        return BudgetComponentsModule;
    }());
    BudgetComponentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetComponentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BudgetComponentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetComponentsModule, imports: [SharedOrganizationModule,
            BudgetDetailsModule,
            BudgetFormModule,
            BudgetCostCenterListModule] });
    BudgetComponentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetComponentsModule, providers: [
            i3.provideDefaultConfig(budgetCmsConfig),
            i3.provideDefaultConfigFactory(budgetTableConfigFactory),
        ], imports: [[
                SharedOrganizationModule,
                BudgetDetailsModule,
                BudgetFormModule,
                BudgetCostCenterListModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetComponentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            SharedOrganizationModule,
                            BudgetDetailsModule,
                            BudgetFormModule,
                            BudgetCostCenterListModule,
                        ],
                        providers: [
                            i3.provideDefaultConfig(budgetCmsConfig),
                            i3.provideDefaultConfigFactory(budgetTableConfigFactory),
                        ],
                    }]
            }] });

    var BudgetDetailsCellComponent = /** @class */ (function (_super) {
        __extends(BudgetDetailsCellComponent, _super);
        function BudgetDetailsCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return BudgetDetailsCellComponent;
    }(CellComponent));
    BudgetDetailsCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetDetailsCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    BudgetDetailsCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: BudgetDetailsCellComponent, selector: "cx-org-budget-details-cell", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #details>\n  <div class=\"popover-details\">\n    <div class=\"property\">\n      <label>{{ 'orgBudget.name' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgBudgetDetails',\n            params: model\n          } | cxUrl\n        \"\n      >\n        {{ model.name }}\n      </a>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.code' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.code }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.startDate' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.startDate | cxDate }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.endDate' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.endDate | cxDate }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.active' | cxTranslate }}</label>\n      <span class=\"value\" [class.is-active]=\"model.active\">\n        {{\n          (model.active ? 'organization.enabled' : 'organization.disabled')\n            | cxTranslate\n        }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.amount' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.budget }} {{ model.currency?.isocode }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgBudget.unit' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.orgUnit\n          } | cxUrl\n        \"\n      >\n        {{ model.orgUnit?.name }}\n      </a>\n    </div>\n  </div>\n</ng-template>\n\n<button\n  class=\"button text\"\n  [cxPopover]=\"details\"\n  [cxPopoverOptions]=\"{\n    placement: 'auto',\n    class: 'my-company-popover',\n    appendToBody: true,\n    displayCloseButton: true\n  }\"\n>\n  {{ model.name }}\n</button>\n", directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i1__namespace.PopoverDirective, selector: "[cxPopover]", inputs: ["cxPopover", "cxPopoverOptions"], outputs: ["openPopover", "closePopover"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "cxUrl": i3__namespace.UrlPipe, "cxDate": i3__namespace.CxDatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetDetailsCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-budget-details-cell',
                        templateUrl: './budget-details-cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var BudgetDetailsCellModule = /** @class */ (function () {
        function BudgetDetailsCellModule() {
        }
        return BudgetDetailsCellModule;
    }());
    BudgetDetailsCellModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetDetailsCellModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BudgetDetailsCellModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetDetailsCellModule, declarations: [BudgetDetailsCellComponent], imports: [i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule], exports: [BudgetDetailsCellComponent] });
    BudgetDetailsCellModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetDetailsCellModule, imports: [[i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetDetailsCellModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule],
                        declarations: [BudgetDetailsCellComponent],
                        exports: [BudgetDetailsCellComponent],
                    }]
            }] });

    var CostCenterBudgetListService = /** @class */ (function (_super) {
        __extends(CostCenterBudgetListService, _super);
        function CostCenterBudgetListService(tableService, costCenterService, budgetService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.costCenterService = costCenterService;
            _this.budgetService = budgetService;
            _this.tableType = exports.OrganizationTableType.COST_CENTER_BUDGETS;
            _this._domainType = exports.OrganizationTableType.BUDGET;
            return _this;
        }
        CostCenterBudgetListService.prototype.load = function (pagination, code) {
            return this.costCenterService.getBudgets(code, pagination);
        };
        /**
         * @override
         * Assign budget to the cost center.
         */
        CostCenterBudgetListService.prototype.assign = function (costCenterCode, budgetCode) {
            this.costCenterService.assignBudget(costCenterCode, budgetCode);
            return this.budgetService.getLoadingStatus(budgetCode);
        };
        /**
         * @override
         * Unassign the budget from the cost center.
         */
        CostCenterBudgetListService.prototype.unassign = function (costCenterCode, budgetCode) {
            this.costCenterService.unassignBudget(costCenterCode, budgetCode);
            return this.budgetService.getLoadingStatus(budgetCode);
        };
        return CostCenterBudgetListService;
    }(SubListService));
    CostCenterBudgetListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterBudgetListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.CostCenterService }, { token: i2__namespace$1.BudgetService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CostCenterBudgetListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterBudgetListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterBudgetListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.CostCenterService }, { type: i2__namespace$1.BudgetService }]; } });

    var CostCenterAssignedBudgetListService = /** @class */ (function (_super) {
        __extends(CostCenterAssignedBudgetListService, _super);
        function CostCenterAssignedBudgetListService() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.tableType = exports.OrganizationTableType.COST_CENTER_ASSIGNED_BUDGETS;
            return _this;
        }
        CostCenterAssignedBudgetListService.prototype.load = function (pagination, code) {
            var _this = this;
            return _super.prototype.load.call(this, pagination, code)
                .pipe(operators.map(function (budgets) { return _this.filterSelected(budgets); }));
        };
        return CostCenterAssignedBudgetListService;
    }(CostCenterBudgetListService));
    CostCenterAssignedBudgetListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterAssignedBudgetListService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CostCenterAssignedBudgetListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterAssignedBudgetListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterAssignedBudgetListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var CostCenterAssignedBudgetListComponent = /** @class */ (function () {
        function CostCenterAssignedBudgetListComponent() {
        }
        return CostCenterAssignedBudgetListComponent;
    }());
    CostCenterAssignedBudgetListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterAssignedBudgetListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    CostCenterAssignedBudgetListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CostCenterAssignedBudgetListComponent, selector: "cx-org-cost-center-assigned-budget-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: CostCenterAssignedBudgetListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list>\n  <a actions class=\"link\" routerLink=\"assign\">\n    {{ 'organization.assign' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterAssignedBudgetListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-cost-center-assigned-budget-list',
                        templateUrl: './cost-center-assigned-budget-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: CostCenterAssignedBudgetListService,
                            },
                        ],
                    }]
            }] });

    var CostCenterBudgetListComponent = /** @class */ (function () {
        function CostCenterBudgetListComponent() {
        }
        return CostCenterBudgetListComponent;
    }());
    CostCenterBudgetListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterBudgetListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    CostCenterBudgetListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CostCenterBudgetListComponent, selector: "cx-org-cost-center-budget-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: CostCenterBudgetListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list [previous]=\"false\">\n  <a actions class=\"link\" routerLink=\"../\">\n    {{ 'organization.done' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterBudgetListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-cost-center-budget-list',
                        templateUrl: './cost-center-budget-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: CostCenterBudgetListService,
                            },
                        ],
                    }]
            }] });

    var CostCenterBudgetListModule = /** @class */ (function () {
        function CostCenterBudgetListModule() {
        }
        return CostCenterBudgetListModule;
    }());
    CostCenterBudgetListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterBudgetListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CostCenterBudgetListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterBudgetListModule, declarations: [CostCenterAssignedBudgetListComponent,
            CostCenterBudgetListComponent], imports: [ListModule, i3.I18nModule, i2.RouterModule, SubListModule] });
    CostCenterBudgetListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterBudgetListModule, imports: [[ListModule, i3.I18nModule, i2.RouterModule, SubListModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterBudgetListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [ListModule, i3.I18nModule, i2.RouterModule, SubListModule],
                        declarations: [
                            CostCenterAssignedBudgetListComponent,
                            CostCenterBudgetListComponent,
                        ],
                    }]
            }] });

    var CurrentCostCenterService = /** @class */ (function (_super) {
        __extends(CurrentCostCenterService, _super);
        function CurrentCostCenterService(routingService, costCenterService) {
            var _this = _super.call(this, routingService) || this;
            _this.routingService = routingService;
            _this.costCenterService = costCenterService;
            return _this;
        }
        CurrentCostCenterService.prototype.getParamKey = function () {
            return root.ROUTE_PARAMS.costCenterCode;
        };
        CurrentCostCenterService.prototype.getItem = function (code) {
            return this.costCenterService.get(code);
        };
        CurrentCostCenterService.prototype.getError = function (code) {
            return this.costCenterService.getErrorState(code);
        };
        return CurrentCostCenterService;
    }(CurrentItemService));
    CurrentCostCenterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentCostCenterService, deps: [{ token: i3__namespace.RoutingService }, { token: i2__namespace$1.CostCenterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CurrentCostCenterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentCostCenterService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentCostCenterService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.RoutingService }, { type: i2__namespace$1.CostCenterService }]; } });

    var CostCenterFormService = /** @class */ (function (_super) {
        __extends(CostCenterFormService, _super);
        function CostCenterFormService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CostCenterFormService.prototype.build = function () {
            var form = new i8.FormGroup({});
            form.setControl('code', new i8.FormControl('', [
                i8.Validators.required,
                i1.CustomFormValidators.noSpecialCharacters,
            ]));
            form.setControl('name', new i8.FormControl('', i8.Validators.required));
            form.setControl('currency', new i8.FormGroup({
                isocode: new i8.FormControl(undefined, i8.Validators.required),
            }));
            form.setControl('unit', new i8.FormGroup({
                uid: new i8.FormControl(undefined, i8.Validators.required),
            }));
            this.form = form;
        };
        return CostCenterFormService;
    }(FormService));
    CostCenterFormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterFormService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CostCenterFormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterFormService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterFormService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var CostCenterItemService = /** @class */ (function (_super) {
        __extends(CostCenterItemService, _super);
        function CostCenterItemService(currentItemService, routingService, formService, costCenterService) {
            var _this = _super.call(this, currentItemService, routingService, formService) || this;
            _this.currentItemService = currentItemService;
            _this.routingService = routingService;
            _this.formService = formService;
            _this.costCenterService = costCenterService;
            return _this;
        }
        CostCenterItemService.prototype.load = function (code) {
            this.costCenterService.load(code);
            return this.costCenterService.get(code);
        };
        CostCenterItemService.prototype.update = function (code, value) {
            this.costCenterService.update(code, value);
            return this.costCenterService.getLoadingStatus(value.code);
        };
        CostCenterItemService.prototype.create = function (value) {
            this.costCenterService.create(value);
            return this.costCenterService.getLoadingStatus(value.code);
        };
        CostCenterItemService.prototype.getDetailsRoute = function () {
            return 'orgCostCenterDetails';
        };
        return CostCenterItemService;
    }(ItemService));
    CostCenterItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterItemService, deps: [{ token: CurrentCostCenterService }, { token: i3__namespace.RoutingService }, { token: CostCenterFormService }, { token: i2__namespace$1.CostCenterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CostCenterItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterItemService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterItemService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: CurrentCostCenterService }, { type: i3__namespace.RoutingService }, { type: CostCenterFormService }, { type: i2__namespace$1.CostCenterService }]; } });

    var CostCenterDetailsComponent = /** @class */ (function () {
        function CostCenterDetailsComponent(itemService) {
            var _this = this;
            this.itemService = itemService;
            this.model$ = this.itemService.key$.pipe(operators.switchMap(function (code) { return _this.itemService.load(code); }), operators.startWith({}));
            this.isInEditMode$ = this.itemService.isInEditMode$;
        }
        return CostCenterDetailsComponent;
    }());
    CostCenterDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterDetailsComponent, deps: [{ token: ItemService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CostCenterDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CostCenterDetailsComponent, selector: "cx-org-cost-center-details", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: CostCenterItemService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-card\n  *ngIf=\"model$ | async as model\"\n  i18nRoot=\"orgCostCenter.details\"\n  [cxFocus]=\"{ refreshFocus: model }\"\n>\n  <a\n    actions\n    class=\"link edit\"\n    [class.disabled]=\"!model.active || (isInEditMode$ | async)\"\n    [routerLink]=\"{ cxRoute: 'orgCostCenterEdit', params: model } | cxUrl\"\n  >\n    {{ 'organization.edit' | cxTranslate }}\n  </a>\n\n  <cx-org-toggle-status actions i18nRoot=\"orgCostCenter\"></cx-org-toggle-status>\n\n  <cx-org-disable-info info i18nRoot=\"orgCostCenter\"> </cx-org-disable-info>\n\n  <section main class=\"details\" cxOrgItemExists>\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.name' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.name }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.code' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.code }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.active' | cxTranslate }}</label>\n      <span\n        class=\"value\"\n        [class.is-active]=\"model.active\"\n        [class.is-inactive]=\"!model.active\"\n      >\n        {{\n          (model.active ? 'organization.enabled' : 'organization.disabled')\n            | cxTranslate\n        }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.currency' | cxTranslate }}</label>\n\n      <span class=\"value\">\n        {{ model.currency?.isocode }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgCostCenter.unit' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.unit\n          } | cxUrl\n        \"\n      >\n        {{ model.unit?.name }}\n      </a>\n    </div>\n  </section>\n\n  <section main class=\"link-list\">\n    <a\n      *ngIf=\"model.code\"\n      class=\"link\"\n      [routerLink]=\"{ cxRoute: 'orgCostCenterBudgets', params: model } | cxUrl\"\n      routerLinkActive=\"is-current\"\n    >\n      {{ 'orgCostCenter.budget.link' | cxTranslate }}\n    </a>\n  </section>\n</cx-org-card>\n", components: [{ type: CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: ToggleStatusComponent, selector: "cx-org-toggle-status", inputs: ["i18nRoot", "key", "disabled"] }, { type: DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: ItemExistsDirective, selector: "[cxOrgItemExists]" }, { type: i2__namespace.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxUrl": i3__namespace.UrlPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-cost-center-details',
                        templateUrl: './cost-center-details.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: CostCenterItemService,
                            },
                        ],
                        host: { class: 'content-wrapper' },
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }]; } });

    var CostCenterFormComponent = /** @class */ (function () {
        function CostCenterFormComponent(itemService, unitService, currencyService) {
            var _this = this;
            this.itemService = itemService;
            this.unitService = unitService;
            this.currencyService = currencyService;
            this.form = this.itemService.getForm();
            this.units$ = this.unitService.getActiveUnitList().pipe(operators.tap(function (units) {
                var _a, _b, _c;
                if (units.length === 1) {
                    (_b = (_a = _this.form) === null || _a === void 0 ? void 0 : _a.get('unit.uid')) === null || _b === void 0 ? void 0 : _b.setValue((_c = units[0]) === null || _c === void 0 ? void 0 : _c.id);
                }
            }));
            this.currencies$ = this.currencyService.getAll().pipe(operators.tap(function (currency) {
                var _a, _b, _c;
                if (currency.length === 1) {
                    (_b = (_a = _this.form) === null || _a === void 0 ? void 0 : _a.get('currency.isocode')) === null || _b === void 0 ? void 0 : _b.setValue((_c = currency[0]) === null || _c === void 0 ? void 0 : _c.isocode);
                }
            }));
        }
        Object.defineProperty(CostCenterFormComponent.prototype, "unitKey", {
            /**
             * Initialize the business unit for the cost center.
             *
             * If there's a unit provided, we disable the form control.
             */
            set: function (value) {
                var _a, _b, _c;
                if (value) {
                    (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('unit.uid').setValue(value);
                    (_c = (_b = this.form) === null || _b === void 0 ? void 0 : _b.get('unit')) === null || _c === void 0 ? void 0 : _c.disable();
                }
            },
            enumerable: false,
            configurable: true
        });
        CostCenterFormComponent.prototype.createCodeWithName = function (name, code) {
            createCodeForEntityName(name, code);
        };
        return CostCenterFormComponent;
    }());
    CostCenterFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterFormComponent, deps: [{ token: ItemService }, { token: i2__namespace$1.OrgUnitService }, { token: i3__namespace.CurrencyService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CostCenterFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CostCenterFormComponent, selector: "cx-org-cost-center-form", inputs: { unitKey: "unitKey" }, host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: CostCenterItemService,
            },
            {
                provide: CurrentItemService,
                useExisting: CurrentCostCenterService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-form i18nRoot=\"orgCostCenter\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgCostCenter.name' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgCostCenter.name' | cxTranslate }}\"\n        formControlName=\"name\"\n        (blur)=\"createCodeWithName(form.get('name'), form.get('code'))\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgCostCenter.code' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgCostCenter.code' | cxTranslate }}\"\n        formControlName=\"code\"\n      />\n      <cx-form-errors [control]=\"form.get('code')\"></cx-form-errors>\n    </label>\n\n    <label aria-required=\"true\" formGroupName=\"currency\">\n      <span class=\"label-content required\">{{\n        'orgCostCenter.currency' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"isocode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"currencies$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"isocode\"\n        [class.invalid]=\"form.get('currency.isocode').invalid\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgCostCenter.currency' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('currency.isocode')\"></cx-form-errors>\n    </label>\n\n    <label aria-required=\"true\" [formGroup]=\"form.get('unit')\">\n      <span class=\"label-content required\">{{\n        'orgCostCenter.unit' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"units$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        [readonly]=\"form.get('unit.uid').disabled\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgCostCenter.unit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('unit.uid')\"></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n", components: [{ type: FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { type: i1__namespace.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { type: i5__namespace$1.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-cost-center-form',
                        templateUrl: './cost-center-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: CostCenterItemService,
                            },
                            {
                                provide: CurrentItemService,
                                useExisting: CurrentCostCenterService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: i2__namespace$1.OrgUnitService }, { type: i3__namespace.CurrencyService }]; }, propDecorators: { unitKey: [{
                    type: i0.Input
                }] } });

    /**
     * Service to populate Cost Center data to `Table` data. The cost center
     * data is driven by the table configuration, using the `OrganizationTables.COST_CENTER`.
     */
    var CostCenterListService = /** @class */ (function (_super) {
        __extends(CostCenterListService, _super);
        function CostCenterListService(tableService, costCenterService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.costCenterService = costCenterService;
            _this.tableType = exports.OrganizationTableType.COST_CENTER;
            return _this;
        }
        CostCenterListService.prototype.load = function (pagination) {
            var _this = this;
            return this.costCenterService.getList(pagination).pipe(operators.filter(function (list) { return Boolean(list); }), operators.map(function (raw) { return _this.convertCostCenters(raw); }));
        };
        /**
         * Populates the cost center data to a convenient table data model, so that we
         * can skip specific conversion in the view logic where possible.
         */
        CostCenterListService.prototype.convertCostCenters = function (_b) {
            var pagination = _b.pagination, sorts = _b.sorts, values = _b.values;
            var costCenterModels = {
                pagination: pagination,
                sorts: sorts,
                values: values.map(function (value) {
                    var _a;
                    return (Object.assign(Object.assign({}, value), { currency: (_a = value.currency) === null || _a === void 0 ? void 0 : _a.isocode }));
                }),
            };
            return costCenterModels;
        };
        return CostCenterListService;
    }(ListService));
    CostCenterListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.CostCenterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CostCenterListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.CostCenterService }]; } });

    var CostCenterRoutePageMetaResolver = /** @class */ (function (_super) {
        __extends(CostCenterRoutePageMetaResolver, _super);
        function CostCenterRoutePageMetaResolver(translation, currentItemService) {
            var _this = _super.call(this, translation) || this;
            _this.currentItemService = currentItemService;
            return _this;
        }
        CostCenterRoutePageMetaResolver.prototype.getParams = function () {
            return this.currentItemService.item$;
        };
        return CostCenterRoutePageMetaResolver;
    }(i3.DefaultRoutePageMetaResolver));
    CostCenterRoutePageMetaResolver.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterRoutePageMetaResolver, deps: [{ token: i3__namespace.TranslationService }, { token: CurrentCostCenterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CostCenterRoutePageMetaResolver.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterRoutePageMetaResolver, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterRoutePageMetaResolver, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i3__namespace.TranslationService }, { type: CurrentCostCenterService }]; } });

    var _a$4;
    var costCenterCmsConfig = {
        cmsComponents: {
            ManageCostCentersListComponent: {
                component: ListComponent,
                providers: [
                    {
                        provide: ListService,
                        useExisting: CostCenterListService,
                    },
                    {
                        provide: ItemService,
                        useExisting: CostCenterItemService,
                    },
                ],
                childRoutes: {
                    parent: {
                        data: {
                            cxPageMeta: {
                                breadcrumb: 'orgCostCenter.breadcrumbs.list',
                                resolver: CostCenterRoutePageMetaResolver,
                            },
                        },
                    },
                    children: [
                        {
                            path: 'create',
                            component: CostCenterFormComponent,
                        },
                        {
                            path: ":" + root.ROUTE_PARAMS.costCenterCode,
                            component: CostCenterDetailsComponent,
                            data: {
                                cxPageMeta: { breadcrumb: 'orgCostCenter.breadcrumbs.details' },
                            },
                            children: [
                                {
                                    path: 'edit',
                                    component: CostCenterFormComponent,
                                },
                                {
                                    path: 'budgets',
                                    data: {
                                        cxPageMeta: {
                                            breadcrumb: 'orgCostCenter.breadcrumbs.budgets',
                                        },
                                    },
                                    children: [
                                        {
                                            path: '',
                                            component: CostCenterAssignedBudgetListComponent,
                                        },
                                        {
                                            path: 'assign',
                                            component: CostCenterBudgetListComponent,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                guards: [i3.AuthGuard, i2$1.AdminGuard],
            },
        },
    };
    function costCenterTableConfigFactory() {
        return costCenterTableConfig;
    }
    var costCenterTableConfig = {
        table: (_a$4 = {},
            _a$4[exports.OrganizationTableType.COST_CENTER] = {
                cells: ['name', 'active', 'currency', 'unit'],
                options: {
                    cells: {
                        name: {
                            dataComponent: ActiveLinkCellComponent,
                        },
                        active: {
                            dataComponent: StatusCellComponent,
                        },
                        currency: {
                            dataComponent: CellComponent,
                        },
                        unit: {
                            dataComponent: UnitCellComponent,
                        },
                    },
                },
            },
            _a$4[exports.OrganizationTableType.COST_CENTER_ASSIGNED_BUDGETS] = {
                cells: ['name', 'actions'],
                options: {
                    cells: {
                        name: {
                            dataComponent: BudgetDetailsCellComponent,
                        },
                        actions: {
                            dataComponent: AssignCellComponent,
                        },
                    },
                    pagination: {
                        pageSize: MAX_OCC_INTEGER_VALUE,
                    },
                },
            },
            _a$4[exports.OrganizationTableType.COST_CENTER_BUDGETS] = {
                cells: ['name', 'actions'],
                options: {
                    cells: {
                        name: {
                            dataComponent: BudgetDetailsCellComponent,
                        },
                        actions: {
                            dataComponent: AssignCellComponent,
                        },
                    },
                },
            },
            _a$4),
    };

    var CostCenterDetailsModule = /** @class */ (function () {
        function CostCenterDetailsModule() {
        }
        return CostCenterDetailsModule;
    }());
    CostCenterDetailsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterDetailsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CostCenterDetailsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterDetailsModule, declarations: [CostCenterDetailsComponent], imports: [i5.CommonModule,
            CardModule,
            i2.RouterModule,
            i3.UrlModule,
            i3.I18nModule,
            ToggleStatusModule,
            ItemExistsModule,
            DisableInfoModule,
            i1.KeyboardFocusModule], exports: [CostCenterDetailsComponent] });
    CostCenterDetailsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterDetailsModule, imports: [[
                i5.CommonModule,
                CardModule,
                i2.RouterModule,
                i3.UrlModule,
                i3.I18nModule,
                ToggleStatusModule,
                ItemExistsModule,
                DisableInfoModule,
                i1.KeyboardFocusModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterDetailsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            CardModule,
                            i2.RouterModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            ToggleStatusModule,
                            ItemExistsModule,
                            DisableInfoModule,
                            i1.KeyboardFocusModule,
                        ],
                        declarations: [CostCenterDetailsComponent],
                        exports: [CostCenterDetailsComponent],
                    }]
            }] });

    var CostCenterFormModule = /** @class */ (function () {
        function CostCenterFormModule() {
        }
        return CostCenterFormModule;
    }());
    CostCenterFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CostCenterFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterFormModule, declarations: [CostCenterFormComponent], imports: [i5.CommonModule,
            i2.RouterModule,
            FormModule,
            i5$1.NgSelectModule,
            i3.UrlModule,
            i3.I18nModule,
            i8.ReactiveFormsModule,
            i1.FormErrorsModule,
            ItemActiveModule], exports: [CostCenterFormComponent] });
    CostCenterFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterFormModule, providers: [i3.CurrencyService, i2$1.OrgUnitService], imports: [[
                i5.CommonModule,
                i2.RouterModule,
                FormModule,
                i5$1.NgSelectModule,
                i3.UrlModule,
                i3.I18nModule,
                i8.ReactiveFormsModule,
                i1.FormErrorsModule,
                ItemActiveModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i2.RouterModule,
                            FormModule,
                            i5$1.NgSelectModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            i8.ReactiveFormsModule,
                            i1.FormErrorsModule,
                            ItemActiveModule,
                        ],
                        declarations: [CostCenterFormComponent],
                        exports: [CostCenterFormComponent],
                        providers: [i3.CurrencyService, i2$1.OrgUnitService],
                    }]
            }] });

    var CostCenterComponentsModule = /** @class */ (function () {
        function CostCenterComponentsModule() {
        }
        return CostCenterComponentsModule;
    }());
    CostCenterComponentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterComponentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CostCenterComponentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterComponentsModule, imports: [SharedOrganizationModule,
            CostCenterDetailsModule,
            CostCenterFormModule,
            CostCenterBudgetListModule,
            BudgetDetailsCellModule] });
    CostCenterComponentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterComponentsModule, providers: [
            i3.provideDefaultConfig(costCenterCmsConfig),
            i3.provideDefaultConfigFactory(costCenterTableConfigFactory),
        ], imports: [[
                SharedOrganizationModule,
                CostCenterDetailsModule,
                CostCenterFormModule,
                CostCenterBudgetListModule,
                BudgetDetailsCellModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterComponentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            SharedOrganizationModule,
                            CostCenterDetailsModule,
                            CostCenterFormModule,
                            CostCenterBudgetListModule,
                            BudgetDetailsCellModule,
                        ],
                        providers: [
                            i3.provideDefaultConfig(costCenterCmsConfig),
                            i3.provideDefaultConfigFactory(costCenterTableConfigFactory),
                        ],
                    }]
            }] });

    var CurrentPermissionService = /** @class */ (function (_super) {
        __extends(CurrentPermissionService, _super);
        function CurrentPermissionService(routingService, permissionService) {
            var _this = _super.call(this, routingService) || this;
            _this.routingService = routingService;
            _this.permissionService = permissionService;
            return _this;
        }
        CurrentPermissionService.prototype.getParamKey = function () {
            return root.ROUTE_PARAMS.permissionCode;
        };
        CurrentPermissionService.prototype.getItem = function (code) {
            return this.permissionService.get(code);
        };
        CurrentPermissionService.prototype.getError = function (code) {
            return this.permissionService.getErrorState(code);
        };
        return CurrentPermissionService;
    }(CurrentItemService));
    CurrentPermissionService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentPermissionService, deps: [{ token: i3__namespace.RoutingService }, { token: i2__namespace$1.PermissionService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CurrentPermissionService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentPermissionService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentPermissionService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.RoutingService }, { type: i2__namespace$1.PermissionService }]; } });

    exports.PermissionType = void 0;
    (function (PermissionType) {
        PermissionType["ORDER"] = "B2BOrderThresholdPermission";
        PermissionType["TIME_SPAN"] = "B2BOrderThresholdTimespanPermission";
        PermissionType["EXCEEDED"] = "B2BBudgetExceededPermission";
    })(exports.PermissionType || (exports.PermissionType = {}));
    var PermissionFormService = /** @class */ (function (_super) {
        __extends(PermissionFormService, _super);
        function PermissionFormService() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.subscription = new rxjs.Subscription();
            return _this;
        }
        /**
         * @override
         * Builds a generic sub form for permissions and amends the form
         * based on the for approval permission type.
         */
        PermissionFormService.prototype.build = function () {
            var _this = this;
            var form = new i8.FormGroup({});
            form.setControl('code', new i8.FormControl('', [
                i8.Validators.required,
                i1.CustomFormValidators.noSpecialCharacters,
            ]));
            form.setControl('orgUnit', new i8.FormGroup({
                uid: new i8.FormControl(undefined, i8.Validators.required),
            }));
            form.setControl('orderApprovalPermissionType', new i8.FormGroup({
                code: new i8.FormControl(undefined, i8.Validators.required),
            }));
            // subscribe to permission type changes and amend accordingly.
            this.subscription.add(form
                .get('orderApprovalPermissionType')
                .get('code')
                .valueChanges.pipe(operators.distinctUntilChanged(), operators.filter(function (code) { return !!code; }))
                .subscribe(function (code) { return _this.amend(form, code); }));
            this.form = form;
        };
        Object.defineProperty(PermissionFormService.prototype, "defaultValue", {
            /**
             * @override
             * The form is using  `B2BBudgetExceededPermission` by default.
             */
            get: function () {
                return {
                    orderApprovalPermissionType: {
                        code: exports.PermissionType.EXCEEDED,
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Amends the form structure based on the `PermissionType`.
         */
        PermissionFormService.prototype.amend = function (form, code) {
            if (code === exports.PermissionType.EXCEEDED) {
                form.removeControl('periodRange');
                form.removeControl('currency');
                form.removeControl('threshold');
            }
            if (code === exports.PermissionType.TIME_SPAN || code === exports.PermissionType.ORDER) {
                if (!form.get('currency')) {
                    form.setControl('currency', new i8.FormGroup({
                        isocode: new i8.FormControl(undefined, i8.Validators.required),
                    }));
                }
                if (!form.get('threshold')) {
                    form.setControl('threshold', new i8.FormControl('', i8.Validators.required));
                }
            }
            if (code === exports.PermissionType.ORDER) {
                form.removeControl('periodRange');
            }
            if (code === exports.PermissionType.TIME_SPAN) {
                if (!form.get('periodRange')) {
                    form.setControl('periodRange', new i8.FormControl('', i8.Validators.required));
                }
            }
        };
        PermissionFormService.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        PermissionFormService.prototype.patchData = function (item) {
            _super.prototype.patchData.call(this, item);
            if ((item === null || item === void 0 ? void 0 : item.code) !== undefined) {
                this.form.get('orderApprovalPermissionType').disable();
            }
        };
        return PermissionFormService;
    }(FormService));
    PermissionFormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionFormService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PermissionFormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionFormService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionFormService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var PermissionItemService = /** @class */ (function (_super) {
        __extends(PermissionItemService, _super);
        function PermissionItemService(currentItemService, routingService, formService, permissionService) {
            var _this = _super.call(this, currentItemService, routingService, formService) || this;
            _this.currentItemService = currentItemService;
            _this.routingService = routingService;
            _this.formService = formService;
            _this.permissionService = permissionService;
            return _this;
        }
        PermissionItemService.prototype.load = function (code) {
            this.permissionService.loadPermission(code);
            return this.permissionService.get(code);
        };
        PermissionItemService.prototype.update = function (code, value) {
            this.permissionService.update(code, value);
            return this.permissionService.getLoadingStatus(value.code);
        };
        PermissionItemService.prototype.create = function (value) {
            this.permissionService.create(value);
            return this.permissionService.getLoadingStatus(value.code);
        };
        PermissionItemService.prototype.getDetailsRoute = function () {
            return 'orgPurchaseLimitDetails';
        };
        return PermissionItemService;
    }(ItemService));
    PermissionItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionItemService, deps: [{ token: CurrentPermissionService }, { token: i3__namespace.RoutingService }, { token: PermissionFormService }, { token: i2__namespace$1.PermissionService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PermissionItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionItemService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionItemService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: CurrentPermissionService }, { type: i3__namespace.RoutingService }, { type: PermissionFormService }, { type: i2__namespace$1.PermissionService }]; } });

    var PermissionDetailsComponent = /** @class */ (function () {
        function PermissionDetailsComponent(itemService) {
            var _this = this;
            this.itemService = itemService;
            this.model$ = this.itemService.key$.pipe(operators.switchMap(function (code) { return _this.itemService.load(code); }), operators.startWith({}));
            this.isInEditMode$ = this.itemService.isInEditMode$;
        }
        return PermissionDetailsComponent;
    }());
    PermissionDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionDetailsComponent, deps: [{ token: ItemService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PermissionDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: PermissionDetailsComponent, selector: "cx-org-permission-details", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: PermissionItemService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-card\n  *ngIf=\"model$ | async as model\"\n  i18nRoot=\"orgPurchaseLimit.details\"\n  [cxFocus]=\"{ refreshFocus: model }\"\n>\n  <a\n    actions\n    class=\"link edit\"\n    [class.disabled]=\"!model.active || (isInEditMode$ | async)\"\n    [routerLink]=\"{ cxRoute: 'orgPurchaseLimitEdit', params: model } | cxUrl\"\n  >\n    {{ 'organization.edit' | cxTranslate }}\n  </a>\n\n  <cx-org-toggle-status\n    actions\n    i18nRoot=\"orgPurchaseLimit\"\n    [disabled]=\"false\"\n  ></cx-org-toggle-status>\n\n  <cx-org-disable-info\n    info\n    i18nRoot=\"orgPurchaseLimit\"\n    [displayInfoConfig]=\"{ disabledEnable: false }\"\n  >\n  </cx-org-disable-info>\n\n  <section main class=\"details\" cxOrgItemExists>\n    <div class=\"property\">\n      <label>{{ 'orgPurchaseLimit.code' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.code }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgPurchaseLimit.active' | cxTranslate }}</label>\n      <span class=\"value\" [class.is-active]=\"model.active\">\n        {{\n          (model.active ? 'organization.enabled' : 'organization.disabled')\n            | cxTranslate\n        }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{\n        'orgPurchaseLimit.orderApprovalPermissionType' | cxTranslate\n      }}</label>\n      <span class=\"value\">\n        {{ model.orderApprovalPermissionType?.name }}\n      </span>\n    </div>\n\n    <div class=\"property\" *ngIf=\"model.threshold || model.threshold === 0\">\n      <label>{{ 'orgPurchaseLimit.threshold' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.threshold }} {{ model.currency?.symbol }}\n      </span>\n    </div>\n\n    <div class=\"property\" *ngIf=\"model.periodRange\">\n      <label>{{ 'orgPurchaseLimit.periodRange' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.periodRange }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgPurchaseLimit.unit' | cxTranslate }}</label>\n      <a\n        *ngIf=\"model.code\"\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.orgUnit\n          } | cxUrl\n        \"\n      >\n        {{ model.orgUnit?.name }}\n      </a>\n    </div>\n  </section>\n</cx-org-card>\n", components: [{ type: CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: ToggleStatusComponent, selector: "cx-org-toggle-status", inputs: ["i18nRoot", "key", "disabled"] }, { type: DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: ItemExistsDirective, selector: "[cxOrgItemExists]" }], pipes: { "async": i5__namespace.AsyncPipe, "cxUrl": i3__namespace.UrlPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-permission-details',
                        templateUrl: './permission-details.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: PermissionItemService,
                            },
                        ],
                        host: { class: 'content-wrapper' },
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }]; } });

    var PermissionDetailsModule = /** @class */ (function () {
        function PermissionDetailsModule() {
        }
        return PermissionDetailsModule;
    }());
    PermissionDetailsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionDetailsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PermissionDetailsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionDetailsModule, declarations: [PermissionDetailsComponent], imports: [i5.CommonModule,
            CardModule,
            i2.RouterModule,
            i3.UrlModule,
            i3.I18nModule,
            ToggleStatusModule,
            ItemExistsModule,
            DisableInfoModule,
            i1.KeyboardFocusModule], exports: [PermissionDetailsComponent] });
    PermissionDetailsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionDetailsModule, imports: [[
                i5.CommonModule,
                CardModule,
                i2.RouterModule,
                i3.UrlModule,
                i3.I18nModule,
                ToggleStatusModule,
                ItemExistsModule,
                DisableInfoModule,
                i1.KeyboardFocusModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionDetailsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            CardModule,
                            i2.RouterModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            ToggleStatusModule,
                            ItemExistsModule,
                            DisableInfoModule,
                            i1.KeyboardFocusModule,
                        ],
                        declarations: [PermissionDetailsComponent],
                        exports: [PermissionDetailsComponent],
                    }]
            }] });

    var PermissionFormComponent = /** @class */ (function () {
        function PermissionFormComponent(itemService, unitService, currencyService, permissionService) {
            var _this = this;
            this.itemService = itemService;
            this.unitService = unitService;
            this.currencyService = currencyService;
            this.permissionService = permissionService;
            this.form = this.itemService.getForm();
            this.units$ = this.unitService.getActiveUnitList().pipe(operators.tap(function (units) {
                var _a, _b, _c;
                if (units.length === 1) {
                    (_b = (_a = _this.form) === null || _a === void 0 ? void 0 : _a.get('orgUnit.uid')) === null || _b === void 0 ? void 0 : _b.setValue((_c = units[0]) === null || _c === void 0 ? void 0 : _c.id);
                }
            }));
            this.currencies$ = this.currencyService.getAll().pipe(operators.tap(function (currency) {
                var _a, _b, _c;
                if (currency.length === 1) {
                    (_b = (_a = _this.form) === null || _a === void 0 ? void 0 : _a.get('currency.isocode')) === null || _b === void 0 ? void 0 : _b.setValue((_c = currency[0]) === null || _c === void 0 ? void 0 : _c.isocode);
                }
            }));
            this.types$ = this.permissionService.getTypes();
            this.periods = Object.keys(i2$1.Period);
        }
        PermissionFormComponent.prototype.ngOnInit = function () {
            this.unitService.loadList();
        };
        return PermissionFormComponent;
    }());
    PermissionFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionFormComponent, deps: [{ token: ItemService }, { token: i2__namespace$1.OrgUnitService }, { token: i3__namespace.CurrencyService }, { token: i2__namespace$1.PermissionService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PermissionFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: PermissionFormComponent, selector: "cx-org-permission-form", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: PermissionItemService,
            },
            {
                provide: CurrentItemService,
                useExisting: CurrentPermissionService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-form i18nRoot=\"orgPurchaseLimit\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgPurchaseLimit.code' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgPurchaseLimit.code' | cxTranslate }}\"\n        formControlName=\"code\"\n      />\n      <cx-form-errors [control]=\"form.get('code')\"></cx-form-errors>\n    </label>\n\n    <label\n      *ngIf=\"(types$ | async)?.length\"\n      aria-required=\"true\"\n      [formGroup]=\"form.get('orderApprovalPermissionType')\"\n    >\n      <span class=\"label-content required\">{{\n        'orgPurchaseLimit.orderApprovalPermissionType' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"code\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"types$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        [readonly]=\"form.disabled\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"\n          'orgPurchaseLimit.orderApprovalPermissionType' | cxTranslate\n        \"\n      >\n      </ng-select>\n      <cx-form-errors\n        [control]=\"form.get('orderApprovalPermissionType.code')\"\n      ></cx-form-errors>\n    </label>\n\n    <label aria-required=\"true\" *ngIf=\"form.get('periodRange')\">\n      <span class=\"label-content required\">{{\n        'orgPurchaseLimit.periodRange' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"periodRange\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"periods\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgPurchaseLimit.periodRange' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('periodRange')\"></cx-form-errors>\n    </label>\n\n    <label\n      aria-required=\"true\"\n      *ngIf=\"form.get('currency')\"\n      [formGroup]=\"form.get('currency')\"\n    >\n      <span class=\"label-content required\">{{\n        'orgPurchaseLimit.currency' | cxTranslate\n      }}</span>\n      <ng-select\n        *ngIf=\"currencies$ | async as currencies\"\n        formControlName=\"isocode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"currencies\"\n        bindLabel=\"name\"\n        bindValue=\"isocode\"\n        [placeholder]=\"'orgPurchaseLimit.currency' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('currency.isocode')\"></cx-form-errors>\n    </label>\n\n    <label *ngIf=\"form.get('threshold')\">\n      <span class=\"label-content required\">{{\n        'orgPurchaseLimit.threshold' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"number\"\n        required\n        placeholder=\"{{ 'orgPurchaseLimit.threshold' | cxTranslate }}\"\n        formControlName=\"threshold\"\n      />\n      <cx-form-errors [control]=\"form.get('threshold')\"></cx-form-errors>\n    </label>\n\n    <label aria-required=\"true\" [formGroup]=\"form.get('orgUnit')\">\n      <span class=\"label-content required\">{{\n        'orgPurchaseLimit.orgUnit' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"units$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        [readonly]=\"form.get('orgUnit').disabled\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgPurchaseLimit.orgUnit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('orgUnit.uid')\"></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n", components: [{ type: FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { type: i1__namespace.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { type: i5__namespace$1.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-permission-form',
                        templateUrl: './permission-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: PermissionItemService,
                            },
                            {
                                provide: CurrentItemService,
                                useExisting: CurrentPermissionService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: i2__namespace$1.OrgUnitService }, { type: i3__namespace.CurrencyService }, { type: i2__namespace$1.PermissionService }]; } });

    var PermissionFormModule = /** @class */ (function () {
        function PermissionFormModule() {
        }
        return PermissionFormModule;
    }());
    PermissionFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PermissionFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionFormModule, declarations: [PermissionFormComponent], imports: [i5.CommonModule,
            i2.RouterModule,
            i5$1.NgSelectModule,
            i3.UrlModule,
            i3.I18nModule,
            i8.ReactiveFormsModule,
            i1.FormErrorsModule,
            FormModule,
            ItemActiveModule], exports: [PermissionFormComponent] });
    PermissionFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionFormModule, imports: [[
                i5.CommonModule,
                i2.RouterModule,
                i5$1.NgSelectModule,
                i3.UrlModule,
                i3.I18nModule,
                i8.ReactiveFormsModule,
                i1.FormErrorsModule,
                FormModule,
                ItemActiveModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i2.RouterModule,
                            i5$1.NgSelectModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            i8.ReactiveFormsModule,
                            i1.FormErrorsModule,
                            FormModule,
                            ItemActiveModule,
                        ],
                        declarations: [PermissionFormComponent],
                        exports: [PermissionFormComponent],
                    }]
            }] });

    /**
     * Service to populate permission data to `Table` data. The permission
     * data is driven by the table configuration, using the `OrganizationTables.PERMISSION`.
     */
    var PermissionListService = /** @class */ (function (_super) {
        __extends(PermissionListService, _super);
        function PermissionListService(tableService, permissionsService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.permissionsService = permissionsService;
            _this.tableType = exports.OrganizationTableType.PERMISSION;
            return _this;
        }
        PermissionListService.prototype.load = function (pagination) {
            var _this = this;
            return this.permissionsService.getList(pagination).pipe(operators.filter(function (list) { return Boolean(list); }), operators.map(function (raw) { return _this.convertPermissions(raw); }));
        };
        /**
         * Populates the permission data to a convenient table data model, so that we
         * can skip specific conversion in the view logic where possible.
         */
        PermissionListService.prototype.convertPermissions = function (_a) {
            var pagination = _a.pagination, sorts = _a.sorts, values = _a.values;
            var permissionGroupModels = {
                pagination: pagination,
                sorts: sorts,
                values: values.map(function (value) { return (Object.assign(Object.assign({}, value), { unit: value.orgUnit })); }),
            };
            return permissionGroupModels;
        };
        return PermissionListService;
    }(ListService));
    PermissionListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.PermissionService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PermissionListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.PermissionService }]; } });

    var PermissionRoutePageMetaResolver = /** @class */ (function (_super) {
        __extends(PermissionRoutePageMetaResolver, _super);
        function PermissionRoutePageMetaResolver(translation, currentItemService) {
            var _this = _super.call(this, translation) || this;
            _this.currentItemService = currentItemService;
            return _this;
        }
        PermissionRoutePageMetaResolver.prototype.getParams = function () {
            return this.currentItemService.item$;
        };
        return PermissionRoutePageMetaResolver;
    }(i3.DefaultRoutePageMetaResolver));
    PermissionRoutePageMetaResolver.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionRoutePageMetaResolver, deps: [{ token: i3__namespace.TranslationService }, { token: CurrentPermissionService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PermissionRoutePageMetaResolver.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionRoutePageMetaResolver, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionRoutePageMetaResolver, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i3__namespace.TranslationService }, { type: CurrentPermissionService }]; } });

    var _a$3;
    var permissionCmsConfig = {
        cmsComponents: {
            ManagePermissionsListComponent: {
                component: ListComponent,
                providers: [
                    {
                        provide: ListService,
                        useExisting: PermissionListService,
                    },
                    {
                        provide: ItemService,
                        useExisting: PermissionItemService,
                    },
                ],
                childRoutes: {
                    parent: {
                        data: {
                            cxPageMeta: {
                                breadcrumb: 'orgPurchaseLimit.breadcrumbs.list',
                                resolver: PermissionRoutePageMetaResolver,
                            },
                        },
                    },
                    children: [
                        {
                            path: 'create',
                            component: PermissionFormComponent,
                        },
                        {
                            path: ":" + root.ROUTE_PARAMS.permissionCode,
                            component: PermissionDetailsComponent,
                            data: {
                                cxPageMeta: {
                                    breadcrumb: 'orgPurchaseLimit.breadcrumbs.details',
                                },
                            },
                            children: [
                                {
                                    path: 'edit',
                                    component: PermissionFormComponent,
                                },
                            ],
                        },
                    ],
                },
                guards: [i3.AuthGuard, i2$1.AdminGuard],
            },
        },
    };
    function permissionTableConfigFactory() {
        return permissionTableConfig;
    }
    var permissionTableConfig = {
        table: (_a$3 = {},
            _a$3[exports.OrganizationTableType.PERMISSION] = {
                cells: ['code', 'active', 'limit', 'unit'],
                options: {
                    cells: {
                        code: {
                            dataComponent: ActiveLinkCellComponent,
                        },
                        active: {
                            dataComponent: StatusCellComponent,
                        },
                        unit: {
                            dataComponent: UnitCellComponent,
                        },
                        limit: {
                            dataComponent: LimitCellComponent,
                        },
                    },
                },
            },
            _a$3),
    };

    var PermissionComponentsModule = /** @class */ (function () {
        function PermissionComponentsModule() {
        }
        return PermissionComponentsModule;
    }());
    PermissionComponentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionComponentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PermissionComponentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionComponentsModule, imports: [SharedOrganizationModule,
            PermissionDetailsModule,
            PermissionFormModule] });
    PermissionComponentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionComponentsModule, providers: [
            i3.provideDefaultConfig(permissionCmsConfig),
            i3.provideDefaultConfigFactory(permissionTableConfigFactory),
        ], imports: [[
                SharedOrganizationModule,
                PermissionDetailsModule,
                PermissionFormModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionComponentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            SharedOrganizationModule,
                            PermissionDetailsModule,
                            PermissionFormModule,
                        ],
                        providers: [
                            i3.provideDefaultConfig(permissionCmsConfig),
                            i3.provideDefaultConfigFactory(permissionTableConfigFactory),
                        ],
                    }]
            }] });

    var CurrentUnitService = /** @class */ (function (_super) {
        __extends(CurrentUnitService, _super);
        function CurrentUnitService(routingService, orgUnitService) {
            var _this = _super.call(this, routingService) || this;
            _this.routingService = routingService;
            _this.orgUnitService = orgUnitService;
            return _this;
        }
        CurrentUnitService.prototype.getParamKey = function () {
            return root.ROUTE_PARAMS.unitCode;
        };
        CurrentUnitService.prototype.getItem = function (code) {
            return this.orgUnitService.get(code);
        };
        CurrentUnitService.prototype.getError = function (code) {
            return this.orgUnitService.getErrorState(code);
        };
        return CurrentUnitService;
    }(CurrentItemService));
    CurrentUnitService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUnitService, deps: [{ token: i3__namespace.RoutingService }, { token: i2__namespace$1.OrgUnitService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CurrentUnitService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUnitService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUnitService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.RoutingService }, { type: i2__namespace$1.OrgUnitService }]; } });

    var UnitFormService = /** @class */ (function (_super) {
        __extends(UnitFormService, _super);
        function UnitFormService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UnitFormService.prototype.patchData = function (item) {
            this.toggleParentUnit(item);
            _super.prototype.patchData.call(this, item);
        };
        UnitFormService.prototype.build = function () {
            var form = new i8.FormGroup({});
            form.setControl('uid', new i8.FormControl('', [
                i8.Validators.required,
                i1.CustomFormValidators.noSpecialCharacters,
            ]));
            form.setControl('name', new i8.FormControl('', i8.Validators.required));
            form.setControl('approvalProcess', new i8.FormGroup({
                code: new i8.FormControl(null),
            }));
            this.form = form;
            this.toggleParentUnit();
        };
        UnitFormService.prototype.toggleParentUnit = function (item) {
            var _a;
            if (this.isRootUnit(item)) {
                (_a = this.form) === null || _a === void 0 ? void 0 : _a.removeControl('parentOrgUnit');
            }
            else if (!this.form.get('parentOrgUnit')) {
                this.form.setControl('parentOrgUnit', new i8.FormGroup({
                    uid: new i8.FormControl(null, i8.Validators.required),
                }));
            }
        };
        UnitFormService.prototype.isRootUnit = function (item) {
            // as we don't have full response after toggle item status,
            // we have situation where we have object like {uid, active},
            // so decided to check name as alternative required property
            return ((item === null || item === void 0 ? void 0 : item.uid) &&
                (item === null || item === void 0 ? void 0 : item.name) &&
                (!(item === null || item === void 0 ? void 0 : item.parentOrgUnit) || (item === null || item === void 0 ? void 0 : item.uid) === (item === null || item === void 0 ? void 0 : item.parentOrgUnit)));
        };
        return UnitFormService;
    }(FormService));
    UnitFormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitFormService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitFormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitFormService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitFormService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UnitItemService = /** @class */ (function (_super) {
        __extends(UnitItemService, _super);
        function UnitItemService(currentItemService, routingService, formService, unitService) {
            var _this = _super.call(this, currentItemService, routingService, formService) || this;
            _this.currentItemService = currentItemService;
            _this.routingService = routingService;
            _this.formService = formService;
            _this.unitService = unitService;
            return _this;
        }
        /**
         * @override
         * Returns the unit for the given code.
         *
         * Loads the unit each time, to ensure accurate data is resolved.
         */
        UnitItemService.prototype.load = function (code) {
            this.unitService.load(code);
            return this.unitService.get(code);
        };
        UnitItemService.prototype.update = function (code, value) {
            this.unitService.update(code, value);
            return this.unitService.getLoadingStatus(value.uid);
        };
        UnitItemService.prototype.create = function (value) {
            this.unitService.create(value);
            return this.unitService.getLoadingStatus(value.uid);
        };
        /**
         * @override
         * Returns 'unitDetails'
         */
        UnitItemService.prototype.getDetailsRoute = function () {
            return 'orgUnitDetails';
        };
        return UnitItemService;
    }(ItemService));
    UnitItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitItemService, deps: [{ token: CurrentUnitService }, { token: i3__namespace.RoutingService }, { token: UnitFormService }, { token: i2__namespace$1.OrgUnitService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitItemService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitItemService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUnitService }, { type: i3__namespace.RoutingService }, { type: UnitFormService }, { type: i2__namespace$1.OrgUnitService }]; } });

    var UnitDetailsComponent = /** @class */ (function () {
        function UnitDetailsComponent(itemService) {
            var _this = this;
            this.itemService = itemService;
            this.model$ = this.itemService.key$.pipe(operators.switchMap(function (code) { return _this.itemService.load(code); }), operators.startWith({}));
            this.isInEditMode$ = this.itemService.isInEditMode$;
        }
        return UnitDetailsComponent;
    }());
    UnitDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitDetailsComponent, deps: [{ token: ItemService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitDetailsComponent, selector: "cx-org-unit-details", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: UnitItemService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-card\n  *ngIf=\"model$ | async as model\"\n  i18nRoot=\"orgUnit.details\"\n  [cxFocus]=\"{ refreshFocus: model }\"\n  [showHint]=\"true\"\n>\n  <a\n    actions\n    class=\"link edit\"\n    [class.disabled]=\"!model.active || (isInEditMode$ | async)\"\n    [routerLink]=\"{ cxRoute: 'orgUnitEdit', params: model } | cxUrl\"\n  >\n    {{ 'organization.edit' | cxTranslate }}\n  </a>\n\n  <cx-org-toggle-status\n    actions\n    key=\"uid\"\n    i18nRoot=\"orgUnit\"\n  ></cx-org-toggle-status>\n\n  <cx-org-disable-info\n    info\n    i18nRoot=\"orgUnit\"\n    [displayInfoConfig]=\"{ disabledDisable: true }\"\n  >\n  </cx-org-disable-info>\n\n  <section main class=\"details\" cxOrgItemExists>\n    <div class=\"property\">\n      <label>{{ 'orgUnit.name' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.name }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUnit.uid' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.uid }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUnit.active' | cxTranslate }}</label>\n      <span class=\"value\" [class.is-active]=\"model.active\">\n        {{\n          (model.active ? 'organization.enabled' : 'organization.disabled')\n            | cxTranslate\n        }}\n      </span>\n    </div>\n\n    <div class=\"property\" *ngIf=\"model.approvalProcess?.name\">\n      <label>{{ 'orgUnit.approvalProcess' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.approvalProcess?.name }}\n      </span>\n    </div>\n\n    <div class=\"property\" *ngIf=\"model.parentOrgUnit\">\n      <label>{{ 'orgUnit.parentUnit' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.parentOrgUnit\n          } | cxUrl\n        \"\n      >\n        {{ model.parentOrgUnit?.name }}\n      </a>\n    </div>\n  </section>\n\n  <section main class=\"link-list\">\n    <ng-container *ngIf=\"model.uid\">\n      <a\n        class=\"link\"\n        [routerLink]=\"{ cxRoute: 'orgUnitChildren', params: model } | cxUrl\"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUnit.links.units' | cxTranslate }}\n      </a>\n      <a\n        class=\"link\"\n        [routerLink]=\"{ cxRoute: 'orgUnitUserList', params: model } | cxUrl\"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUnit.links.users' | cxTranslate }}\n      </a>\n      <a\n        class=\"link\"\n        [routerLink]=\"{ cxRoute: 'orgUnitApprovers', params: model } | cxUrl\"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUnit.links.approvers' | cxTranslate }}\n      </a>\n      <a\n        class=\"link\"\n        [routerLink]=\"{ cxRoute: 'orgUnitAddressList', params: model } | cxUrl\"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUnit.links.shippingAddresses' | cxTranslate }}\n      </a>\n      <a\n        class=\"link\"\n        [routerLink]=\"{ cxRoute: 'orgUnitCostCenters', params: model } | cxUrl\"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUnit.links.costCenters' | cxTranslate }}\n      </a>\n    </ng-container>\n  </section>\n</cx-org-card>\n", components: [{ type: CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: ToggleStatusComponent, selector: "cx-org-toggle-status", inputs: ["i18nRoot", "key", "disabled"] }, { type: DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: ItemExistsDirective, selector: "[cxOrgItemExists]" }, { type: i2__namespace.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxUrl": i3__namespace.UrlPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-details',
                        templateUrl: './unit-details.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: UnitItemService,
                            },
                        ],
                        host: { class: 'content-wrapper' },
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }]; } });

    var UnitDetailsModule = /** @class */ (function () {
        function UnitDetailsModule() {
        }
        return UnitDetailsModule;
    }());
    UnitDetailsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitDetailsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitDetailsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitDetailsModule, declarations: [UnitDetailsComponent], imports: [i5.CommonModule,
            CardModule,
            i2.RouterModule,
            i3.UrlModule,
            i3.I18nModule,
            ToggleStatusModule,
            ItemExistsModule,
            i1.KeyboardFocusModule,
            DisableInfoModule], exports: [UnitDetailsComponent] });
    UnitDetailsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitDetailsModule, imports: [[
                i5.CommonModule,
                CardModule,
                i2.RouterModule,
                i3.UrlModule,
                i3.I18nModule,
                ToggleStatusModule,
                ItemExistsModule,
                i1.KeyboardFocusModule,
                DisableInfoModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitDetailsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            CardModule,
                            i2.RouterModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            ToggleStatusModule,
                            ItemExistsModule,
                            i1.KeyboardFocusModule,
                            DisableInfoModule,
                        ],
                        declarations: [UnitDetailsComponent],
                        exports: [UnitDetailsComponent],
                    }]
            }] });

    var UnitFormComponent = /** @class */ (function () {
        function UnitFormComponent(itemService, unitService) {
            var _this = this;
            this.itemService = itemService;
            this.unitService = unitService;
            this.i18nRoot = 'orgUnit';
            this.createChildUnit = false;
            this.form = this.itemService.getForm();
            this.units$ = this.itemService.unit$.pipe(operators.tap(function (unit) {
                var _a, _b;
                (_a = _this.form.get('parentOrgUnit.uid')) === null || _a === void 0 ? void 0 : _a.setValue(unit);
                if (_this.createChildUnit) {
                    (_b = _this.form.get('parentOrgUnit')) === null || _b === void 0 ? void 0 : _b.disable();
                }
            }), operators.switchMap(function () { return _this.unitService.getActiveUnitList().pipe(operators.map(function (units) { return units.filter(function (unit) { var _a; return unit.id !== ((_a = _this.form) === null || _a === void 0 ? void 0 : _a.value.uid); }); }), operators.tap(function (units) {
                var _a, _b, _c;
                if (units.length === 1) {
                    (_b = (_a = _this.form) === null || _a === void 0 ? void 0 : _a.get('parentOrgUnit.uid')) === null || _b === void 0 ? void 0 : _b.setValue((_c = units[0]) === null || _c === void 0 ? void 0 : _c.id);
                }
            })); }));
            this.approvalProcess$ = this.unitService
                .getApprovalProcesses()
                .pipe(operators.filter(function (items) { return (items === null || items === void 0 ? void 0 : items.length) > 0; }));
        }
        UnitFormComponent.prototype.ngOnInit = function () {
            this.unitService.loadList();
        };
        UnitFormComponent.prototype.createUidWithName = function (name, code) {
            createCodeForEntityName(name, code);
        };
        return UnitFormComponent;
    }());
    UnitFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitFormComponent, deps: [{ token: ItemService }, { token: i2__namespace$1.OrgUnitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitFormComponent, selector: "cx-org-unit-form", inputs: { i18nRoot: "i18nRoot", createChildUnit: "createChildUnit" }, host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: UnitItemService,
            },
            {
                provide: CurrentItemService,
                useExisting: CurrentUnitService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-form [i18nRoot]=\"i18nRoot\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUnit.name' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgUnit.name' | cxTranslate }}\"\n        formControlName=\"name\"\n        (blur)=\"createUidWithName(form.get('name'), form.get('uid'))\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUnit.uid' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgUnit.uid' | cxTranslate }}\"\n        formControlName=\"uid\"\n      />\n      <cx-form-errors [control]=\"form.get('uid')\"></cx-form-errors>\n    </label>\n\n    <label\n      formGroupName=\"approvalProcess\"\n      class=\"full-width\"\n      aria-required=\"true\"\n    >\n      <span class=\"label-content required\">{{\n        'orgUnit.approvalProcess' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"code\"\n        [searchable]=\"false\"\n        [items]=\"approvalProcess$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgUnit.approvalProcess' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors\n        [control]=\"form.get('approvalProcess.code')\"\n      ></cx-form-errors>\n    </label>\n\n    <label\n      *ngIf=\"form.get('parentOrgUnit')\"\n      aria-required=\"true\"\n      formGroupName=\"parentOrgUnit\"\n    >\n      <span class=\"label-content required\">{{\n        'orgUnit.form.parentOrgUnit' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"units$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgUnit.form.parentOrgUnit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors\n        [control]=\"form.get('parentOrgUnit.uid')\"\n      ></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n", components: [{ type: FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { type: i1__namespace.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { type: i5__namespace$1.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-form',
                        templateUrl: './unit-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: UnitItemService,
                            },
                            {
                                provide: CurrentItemService,
                                useExisting: CurrentUnitService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: i2__namespace$1.OrgUnitService }]; }, propDecorators: { i18nRoot: [{
                    type: i0.Input
                }], createChildUnit: [{
                    type: i0.Input
                }] } });

    var UnitFormModule = /** @class */ (function () {
        function UnitFormModule() {
        }
        return UnitFormModule;
    }());
    UnitFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitFormModule, declarations: [UnitFormComponent], imports: [i5.CommonModule,
            i2.RouterModule,
            FormModule,
            i5$1.NgSelectModule,
            i3.UrlModule,
            i3.I18nModule,
            i8.ReactiveFormsModule,
            i1.FormErrorsModule,
            ItemActiveModule], exports: [UnitFormComponent] });
    UnitFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitFormModule, imports: [[
                i5.CommonModule,
                i2.RouterModule,
                FormModule,
                i5$1.NgSelectModule,
                i3.UrlModule,
                i3.I18nModule,
                i8.ReactiveFormsModule,
                i1.FormErrorsModule,
                ItemActiveModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i2.RouterModule,
                            FormModule,
                            i5$1.NgSelectModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            i8.ReactiveFormsModule,
                            i1.FormErrorsModule,
                            ItemActiveModule,
                        ],
                        declarations: [UnitFormComponent],
                        exports: [UnitFormComponent],
                    }]
            }] });

    var CurrentUnitAddressService = /** @class */ (function (_super) {
        __extends(CurrentUnitAddressService, _super);
        function CurrentUnitAddressService(routingService, unitService) {
            var _this = _super.call(this, routingService) || this;
            _this.routingService = routingService;
            _this.unitService = unitService;
            // override item$ as we need to use the unit code as well
            _this.item$ = _this.b2bUnit$.pipe(operators.filter(function (unitUid) { return Boolean(unitUid); }), operators.switchMap(function (unitUid) { return _this.key$.pipe(operators.switchMap(function (code) { return _this.getItem(unitUid, code); })); }));
            return _this;
        }
        CurrentUnitAddressService.prototype.getDetailsRoute = function () {
            return 'orgUnitAddressDetails';
        };
        CurrentUnitAddressService.prototype.getParamKey = function () {
            return root.ROUTE_PARAMS.addressCode;
        };
        CurrentUnitAddressService.prototype.getItem = function (unitUid, addressId) {
            return addressId
                ? this.unitService.getAddress(unitUid, addressId)
                : rxjs.of(null);
        };
        CurrentUnitAddressService.prototype.getError = function (code) {
            return this.unitService.getErrorState(code);
        };
        return CurrentUnitAddressService;
    }(CurrentItemService));
    CurrentUnitAddressService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUnitAddressService, deps: [{ token: i3__namespace.RoutingService }, { token: i2__namespace$1.OrgUnitService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CurrentUnitAddressService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUnitAddressService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUnitAddressService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.RoutingService }, { type: i2__namespace$1.OrgUnitService }]; } });

    var UnitAddressFormService = /** @class */ (function (_super) {
        __extends(UnitAddressFormService, _super);
        function UnitAddressFormService(userAddressService, userProfileFacade) {
            var _this = _super.call(this) || this;
            _this.userAddressService = userAddressService;
            _this.userProfileFacade = userProfileFacade;
            return _this;
        }
        UnitAddressFormService.prototype.build = function () {
            var form = new i8.FormGroup({});
            form.setControl('id', new i8.FormControl(''));
            form.setControl('titleCode', new i8.FormControl(''));
            form.setControl('firstName', new i8.FormControl('', i8.Validators.required));
            form.setControl('lastName', new i8.FormControl('', i8.Validators.required));
            form.setControl('line1', new i8.FormControl('', i8.Validators.required));
            form.setControl('line2', new i8.FormControl(''));
            form.setControl('town', new i8.FormControl('', i8.Validators.required));
            form.setControl('country', new i8.FormGroup({
                isocode: new i8.FormControl(null, i8.Validators.required),
            }));
            form.setControl('region', new i8.FormGroup({
                isocode: new i8.FormControl(null, i8.Validators.required),
            }));
            form.setControl('postalCode', new i8.FormControl('', i8.Validators.required));
            form.setControl('phone', new i8.FormControl(''));
            this.form = form;
        };
        UnitAddressFormService.prototype.getCountries = function () {
            var _this = this;
            return this.userAddressService.getDeliveryCountries().pipe(operators.tap(function (countries) {
                if (Object.keys(countries).length === 0) {
                    _this.userAddressService.loadDeliveryCountries();
                }
            }));
        };
        UnitAddressFormService.prototype.getTitles = function () {
            return this.userProfileFacade.getTitles();
        };
        UnitAddressFormService.prototype.getRegions = function () {
            var _this = this;
            var selectedCountryCode = this.form.get('country.isocode').value;
            var newCountryCode;
            return this.getForm()
                .get('country.isocode')
                .valueChanges.pipe(operators.filter(function (countryIsoCode) { return Boolean(countryIsoCode); }), operators.switchMap(function (countryIsoCode) {
                newCountryCode = countryIsoCode;
                return _this.userAddressService.getRegions(countryIsoCode);
            }), operators.tap(function (regions) {
                var regionControl = _this.form.get('region.isocode');
                if (!regions || regions.length === 0) {
                    regionControl.disable();
                }
                else {
                    regionControl.enable();
                }
                if (selectedCountryCode && newCountryCode !== selectedCountryCode) {
                    regionControl.reset();
                }
                selectedCountryCode = newCountryCode;
            }));
        };
        return UnitAddressFormService;
    }(FormService));
    UnitAddressFormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressFormService, deps: [{ token: i3__namespace.UserAddressService }, { token: i2__namespace$2.UserProfileFacade }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitAddressFormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressFormService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressFormService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.UserAddressService }, { type: i2__namespace$2.UserProfileFacade }]; } });

    var UnitAddressItemService = /** @class */ (function (_super) {
        __extends(UnitAddressItemService, _super);
        function UnitAddressItemService(currentItemService, routingService, formService, unitService) {
            var _this = _super.call(this, currentItemService, routingService, formService) || this;
            _this.currentItemService = currentItemService;
            _this.routingService = routingService;
            _this.formService = formService;
            _this.unitService = unitService;
            _this.unitRouteParam$ = _this.routingService
                .getParams()
                .pipe(operators.pluck(root.ROUTE_PARAMS.unitCode), operators.distinctUntilChanged());
            return _this;
        }
        UnitAddressItemService.prototype.load = function (unitUid, addressId) {
            return this.unitService
                .getAddress(unitUid, addressId)
                .pipe(operators.filter(function (list) { return Boolean(list); }));
        };
        UnitAddressItemService.prototype.update = function (addressCode, address) {
            var _this = this;
            this.unitRouteParam$.pipe(operators.first()).subscribe(function (unitCode) {
                _this.unitService.updateAddress(unitCode, addressCode, address);
            });
            return this.unitService.getAddressLoadingStatus(addressCode);
        };
        UnitAddressItemService.prototype.create = function (value) {
            var _this = this;
            this.unitRouteParam$
                .pipe(operators.first())
                .subscribe(function (unitCode) { return _this.unitService.createAddress(unitCode, value); });
            return this.unitService.getAddressLoadingStatus(null);
        };
        UnitAddressItemService.prototype.getDetailsRoute = function () {
            return this.currentItemService.getDetailsRoute();
        };
        UnitAddressItemService.prototype.delete = function (addressId, unitUid) {
            this.launchList();
            this.unitService.deleteAddress(unitUid, addressId);
            return this.unitService.getAddressLoadingStatus(addressId);
        };
        UnitAddressItemService.prototype.launchDetails = function (item) {
            var _this = this;
            if (!item.id) {
                // since the ID is generated in the backend
                // we redirect to the list instead.
                this.launchList();
            }
            else {
                this.unitRouteParam$.pipe(operators.first()).subscribe(function (unitCode) {
                    _this.routingService.go({
                        cxRoute: _this.getDetailsRoute(),
                        params: Object.assign(Object.assign({}, item), { uid: unitCode }),
                    });
                });
            }
        };
        UnitAddressItemService.prototype.launchList = function () {
            var _this = this;
            this.unitRouteParam$.pipe(operators.first()).subscribe(function (unitCode) {
                _this.routingService.go({
                    cxRoute: 'orgUnitAddressList',
                    params: { uid: unitCode },
                });
            });
        };
        return UnitAddressItemService;
    }(ItemService));
    UnitAddressItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressItemService, deps: [{ token: CurrentUnitAddressService }, { token: i3__namespace.RoutingService }, { token: UnitAddressFormService }, { token: i2__namespace$1.OrgUnitService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitAddressItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressItemService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressItemService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUnitAddressService }, { type: i3__namespace.RoutingService }, { type: UnitAddressFormService }, { type: i2__namespace$1.OrgUnitService }]; } });

    var UnitAddressDetailsComponent = /** @class */ (function () {
        function UnitAddressDetailsComponent(itemService, currentUnitService, userAddressService) {
            var _this = this;
            this.itemService = itemService;
            this.currentUnitService = currentUnitService;
            this.userAddressService = userAddressService;
            this.unit$ = this.currentUnitService.item$;
            this.model$ = this.itemService.key$.pipe(operators.withLatestFrom(this.unit$), operators.switchMap(function (_a) {
                var _b = __read(_a, 2), code = _b[0], unit = _b[1];
                return _this.itemService.load(unit.uid, code);
            }), operators.shareReplay({ bufferSize: 1, refCount: true }));
        }
        UnitAddressDetailsComponent.prototype.getCountry = function (isoCode) {
            var _this = this;
            return this.userAddressService.getDeliveryCountries().pipe(operators.tap(function (countries) {
                if (Object.keys(countries).length === 0) {
                    _this.userAddressService.loadDeliveryCountries();
                }
            }), operators.map(function (countries) { return countries.find(function (country) { return country.isocode === isoCode; }); }));
        };
        return UnitAddressDetailsComponent;
    }());
    UnitAddressDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressDetailsComponent, deps: [{ token: ItemService }, { token: CurrentUnitService }, { token: i3__namespace.UserAddressService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitAddressDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitAddressDetailsComponent, selector: "cx-org-unit-address-details", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: UnitAddressItemService,
            },
        ], ngImport: i0__namespace, template: "<ng-container *ngIf=\"unit$ | async as unit\">\n  <cx-org-card\n    *ngIf=\"model$ | async as model\"\n    i18nRoot=\"orgUnitAddress.details\"\n    [subtitle]=\"'orgUnitAddress.details.subtitle' | cxTranslate: { item: unit }\"\n    [cxFocus]=\"{ refreshFocus: model }\"\n  >\n    <a class=\"link\" actions routerLink=\"edit\">\n      {{ 'organization.edit' | cxTranslate }}\n    </a>\n\n    <cx-org-delete-item\n      actions\n      key=\"id\"\n      [additionalParam]=\"unit.uid\"\n      i18nRoot=\"orgUnitAddress\"\n    ></cx-org-delete-item>\n\n    <section main class=\"details\">\n      <div class=\"property\">\n        <label>{{ 'orgUnit.name' | cxTranslate }}</label>\n        <span class=\"value\"> {{ model.firstName }} {{ model.lastName }} </span>\n      </div>\n\n      <div class=\"property\">\n        <label>{{ 'orgUnit.unit' | cxTranslate }}</label>\n        <span class=\"value\">\n          <a\n            [routerLink]=\"\n              {\n                cxRoute: 'orgUnitDetails',\n                params: unit\n              } | cxUrl\n            \"\n          >\n            {{ unit.name }}\n          </a>\n        </span>\n      </div>\n\n      <div class=\"property full-width\">\n        <label>{{ 'orgUnitAddress.formattedAddress' | cxTranslate }}</label>\n        <span class=\"value\">\n          {{ model.formattedAddress }}\n        </span>\n      </div>\n\n      <div class=\"property\">\n        <label>{{ 'orgUnitAddress.country' | cxTranslate }}</label>\n        <span class=\"value\">\n          {{ (getCountry(model.country.isocode) | async)?.name }}\n        </span>\n      </div>\n    </section>\n  </cx-org-card>\n</ng-container>\n", components: [{ type: CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: DeleteItemComponent, selector: "cx-org-delete-item", inputs: ["i18nRoot", "key", "additionalParam"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe, "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-address-details',
                        templateUrl: './unit-address-details.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: UnitAddressItemService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: CurrentUnitService }, { type: i3__namespace.UserAddressService }]; } });

    var UnitAddressDetailsModule = /** @class */ (function () {
        function UnitAddressDetailsModule() {
        }
        return UnitAddressDetailsModule;
    }());
    UnitAddressDetailsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressDetailsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitAddressDetailsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressDetailsModule, declarations: [UnitAddressDetailsComponent], imports: [i5.CommonModule,
            CardModule,
            i2.RouterModule,
            i3.UrlModule,
            i3.I18nModule,
            DeleteItemModule,
            i1.KeyboardFocusModule] });
    UnitAddressDetailsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressDetailsModule, imports: [[
                i5.CommonModule,
                CardModule,
                i2.RouterModule,
                i3.UrlModule,
                i3.I18nModule,
                DeleteItemModule,
                i1.KeyboardFocusModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressDetailsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            CardModule,
                            i2.RouterModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            DeleteItemModule,
                            i1.KeyboardFocusModule,
                        ],
                        declarations: [UnitAddressDetailsComponent],
                    }]
            }] });

    var LinkCellComponent = /** @class */ (function (_super) {
        __extends(LinkCellComponent, _super);
        function LinkCellComponent(outlet, itemService) {
            var _this = _super.call(this, outlet) || this;
            _this.outlet = outlet;
            _this.itemService = itemService;
            _this.unitKey$ = _this.itemService.key$;
            return _this;
        }
        Object.defineProperty(LinkCellComponent.prototype, "tabIndex", {
            get: function () {
                return 0;
            },
            enumerable: false,
            configurable: true
        });
        LinkCellComponent.prototype.getRouterModel = function (uid) {
            return Object.assign(Object.assign({}, this.outlet.context), { uid: uid });
        };
        return LinkCellComponent;
    }(CellComponent));
    LinkCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: LinkCellComponent, deps: [{ token: i1__namespace.OutletContextData }, { token: ItemService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    LinkCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: LinkCellComponent, selector: "cx-org-link-cell", usesInheritance: true, ngImport: i0__namespace, template: "\n    <ng-container *ngIf=\"unitKey$ | async as uid\">\n      <a\n        *ngIf=\"linkable; else text\"\n        [routerLink]=\"{ cxRoute: route, params: getRouterModel(uid) } | cxUrl\"\n        [tabIndex]=\"tabIndex\"\n      >\n        <ng-container *ngTemplateOutlet=\"text\"></ng-container>\n      </a>\n    </ng-container>\n\n    <ng-template #text>\n      <span class=\"text\" title=\"{{ property }}\">{{ property }}</span>\n    </ng-template>\n  ", isInline: true, directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: LinkCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-link-cell',
                        template: "\n    <ng-container *ngIf=\"unitKey$ | async as uid\">\n      <a\n        *ngIf=\"linkable; else text\"\n        [routerLink]=\"{ cxRoute: route, params: getRouterModel(uid) } | cxUrl\"\n        [tabIndex]=\"tabIndex\"\n      >\n        <ng-container *ngTemplateOutlet=\"text\"></ng-container>\n      </a>\n    </ng-container>\n\n    <ng-template #text>\n      <span class=\"text\" title=\"{{ property }}\">{{ property }}</span>\n    </ng-template>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.OutletContextData }, { type: ItemService }]; } });

    var UnitAddressListService = /** @class */ (function (_super) {
        __extends(UnitAddressListService, _super);
        function UnitAddressListService(tableService, orgUnitService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.orgUnitService = orgUnitService;
            _this.tableType = exports.OrganizationTableType.UNIT_ADDRESS;
            _this._domainType = exports.OrganizationTableType.UNIT_ADDRESS;
            return _this;
        }
        UnitAddressListService.prototype.load = function (_pagination, code) {
            return this.orgUnitService.getAddresses(code);
        };
        return UnitAddressListService;
    }(SubListService));
    UnitAddressListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.OrgUnitService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitAddressListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.OrgUnitService }]; } });

    var UnitAddressListComponent = /** @class */ (function () {
        function UnitAddressListComponent() {
            this.routerKey = root.ROUTE_PARAMS.addressCode;
        }
        return UnitAddressListComponent;
    }());
    UnitAddressListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitAddressListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitAddressListComponent, selector: "cx-org-unit-address-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UnitAddressListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list\n  key=\"id\"\n  [routerKey]=\"routerKey\"\n  class=\"has-nested-view\"\n  [showHint]=\"true\"\n>\n  <a actions class=\"link\" routerLink=\"create\">\n    {{ 'organization.create' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-address-list',
                        templateUrl: './unit-address-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UnitAddressListService,
                            },
                        ],
                    }]
            }] });

    var UnitAddressListModule = /** @class */ (function () {
        function UnitAddressListModule() {
        }
        return UnitAddressListModule;
    }());
    UnitAddressListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitAddressListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressListModule, declarations: [UnitAddressListComponent, LinkCellComponent], imports: [i5.CommonModule, i3.I18nModule, i2.RouterModule, i3.UrlModule, SubListModule] });
    UnitAddressListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressListModule, imports: [[i5.CommonModule, i3.I18nModule, i2.RouterModule, i3.UrlModule, SubListModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i3.I18nModule, i2.RouterModule, i3.UrlModule, SubListModule],
                        declarations: [UnitAddressListComponent, LinkCellComponent],
                    }]
            }] });

    var UnitAddressFormComponent = /** @class */ (function () {
        function UnitAddressFormComponent(itemService, formService, currentUnitService) {
            this.itemService = itemService;
            this.formService = formService;
            this.currentUnitService = currentUnitService;
            this.form = this.itemService.getForm();
            this.key$ = this.itemService.key$;
            this.countries$ = this.formService.getCountries();
            this.titles$ = this.formService.getTitles();
            this.regions$ = this.formService.getRegions();
            this.unit$ = this.currentUnitService.item$;
        }
        UnitAddressFormComponent.prototype.ngOnInit = function () { };
        return UnitAddressFormComponent;
    }());
    UnitAddressFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressFormComponent, deps: [{ token: ItemService }, { token: UnitAddressFormService }, { token: CurrentUnitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitAddressFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitAddressFormComponent, selector: "cx-org-unit-address-form", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: UnitAddressItemService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-form\n  i18nRoot=\"orgUnitAddress\"\n  [animateBack]=\"!(key$ | async)\"\n  [subtitle]=\"\n    'orgUnitAddress.details.subtitle' | cxTranslate: { item: (unit$ | async) }\n  \"\n>\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label aria-required=\"true\" formGroupName=\"country\">\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.country' | cxTranslate\n      }}</span>\n      <ng-select\n        class=\"country-select\"\n        formControlName=\"isocode\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"countries$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"isocode\"\n        placeholder=\"{{ 'orgUnitAddress.selectOne' | cxTranslate }}\"\n        appendTo=\"cx-org-list\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('country.isocode')\"></cx-form-errors>\n    </label>\n\n    <label aria-required=\"true\">\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.titles' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"titleCode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"titles$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        placeholder=\"{{ 'orgUnitAddress.selectOne' | cxTranslate }}\"\n        appendTo=\"cx-org-list\"\n      >\n      </ng-select>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.firstName' | cxTranslate\n      }}</span>\n      <input\n        aria-required=\"true\"\n        class=\"form-control\"\n        type=\"text\"\n        placeholder=\"{{ 'orgUnitAddress.firstName' | cxTranslate }}\"\n        formControlName=\"firstName\"\n      />\n      <cx-form-errors [control]=\"form.get('firstName')\"></cx-form-errors>\n    </label>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.lastName' | cxTranslate\n      }}</span>\n      <input\n        aria-required=\"true\"\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgUnitAddress.lastName' | cxTranslate }}\"\n        formControlName=\"lastName\"\n      />\n      <cx-form-errors [control]=\"form.get('lastName')\"></cx-form-errors>\n    </label>\n\n    <label class=\"full-width\">\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.address1' | cxTranslate\n      }}</span>\n      <input\n        aria-required=\"true\"\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgUnitAddress.streetAddress' | cxTranslate }}\"\n        formControlName=\"line1\"\n      />\n      <cx-form-errors [control]=\"form.get('line1')\"></cx-form-errors>\n    </label>\n\n    <label class=\"full-width\">\n      <span class=\"label-content\">{{\n        'orgUnitAddress.address2' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgUnitAddress.aptSuite' | cxTranslate }}\"\n        formControlName=\"line2\"\n      />\n    </label>\n\n    <label class=\"full-width\">\n      <span class=\"label-content\">{{\n        'orgUnitAddress.phoneNumber' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgUnitAddress.phoneNumber' | cxTranslate }}\"\n        formControlName=\"phone\"\n      />\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.city' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgUnitAddress.city' | cxTranslate }}\"\n        formControlName=\"town\"\n      />\n      <cx-form-errors [control]=\"form.get('town')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUnitAddress.zipCode' | cxTranslate\n      }}</span>\n      <input\n        aria-required=\"true\"\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{ 'orgUnitAddress.zipCode' | cxTranslate }}\"\n        formControlName=\"postalCode\"\n      />\n      <cx-form-errors [control]=\"form.get('postalCode')\"></cx-form-errors>\n    </label>\n\n    <label></label>\n\n    <ng-container *ngIf=\"regions$ | async as regions\">\n      <label\n        class=\"full-width\"\n        aria-required=\"true\"\n        formGroupName=\"region\"\n        *ngIf=\"regions.length > 0\"\n      >\n        <span class=\"label-content required\">{{\n          'orgUnitAddress.state' | cxTranslate\n        }}</span>\n        <ng-select\n          class=\"region-select\"\n          formControlName=\"isocode\"\n          [searchable]=\"true\"\n          [clearable]=\"false\"\n          [items]=\"regions\"\n          bindLabel=\"name\"\n          bindValue=\"isocode\"\n          placeholder=\"{{ 'orgUnitAddress.selectOne' | cxTranslate }}\"\n          appendTo=\"cx-org-list\"\n        >\n        </ng-select>\n        <cx-form-errors [control]=\"form.get('region.isocode')\"></cx-form-errors>\n      </label>\n    </ng-container>\n  </ng-container>\n</cx-org-form>\n", components: [{ type: FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { type: i5__namespace$1.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { type: i1__namespace.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i8__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-address-form',
                        templateUrl: './unit-address-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: UnitAddressItemService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: UnitAddressFormService }, { type: CurrentUnitService }]; } });

    var UnitAddressFormModule = /** @class */ (function () {
        function UnitAddressFormModule() {
        }
        return UnitAddressFormModule;
    }());
    UnitAddressFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitAddressFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressFormModule, declarations: [UnitAddressFormComponent], imports: [i5.CommonModule,
            FormModule,
            i5$1.NgSelectModule,
            i3.UrlModule,
            i3.I18nModule,
            i8.ReactiveFormsModule,
            i1.FormErrorsModule] });
    UnitAddressFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressFormModule, imports: [[
                i5.CommonModule,
                FormModule,
                i5$1.NgSelectModule,
                i3.UrlModule,
                i3.I18nModule,
                i8.ReactiveFormsModule,
                i1.FormErrorsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            FormModule,
                            i5$1.NgSelectModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            i8.ReactiveFormsModule,
                            i1.FormErrorsModule,
                        ],
                        declarations: [UnitAddressFormComponent],
                    }]
            }] });

    var UnitAddressModule = /** @class */ (function () {
        function UnitAddressModule() {
        }
        return UnitAddressModule;
    }());
    UnitAddressModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitAddressModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressModule, imports: [UnitAddressListModule,
            UnitAddressDetailsModule,
            UnitAddressFormModule] });
    UnitAddressModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressModule, imports: [[
                UnitAddressListModule,
                UnitAddressDetailsModule,
                UnitAddressFormModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            UnitAddressListModule,
                            UnitAddressDetailsModule,
                            UnitAddressFormModule,
                        ],
                    }]
            }] });

    var UnitApproverListService = /** @class */ (function (_super) {
        __extends(UnitApproverListService, _super);
        function UnitApproverListService(tableService, unitService, userService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.unitService = unitService;
            _this.userService = userService;
            _this.tableType = exports.OrganizationTableType.UNIT_APPROVERS;
            _this._domainType = exports.OrganizationTableType.USER;
            return _this;
        }
        UnitApproverListService.prototype.load = function (pagination, code) {
            return this.unitService.getUsers(code, i3.B2BUserRole.APPROVER, pagination);
        };
        /**
         * @override
         * Assign budget to the cost center.
         */
        UnitApproverListService.prototype.assign = function (unitId, customerId) {
            this.unitService.assignApprover(unitId, customerId, i3.B2BUserRole.APPROVER);
            return this.userService.getLoadingStatus(customerId);
        };
        /**
         * @override
         * Unassign the budget from the cost center.
         */
        UnitApproverListService.prototype.unassign = function (unitId, customerId) {
            this.unitService.unassignApprover(unitId, customerId, i3.B2BUserRole.APPROVER);
            return this.userService.getLoadingStatus(customerId);
        };
        return UnitApproverListService;
    }(SubListService));
    UnitApproverListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitApproverListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.OrgUnitService }, { token: i2__namespace$1.B2BUserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitApproverListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitApproverListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitApproverListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.OrgUnitService }, { type: i2__namespace$1.B2BUserService }]; } });

    var UnitAssignedApproverListService = /** @class */ (function (_super) {
        __extends(UnitAssignedApproverListService, _super);
        function UnitAssignedApproverListService() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.tableType = exports.OrganizationTableType.UNIT_ASSIGNED_APPROVERS;
            return _this;
        }
        UnitAssignedApproverListService.prototype.load = function (pagination, code) {
            var _this = this;
            this.unitService.clearAssignedUsersList(code, i3.B2BUserRole.APPROVER, pagination);
            return _super.prototype.load.call(this, pagination, code)
                .pipe(operators.map(function (users) { return _this.filterSelected(users); }));
        };
        return UnitAssignedApproverListService;
    }(UnitApproverListService));
    UnitAssignedApproverListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAssignedApproverListService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitAssignedApproverListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAssignedApproverListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAssignedApproverListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UnitAssignedApproverListComponent = /** @class */ (function () {
        function UnitAssignedApproverListComponent() {
        }
        return UnitAssignedApproverListComponent;
    }());
    UnitAssignedApproverListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAssignedApproverListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitAssignedApproverListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitAssignedApproverListComponent, selector: "cx-org-unit-assigned-approver-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UnitAssignedApproverListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list [showHint]=\"true\">\n  <a actions class=\"link\" routerLink=\"assign\">\n    {{ 'organization.assign' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAssignedApproverListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-assigned-approver-list',
                        templateUrl: './unit-assigned-approver-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UnitAssignedApproverListService,
                            },
                        ],
                    }]
            }] });

    var UnitApproverListComponent = /** @class */ (function () {
        function UnitApproverListComponent() {
        }
        return UnitApproverListComponent;
    }());
    UnitApproverListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitApproverListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitApproverListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitApproverListComponent, selector: "cx-org-unit-approver-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UnitApproverListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list [previous]=\"false\">\n  <a actions class=\"link\" routerLink=\"../\">\n    {{ 'organization.done' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitApproverListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-approver-list',
                        templateUrl: './unit-approver-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UnitApproverListService,
                            },
                        ],
                    }]
            }] });

    var UnitApproverListModule = /** @class */ (function () {
        function UnitApproverListModule() {
        }
        return UnitApproverListModule;
    }());
    UnitApproverListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitApproverListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitApproverListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitApproverListModule, declarations: [UnitApproverListComponent, UnitAssignedApproverListComponent], imports: [i3.I18nModule, i2.RouterModule, SubListModule] });
    UnitApproverListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitApproverListModule, imports: [[i3.I18nModule, i2.RouterModule, SubListModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitApproverListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.I18nModule, i2.RouterModule, SubListModule],
                        declarations: [UnitApproverListComponent, UnitAssignedApproverListComponent],
                    }]
            }] });

    var UnitChildrenService = /** @class */ (function (_super) {
        __extends(UnitChildrenService, _super);
        function UnitChildrenService(tableService, orgUnitService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.orgUnitService = orgUnitService;
            _this.tableType = exports.OrganizationTableType.UNIT_CHILDREN;
            _this._domainType = exports.OrganizationTableType.UNIT;
            return _this;
        }
        // method to be adjusted for proper children list when ready
        UnitChildrenService.prototype.load = function (_pagination, code) {
            return this.orgUnitService.getChildUnits(code);
        };
        return UnitChildrenService;
    }(SubListService));
    UnitChildrenService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildrenService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.OrgUnitService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitChildrenService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildrenService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildrenService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.OrgUnitService }]; } });

    var UnitChildrenComponent = /** @class */ (function () {
        function UnitChildrenComponent(currentUnitService) {
            this.currentUnitService = currentUnitService;
            this.unit$ = this.currentUnitService
                ? this.currentUnitService.item$
                : rxjs.of({ active: true });
        }
        return UnitChildrenComponent;
    }());
    UnitChildrenComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildrenComponent, deps: [{ token: CurrentUnitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitChildrenComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitChildrenComponent, selector: "cx-org-unit-children", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UnitChildrenService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list [showHint]=\"true\">\n  <a\n    actions\n    class=\"link\"\n    routerLink=\"create\"\n    [class.disabled]=\"!(unit$ | async)?.active\"\n  >\n    {{ 'organization.create' | cxTranslate }}\n  </a>\n  <cx-org-disable-info\n    info\n    i18nRoot=\"orgUnitChildren\"\n    [displayInfoConfig]=\"{\n      disabledCreate: true,\n      disabledEnable: false,\n      disabledEdit: false\n    }\"\n  >\n  </cx-org-disable-info>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }, { type: DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildrenComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-children',
                        templateUrl: './unit-children.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UnitChildrenService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUnitService }]; } });

    var UnitChildrenModule = /** @class */ (function () {
        function UnitChildrenModule() {
        }
        return UnitChildrenModule;
    }());
    UnitChildrenModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildrenModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitChildrenModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildrenModule, declarations: [UnitChildrenComponent], imports: [ListModule,
            i3.I18nModule,
            i2.RouterModule,
            SubListModule,
            i5.CommonModule,
            DisableInfoModule] });
    UnitChildrenModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildrenModule, imports: [[
                ListModule,
                i3.I18nModule,
                i2.RouterModule,
                SubListModule,
                i5.CommonModule,
                DisableInfoModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildrenModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            ListModule,
                            i3.I18nModule,
                            i2.RouterModule,
                            SubListModule,
                            i5.CommonModule,
                            DisableInfoModule,
                        ],
                        declarations: [UnitChildrenComponent],
                    }]
            }] });

    var UnitCostCenterListService = /** @class */ (function (_super) {
        __extends(UnitCostCenterListService, _super);
        function UnitCostCenterListService(tableService, unitService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.unitService = unitService;
            _this.tableType = exports.OrganizationTableType.UNIT_COST_CENTERS;
            _this._domainType = exports.OrganizationTableType.COST_CENTER;
            return _this;
        }
        UnitCostCenterListService.prototype.load = function (_pagination, code) {
            return this.unitService.getCostCenters(code);
        };
        return UnitCostCenterListService;
    }(SubListService));
    UnitCostCenterListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.OrgUnitService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitCostCenterListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.OrgUnitService }]; } });

    var UnitCostCenterListComponent = /** @class */ (function () {
        function UnitCostCenterListComponent(currentUnitService) {
            this.currentUnitService = currentUnitService;
            this.unit$ = this.currentUnitService
                ? this.currentUnitService.item$
                : rxjs.of({ active: true });
        }
        return UnitCostCenterListComponent;
    }());
    UnitCostCenterListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterListComponent, deps: [{ token: CurrentUnitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitCostCenterListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitCostCenterListComponent, selector: "cx-org-unit-cost-centers", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UnitCostCenterListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list [showHint]=\"true\">\n  <a\n    actions\n    class=\"link\"\n    routerLink=\"create\"\n    [class.disabled]=\"!(unit$ | async)?.active\"\n  >\n    {{ 'organization.create' | cxTranslate }}\n  </a>\n  <cx-org-disable-info\n    info\n    i18nRoot=\"orgUnitCostCenters\"\n    [displayInfoConfig]=\"{\n      disabledCreate: true,\n      disabledEnable: false,\n      disabledEdit: false\n    }\"\n  >\n  </cx-org-disable-info>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }, { type: DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-cost-centers',
                        templateUrl: './unit-cost-centers.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UnitCostCenterListService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUnitService }]; } });

    var UnitCostCenterListModule = /** @class */ (function () {
        function UnitCostCenterListModule() {
        }
        return UnitCostCenterListModule;
    }());
    UnitCostCenterListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitCostCenterListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterListModule, declarations: [UnitCostCenterListComponent], imports: [i3.I18nModule,
            i2.RouterModule,
            SubListModule,
            i5.CommonModule,
            DisableInfoModule] });
    UnitCostCenterListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterListModule, imports: [[
                i3.I18nModule,
                i2.RouterModule,
                SubListModule,
                i5.CommonModule,
                DisableInfoModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3.I18nModule,
                            i2.RouterModule,
                            SubListModule,
                            i5.CommonModule,
                            DisableInfoModule,
                        ],
                        declarations: [UnitCostCenterListComponent],
                    }]
            }] });

    var UnitUserRolesCellComponent = /** @class */ (function (_super) {
        __extends(UnitUserRolesCellComponent, _super);
        function UnitUserRolesCellComponent(outlet, itemService) {
            var _this = _super.call(this, outlet) || this;
            _this.outlet = outlet;
            _this.itemService = itemService;
            _this.unitKey$ = _this.itemService.key$;
            return _this;
        }
        UnitUserRolesCellComponent.prototype.getRouterModel = function (uid) {
            return Object.assign(Object.assign({}, this.outlet.context), { uid: uid });
        };
        return UnitUserRolesCellComponent;
    }(CellComponent));
    UnitUserRolesCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesCellComponent, deps: [{ token: i1__namespace.OutletContextData }, { token: ItemService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitUserRolesCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitUserRolesCellComponent, selector: "cx-org-unit-user-link-cell", usesInheritance: true, ngImport: i0__namespace, template: "\n    <a\n      *ngIf=\"hasItem && unitKey$ | async as uid\"\n      [routerLink]=\"\n        { cxRoute: 'orgUnitUserRoles', params: getRouterModel(uid) } | cxUrl\n      \"\n    >\n      {{ 'orgUser.roles' | cxTranslate }}\n    </a>\n  ", isInline: true, directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxUrl": i3__namespace.UrlPipe, "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-user-link-cell',
                        template: "\n    <a\n      *ngIf=\"hasItem && unitKey$ | async as uid\"\n      [routerLink]=\"\n        { cxRoute: 'orgUnitUserRoles', params: getRouterModel(uid) } | cxUrl\n      \"\n    >\n      {{ 'orgUser.roles' | cxTranslate }}\n    </a>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.OutletContextData }, { type: ItemService }]; } });

    var UnitUserListService = /** @class */ (function (_super) {
        __extends(UnitUserListService, _super);
        function UnitUserListService(tableService, unitService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.unitService = unitService;
            _this.tableType = exports.OrganizationTableType.UNIT_USERS;
            _this._domainType = exports.OrganizationTableType.USER;
            return _this;
        }
        UnitUserListService.prototype.load = function (pagination, code) {
            return this.unitService.getUsers(code, i3.B2BUserRole.CUSTOMER, pagination);
        };
        return UnitUserListService;
    }(SubListService));
    UnitUserListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.OrgUnitService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitUserListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.OrgUnitService }]; } });

    var UnitUserListComponent = /** @class */ (function () {
        function UnitUserListComponent(currentUnitService) {
            this.currentUnitService = currentUnitService;
            this.routerKey = root.ROUTE_PARAMS.userCode;
            this.unit$ = this.currentUnitService
                ? this.currentUnitService.item$
                : rxjs.of({ active: true });
        }
        return UnitUserListComponent;
    }());
    UnitUserListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserListComponent, deps: [{ token: CurrentUnitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitUserListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitUserListComponent, selector: "cx-org-unit-user-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UnitUserListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list key=\"customerId\" [routerKey]=\"routerKey\" [showHint]=\"true\">\n  <a\n    actions\n    class=\"link\"\n    routerLink=\"create\"\n    [class.disabled]=\"!(unit$ | async)?.active\"\n  >\n    {{ 'organization.create' | cxTranslate }}\n  </a>\n  <cx-org-disable-info\n    info\n    i18nRoot=\"orgUnitUsers\"\n    [displayInfoConfig]=\"{\n      disabledCreate: true,\n      disabledEnable: false,\n      disabledEdit: false\n    }\"\n  >\n  </cx-org-disable-info>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }, { type: DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-user-list',
                        templateUrl: './unit-user-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UnitUserListService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUnitService }]; } });

    var UnitUserListModule = /** @class */ (function () {
        function UnitUserListModule() {
        }
        return UnitUserListModule;
    }());
    UnitUserListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitUserListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserListModule, declarations: [UnitUserListComponent, UnitUserRolesCellComponent], imports: [i5.CommonModule,
            i3.I18nModule,
            i2.RouterModule,
            i3.UrlModule,
            SubListModule,
            DisableInfoModule] });
    UnitUserListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserListModule, imports: [[
                i5.CommonModule,
                i3.I18nModule,
                i2.RouterModule,
                i3.UrlModule,
                SubListModule,
                DisableInfoModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i3.I18nModule,
                            i2.RouterModule,
                            i3.UrlModule,
                            SubListModule,
                            DisableInfoModule,
                        ],
                        declarations: [UnitUserListComponent, UnitUserRolesCellComponent],
                    }]
            }] });

    var CurrentUnitUserService = /** @class */ (function (_super) {
        __extends(CurrentUnitUserService, _super);
        function CurrentUnitUserService(routingService, b2bUserService) {
            var _this = _super.call(this, routingService) || this;
            _this.routingService = routingService;
            _this.b2bUserService = b2bUserService;
            return _this;
        }
        CurrentUnitUserService.prototype.getDetailsRoute = function () {
            return 'orgUnitUserList';
        };
        CurrentUnitUserService.prototype.getParamKey = function () {
            return root.ROUTE_PARAMS.userCode;
        };
        CurrentUnitUserService.prototype.getItem = function (customerId) {
            return this.b2bUserService.get(customerId);
        };
        CurrentUnitUserService.prototype.getError = function (code) {
            return this.b2bUserService.getErrorState(code);
        };
        return CurrentUnitUserService;
    }(CurrentItemService));
    CurrentUnitUserService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUnitUserService, deps: [{ token: i3__namespace.RoutingService }, { token: i2__namespace$1.B2BUserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CurrentUnitUserService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUnitUserService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUnitUserService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.RoutingService }, { type: i2__namespace$1.B2BUserService }]; } });

    var UnitUserRolesFormService = /** @class */ (function (_super) {
        __extends(UnitUserRolesFormService, _super);
        function UnitUserRolesFormService(userService) {
            var _this = _super.call(this) || this;
            _this.userService = userService;
            _this.availableRoles = _this.userService.getAllRoles();
            return _this;
        }
        UnitUserRolesFormService.prototype.getForm = function (item) {
            // if form already exist, while switching between users
            // it didn't patchData again, so used force rebuild
            this.form = null;
            return _super.prototype.getForm.call(this, item);
        };
        UnitUserRolesFormService.prototype.build = function () {
            var form = new i8.FormGroup({});
            this.availableRoles.forEach(function (role) { return form.addControl(role, new i8.FormControl()); });
            this.form = form;
        };
        UnitUserRolesFormService.prototype.patchData = function (item) {
            var _this = this;
            var _a;
            _super.prototype.patchData.call(this, item);
            if (item) {
                (_a = item.roles) === null || _a === void 0 ? void 0 : _a.forEach(function (role) {
                    _this.form.get(role).setValue(true);
                });
            }
        };
        return UnitUserRolesFormService;
    }(FormService));
    UnitUserRolesFormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesFormService, deps: [{ token: i2__namespace$1.B2BUserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitUserRolesFormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesFormService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesFormService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.B2BUserService }]; } });

    var UnitUserRolesItemService = /** @class */ (function (_super) {
        __extends(UnitUserRolesItemService, _super);
        function UnitUserRolesItemService(currentItemService, routingService, formService, unitService, b2bUserService) {
            var _this = _super.call(this, currentItemService, routingService, formService) || this;
            _this.currentItemService = currentItemService;
            _this.routingService = routingService;
            _this.formService = formService;
            _this.unitService = unitService;
            _this.b2bUserService = b2bUserService;
            return _this;
        }
        UnitUserRolesItemService.prototype.save = function (form, key) {
            // we enable the unit so that the underlying
            // save method can read the complete form.value.
            form.get('orgUnit').enable();
            return _super.prototype.save.call(this, form, key);
        };
        UnitUserRolesItemService.prototype.load = function (unitUid) {
            return this.b2bUserService.get(unitUid);
        };
        UnitUserRolesItemService.prototype.update = function (customerId, _user) {
            return this.b2bUserService.getLoadingStatus(customerId);
        };
        UnitUserRolesItemService.prototype.create = function (_customer) {
            return this.b2bUserService.getLoadingStatus(null);
        };
        UnitUserRolesItemService.prototype.getDetailsRoute = function () {
            return this.currentItemService.getDetailsRoute();
        };
        return UnitUserRolesItemService;
    }(ItemService));
    UnitUserRolesItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesItemService, deps: [{ token: CurrentUnitUserService }, { token: i3__namespace.RoutingService }, { token: UnitUserRolesFormService }, { token: i2__namespace$1.OrgUnitService }, { token: i2__namespace$1.B2BUserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitUserRolesItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesItemService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesItemService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUnitUserService }, { type: i3__namespace.RoutingService }, { type: UnitUserRolesFormService }, { type: i2__namespace$1.OrgUnitService }, { type: i2__namespace$1.B2BUserService }]; } });

    var CurrentUserService = /** @class */ (function (_super) {
        __extends(CurrentUserService, _super);
        function CurrentUserService(routingService, b2bUserService) {
            var _this = _super.call(this, routingService) || this;
            _this.routingService = routingService;
            _this.b2bUserService = b2bUserService;
            _this.name$ = _this.item$.pipe(operators.map(function (user) { return user.name; }));
            return _this;
        }
        CurrentUserService.prototype.getParamKey = function () {
            return root.ROUTE_PARAMS.userCode;
        };
        CurrentUserService.prototype.getItem = function (code) {
            return this.b2bUserService.get(code);
        };
        CurrentUserService.prototype.getError = function (code) {
            return this.b2bUserService.getErrorState(code);
        };
        return CurrentUserService;
    }(CurrentItemService));
    CurrentUserService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUserService, deps: [{ token: i3__namespace.RoutingService }, { token: i2__namespace$1.B2BUserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CurrentUserService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUserService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUserService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.RoutingService }, { type: i2__namespace$1.B2BUserService }]; } });

    var UserFormService = /** @class */ (function (_super) {
        __extends(UserFormService, _super);
        function UserFormService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UserFormService.prototype.build = function () {
            var form = new i8.FormGroup({});
            form.setControl('customerId', new i8.FormControl(''));
            form.setControl('titleCode', new i8.FormControl(''));
            form.setControl('firstName', new i8.FormControl('', i8.Validators.required));
            form.setControl('lastName', new i8.FormControl('', i8.Validators.required));
            form.setControl('email', new i8.FormControl('', [
                i8.Validators.required,
                i1.CustomFormValidators.emailValidator,
            ]));
            form.setControl('orgUnit', new i8.FormGroup({
                uid: new i8.FormControl(undefined, i8.Validators.required),
            }));
            form.setControl('roles', new i8.FormArray([]));
            form.setControl('isAssignedToApprovers', new i8.FormControl(false));
            form.get('roles').valueChanges.subscribe(function (roles) {
                if (roles.includes(i3.B2BUserRole.APPROVER)) {
                    form.get('isAssignedToApprovers').enable();
                }
                else {
                    form.get('isAssignedToApprovers').disable();
                    form.get('isAssignedToApprovers').reset();
                }
            });
            this.form = form;
        };
        UserFormService.prototype.patchData = function (item) {
            var _a;
            _super.prototype.patchData.call(this, item);
            if (item) {
                var roles_1 = this.form.get('roles');
                (_a = item.roles) === null || _a === void 0 ? void 0 : _a.forEach(function (role) {
                    if (!roles_1.value.includes(role)) {
                        roles_1.push(new i8.FormControl(role));
                    }
                });
            }
        };
        return UserFormService;
    }(FormService));
    UserFormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserFormService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserFormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserFormService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserFormService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UserItemService = /** @class */ (function (_super) {
        __extends(UserItemService, _super);
        function UserItemService(currentItemService, routingService, formService, userService) {
            var _this = _super.call(this, currentItemService, routingService, formService) || this;
            _this.currentItemService = currentItemService;
            _this.routingService = routingService;
            _this.formService = formService;
            _this.userService = userService;
            return _this;
        }
        UserItemService.prototype.load = function (code) {
            this.userService.load(code);
            return this.userService.get(code);
        };
        UserItemService.prototype.update = function (code, value) {
            delete value.approvers;
            this.userService.update(code, value);
            return this.userService.getLoadingStatus(code);
        };
        UserItemService.prototype.create = function (value) {
            this.userService.create(value);
            return this.userService.getLoadingStatus(null);
        };
        UserItemService.prototype.getDetailsRoute = function () {
            return 'orgUserDetails';
        };
        // @override to avoid errors while creation
        UserItemService.prototype.launchDetails = function (item) {
            if (item.customerId !== null) {
                _super.prototype.launchDetails.call(this, item);
            }
        };
        return UserItemService;
    }(ItemService));
    UserItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserItemService, deps: [{ token: CurrentUserService }, { token: i3__namespace.RoutingService }, { token: UserFormService }, { token: i2__namespace$1.B2BUserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserItemService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserItemService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUserService }, { type: i3__namespace.RoutingService }, { type: UserFormService }, { type: i2__namespace$1.B2BUserService }]; } });

    var UnitUserRolesFormComponent = /** @class */ (function () {
        function UnitUserRolesFormComponent(itemService, formService, userService, userItemService) {
            var _this = this;
            this.itemService = itemService;
            this.formService = formService;
            this.userService = userService;
            this.userItemService = userItemService;
            this.form$ = this.itemService.current$.pipe(operators.tap(function (item) {
                var _a, _b;
                if (!_this.item) {
                    _this.item = item;
                }
                if (((_a = _this.item.roles) === null || _a === void 0 ? void 0 : _a.join()) !== ((_b = item.roles) === null || _b === void 0 ? void 0 : _b.join())) {
                    _this.item = Object.assign(Object.assign({}, _this.item), item);
                }
            }), operators.map(function (item) { return _this.formService.getForm(item); }));
            this.availableRoles = this.userService.getAllRoles();
        }
        UnitUserRolesFormComponent.prototype.save = function (form) {
            var _this = this;
            form.disable();
            var roles = __spreadArray([], __read(this.availableRoles)).filter(function (r) { return !!form.get(r).value; });
            this.userItemService
                .update(this.item.customerId, { roles: roles })
                .pipe(operators.take(1), operators.filter(function (data) { return data.status === i2$1.LoadStatus.SUCCESS; }))
                .subscribe(function (data) {
                _this.notify(Object.assign(Object.assign({}, _this.item), data.item));
                form.enable();
            });
        };
        UnitUserRolesFormComponent.prototype.notify = function (item) {
            this.messageService.add({
                message: {
                    key: 'orgUnitUserRoles.messages.rolesUpdated',
                    params: { item: item },
                },
            });
        };
        return UnitUserRolesFormComponent;
    }());
    UnitUserRolesFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesFormComponent, deps: [{ token: ItemService }, { token: UnitUserRolesFormService }, { token: i2__namespace$1.B2BUserService }, { token: UserItemService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitUserRolesFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitUserRolesFormComponent, selector: "cx-org-unit-user-roles", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: UnitUserRolesItemService,
            },
        ], viewQueries: [{ propertyName: "messageService", first: true, predicate: MessageService, descendants: true, read: MessageService }], ngImport: i0__namespace, template: "<form *ngIf=\"form$ | async as form\" (submit)=\"save(form)\">\n  <cx-org-card\n    #card\n    [previous]=\"false\"\n    i18nRoot=\"orgUnitUserRoles\"\n    [cxFocus]=\"{ autofocus: 'input', refreshFocus: form }\"\n  >\n    <a actions routerLink=\"../../\">\n      <span (click)=\"card.closeView($event)\">\n        {{ 'organization.done' | cxTranslate }}\n      </span>\n    </a>\n\n    <section main class=\"details\" [formGroup]=\"form\">\n      <fieldset class=\"full-width\">\n        <label class=\"form-check\" *ngFor=\"let role of availableRoles\">\n          <input\n            type=\"checkbox\"\n            [formControlName]=\"role\"\n            (change)=\"save(form)\"\n          />\n          <span class=\"form-check-label\">\n            {{ 'organization.userRoles.' + role | cxTranslate }}\n          </span>\n        </label>\n      </fieldset>\n    </section>\n  </cx-org-card>\n</form>\n", components: [{ type: CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i8__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8__namespace.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i8__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i8__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-user-roles',
                        templateUrl: './unit-user-roles.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: UnitUserRolesItemService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: UnitUserRolesFormService }, { type: i2__namespace$1.B2BUserService }, { type: UserItemService }]; }, propDecorators: { messageService: [{
                    type: i0.ViewChild,
                    args: [MessageService, { read: MessageService }]
                }] } });

    var UnitUserRolesModule = /** @class */ (function () {
        function UnitUserRolesModule() {
        }
        return UnitUserRolesModule;
    }());
    UnitUserRolesModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitUserRolesModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesModule, declarations: [UnitUserRolesFormComponent], imports: [i5.CommonModule,
            CardModule,
            i8.FormsModule,
            i2.RouterModule,
            i3.UrlModule,
            i3.I18nModule,
            i8.ReactiveFormsModule,
            i1.KeyboardFocusModule] });
    UnitUserRolesModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesModule, imports: [[
                i5.CommonModule,
                CardModule,
                i8.FormsModule,
                i2.RouterModule,
                i3.UrlModule,
                i3.I18nModule,
                i8.ReactiveFormsModule,
                i1.KeyboardFocusModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserRolesModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            CardModule,
                            i8.FormsModule,
                            i2.RouterModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            i8.ReactiveFormsModule,
                            i1.KeyboardFocusModule,
                        ],
                        declarations: [UnitUserRolesFormComponent],
                    }]
            }] });

    var UnitUsersModule = /** @class */ (function () {
        function UnitUsersModule() {
        }
        return UnitUsersModule;
    }());
    UnitUsersModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUsersModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitUsersModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUsersModule, imports: [UnitUserListModule, UnitUserRolesModule] });
    UnitUsersModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUsersModule, imports: [[UnitUserListModule, UnitUserRolesModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUsersModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [UnitUserListModule, UnitUserRolesModule],
                    }]
            }] });

    var TREE_TOGGLE;
    (function (TREE_TOGGLE) {
        TREE_TOGGLE[TREE_TOGGLE["EXPANDED"] = 0] = "EXPANDED";
        TREE_TOGGLE[TREE_TOGGLE["COLLAPSED"] = 1] = "COLLAPSED";
    })(TREE_TOGGLE || (TREE_TOGGLE = {}));

    /**
     * Service to populate Unit data to `Table` data. Unit
     * data is driven by the table configuration, using the `OrganizationTables.UNIT`.
     */
    var UnitTreeService = /** @class */ (function () {
        function UnitTreeService() {
            /**
             * Indicates the minimum number of (initial) expanded units.
             */
            this.minimalExpanded = 1;
            this.globalToggle$ = new rxjs.BehaviorSubject(undefined);
            this.treeToggle$ = new rxjs.BehaviorSubject(new Map());
        }
        /**
         * Initializes the unit tree with an active unit.
         *
         * The active unit will be collapsed.
         */
        UnitTreeService.prototype.initialize = function (root, activeUnitId) {
            if (activeUnitId) {
                this.expandUntilActiveNode(root, activeUnitId);
            }
        };
        /**
         * Sets the global toggle state to _collapsed_ and clears the toggle state
         * for individual units.
         */
        UnitTreeService.prototype.collapseAll = function () {
            this.globalToggle$.next(TREE_TOGGLE.COLLAPSED);
            this.treeToggle$.next(new Map());
        };
        /**
         * Sets the global toggle state to _expanded_ and clears the toggle state
         * for individual units.
         */
        UnitTreeService.prototype.expandAll = function () {
            this.globalToggle$.next(TREE_TOGGLE.EXPANDED);
            this.treeToggle$.next(new Map());
        };
        /**
         * Indicates whether the give unit is expanded.
         *
         * The returned (boolean) expand state is driven by the global toggle
         * state (expand / collapse all) and the toggle state for individual units.
         * There's also the `minimalExpanded` taken into consideration.
         */
        UnitTreeService.prototype.isExpanded = function (unitId, level) {
            var _a;
            var toggleState = (_a = this.treeToggle$.value) === null || _a === void 0 ? void 0 : _a.get(unitId);
            if (this.globalToggle$.value === TREE_TOGGLE.COLLAPSED &&
                toggleState !== TREE_TOGGLE.EXPANDED) {
                return false;
            }
            return (
            // the current node is expanded
            toggleState === TREE_TOGGLE.EXPANDED ||
                // the node is not collapsed, but globally expanded ("expand all") or above
                // the minimum visible nodes
                ((this.globalToggle$.value === TREE_TOGGLE.EXPANDED ||
                    level < this.minimalExpanded) &&
                    toggleState !== TREE_TOGGLE.COLLAPSED));
        };
        UnitTreeService.prototype.toggle = function (unit) {
            var currentState = this.treeToggle$.value;
            currentState.set(unit.id, this.isExpanded(unit.id, unit.depthLevel)
                ? TREE_TOGGLE.COLLAPSED
                : TREE_TOGGLE.EXPANDED);
            this.treeToggle$.next(currentState);
        };
        /**
         * Expands all tree nodes till the active unit, to ensure that the
         * full tree is collapsed till the active item.
         *
         * This is useful while navigating the tree by the router.
         */
        UnitTreeService.prototype.expandUntilActiveNode = function (node, activeUnitId) {
            var hasActiveChild = function (n, id) {
                var _a;
                return !!((_a = n.children) === null || _a === void 0 ? void 0 : _a.find(function (child) { return child.id === id || hasActiveChild(child, id); }));
            };
            var findInvolvedTreeNodes = function (n, activeItems) {
                if (activeItems === void 0) { activeItems = []; }
                if (hasActiveChild(n, activeUnitId)) {
                    activeItems.push(n.id);
                }
                n.children.forEach(function (child) {
                    findInvolvedTreeNodes(child, activeItems);
                });
                return activeItems;
            };
            var m = this.treeToggle$.value;
            findInvolvedTreeNodes(node).forEach(function (activeId) {
                if (m.get(activeId) !== TREE_TOGGLE.EXPANDED) {
                    m.set(activeId, TREE_TOGGLE.EXPANDED);
                }
            });
            if (m !== this.treeToggle$.value) {
                this.treeToggle$.next(m);
            }
        };
        return UnitTreeService;
    }());
    UnitTreeService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitTreeService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitTreeService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitTreeService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitTreeService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UnitListComponent = /** @class */ (function () {
        function UnitListComponent(unitTreeService) {
            this.unitTreeService = unitTreeService;
        }
        UnitListComponent.prototype.expandAll = function () {
            this.unitTreeService.expandAll();
        };
        UnitListComponent.prototype.collapseAll = function () {
            this.unitTreeService.collapseAll();
        };
        return UnitListComponent;
    }());
    UnitListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitListComponent, deps: [{ token: UnitTreeService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitListComponent, selector: "cx-org-unit-list", ngImport: i0__namespace, template: "<cx-org-list>\n  <ng-container actions>\n    <button class=\"link\" (click)=\"expandAll()\">\n      {{ 'orgUnit.tree.expandAll' | cxTranslate }}\n    </button>\n    <button class=\"link\" (click)=\"collapseAll()\">\n      {{ 'orgUnit.tree.collapseAll' | cxTranslate }}\n    </button>\n  </ng-container>\n</cx-org-list>\n", components: [{ type: ListComponent, selector: "cx-org-list", inputs: ["key"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-list',
                        templateUrl: './unit-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: UnitTreeService }]; } });

    var ToggleLinkCellComponent = /** @class */ (function (_super) {
        __extends(ToggleLinkCellComponent, _super);
        function ToggleLinkCellComponent(outlet, unitTreeService) {
            var _this = _super.call(this, outlet) || this;
            _this.outlet = outlet;
            _this.unitTreeService = unitTreeService;
            return _this;
        }
        Object.defineProperty(ToggleLinkCellComponent.prototype, "depthLevel", {
            get: function () {
                return this.model.depthLevel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToggleLinkCellComponent.prototype, "combinedName", {
            get: function () {
                return this.property ? this.property + " (" + this.count + ")" : '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToggleLinkCellComponent.prototype, "tabIndex", {
            get: function () {
                return 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToggleLinkCellComponent.prototype, "expanded", {
            get: function () {
                return this.model.expanded;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToggleLinkCellComponent.prototype, "count", {
            /**
             * Counts the number of descendants
             */
            get: function () {
                return this.model.count;
            },
            enumerable: false,
            configurable: true
        });
        ToggleLinkCellComponent.prototype.toggleItem = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.unitTreeService.toggle(this.model);
        };
        Object.defineProperty(ToggleLinkCellComponent.prototype, "isSwitchable", {
            /**
             * Indicates whether the tree item should have a toggle navigation.
             *
             * The toggle navigation is used in case the tree item has descendants,
             * and if the tree item level is not configured to be shown anyway.
             */
            get: function () {
                return this.count > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToggleLinkCellComponent.prototype, "hasItem", {
            // TODO: leverage these methods when available from future PR.
            get: function () {
                return !!this.item && Object.keys(this.item).length > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToggleLinkCellComponent.prototype, "item", {
            get: function () {
                if (!this.outlet.context) {
                    return null;
                }
                var _a = this.outlet.context, _field = _a._field, _options = _a._options, _type = _a._type, _i18nRoot = _a._i18nRoot, all = __rest(_a, ["_field", "_options", "_type", "_i18nRoot"]);
                return all;
            },
            enumerable: false,
            configurable: true
        });
        return ToggleLinkCellComponent;
    }(CellComponent));
    ToggleLinkCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ToggleLinkCellComponent, deps: [{ token: i1__namespace.OutletContextData }, { token: UnitTreeService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ToggleLinkCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ToggleLinkCellComponent, selector: "cx-org-toggle-link-cell", host: { properties: { "style.--cx-depth-level": "this.depthLevel" } }, usesInheritance: true, ngImport: i0__namespace, template: "<a\n  *ngIf=\"hasItem\"\n  class=\"hide-focus-border\"\n  [routerLink]=\"{ cxRoute: route, params: routeModel } | cxUrl\"\n  [tabIndex]=\"tabIndex\"\n>\n  <button\n    *ngIf=\"isSwitchable\"\n    class=\"button tree-item-toggle\"\n    type=\"button\"\n    (click)=\"toggleItem($event)\"\n  >\n    <cx-icon [type]=\"expanded ? 'CARET_DOWN' : 'CARET_RIGHT'\"></cx-icon>\n  </button>\n  <span class=\"text\" title=\"{{ combinedName }}\">{{ combinedName }}</span>\n</a>\n", components: [{ type: i1__namespace.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ToggleLinkCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-toggle-link-cell',
                        templateUrl: './toggle-link-cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.OutletContextData }, { type: UnitTreeService }]; }, propDecorators: { depthLevel: [{
                    type: i0.HostBinding,
                    args: ['style.--cx-depth-level']
                }] } });

    var UnitListModule = /** @class */ (function () {
        function UnitListModule() {
        }
        return UnitListModule;
    }());
    UnitListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitListModule, declarations: [UnitListComponent, ToggleLinkCellComponent], imports: [i5.CommonModule,
            i2.RouterModule,
            i3.UrlModule,
            i3.I18nModule,
            i1.IconModule,
            ListModule] });
    UnitListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitListModule, imports: [[
                i5.CommonModule,
                i2.RouterModule,
                i3.UrlModule,
                i3.I18nModule,
                i1.IconModule,
                ListModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i2.RouterModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            i1.IconModule,
                            ListModule,
                        ],
                        declarations: [UnitListComponent, ToggleLinkCellComponent],
                    }]
            }] });

    var UserDetailsCellComponent = /** @class */ (function (_super) {
        __extends(UserDetailsCellComponent, _super);
        function UserDetailsCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return UserDetailsCellComponent;
    }(CellComponent));
    UserDetailsCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserDetailsCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    UserDetailsCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserDetailsCellComponent, selector: "cx-org-user-details-cell", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #details>\n  <div class=\"popover-details\">\n    <div class=\"property\">\n      <label>{{ 'orgUser.name' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUserDetails',\n            params: model\n          } | cxUrl\n        \"\n        >{{ model.name }}</a\n      >\n    </div>\n\n    <div class=\"property full-width\">\n      <label>{{ 'orgUser.uid' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.uid }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUser.roles' | cxTranslate }}</label>\n      <ul class=\"value\">\n        <li\n          *ngFor=\"let role of model.roles; let isLast = last\"\n          [innerText]=\"'organization.userRoles.' + role | cxTranslate\"\n        ></li>\n        <li *ngIf=\"model.roles?.length === 0\">-</li>\n      </ul>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUser.orgUnit' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.orgUnit\n          } | cxUrl\n        \"\n      >\n        {{ model.orgUnit?.name }}\n      </a>\n    </div>\n  </div>\n</ng-template>\n\n<button\n  class=\"button text\"\n  [cxPopover]=\"details\"\n  [cxPopoverOptions]=\"{\n    placement: 'auto',\n    class: 'my-company-popover',\n    appendToBody: true,\n    displayCloseButton: true\n  }\"\n>\n  {{ model?.name }}\n</button>\n", directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.PopoverDirective, selector: "[cxPopover]", inputs: ["cxPopover", "cxPopoverOptions"], outputs: ["openPopover", "closePopover"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserDetailsCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-details-cell',
                        templateUrl: './user-details-cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var UnitDetailsCellComponent = /** @class */ (function (_super) {
        __extends(UnitDetailsCellComponent, _super);
        function UnitDetailsCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return UnitDetailsCellComponent;
    }(CellComponent));
    UnitDetailsCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitDetailsCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitDetailsCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitDetailsCellComponent, selector: "cx-org-unit-details-cell", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #details>\n  <div class=\"popover-details\">\n    <div class=\"property\">\n      <label>{{ 'orgUnit.name' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: { uid: model.id }\n          } | cxUrl\n        \"\n      >\n        {{ model.name }}\n      </a>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUnit.uid' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.id }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUnit.active' | cxTranslate }}</label>\n      <span class=\"value\" [class.is-active]=\"model.active\">\n        {{\n          (model.active ? 'organization.enabled' : 'organization.disabled')\n            | cxTranslate\n        }}\n      </span>\n    </div>\n\n    <div class=\"property\" *ngIf=\"model.approvalProcess?.name\">\n      <label>{{ 'orgUnit.approvalProcess' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.approvalProcess?.name }}\n      </span>\n    </div>\n  </div>\n</ng-template>\n\n<button\n  class=\"button text\"\n  [cxPopover]=\"details\"\n  [cxPopoverOptions]=\"{\n    placement: 'auto',\n    class: 'my-company-popover',\n    appendToBody: true,\n    displayCloseButton: true\n  }\"\n>\n  {{ model.name }}\n</button>\n", directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.PopoverDirective, selector: "[cxPopover]", inputs: ["cxPopover", "cxPopoverOptions"], outputs: ["openPopover", "closePopover"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitDetailsCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-details-cell',
                        templateUrl: './unit-details-cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var CurrentUnitChildService = /** @class */ (function (_super) {
        __extends(CurrentUnitChildService, _super);
        function CurrentUnitChildService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CurrentUnitChildService.prototype.getParamKey = function () {
            // We must come up with a fake param key, to avoid that the (parent) unit
            // code is loaded from the route parameter map.
            return 'childUnitCode';
        };
        return CurrentUnitChildService;
    }(CurrentUnitService));
    CurrentUnitChildService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUnitChildService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CurrentUnitChildService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUnitChildService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUnitChildService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UnitChildItemService = /** @class */ (function (_super) {
        __extends(UnitChildItemService, _super);
        function UnitChildItemService(currentItemService, routingService, formService, unitService) {
            var _this = _super.call(this, currentItemService, routingService, formService, unitService) || this;
            _this.currentItemService = currentItemService;
            _this.routingService = routingService;
            _this.formService = formService;
            _this.unitService = unitService;
            return _this;
        }
        UnitChildItemService.prototype.save = function (form, key) {
            var _a;
            // we enable the parentOrgUnit temporarily so that the underlying
            // save method can read the complete form.value.
            (_a = form.get('parentOrgUnit')) === null || _a === void 0 ? void 0 : _a.enable();
            return _super.prototype.save.call(this, form, key);
        };
        /**
         * @override
         * Returns 'unitDetails'
         */
        UnitChildItemService.prototype.getDetailsRoute = function () {
            return 'orgUnitChildren';
        };
        UnitChildItemService.prototype.buildRouteParams = function (item) {
            return { uid: item.parentOrgUnit.uid };
        };
        return UnitChildItemService;
    }(UnitItemService));
    UnitChildItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildItemService, deps: [{ token: CurrentUnitChildService }, { token: i3__namespace.RoutingService }, { token: UnitFormService }, { token: i2__namespace$1.OrgUnitService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitChildItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildItemService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildItemService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUnitChildService }, { type: i3__namespace.RoutingService }, { type: UnitFormService }, { type: i2__namespace$1.OrgUnitService }]; } });

    var UnitChildCreateComponent = /** @class */ (function () {
        function UnitChildCreateComponent(unitService) {
            this.unitService = unitService;
            this.unitKey$ = this.unitService.key$;
        }
        return UnitChildCreateComponent;
    }());
    UnitChildCreateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildCreateComponent, deps: [{ token: CurrentUnitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitChildCreateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitChildCreateComponent, selector: "cx-org-unit-child-create", host: { classAttribute: "content-wrapper" }, providers: [
            // we provide a specific version of the `UnitItemService` to
            // let the form component work with child units.
            {
                provide: UnitItemService,
                useExisting: UnitChildItemService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-unit-form\n  [createChildUnit]=\"true\"\n  i18nRoot=\"orgUnit.children\"\n></cx-org-unit-form>\n", components: [{ type: UnitFormComponent, selector: "cx-org-unit-form", inputs: ["i18nRoot", "createChildUnit"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildCreateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-child-create',
                        templateUrl: './unit-child-create.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            // we provide a specific version of the `UnitItemService` to
                            // let the form component work with child units.
                            {
                                provide: UnitItemService,
                                useExisting: UnitChildItemService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUnitService }]; } });

    var UnitChildCreateModule = /** @class */ (function () {
        function UnitChildCreateModule() {
        }
        return UnitChildCreateModule;
    }());
    UnitChildCreateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildCreateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitChildCreateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildCreateModule, declarations: [UnitChildCreateComponent], imports: [i5.CommonModule, UnitFormModule] });
    UnitChildCreateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildCreateModule, imports: [[i5.CommonModule, UnitFormModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitChildCreateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, UnitFormModule],
                        declarations: [UnitChildCreateComponent],
                    }]
            }] });

    var UnitCostCenterItemService = /** @class */ (function (_super) {
        __extends(UnitCostCenterItemService, _super);
        function UnitCostCenterItemService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UnitCostCenterItemService.prototype.save = function (form, key) {
            // we enable the unit so that the underlying
            // save method can read the complete form.value.
            form.get('unit').enable();
            return _super.prototype.save.call(this, form, key);
        };
        /**
         * @override
         * Returns 'orgUnitCostCenters'
         */
        UnitCostCenterItemService.prototype.getDetailsRoute = function () {
            return 'orgUnitCostCenters';
        };
        UnitCostCenterItemService.prototype.buildRouteParams = function (item) {
            return { uid: item.unit.uid };
        };
        return UnitCostCenterItemService;
    }(CostCenterItemService));
    UnitCostCenterItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterItemService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitCostCenterItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterItemService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterItemService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UnitCostCenterCreateComponent = /** @class */ (function () {
        function UnitCostCenterCreateComponent(unitService) {
            this.unitService = unitService;
            this.unitKey$ = this.unitService.key$;
        }
        return UnitCostCenterCreateComponent;
    }());
    UnitCostCenterCreateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterCreateComponent, deps: [{ token: CurrentUnitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitCostCenterCreateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitCostCenterCreateComponent, selector: "cx-org-unit-cost-center-create", host: { classAttribute: "content-wrapper" }, providers: [
            // we provide a specific version of the `CostCenterItemService` to
            // let the form component work with unit cost centers.
            {
                provide: CostCenterItemService,
                useExisting: UnitCostCenterItemService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-cost-center-form [unitKey]=\"unitKey$ | async\"></cx-org-cost-center-form>\n", components: [{ type: CostCenterFormComponent, selector: "cx-org-cost-center-form", inputs: ["unitKey"] }], pipes: { "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterCreateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-cost-center-create',
                        templateUrl: './unit-cost-center-create.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            // we provide a specific version of the `CostCenterItemService` to
                            // let the form component work with unit cost centers.
                            {
                                provide: CostCenterItemService,
                                useExisting: UnitCostCenterItemService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUnitService }]; } });

    var UnitCostCenterCreateModule = /** @class */ (function () {
        function UnitCostCenterCreateModule() {
        }
        return UnitCostCenterCreateModule;
    }());
    UnitCostCenterCreateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterCreateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitCostCenterCreateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterCreateModule, declarations: [UnitCostCenterCreateComponent], imports: [i5.CommonModule, CostCenterFormModule] });
    UnitCostCenterCreateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterCreateModule, imports: [[i5.CommonModule, CostCenterFormModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitCostCenterCreateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, CostCenterFormModule],
                        declarations: [UnitCostCenterCreateComponent],
                    }]
            }] });

    var UnitUserItemService = /** @class */ (function (_super) {
        __extends(UnitUserItemService, _super);
        function UnitUserItemService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UnitUserItemService.prototype.save = function (form, key) {
            var _a;
            // we enable the orgUnit temporarily so that the underlying
            // save method can read the complete form.value.
            (_a = form.get('orgUnit')) === null || _a === void 0 ? void 0 : _a.enable();
            return _super.prototype.save.call(this, form, key);
        };
        /**
         * @override
         * Returns 'unitDetails'
         */
        UnitUserItemService.prototype.getDetailsRoute = function () {
            return 'orgUnitUserList';
        };
        UnitUserItemService.prototype.buildRouteParams = function (item) {
            return { uid: item.orgUnit.uid };
        };
        // @override to default method
        UnitUserItemService.prototype.launchDetails = function (item) {
            var cxRoute = this.getDetailsRoute();
            var params = this.buildRouteParams(item);
            if (cxRoute && item && Object.keys(item).length > 0) {
                this.routingService.go({ cxRoute: cxRoute, params: params });
            }
        };
        return UnitUserItemService;
    }(UserItemService));
    UnitUserItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserItemService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitUserItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserItemService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserItemService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UserFormComponent = /** @class */ (function () {
        function UserFormComponent(itemService, unitService, userService, b2bUserService) {
            var _this = this;
            this.itemService = itemService;
            this.unitService = unitService;
            this.userService = userService;
            this.b2bUserService = b2bUserService;
            this.form = this.itemService.getForm();
            this.units$ = this.unitService.getActiveUnitList().pipe(operators.tap(function (units) {
                var _a, _b;
                if (units.length === 1) {
                    (_a = _this.form) === null || _a === void 0 ? void 0 : _a.get('orgUnit.uid').setValue((_b = units[0]) === null || _b === void 0 ? void 0 : _b.id);
                }
            }));
            this.titles$ = this.userService.getTitles();
            this.availableRoles = this.b2bUserService.getAllRoles();
        }
        Object.defineProperty(UserFormComponent.prototype, "unitKey", {
            /**
             * Initialize the business unit for the user.
             *
             * If there's a unit provided, we disable the unit form control.
             */
            set: function (value) {
                var _a, _b, _c;
                if (value) {
                    (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('orgUnit.uid').setValue(value);
                    (_c = (_b = this.form) === null || _b === void 0 ? void 0 : _b.get('orgUnit')) === null || _c === void 0 ? void 0 : _c.disable();
                }
            },
            enumerable: false,
            configurable: true
        });
        UserFormComponent.prototype.ngOnInit = function () {
            this.unitService.loadList();
        };
        UserFormComponent.prototype.updateRoles = function (event) {
            var _d = event.target, checked = _d.checked, value = _d.value;
            if (checked) {
                this.roles.push(new i8.FormControl(value));
            }
            else {
                this.roles.removeAt(this.roles.value.indexOf(value));
            }
        };
        Object.defineProperty(UserFormComponent.prototype, "roles", {
            get: function () {
                return this.form.get('roles');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UserFormComponent.prototype, "isAssignedToApprovers", {
            get: function () {
                return this.form.get('isAssignedToApprovers');
            },
            enumerable: false,
            configurable: true
        });
        return UserFormComponent;
    }());
    UserFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserFormComponent, deps: [{ token: ItemService }, { token: i2__namespace$1.OrgUnitService }, { token: i3__namespace.UserService }, { token: i2__namespace$1.B2BUserService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserFormComponent, selector: "cx-org-user-form", inputs: { unitKey: "unitKey" }, host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: UserItemService,
            },
            {
                provide: CurrentItemService,
                useExisting: CurrentUserService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-form i18nRoot=\"orgUser\">\n  <ng-container main *ngIf=\"form\" [formGroup]=\"form\">\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUser.title' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"titleCode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"titles$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgUser.title' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('titleCode')\"></cx-form-errors>\n    </label>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUser.firstName' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgUser.firstName' | cxTranslate }}\"\n        formControlName=\"firstName\"\n      />\n      <cx-form-errors [control]=\"form.get('firstName')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUser.lastName' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgUser.lastName' | cxTranslate }}\"\n        formControlName=\"lastName\"\n      />\n      <cx-form-errors [control]=\"form.get('lastName')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUser.email' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"email\"\n        required\n        placeholder=\"{{ 'orgUser.email' | cxTranslate }}\"\n        formControlName=\"email\"\n      />\n      <cx-form-errors [control]=\"form.get('email')\"></cx-form-errors>\n    </label>\n\n    <fieldset aria-required=\"true\" class=\"full-width\" formArrayName=\"roles\">\n      <legend class=\"label-content required\">\n        {{ 'orgUser.roles' | cxTranslate }}\n      </legend>\n\n      <label\n        class=\"form-check\"\n        *ngFor=\"let role of availableRoles; let i = index\"\n      >\n        <input\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          [value]=\"role\"\n          [checked]=\"roles?.value?.includes(role)\"\n          (change)=\"updateRoles($event)\"\n          [disabled]=\"form?.status === 'DISABLED'\"\n        />\n        <span class=\"form-check-label\">\n          {{ 'organization.userRoles.' + role | cxTranslate }}\n        </span>\n      </label>\n    </fieldset>\n\n    <label aria-required=\"true\" [formGroup]=\"form.get('orgUnit')\">\n      <span class=\"label-content required\">{{\n        'orgUser.orgUnit' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"units$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgUser.orgUnit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('orgUnit.uid')\"></cx-form-errors>\n    </label>\n\n    <div *ngIf=\"isAssignedToApprovers\" class=\"full-width\">\n      <label class=\"form-check\">\n        <input\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          formControlName=\"isAssignedToApprovers\"\n        />\n        <span class=\"form-check-label\">{{\n          'orgUser.assignApprover' | cxTranslate\n        }}</span>\n      </label>\n    </div>\n  </ng-container>\n</cx-org-form>\n", components: [{ type: FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { type: i5__namespace$1.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { type: i1__namespace.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8__namespace.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i5__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-form',
                        templateUrl: './user-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: UserItemService,
                            },
                            {
                                provide: CurrentItemService,
                                useExisting: CurrentUserService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: i2__namespace$1.OrgUnitService }, { type: i3__namespace.UserService }, { type: i2__namespace$1.B2BUserService }]; }, propDecorators: { unitKey: [{
                    type: i0.Input
                }] } });

    var UnitUserCreateComponent = /** @class */ (function () {
        function UnitUserCreateComponent(unitService) {
            this.unitService = unitService;
            this.unitKey$ = this.unitService.key$;
        }
        return UnitUserCreateComponent;
    }());
    UnitUserCreateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserCreateComponent, deps: [{ token: CurrentUnitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnitUserCreateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UnitUserCreateComponent, selector: "cx-org-unit-user-create", host: { classAttribute: "content-wrapper" }, providers: [
            // we provide a specific version of the `UnitItemService` to
            // let the form component work with child units.
            {
                provide: UserItemService,
                useExisting: UnitUserItemService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-user-form\n  [unitKey]=\"unitKey$ | async\"\n  i18nRoot=\"orgUnit.users\"\n></cx-org-user-form>\n", components: [{ type: UserFormComponent, selector: "cx-org-user-form", inputs: ["unitKey"] }], pipes: { "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserCreateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-unit-user-create',
                        templateUrl: './unit-user-create.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            // we provide a specific version of the `UnitItemService` to
                            // let the form component work with child units.
                            {
                                provide: UserItemService,
                                useExisting: UnitUserItemService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUnitService }]; } });

    var UserFormModule = /** @class */ (function () {
        function UserFormModule() {
        }
        return UserFormModule;
    }());
    UserFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserFormModule, declarations: [UserFormComponent], imports: [i5.CommonModule,
            i2.RouterModule,
            FormModule,
            i5$1.NgSelectModule,
            i3.UrlModule,
            i3.I18nModule,
            i8.ReactiveFormsModule,
            i1.FormErrorsModule], exports: [UserFormComponent] });
    UserFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserFormModule, imports: [[
                i5.CommonModule,
                i2.RouterModule,
                FormModule,
                i5$1.NgSelectModule,
                i3.UrlModule,
                i3.I18nModule,
                i8.ReactiveFormsModule,
                i1.FormErrorsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i2.RouterModule,
                            FormModule,
                            i5$1.NgSelectModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            i8.ReactiveFormsModule,
                            i1.FormErrorsModule,
                        ],
                        declarations: [UserFormComponent],
                        exports: [UserFormComponent],
                    }]
            }] });

    var UnitUserCreateModule = /** @class */ (function () {
        function UnitUserCreateModule() {
        }
        return UnitUserCreateModule;
    }());
    UnitUserCreateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserCreateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitUserCreateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserCreateModule, declarations: [UnitUserCreateComponent], imports: [i5.CommonModule, UserFormModule] });
    UnitUserCreateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserCreateModule, imports: [[i5.CommonModule, UserFormModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitUserCreateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, UserFormModule],
                        declarations: [UnitUserCreateComponent],
                    }]
            }] });

    var UnitAddressRoutePageMetaResolver = /** @class */ (function (_super) {
        __extends(UnitAddressRoutePageMetaResolver, _super);
        function UnitAddressRoutePageMetaResolver(translation, currentItemService) {
            var _this = _super.call(this, translation) || this;
            _this.currentItemService = currentItemService;
            return _this;
        }
        UnitAddressRoutePageMetaResolver.prototype.getParams = function () {
            return this.currentItemService.item$;
        };
        return UnitAddressRoutePageMetaResolver;
    }(i3.DefaultRoutePageMetaResolver));
    UnitAddressRoutePageMetaResolver.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressRoutePageMetaResolver, deps: [{ token: i3__namespace.TranslationService }, { token: CurrentUnitAddressService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitAddressRoutePageMetaResolver.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressRoutePageMetaResolver, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitAddressRoutePageMetaResolver, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i3__namespace.TranslationService }, { type: CurrentUnitAddressService }]; } });

    /**
     * Service to populate Unit data to `Table` data. Unit
     * data is driven by the table configuration, using the `OrganizationTables.UNIT`.
     */
    var UnitListService = /** @class */ (function (_super) {
        __extends(UnitListService, _super);
        function UnitListService(tableService, unitService, unitItemService, unitTreeService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.unitService = unitService;
            _this.unitItemService = unitItemService;
            _this.unitTreeService = unitTreeService;
            _this.tableType = exports.OrganizationTableType.UNIT;
            return _this;
        }
        UnitListService.prototype.load = function () {
            var _this = this;
            return this.unitService.getTree().pipe(operators.switchMap(function (node) { return _this.unitItemService.key$.pipe(operators.map(function (key) {
                _this.unitTreeService.initialize(node, key);
                return node;
            })); }), operators.switchMap(function (tree) { return _this.unitTreeService.treeToggle$.pipe(operators.map(function () { return tree; })); }), operators.map(function (tree) { return _this.convertListItem(tree); }));
        };
        UnitListService.prototype.convertListItem = function (unit, depthLevel, pagination) {
            var _this = this;
            if (depthLevel === void 0) { depthLevel = 0; }
            if (pagination === void 0) { pagination = { totalResults: 0 }; }
            var _a, _b;
            var values = [];
            if (!unit) {
                return;
            }
            var node = Object.assign(Object.assign({}, unit), { count: (_b = (_a = unit.children) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0, expanded: this.unitTreeService.isExpanded(unit.id, depthLevel), depthLevel: depthLevel, 
                // tmp, should be normalized
                uid: unit.id, children: __spreadArray([], __read(unit.children)).sort(function (unitA, unitB) { return unitA.name.localeCompare(unitB.name); }) });
            values.push(node);
            pagination.totalResults++;
            node.children.forEach(function (childUnit) {
                var _a;
                var childList = (_a = _this.convertListItem(childUnit, depthLevel + 1, pagination)) === null || _a === void 0 ? void 0 : _a.values;
                if (node.expanded && childList.length > 0) {
                    values = values.concat(childList);
                }
            });
            return { values: values, pagination: pagination };
        };
        UnitListService.prototype.key = function () {
            return 'uid';
        };
        return UnitListService;
    }(ListService));
    UnitListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.OrgUnitService }, { token: UnitItemService }, { token: UnitTreeService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.OrgUnitService }, { type: UnitItemService }, { type: UnitTreeService }]; } });

    var UnitRoutePageMetaResolver = /** @class */ (function (_super) {
        __extends(UnitRoutePageMetaResolver, _super);
        function UnitRoutePageMetaResolver(translation, currentItemService) {
            var _this = _super.call(this, translation) || this;
            _this.currentItemService = currentItemService;
            return _this;
        }
        UnitRoutePageMetaResolver.prototype.getParams = function () {
            return this.currentItemService.item$;
        };
        return UnitRoutePageMetaResolver;
    }(i3.DefaultRoutePageMetaResolver));
    UnitRoutePageMetaResolver.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitRoutePageMetaResolver, deps: [{ token: i3__namespace.TranslationService }, { token: CurrentUnitService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UnitRoutePageMetaResolver.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitRoutePageMetaResolver, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitRoutePageMetaResolver, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i3__namespace.TranslationService }, { type: CurrentUnitService }]; } });

    var _a$2, _b;
    var unitsCmsConfig = {
        cmsComponents: {
            ManageUnitsListComponent: {
                component: UnitListComponent,
                providers: [
                    {
                        provide: ListService,
                        useExisting: UnitListService,
                    },
                    {
                        provide: ItemService,
                        useExisting: UnitItemService,
                    },
                ],
                childRoutes: {
                    parent: {
                        data: {
                            cxPageMeta: {
                                breadcrumb: 'orgUnit.breadcrumbs.list',
                                resolver: UnitRoutePageMetaResolver,
                            },
                        },
                    },
                    children: [
                        {
                            path: 'create',
                            component: UnitFormComponent,
                        },
                        {
                            path: ":" + root.ROUTE_PARAMS.unitCode,
                            component: UnitDetailsComponent,
                            data: {
                                cxPageMeta: { breadcrumb: 'orgUnit.breadcrumbs.details' },
                            },
                            children: [
                                {
                                    path: 'edit',
                                    component: UnitFormComponent,
                                },
                                {
                                    path: 'children',
                                    component: UnitChildrenComponent,
                                    data: {
                                        cxPageMeta: { breadcrumb: 'orgUnit.breadcrumbs.children' },
                                    },
                                    children: [
                                        {
                                            path: 'create',
                                            component: UnitChildCreateComponent,
                                        },
                                    ],
                                },
                                {
                                    path: 'approvers',
                                    data: {
                                        cxPageMeta: { breadcrumb: 'orgUnit.breadcrumbs.approvers' },
                                    },
                                    children: [
                                        {
                                            path: '',
                                            component: UnitAssignedApproverListComponent,
                                        },
                                        {
                                            path: 'assign',
                                            component: UnitApproverListComponent,
                                        },
                                    ],
                                },
                                {
                                    path: 'users',
                                    component: UnitUserListComponent,
                                    data: {
                                        cxPageMeta: { breadcrumb: 'orgUnit.breadcrumbs.users' },
                                    },
                                    children: [
                                        {
                                            path: 'create',
                                            component: UnitUserCreateComponent,
                                        },
                                        {
                                            path: ":" + root.ROUTE_PARAMS.userCode + "/roles",
                                            component: UnitUserRolesFormComponent,
                                        },
                                    ],
                                },
                                {
                                    path: 'cost-centers',
                                    component: UnitCostCenterListComponent,
                                    data: {
                                        cxPageMeta: { breadcrumb: 'orgUnit.breadcrumbs.costCenters' },
                                    },
                                    children: [
                                        {
                                            path: 'create',
                                            component: UnitCostCenterCreateComponent,
                                        },
                                    ],
                                },
                                {
                                    path: 'addresses',
                                    component: UnitAddressListComponent,
                                    data: {
                                        cxPageMeta: {
                                            breadcrumb: 'orgUnit.breadcrumbs.addresses',
                                            resolver: UnitAddressRoutePageMetaResolver,
                                        },
                                    },
                                    children: [
                                        {
                                            path: 'create',
                                            component: UnitAddressFormComponent,
                                        },
                                        {
                                            path: ":" + root.ROUTE_PARAMS.addressCode,
                                            data: {
                                                cxPageMeta: {
                                                    breadcrumb: 'orgUnit.breadcrumbs.addressDetails',
                                                },
                                            },
                                            children: [
                                                {
                                                    path: '',
                                                    component: UnitAddressDetailsComponent,
                                                },
                                                {
                                                    path: 'edit',
                                                    component: UnitAddressFormComponent,
                                                },
                                            ],
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                guards: [i3.AuthGuard, i2$1.AdminGuard],
            },
        },
    };
    function unitsTableConfigFactory() {
        return unitsTableConfig;
    }
    var unitsTableConfig = {
        table: (_a$2 = {},
            _a$2[exports.OrganizationTableType.UNIT] = (_b = {
                    cells: ['name'],
                    options: {
                        layout: i1.TableLayout.VERTICAL,
                        cells: {
                            name: {
                                dataComponent: ToggleLinkCellComponent,
                            },
                            active: {
                                dataComponent: StatusCellComponent,
                            },
                            uid: {
                                dataComponent: CellComponent,
                            },
                        },
                    }
                },
                _b[i1.BREAKPOINT.lg] = {
                    cells: ['name', 'active', 'uid'],
                },
                _b),
            _a$2[exports.OrganizationTableType.UNIT_USERS] = {
                cells: ['name', 'roles'],
                options: {
                    pagination: {
                        pageSize: MAX_OCC_INTEGER_VALUE,
                    },
                    cells: {
                        name: {
                            dataComponent: UserDetailsCellComponent,
                        },
                        roles: {
                            dataComponent: UnitUserRolesCellComponent,
                        },
                    },
                },
            },
            _a$2[exports.OrganizationTableType.UNIT_CHILDREN] = {
                cells: ['name', 'active'],
                options: {
                    pagination: {
                        pageSize: MAX_OCC_INTEGER_VALUE,
                    },
                    cells: {
                        name: {
                            dataComponent: UnitDetailsCellComponent,
                        },
                        active: {
                            dataComponent: StatusCellComponent,
                            linkable: false,
                        },
                    },
                },
            },
            _a$2[exports.OrganizationTableType.UNIT_APPROVERS] = {
                cells: ['name', 'orgUnit', 'actions'],
                options: {
                    cells: {
                        name: {
                            dataComponent: UserDetailsCellComponent,
                        },
                        actions: {
                            dataComponent: AssignCellComponent,
                        },
                        orgUnit: {
                            dataComponent: UnitCellComponent,
                            linkable: false,
                        },
                    },
                },
            },
            _a$2[exports.OrganizationTableType.UNIT_ASSIGNED_APPROVERS] = {
                cells: ['name', 'orgUnit', 'actions'],
                options: {
                    pagination: {
                        pageSize: MAX_OCC_INTEGER_VALUE,
                    },
                    cells: {
                        name: {
                            dataComponent: UserDetailsCellComponent,
                        },
                        actions: {
                            dataComponent: AssignCellComponent,
                        },
                        orgUnit: {
                            dataComponent: UnitCellComponent,
                            linkable: false,
                        },
                    },
                },
            },
            _a$2[exports.OrganizationTableType.UNIT_COST_CENTERS] = {
                cells: ['name'],
                options: {
                    cells: {
                        name: {
                            dataComponent: CostCenterDetailsCellComponent,
                        },
                    },
                    pagination: {
                        pageSize: MAX_OCC_INTEGER_VALUE,
                    },
                },
            },
            _a$2[exports.OrganizationTableType.UNIT_ADDRESS] = {
                cells: ['formattedAddress'],
                options: {
                    pagination: {
                        pageSize: MAX_OCC_INTEGER_VALUE,
                    },
                    cells: {
                        formattedAddress: {
                            dataComponent: LinkCellComponent,
                        },
                    },
                },
            },
            _a$2),
    };

    var UnitsComponentsModule = /** @class */ (function () {
        function UnitsComponentsModule() {
        }
        return UnitsComponentsModule;
    }());
    UnitsComponentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitsComponentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitsComponentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitsComponentsModule, imports: [i2.RouterModule,
            UnitListModule,
            UnitDetailsModule,
            UnitFormModule,
            UnitChildrenModule,
            UnitApproverListModule,
            UnitUsersModule,
            UnitCostCenterListModule,
            UnitAddressModule] });
    UnitsComponentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitsComponentsModule, providers: [
            i3.provideDefaultConfig(unitsCmsConfig),
            i3.provideDefaultConfigFactory(unitsTableConfigFactory),
        ], imports: [[
                i2.RouterModule,
                UnitListModule,
                UnitDetailsModule,
                UnitFormModule,
                UnitChildrenModule,
                UnitApproverListModule,
                UnitUsersModule,
                UnitCostCenterListModule,
                UnitAddressModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitsComponentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i2.RouterModule,
                            UnitListModule,
                            UnitDetailsModule,
                            UnitFormModule,
                            UnitChildrenModule,
                            UnitApproverListModule,
                            UnitUsersModule,
                            UnitCostCenterListModule,
                            UnitAddressModule,
                        ],
                        providers: [
                            i3.provideDefaultConfig(unitsCmsConfig),
                            i3.provideDefaultConfigFactory(unitsTableConfigFactory),
                        ],
                    }]
            }] });

    var CurrentUserGroupService = /** @class */ (function (_super) {
        __extends(CurrentUserGroupService, _super);
        function CurrentUserGroupService(routingService, userGroupService) {
            var _this = _super.call(this, routingService) || this;
            _this.routingService = routingService;
            _this.userGroupService = userGroupService;
            return _this;
        }
        CurrentUserGroupService.prototype.getParamKey = function () {
            return root.ROUTE_PARAMS.userGroupCode;
        };
        CurrentUserGroupService.prototype.getItem = function (code) {
            return this.userGroupService.get(code);
        };
        CurrentUserGroupService.prototype.getError = function (code) {
            return this.userGroupService.getErrorState(code);
        };
        return CurrentUserGroupService;
    }(CurrentItemService));
    CurrentUserGroupService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUserGroupService, deps: [{ token: i3__namespace.RoutingService }, { token: i2__namespace$1.UserGroupService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CurrentUserGroupService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUserGroupService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CurrentUserGroupService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.RoutingService }, { type: i2__namespace$1.UserGroupService }]; } });

    var UserGroupFormService = /** @class */ (function (_super) {
        __extends(UserGroupFormService, _super);
        function UserGroupFormService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UserGroupFormService.prototype.build = function () {
            var form = new i8.FormGroup({});
            form.setControl('uid', new i8.FormControl('', [
                i8.Validators.required,
                i1.CustomFormValidators.noSpecialCharacters,
            ]));
            form.setControl('name', new i8.FormControl('', i8.Validators.required));
            form.setControl('orgUnit', new i8.FormGroup({
                uid: new i8.FormControl(undefined, i8.Validators.required),
            }));
            this.form = form;
        };
        return UserGroupFormService;
    }(FormService));
    UserGroupFormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupFormService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserGroupFormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupFormService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupFormService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UserGroupItemService = /** @class */ (function (_super) {
        __extends(UserGroupItemService, _super);
        function UserGroupItemService(currentItemService, routingService, formService, userGroupService) {
            var _this = _super.call(this, currentItemService, routingService, formService) || this;
            _this.currentItemService = currentItemService;
            _this.routingService = routingService;
            _this.formService = formService;
            _this.userGroupService = userGroupService;
            return _this;
        }
        UserGroupItemService.prototype.load = function (code) {
            this.userGroupService.load(code);
            return this.userGroupService.get(code);
        };
        UserGroupItemService.prototype.update = function (code, value) {
            this.userGroupService.update(code, value);
            return this.userGroupService.getLoadingStatus(value.uid);
        };
        UserGroupItemService.prototype.delete = function (code) {
            this.launchList();
            this.userGroupService.delete(code);
            return this.userGroupService.getLoadingStatus(code);
        };
        UserGroupItemService.prototype.create = function (value) {
            this.userGroupService.create(value);
            return this.userGroupService.getLoadingStatus(value.uid);
        };
        UserGroupItemService.prototype.getDetailsRoute = function () {
            return 'orgUserGroupDetails';
        };
        UserGroupItemService.prototype.launchList = function () {
            this.routingService.go({
                cxRoute: 'orgUserGroup',
            });
        };
        return UserGroupItemService;
    }(ItemService));
    UserGroupItemService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupItemService, deps: [{ token: CurrentUserGroupService }, { token: i3__namespace.RoutingService }, { token: UserGroupFormService }, { token: i2__namespace$1.UserGroupService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserGroupItemService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupItemService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupItemService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUserGroupService }, { type: i3__namespace.RoutingService }, { type: UserGroupFormService }, { type: i2__namespace$1.UserGroupService }]; } });

    var UserGroupDetailsComponent = /** @class */ (function () {
        function UserGroupDetailsComponent(itemService) {
            var _this = this;
            this.itemService = itemService;
            this.model$ = this.itemService.key$.pipe(operators.switchMap(function (code) { return _this.itemService.load(code); }), operators.startWith({}));
            this.isInEditMode$ = this.itemService.isInEditMode$;
        }
        return UserGroupDetailsComponent;
    }());
    UserGroupDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupDetailsComponent, deps: [{ token: ItemService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserGroupDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserGroupDetailsComponent, selector: "cx-org-user-group-details", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: UserGroupItemService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-card\n  *ngIf=\"model$ | async as model\"\n  i18nRoot=\"orgUserGroup.details\"\n  [cxFocus]=\"{ refreshFocus: model }\"\n>\n  <a\n    actions\n    class=\"link edit\"\n    [routerLink]=\"{ cxRoute: 'orgUserGroupEdit', params: model } | cxUrl\"\n    [class.disabled]=\"isInEditMode$ | async\"\n  >\n    {{ 'organization.edit' | cxTranslate }}\n  </a>\n\n  <cx-org-delete-item\n    actions\n    key=\"uid\"\n    i18nRoot=\"orgUserGroup\"\n  ></cx-org-delete-item>\n\n  <section main class=\"details\" cxOrgItemExists>\n    <div class=\"property\">\n      <label>{{ 'orgUserGroup.name' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.name }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUserGroup.uid' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.uid }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUserGroup.orgUnit' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.orgUnit\n          } | cxUrl\n        \"\n      >\n        {{ model.orgUnit?.name }}\n      </a>\n    </div>\n  </section>\n\n  <section main class=\"link-list\">\n    <ng-container *ngIf=\"model.uid\">\n      <a\n        class=\"link\"\n        [routerLink]=\"{ cxRoute: 'orgUserGroupUsers', params: model } | cxUrl\"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUserGroup.links.user' | cxTranslate }}\n      </a>\n      <a\n        class=\"link\"\n        [routerLink]=\"\n          { cxRoute: 'orgUserGroupPermissions', params: model } | cxUrl\n        \"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUserGroup.links.permission' | cxTranslate }}\n      </a>\n    </ng-container>\n  </section>\n</cx-org-card>\n", components: [{ type: CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: DeleteItemComponent, selector: "cx-org-delete-item", inputs: ["i18nRoot", "key", "additionalParam"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: ItemExistsDirective, selector: "[cxOrgItemExists]" }, { type: i2__namespace.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxUrl": i3__namespace.UrlPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-group-details',
                        templateUrl: './user-group-details.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: UserGroupItemService,
                            },
                        ],
                        host: { class: 'content-wrapper' },
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }]; } });

    var UserGroupDetailsModule = /** @class */ (function () {
        function UserGroupDetailsModule() {
        }
        return UserGroupDetailsModule;
    }());
    UserGroupDetailsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupDetailsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserGroupDetailsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupDetailsModule, declarations: [UserGroupDetailsComponent], imports: [i5.CommonModule,
            CardModule,
            i2.RouterModule,
            i3.UrlModule,
            i3.I18nModule,
            DeleteItemModule,
            ItemExistsModule,
            i1.KeyboardFocusModule] });
    UserGroupDetailsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupDetailsModule, imports: [[
                i5.CommonModule,
                CardModule,
                i2.RouterModule,
                i3.UrlModule,
                i3.I18nModule,
                DeleteItemModule,
                ItemExistsModule,
                i1.KeyboardFocusModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupDetailsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            CardModule,
                            i2.RouterModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            DeleteItemModule,
                            ItemExistsModule,
                            i1.KeyboardFocusModule,
                        ],
                        declarations: [UserGroupDetailsComponent],
                    }]
            }] });

    var UserGroupFormComponent = /** @class */ (function () {
        function UserGroupFormComponent(itemService, unitService) {
            var _this = this;
            this.itemService = itemService;
            this.unitService = unitService;
            this.form = this.itemService.getForm();
            // getList ???
            this.units$ = this.unitService.getActiveUnitList().pipe(operators.tap(function (units) {
                var _a, _b, _c;
                if (units.length === 1) {
                    (_b = (_a = _this.form) === null || _a === void 0 ? void 0 : _a.get('orgUnit.uid')) === null || _b === void 0 ? void 0 : _b.setValue((_c = units[0]) === null || _c === void 0 ? void 0 : _c.id);
                }
            }));
        }
        UserGroupFormComponent.prototype.ngOnInit = function () {
            this.unitService.loadList();
        };
        UserGroupFormComponent.prototype.createUidWithName = function (name, code) {
            createCodeForEntityName(name, code);
        };
        return UserGroupFormComponent;
    }());
    UserGroupFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupFormComponent, deps: [{ token: ItemService }, { token: i2__namespace$1.OrgUnitService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserGroupFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserGroupFormComponent, selector: "cx-org-user-group-form", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: UserGroupItemService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-form i18nRoot=\"orgUserGroup\">\n  <ng-container *ngIf=\"form\" [formGroup]=\"form\" main>\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUserGroup.name' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        required\n        placeholder=\"{{ 'orgUserGroup.name' | cxTranslate }}\"\n        formControlName=\"name\"\n        (blur)=\"createUidWithName(form.get('name'), form.get('uid'))\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'orgUserGroup.uid' | cxTranslate\n      }}</span>\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        required\n        placeholder=\"{{ 'orgUserGroup.uid' | cxTranslate }}\"\n        formControlName=\"uid\"\n      />\n      <cx-form-errors [control]=\"form.get('uid')\"></cx-form-errors>\n    </label>\n\n    <label aria-required=\"true\" [formGroup]=\"form.get('orgUnit')\">\n      <span class=\"label-content required\">{{\n        'orgUserGroup.orgUnit' | cxTranslate\n      }}</span>\n      <ng-select\n        formControlName=\"uid\"\n        [searchable]=\"true\"\n        [clearable]=\"false\"\n        [items]=\"units$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"id\"\n        [readonly]=\"form.get('orgUnit.uid').disabled\"\n        appendTo=\"cx-org-list\"\n        [placeholder]=\"'orgUserGroup.orgUnit' | cxTranslate\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"form.get('orgUnit.uid')\"></cx-form-errors>\n    </label>\n  </ng-container>\n</cx-org-form>\n", components: [{ type: FormComponent, selector: "cx-org-form", inputs: ["i18nRoot", "animateBack", "subtitle"] }, { type: i1__namespace.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { type: i5__namespace$1.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-group-form',
                        templateUrl: './user-group-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: UserGroupItemService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }, { type: i2__namespace$1.OrgUnitService }]; } });

    var UserGroupFormModule = /** @class */ (function () {
        function UserGroupFormModule() {
        }
        return UserGroupFormModule;
    }());
    UserGroupFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserGroupFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupFormModule, declarations: [UserGroupFormComponent], imports: [i5.CommonModule,
            i2.RouterModule,
            i5$1.NgSelectModule,
            i3.UrlModule,
            i3.I18nModule,
            i8.ReactiveFormsModule,
            i1.FormErrorsModule,
            FormModule] });
    UserGroupFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupFormModule, imports: [[
                i5.CommonModule,
                i2.RouterModule,
                i5$1.NgSelectModule,
                i3.UrlModule,
                i3.I18nModule,
                i8.ReactiveFormsModule,
                i1.FormErrorsModule,
                FormModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i2.RouterModule,
                            i5$1.NgSelectModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            i8.ReactiveFormsModule,
                            i1.FormErrorsModule,
                            FormModule,
                        ],
                        declarations: [UserGroupFormComponent],
                    }]
            }] });

    var UserGroupPermissionListService = /** @class */ (function (_super) {
        __extends(UserGroupPermissionListService, _super);
        function UserGroupPermissionListService(tableService, userGroupService, permissionService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.userGroupService = userGroupService;
            _this.permissionService = permissionService;
            _this.tableType = exports.OrganizationTableType.USER_GROUP_PERMISSIONS;
            _this._domainType = exports.OrganizationTableType.PERMISSION;
            return _this;
        }
        /**
         *
         * @override
         * Loads all b2b users.
         *
         * @param code The user group code.
         */
        UserGroupPermissionListService.prototype.load = function (pagination, code) {
            return this.userGroupService.getAvailableOrderApprovalPermissions(code, pagination);
        };
        /**
         * @override
         * Assign user to the user group.
         */
        UserGroupPermissionListService.prototype.assign = function (userGroupCode, permissionCode) {
            this.userGroupService.assignPermission(userGroupCode, permissionCode);
            return this.permissionService.getLoadingStatus(permissionCode);
        };
        /**
         * @override
         * Unassigns the user from the user group.
         */
        UserGroupPermissionListService.prototype.unassign = function (userGroupCode, permissionCode) {
            this.userGroupService.unassignPermission(userGroupCode, permissionCode);
            return this.permissionService.getLoadingStatus(permissionCode);
        };
        return UserGroupPermissionListService;
    }(SubListService));
    UserGroupPermissionListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupPermissionListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.UserGroupService }, { token: i2__namespace$1.PermissionService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserGroupPermissionListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupPermissionListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupPermissionListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.UserGroupService }, { type: i2__namespace$1.PermissionService }]; } });

    var UserGroupAssignedPermissionsListService = /** @class */ (function (_super) {
        __extends(UserGroupAssignedPermissionsListService, _super);
        function UserGroupAssignedPermissionsListService() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.tableType = exports.OrganizationTableType.USER_GROUP_ASSIGNED_PERMISSIONS;
            return _this;
        }
        /**
         * @override
         * Load all b2b users assigned to the given user group
         */
        UserGroupAssignedPermissionsListService.prototype.load = function (pagination, code) {
            var _this = this;
            return _super.prototype.load.call(this, pagination, code)
                .pipe(operators.map(function (users) { return _this.filterSelected(users); }));
        };
        return UserGroupAssignedPermissionsListService;
    }(UserGroupPermissionListService));
    UserGroupAssignedPermissionsListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupAssignedPermissionsListService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserGroupAssignedPermissionsListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupAssignedPermissionsListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupAssignedPermissionsListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UserGroupAssignedPermissionListComponent = /** @class */ (function () {
        function UserGroupAssignedPermissionListComponent() {
        }
        return UserGroupAssignedPermissionListComponent;
    }());
    UserGroupAssignedPermissionListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupAssignedPermissionListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserGroupAssignedPermissionListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserGroupAssignedPermissionListComponent, selector: "cx-org-user-group-assigned-permission-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UserGroupAssignedPermissionsListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list>\n  <a actions class=\"link\" routerLink=\"assign\">\n    {{ 'organization.assign' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupAssignedPermissionListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-group-assigned-permission-list',
                        templateUrl: './user-group-assigned-permission-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UserGroupAssignedPermissionsListService,
                            },
                        ],
                    }]
            }] });

    var UserGroupPermissionListComponent = /** @class */ (function () {
        function UserGroupPermissionListComponent() {
        }
        return UserGroupPermissionListComponent;
    }());
    UserGroupPermissionListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupPermissionListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserGroupPermissionListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserGroupPermissionListComponent, selector: "cx-org-user-group-permission-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UserGroupPermissionListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list [previous]=\"false\">\n  <a actions class=\"link\" routerLink=\"../\">\n    {{ 'organization.done' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupPermissionListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-group-permission-list',
                        templateUrl: './user-group-permission-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UserGroupPermissionListService,
                            },
                        ],
                    }]
            }] });

    var UserGroupPermissionModule = /** @class */ (function () {
        function UserGroupPermissionModule() {
        }
        return UserGroupPermissionModule;
    }());
    UserGroupPermissionModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupPermissionModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserGroupPermissionModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupPermissionModule, declarations: [UserGroupPermissionListComponent,
            UserGroupAssignedPermissionListComponent], imports: [i5.CommonModule, i3.I18nModule, i2.RouterModule, SubListModule] });
    UserGroupPermissionModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupPermissionModule, imports: [[i5.CommonModule, i3.I18nModule, i2.RouterModule, SubListModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupPermissionModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i3.I18nModule, i2.RouterModule, SubListModule],
                        declarations: [
                            UserGroupPermissionListComponent,
                            UserGroupAssignedPermissionListComponent,
                        ],
                    }]
            }] });

    var PermissionDetailsCellComponent = /** @class */ (function (_super) {
        __extends(PermissionDetailsCellComponent, _super);
        function PermissionDetailsCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PermissionDetailsCellComponent;
    }(CellComponent));
    PermissionDetailsCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionDetailsCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    PermissionDetailsCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: PermissionDetailsCellComponent, selector: "cx-org-permission-details-cell", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #details>\n  <div class=\"popover-details\">\n    <div class=\"property\">\n      <label>{{ 'orgPurchaseLimit.code' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgPurchaseLimitDetails',\n            params: model\n          } | cxUrl\n        \"\n      >\n        {{ model.code }}\n      </a>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgPurchaseLimit.active' | cxTranslate }}</label>\n      <span class=\"value\" [class.is-active]=\"model.active\">\n        {{\n          (model.active ? 'organization.enabled' : 'organization.disabled')\n            | cxTranslate\n        }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{\n        'orgPurchaseLimit.orderApprovalPermissionType' | cxTranslate\n      }}</label>\n      <span class=\"value\">\n        {{ model.orderApprovalPermissionType?.name }}\n      </span>\n    </div>\n\n    <div class=\"property\" *ngIf=\"model.threshold || model.threshold === 0\">\n      <label>{{ 'orgPurchaseLimit.threshold' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.threshold }} {{ model.currency?.symbol }}\n      </span>\n    </div>\n\n    <div class=\"property\" *ngIf=\"model.periodRange\">\n      <label>{{ 'orgPurchaseLimit.periodRange' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.periodRange }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgPurchaseLimit.unit' | cxTranslate }}</label>\n      <a\n        *ngIf=\"model.code\"\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.orgUnit\n          } | cxUrl\n        \"\n      >\n        {{ model.orgUnit?.name }}\n      </a>\n    </div>\n  </div>\n</ng-template>\n\n<button\n  class=\"button text\"\n  [cxPopover]=\"details\"\n  [cxPopoverOptions]=\"{\n    placement: 'auto',\n    class: 'my-company-popover',\n    appendToBody: true,\n    displayCloseButton: true\n  }\"\n>\n  {{ model.code }}\n</button>\n", directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.PopoverDirective, selector: "[cxPopover]", inputs: ["cxPopover", "cxPopoverOptions"], outputs: ["openPopover", "closePopover"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionDetailsCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-permission-details-cell',
                        templateUrl: './permission-details-cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    /**
     * Service to populate Cost Center data to `Table` data. The cost center
     * data is driven by the table configuration, using the `OrganizationTables.COST_CENTER`.
     */
    var UserGroupListService = /** @class */ (function (_super) {
        __extends(UserGroupListService, _super);
        function UserGroupListService(tableService, userGroupService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.userGroupService = userGroupService;
            _this.tableType = exports.OrganizationTableType.USER_GROUP;
            return _this;
        }
        UserGroupListService.prototype.key = function () {
            return 'uid';
        };
        UserGroupListService.prototype.load = function (pagination) {
            var _this = this;
            return this.userGroupService.getList(pagination).pipe(operators.filter(function (list) { return Boolean(list); }), operators.map(function (raw) { return _this.convertUserGroups(raw); }));
        };
        /**
         * Populates the cost center data to a convenient table data model, so that we
         * can skip specific conversion in the view logic where possible.
         */
        UserGroupListService.prototype.convertUserGroups = function (_a) {
            var pagination = _a.pagination, sorts = _a.sorts, values = _a.values;
            var userGroupModels = {
                pagination: pagination,
                sorts: sorts,
                values: values.map(function (value) { return (Object.assign(Object.assign({}, value), { unit: value.orgUnit })); }),
            };
            return userGroupModels;
        };
        return UserGroupListService;
    }(ListService));
    UserGroupListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.UserGroupService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserGroupListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.UserGroupService }]; } });

    var UserGroupRoutePageMetaResolver = /** @class */ (function (_super) {
        __extends(UserGroupRoutePageMetaResolver, _super);
        function UserGroupRoutePageMetaResolver(translation, currentItemService) {
            var _this = _super.call(this, translation) || this;
            _this.currentItemService = currentItemService;
            return _this;
        }
        UserGroupRoutePageMetaResolver.prototype.getParams = function () {
            return this.currentItemService.item$;
        };
        return UserGroupRoutePageMetaResolver;
    }(i3.DefaultRoutePageMetaResolver));
    UserGroupRoutePageMetaResolver.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupRoutePageMetaResolver, deps: [{ token: i3__namespace.TranslationService }, { token: CurrentUserGroupService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserGroupRoutePageMetaResolver.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupRoutePageMetaResolver, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupRoutePageMetaResolver, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i3__namespace.TranslationService }, { type: CurrentUserGroupService }]; } });

    var UserGroupUserListService = /** @class */ (function (_super) {
        __extends(UserGroupUserListService, _super);
        function UserGroupUserListService(tableService, userGroupService, userService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.userGroupService = userGroupService;
            _this.userService = userService;
            _this.tableType = exports.OrganizationTableType.USER_GROUP_USERS;
            _this._domainType = exports.OrganizationTableType.USER;
            return _this;
        }
        /**
         *
         * @override
         * Loads all b2b users.
         *
         * @param code The user group code.
         */
        UserGroupUserListService.prototype.load = function (pagination, code) {
            return this.userGroupService.getAvailableOrgCustomers(code, pagination);
        };
        /**
         * @override
         * Assign user to the user group.
         */
        UserGroupUserListService.prototype.assign = function (userGroupCode, customerId) {
            this.userGroupService.assignMember(userGroupCode, customerId);
            return this.userService.getLoadingStatus(customerId);
        };
        /**
         * @override
         * Unassigns the user from the user group.
         */
        UserGroupUserListService.prototype.unassign = function (userGroupCode, customerId) {
            this.userGroupService.unassignMember(userGroupCode, customerId);
            return this.userService.getLoadingStatus(customerId);
        };
        UserGroupUserListService.prototype.unassignAllMembers = function (userGroupCode) {
            this.userGroupService.unassignAllMembers(userGroupCode);
            return this.userGroupService.getLoadingStatus(userGroupCode);
        };
        return UserGroupUserListService;
    }(SubListService));
    UserGroupUserListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupUserListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.UserGroupService }, { token: i2__namespace$1.B2BUserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserGroupUserListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupUserListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupUserListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.UserGroupService }, { type: i2__namespace$1.B2BUserService }]; } });

    var UserGroupAssignedUserListService = /** @class */ (function (_super) {
        __extends(UserGroupAssignedUserListService, _super);
        function UserGroupAssignedUserListService() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.tableType = exports.OrganizationTableType.USER_GROUP_ASSIGNED_USERS;
            return _this;
        }
        /**
         * @override
         * Load all b2b users assigned to the given user group
         */
        UserGroupAssignedUserListService.prototype.load = function (pagination, code) {
            var _this = this;
            return _super.prototype.load.call(this, pagination, code)
                .pipe(operators.map(function (users) { return _this.filterSelected(users); }));
        };
        return UserGroupAssignedUserListService;
    }(UserGroupUserListService));
    UserGroupAssignedUserListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupAssignedUserListService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserGroupAssignedUserListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupAssignedUserListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupAssignedUserListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UserGroupAssignedUserListComponent = /** @class */ (function () {
        function UserGroupAssignedUserListComponent() {
        }
        return UserGroupAssignedUserListComponent;
    }());
    UserGroupAssignedUserListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupAssignedUserListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserGroupAssignedUserListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserGroupAssignedUserListComponent, selector: "cx-org-user-group-assigned-user-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UserGroupAssignedUserListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list>\n  <a actions class=\"link\" routerLink=\"assign\">\n    {{ 'organization.assign' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupAssignedUserListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-group-assigned-user-list',
                        templateUrl: './user-group-assigned-user-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UserGroupAssignedUserListService,
                            },
                        ],
                    }]
            }] });

    var UserGroupUserListComponent = /** @class */ (function () {
        function UserGroupUserListComponent(currentUserGroupService, userGroupUserListService) {
            this.currentUserGroupService = currentUserGroupService;
            this.userGroupUserListService = userGroupUserListService;
        }
        UserGroupUserListComponent.prototype.unassignAll = function () {
            var _this = this;
            this.currentUserGroupService.key$
                .pipe(operators.first(), operators.switchMap(function (key) { return _this.userGroupUserListService.unassignAllMembers(key).pipe(operators.take(1), operators.filter(function (data) { return data.status === i2$1.LoadStatus.SUCCESS; })); }))
                .subscribe(function (data) {
                _this.notify(data.item);
            });
        };
        UserGroupUserListComponent.prototype.notify = function (item) {
            this.subList.messageService.add({
                message: {
                    key: "orgUserGroupUsers.unassignAllConfirmation",
                    params: {
                        item: item,
                    },
                },
            });
        };
        return UserGroupUserListComponent;
    }());
    UserGroupUserListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupUserListComponent, deps: [{ token: CurrentUserGroupService }, { token: UserGroupUserListService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserGroupUserListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserGroupUserListComponent, selector: "cx-org-user-group-user-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UserGroupUserListService,
            },
        ], viewQueries: [{ propertyName: "subList", first: true, predicate: ["subList"], descendants: true }], ngImport: i0__namespace, template: "<cx-org-sub-list [previous]=\"false\" #subList>\n  <button actions (click)=\"unassignAll()\" class=\"link\">\n    {{ 'orgUserGroupUsers.unassignAll' | cxTranslate }}\n  </button>\n  <a actions class=\"link\" routerLink=\"../\">\n    {{ 'organization.done' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupUserListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-group-user-list',
                        templateUrl: './user-group-user-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UserGroupUserListService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: CurrentUserGroupService }, { type: UserGroupUserListService }]; }, propDecorators: { subList: [{
                    type: i0.ViewChild,
                    args: ['subList']
                }] } });

    var _a$1;
    var userGroupCmsConfig = {
        cmsComponents: {
            ManageUserGroupsListComponent: {
                component: ListComponent,
                providers: [
                    {
                        provide: ListService,
                        useExisting: UserGroupListService,
                    },
                    {
                        provide: ItemService,
                        useExisting: UserGroupItemService,
                    },
                ],
                childRoutes: {
                    parent: {
                        data: {
                            cxPageMeta: {
                                breadcrumb: 'orgUserGroup.breadcrumbs.list',
                                resolver: UserGroupRoutePageMetaResolver,
                            },
                        },
                    },
                    children: [
                        {
                            path: 'create',
                            component: UserGroupFormComponent,
                        },
                        {
                            path: ":" + root.ROUTE_PARAMS.userGroupCode,
                            component: UserGroupDetailsComponent,
                            data: {
                                cxPageMeta: { breadcrumb: 'orgUserGroup.breadcrumbs.details' },
                            },
                            children: [
                                {
                                    path: 'edit',
                                    component: UserGroupFormComponent,
                                },
                                {
                                    path: 'users',
                                    data: {
                                        cxPageMeta: { breadcrumb: 'orgUserGroup.breadcrumbs.users' },
                                    },
                                    children: [
                                        {
                                            path: '',
                                            component: UserGroupAssignedUserListComponent,
                                        },
                                        {
                                            path: 'assign',
                                            component: UserGroupUserListComponent,
                                        },
                                    ],
                                },
                                {
                                    path: 'purchase-limits',
                                    data: {
                                        cxPageMeta: {
                                            breadcrumb: 'orgUserGroup.breadcrumbs.permissions',
                                        },
                                    },
                                    children: [
                                        {
                                            path: '',
                                            component: UserGroupAssignedPermissionListComponent,
                                        },
                                        {
                                            path: 'assign',
                                            component: UserGroupPermissionListComponent,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                guards: [i3.AuthGuard, i2$1.AdminGuard],
            },
        },
    };
    function userGroupTableConfigFactory() {
        return userGroupTableConfig;
    }
    var userGroupTableConfig = {
        table: (_a$1 = {},
            _a$1[exports.OrganizationTableType.USER_GROUP] = {
                cells: ['name', 'uid', 'unit'],
                options: {
                    dataComponent: CellComponent,
                    cells: {
                        name: {
                            dataComponent: ActiveLinkCellComponent,
                        },
                        uid: {
                            dataComponent: CellComponent,
                        },
                        unit: {
                            dataComponent: UnitCellComponent,
                        },
                    },
                },
            },
            _a$1[exports.OrganizationTableType.USER_GROUP_ASSIGNED_USERS] = {
                cells: ['name', 'actions'],
                options: {
                    cells: {
                        name: {
                            dataComponent: UserDetailsCellComponent,
                        },
                        actions: {
                            dataComponent: AssignCellComponent,
                        },
                    },
                    pagination: {
                        pageSize: MAX_OCC_INTEGER_VALUE,
                    },
                },
            },
            _a$1[exports.OrganizationTableType.USER_GROUP_USERS] = {
                cells: ['name', 'actions'],
                options: {
                    cells: {
                        name: {
                            dataComponent: UserDetailsCellComponent,
                        },
                        actions: {
                            dataComponent: AssignCellComponent,
                        },
                    },
                },
            },
            _a$1[exports.OrganizationTableType.USER_GROUP_PERMISSIONS] = {
                cells: ['code', 'actions'],
                options: {
                    cells: {
                        code: {
                            dataComponent: PermissionDetailsCellComponent,
                        },
                        actions: {
                            dataComponent: AssignCellComponent,
                        },
                    },
                },
            },
            _a$1[exports.OrganizationTableType.USER_GROUP_ASSIGNED_PERMISSIONS] = {
                cells: ['code', 'actions'],
                options: {
                    cells: {
                        code: {
                            dataComponent: PermissionDetailsCellComponent,
                        },
                        actions: {
                            dataComponent: AssignCellComponent,
                        },
                    },
                    pagination: {
                        pageSize: MAX_OCC_INTEGER_VALUE,
                    },
                },
            },
            _a$1),
    };

    var UserGroupUserModule = /** @class */ (function () {
        function UserGroupUserModule() {
        }
        return UserGroupUserModule;
    }());
    UserGroupUserModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupUserModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserGroupUserModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupUserModule, declarations: [UserGroupAssignedUserListComponent,
            UserGroupUserListComponent], imports: [i5.CommonModule, i3.I18nModule, i2.RouterModule, SubListModule] });
    UserGroupUserModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupUserModule, imports: [[i5.CommonModule, i3.I18nModule, i2.RouterModule, SubListModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupUserModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i3.I18nModule, i2.RouterModule, SubListModule],
                        declarations: [
                            UserGroupAssignedUserListComponent,
                            UserGroupUserListComponent,
                        ],
                    }]
            }] });

    var UserGroupComponentsModule = /** @class */ (function () {
        function UserGroupComponentsModule() {
        }
        return UserGroupComponentsModule;
    }());
    UserGroupComponentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupComponentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserGroupComponentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupComponentsModule, imports: [SharedOrganizationModule,
            UserGroupDetailsModule,
            UserGroupFormModule,
            UserGroupPermissionModule,
            UserGroupUserModule] });
    UserGroupComponentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupComponentsModule, providers: [
            i3.provideDefaultConfig(userGroupCmsConfig),
            i3.provideDefaultConfigFactory(userGroupTableConfigFactory),
        ], imports: [[
                SharedOrganizationModule,
                UserGroupDetailsModule,
                UserGroupFormModule,
                UserGroupPermissionModule,
                UserGroupUserModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupComponentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            SharedOrganizationModule,
                            UserGroupDetailsModule,
                            UserGroupFormModule,
                            UserGroupPermissionModule,
                            UserGroupUserModule,
                        ],
                        providers: [
                            i3.provideDefaultConfig(userGroupCmsConfig),
                            i3.provideDefaultConfigFactory(userGroupTableConfigFactory),
                        ],
                    }]
            }] });

    var UserApproverListService = /** @class */ (function (_super) {
        __extends(UserApproverListService, _super);
        function UserApproverListService(tableService, userService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.userService = userService;
            _this.tableType = exports.OrganizationTableType.USER_APPROVERS;
            _this._domainType = exports.OrganizationTableType.USER_GROUP;
            return _this;
        }
        UserApproverListService.prototype.load = function (pagination, code) {
            return this.userService.getApprovers(code, pagination);
        };
        /**
         * @override
         * Assign approver to the user.
         */
        UserApproverListService.prototype.assign = function (userCode, approverId) {
            this.userService.assignApprover(userCode, approverId);
            return this.userService.getLoadingStatus(approverId);
        };
        /**
         * @override
         * Unassign the approver from the user.
         */
        UserApproverListService.prototype.unassign = function (userCode, approverId) {
            this.userService.unassignApprover(userCode, approverId);
            return this.userService.getLoadingStatus(approverId);
        };
        return UserApproverListService;
    }(SubListService));
    UserApproverListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserApproverListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.B2BUserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserApproverListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserApproverListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserApproverListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.B2BUserService }]; } });

    var UserAssignedApproverListService = /** @class */ (function (_super) {
        __extends(UserAssignedApproverListService, _super);
        function UserAssignedApproverListService() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.tableType = exports.OrganizationTableType.USER_ASSIGNED_APPROVERS;
            return _this;
        }
        UserAssignedApproverListService.prototype.load = function (pagination, code) {
            var _this = this;
            return _super.prototype.load.call(this, pagination, code)
                .pipe(operators.map(function (users) { return _this.filterSelected(users); }));
        };
        return UserAssignedApproverListService;
    }(UserApproverListService));
    UserAssignedApproverListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedApproverListService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserAssignedApproverListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedApproverListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedApproverListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UserAssignedApproverListComponent = /** @class */ (function () {
        function UserAssignedApproverListComponent() {
        }
        return UserAssignedApproverListComponent;
    }());
    UserAssignedApproverListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedApproverListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserAssignedApproverListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserAssignedApproverListComponent, selector: "cx-org-user-assigned-approver-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UserAssignedApproverListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list>\n  <a actions class=\"link\" routerLink=\"assign\">\n    {{ 'organization.assign' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedApproverListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-assigned-approver-list',
                        templateUrl: './user-assigned-approver-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UserAssignedApproverListService,
                            },
                        ],
                    }]
            }] });

    var UserApproverListComponent = /** @class */ (function () {
        function UserApproverListComponent() {
        }
        return UserApproverListComponent;
    }());
    UserApproverListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserApproverListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserApproverListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserApproverListComponent, selector: "cx-org-user-approver-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UserApproverListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list [previous]=\"false\">\n  <button actions class=\"link\" routerLink=\"../\">\n    {{ 'organization.done' | cxTranslate }}\n  </button>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["routerLink", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserApproverListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-approver-list',
                        templateUrl: './user-approver-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UserApproverListService,
                            },
                        ],
                    }]
            }] });

    var UserApproverListModule = /** @class */ (function () {
        function UserApproverListModule() {
        }
        return UserApproverListModule;
    }());
    UserApproverListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserApproverListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserApproverListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserApproverListModule, declarations: [UserApproverListComponent, UserAssignedApproverListComponent], imports: [ListModule, i3.I18nModule, i2.RouterModule, SubListModule] });
    UserApproverListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserApproverListModule, imports: [[ListModule, i3.I18nModule, i2.RouterModule, SubListModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserApproverListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [ListModule, i3.I18nModule, i2.RouterModule, SubListModule],
                        declarations: [UserApproverListComponent, UserAssignedApproverListComponent],
                    }]
            }] });

    var UserChangePasswordFormService = /** @class */ (function (_super) {
        __extends(UserChangePasswordFormService, _super);
        function UserChangePasswordFormService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @override
         * Adds the password and confirmPassword field. Also adds the customerId field,
         * so that the customerId can be used during persistent.
         */
        UserChangePasswordFormService.prototype.build = function () {
            var form = new i8.FormGroup({});
            form.setControl('customerId', new i8.FormControl(''));
            form.setControl('password', new i8.FormControl('', [
                i8.Validators.required,
                i1.CustomFormValidators.passwordValidator,
            ]));
            form.setControl('confirmPassword', new i8.FormControl('', [
                i8.Validators.required,
                i1.CustomFormValidators.passwordValidator,
            ]));
            form.setValidators(i1.CustomFormValidators.passwordsMustMatch('password', 'confirmPassword'));
            this.form = form;
        };
        UserChangePasswordFormService.prototype.getForm = function (item) {
            // we need do cleanup, to avoid have filled form after next open of that
            this.form = null;
            return _super.prototype.getForm.call(this, item);
        };
        return UserChangePasswordFormService;
    }(FormService));
    UserChangePasswordFormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserChangePasswordFormService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserChangePasswordFormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserChangePasswordFormService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserChangePasswordFormService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UserChangePasswordFormComponent = /** @class */ (function () {
        function UserChangePasswordFormComponent(itemService, formService, messageService) {
            var _this = this;
            this.itemService = itemService;
            this.formService = formService;
            this.messageService = messageService;
            this.form$ = this.itemService.current$.pipe(operators.map(function (item) { return _this.formService.getForm(item); }));
        }
        UserChangePasswordFormComponent.prototype.save = function (form) {
            var _this = this;
            this.itemService.current$
                .pipe(operators.first(), operators.switchMap(function (item) { return _this.itemService.save(form, form.value.customerId).pipe(operators.take(1), operators.filter(function (data) { return data.status === i2$1.LoadStatus.SUCCESS; }), operators.map(function (data) { return (Object.assign(Object.assign({}, item), data.item)); })); }))
                .subscribe(function (data) {
                _this.notify(data);
                _this.itemService.launchDetails(data);
            });
        };
        UserChangePasswordFormComponent.prototype.notify = function (item) {
            this.messageService.add({
                message: {
                    key: "orgUser.messages.updatePassword",
                    params: {
                        item: item,
                    },
                },
            });
        };
        return UserChangePasswordFormComponent;
    }());
    UserChangePasswordFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserChangePasswordFormComponent, deps: [{ token: UserItemService }, { token: UserChangePasswordFormService }, { token: MessageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserChangePasswordFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserChangePasswordFormComponent, selector: "cx-org-user-change-password-form", host: { classAttribute: "content-wrapper" }, ngImport: i0__namespace, template: "<form *ngIf=\"form$ | async as form\" [formGroup]=\"form\" (submit)=\"save(form)\">\n  <cx-org-card\n    [previous]=\"false\"\n    i18nRoot=\"orgUser.password\"\n    [cxFocus]=\"{ autofocus: 'input', refreshFocus: form }\"\n  >\n    <button actions class=\"button primary\">\n      {{ 'organization.save' | cxTranslate }}\n    </button>\n    <button actions class=\"link\" routerLink=\"../\" type=\"button\">\n      {{ 'organization.cancel' | cxTranslate }}\n    </button>\n\n    <section main class=\"details\">\n      <label class=\"full-width\">\n        <span class=\"label-content\">{{\n          'orgUser.password.newPassword' | cxTranslate\n        }}</span>\n        <input\n          aria-required=\"true\"\n          class=\"form-control\"\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"{{ 'orgUser.password.newPassword' | cxTranslate }}\"\n          formControlName=\"password\"\n        />\n        <cx-form-errors [control]=\"form.get('password')\"></cx-form-errors>\n      </label>\n      <label>\n        <span class=\"label-content\">{{\n          'orgUser.password.confirmPassword' | cxTranslate\n        }}</span>\n        <input\n          aria-required=\"true\"\n          class=\"form-control\"\n          type=\"password\"\n          name=\"confirmPassword\"\n          placeholder=\"{{ 'orgUser.password.confirmPassword' | cxTranslate }}\"\n          formControlName=\"confirmPassword\"\n        />\n        <cx-form-errors\n          [control]=\"form.get('confirmPassword')\"\n        ></cx-form-errors>\n      </label>\n    </section>\n  </cx-org-card>\n</form>\n", components: [{ type: CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: i1__namespace.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i8__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i2__namespace.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["routerLink", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i8__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserChangePasswordFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-change-password-form',
                        templateUrl: './user-change-password-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                    }]
            }], ctorParameters: function () { return [{ type: UserItemService }, { type: UserChangePasswordFormService }, { type: MessageService }]; } });

    var UserChangePasswordFormModule = /** @class */ (function () {
        function UserChangePasswordFormModule() {
        }
        return UserChangePasswordFormModule;
    }());
    UserChangePasswordFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserChangePasswordFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserChangePasswordFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserChangePasswordFormModule, declarations: [UserChangePasswordFormComponent], imports: [i5.CommonModule,
            i2.RouterModule,
            i5$1.NgSelectModule,
            i3.UrlModule,
            i3.I18nModule,
            i8.ReactiveFormsModule,
            i1.FormErrorsModule,
            CardModule,
            i1.KeyboardFocusModule] });
    UserChangePasswordFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserChangePasswordFormModule, imports: [[
                i5.CommonModule,
                i2.RouterModule,
                i5$1.NgSelectModule,
                i3.UrlModule,
                i3.I18nModule,
                i8.ReactiveFormsModule,
                i1.FormErrorsModule,
                CardModule,
                i1.KeyboardFocusModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserChangePasswordFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            i2.RouterModule,
                            i5$1.NgSelectModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            i8.ReactiveFormsModule,
                            i1.FormErrorsModule,
                            CardModule,
                            i1.KeyboardFocusModule,
                        ],
                        declarations: [UserChangePasswordFormComponent],
                    }]
            }] });

    var UserDetailsComponent = /** @class */ (function () {
        function UserDetailsComponent(itemService) {
            var _this = this;
            this.itemService = itemService;
            this.model$ = this.itemService.key$.pipe(operators.switchMap(function (code) { return _this.itemService.load(code); }), operators.startWith({}));
            this.isInEditMode$ = this.itemService.isInEditMode$;
        }
        return UserDetailsComponent;
    }());
    UserDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserDetailsComponent, deps: [{ token: ItemService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserDetailsComponent, selector: "cx-org-user-details", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ItemService,
                useExisting: UserItemService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-card\n  *ngIf=\"model$ | async as model\"\n  i18nRoot=\"orgUser.details\"\n  [cxFocus]=\"{ refreshFocus: model }\"\n>\n  <a\n    actions\n    class=\"link edit\"\n    [class.disabled]=\"!model.active || (isInEditMode$ | async)\"\n    [routerLink]=\"{ cxRoute: 'orgUserEdit', params: model } | cxUrl\"\n  >\n    {{ 'organization.edit' | cxTranslate }}\n  </a>\n\n  <cx-org-toggle-status\n    actions\n    key=\"customerId\"\n    i18nRoot=\"orgUser\"\n  ></cx-org-toggle-status>\n\n  <cx-org-disable-info info i18nRoot=\"orgUser\"> </cx-org-disable-info>\n\n  <section main class=\"details\" cxOrgItemExists>\n    <div class=\"property\">\n      <label>{{ 'orgUser.name' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.name }}\n      </span>\n    </div>\n\n    <div class=\"property full-width\">\n      <label>{{ 'orgUser.uid' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.uid }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUser.roles' | cxTranslate }}</label>\n      <ul class=\"value\">\n        <li\n          *ngFor=\"let role of model.roles; let isLast = last\"\n          [innerText]=\"'organization.userRoles.' + role | cxTranslate\"\n        ></li>\n        <li *ngIf=\"model.roles?.length === 0\">-</li>\n      </ul>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUser.orgUnit' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.orgUnit\n          } | cxUrl\n        \"\n      >\n        {{ model.orgUnit?.name }}\n      </a>\n    </div>\n    <div class=\"property full-width\">\n      <a\n        *ngIf=\"model.customerId\"\n        class=\"link\"\n        [class.disabled]=\"!model.active\"\n        [routerLink]=\"\n          { cxRoute: 'orgUserChangePassword', params: model } | cxUrl\n        \"\n      >\n        {{ 'orgUser.links.password' | cxTranslate }}\n      </a>\n    </div>\n  </section>\n\n  <section main class=\"link-list\">\n    <ng-container *ngIf=\"model.customerId\">\n      <a\n        class=\"link\"\n        [routerLink]=\"{ cxRoute: 'orgUserApprovers', params: model } | cxUrl\"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUser.links.approvers' | cxTranslate }}\n      </a>\n      <a\n        class=\"link\"\n        [routerLink]=\"{ cxRoute: 'orgUserUserGroups', params: model } | cxUrl\"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUser.links.userGroup' | cxTranslate }}\n      </a>\n\n      <a\n        class=\"link\"\n        [routerLink]=\"{ cxRoute: 'orgUserPermissions', params: model } | cxUrl\"\n        routerLinkActive=\"is-current\"\n      >\n        {{ 'orgUser.links.permission' | cxTranslate }}\n      </a>\n    </ng-container>\n  </section>\n</cx-org-card>\n", components: [{ type: CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { type: ToggleStatusComponent, selector: "cx-org-toggle-status", inputs: ["i18nRoot", "key", "disabled"] }, { type: DisableInfoComponent, selector: "cx-org-disable-info", inputs: ["i18nRoot", "displayInfoConfig", "displayCustomInfo"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: ItemExistsDirective, selector: "[cxOrgItemExists]" }, { type: i5__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }], pipes: { "async": i5__namespace.AsyncPipe, "cxUrl": i3__namespace.UrlPipe, "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-details',
                        templateUrl: './user-details.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: ItemService,
                                useExisting: UserItemService,
                            },
                        ],
                        host: { class: 'content-wrapper' },
                    }]
            }], ctorParameters: function () { return [{ type: ItemService }]; } });

    var UserDetailsModule = /** @class */ (function () {
        function UserDetailsModule() {
        }
        return UserDetailsModule;
    }());
    UserDetailsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserDetailsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserDetailsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserDetailsModule, declarations: [UserDetailsComponent], imports: [i5.CommonModule,
            CardModule,
            i2.RouterModule,
            i3.UrlModule,
            i3.I18nModule,
            ToggleStatusModule,
            ItemExistsModule,
            DisableInfoModule,
            i1.KeyboardFocusModule], exports: [UserDetailsComponent] });
    UserDetailsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserDetailsModule, imports: [[
                i5.CommonModule,
                CardModule,
                i2.RouterModule,
                i3.UrlModule,
                i3.I18nModule,
                ToggleStatusModule,
                ItemExistsModule,
                DisableInfoModule,
                i1.KeyboardFocusModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserDetailsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5.CommonModule,
                            CardModule,
                            i2.RouterModule,
                            i3.UrlModule,
                            i3.I18nModule,
                            ToggleStatusModule,
                            ItemExistsModule,
                            DisableInfoModule,
                            i1.KeyboardFocusModule,
                        ],
                        declarations: [UserDetailsComponent],
                        exports: [UserDetailsComponent],
                    }]
            }] });

    var UserPermissionListService = /** @class */ (function (_super) {
        __extends(UserPermissionListService, _super);
        function UserPermissionListService(tableService, userService, permissionService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.userService = userService;
            _this.permissionService = permissionService;
            _this.tableType = exports.OrganizationTableType.USER_PERMISSIONS;
            _this._domainType = exports.OrganizationTableType.PERMISSION;
            return _this;
        }
        UserPermissionListService.prototype.load = function (pagination, code) {
            return this.userService.getPermissions(code, pagination);
        };
        /**
         * @override
         * Assign permission to the user.
         */
        UserPermissionListService.prototype.assign = function (userCode, code) {
            this.userService.assignPermission(userCode, code);
            return this.permissionService.getLoadingStatus(code);
        };
        /**
         * @override
         * Unassign the permission from the user.
         */
        UserPermissionListService.prototype.unassign = function (userCode, code) {
            this.userService.unassignPermission(userCode, code);
            return this.permissionService.getLoadingStatus(code);
        };
        return UserPermissionListService;
    }(SubListService));
    UserPermissionListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserPermissionListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.B2BUserService }, { token: i2__namespace$1.PermissionService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserPermissionListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserPermissionListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserPermissionListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.B2BUserService }, { type: i2__namespace$1.PermissionService }]; } });

    var UserAssignedPermissionListService = /** @class */ (function (_super) {
        __extends(UserAssignedPermissionListService, _super);
        function UserAssignedPermissionListService() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.tableType = exports.OrganizationTableType.USER_ASSIGNED_PERMISSIONS;
            return _this;
        }
        UserAssignedPermissionListService.prototype.load = function (pagination, code) {
            var _this = this;
            return _super.prototype.load.call(this, pagination, code)
                .pipe(operators.map(function (result) { return _this.filterSelected(result); }));
        };
        return UserAssignedPermissionListService;
    }(UserPermissionListService));
    UserAssignedPermissionListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedPermissionListService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserAssignedPermissionListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedPermissionListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedPermissionListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UserAssignedPermissionListComponent = /** @class */ (function () {
        function UserAssignedPermissionListComponent() {
        }
        return UserAssignedPermissionListComponent;
    }());
    UserAssignedPermissionListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedPermissionListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserAssignedPermissionListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserAssignedPermissionListComponent, selector: "cx-org-user-assigned-permission-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UserAssignedPermissionListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list>\n  <a actions class=\"link\" routerLink=\"assign\">\n    {{ 'organization.assign' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedPermissionListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-assigned-permission-list',
                        templateUrl: './user-assigned-permission-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UserAssignedPermissionListService,
                            },
                        ],
                    }]
            }] });

    var UserPermissionListComponent = /** @class */ (function () {
        function UserPermissionListComponent() {
        }
        return UserPermissionListComponent;
    }());
    UserPermissionListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserPermissionListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserPermissionListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserPermissionListComponent, selector: "cx-org-user-permission-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UserPermissionListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list [previous]=\"false\">\n  <button actions class=\"link\" routerLink=\"../\">\n    {{ 'organization.done' | cxTranslate }}\n  </button>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["routerLink", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserPermissionListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-permission-list',
                        templateUrl: './user-permission-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UserPermissionListService,
                            },
                        ],
                    }]
            }] });

    var UserPermissionListModule = /** @class */ (function () {
        function UserPermissionListModule() {
        }
        return UserPermissionListModule;
    }());
    UserPermissionListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserPermissionListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserPermissionListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserPermissionListModule, declarations: [UserPermissionListComponent,
            UserAssignedPermissionListComponent], imports: [ListModule, i3.I18nModule, i2.RouterModule, SubListModule] });
    UserPermissionListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserPermissionListModule, imports: [[ListModule, i3.I18nModule, i2.RouterModule, SubListModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserPermissionListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [ListModule, i3.I18nModule, i2.RouterModule, SubListModule],
                        declarations: [
                            UserPermissionListComponent,
                            UserAssignedPermissionListComponent,
                        ],
                    }]
            }] });

    var UserUserGroupListService = /** @class */ (function (_super) {
        __extends(UserUserGroupListService, _super);
        function UserUserGroupListService(tableService, userService, userGroupService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.userService = userService;
            _this.userGroupService = userGroupService;
            _this.tableType = exports.OrganizationTableType.USER_USER_GROUPS;
            _this._domainType = exports.OrganizationTableType.USER_GROUP;
            return _this;
        }
        UserUserGroupListService.prototype.load = function (pagination, code) {
            return this.userService
                .getUserGroups(code, pagination)
                .pipe(operators.filter(function (list) { return Boolean(list); }));
        };
        /**
         * @override
         * Assign user group to the user.
         */
        UserUserGroupListService.prototype.assign = function (userCode, userGroupCode) {
            this.userService.assignUserGroup(userCode, userGroupCode);
            return this.userGroupService.getLoadingStatus(userGroupCode);
        };
        /**
         * @override
         * Unassign the user group from the user.
         */
        UserUserGroupListService.prototype.unassign = function (userCode, userGroupCode) {
            this.userService.unassignUserGroup(userCode, userGroupCode);
            return this.userGroupService.getLoadingStatus(userGroupCode);
        };
        return UserUserGroupListService;
    }(SubListService));
    UserUserGroupListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserUserGroupListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.B2BUserService }, { token: i2__namespace$1.UserGroupService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserUserGroupListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserUserGroupListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserUserGroupListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.B2BUserService }, { type: i2__namespace$1.UserGroupService }]; } });

    var UserAssignedUserGroupListService = /** @class */ (function (_super) {
        __extends(UserAssignedUserGroupListService, _super);
        function UserAssignedUserGroupListService() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.tableType = exports.OrganizationTableType.USER_ASSIGNED_USER_GROUPS;
            return _this;
        }
        UserAssignedUserGroupListService.prototype.load = function (pagination, code) {
            var _this = this;
            return _super.prototype.load.call(this, pagination, code).pipe(operators.filter(function (list) { return Boolean(list); }), operators.map(function (userGroups) { return _this.filterSelected(userGroups); }));
        };
        return UserAssignedUserGroupListService;
    }(UserUserGroupListService));
    UserAssignedUserGroupListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedUserGroupListService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserAssignedUserGroupListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedUserGroupListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedUserGroupListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var UserAssignedUserGroupListComponent = /** @class */ (function () {
        function UserAssignedUserGroupListComponent() {
        }
        return UserAssignedUserGroupListComponent;
    }());
    UserAssignedUserGroupListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedUserGroupListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserAssignedUserGroupListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserAssignedUserGroupListComponent, selector: "cx-org-user-assigned-user-group-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UserAssignedUserGroupListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list>\n  <a actions class=\"link\" routerLink=\"assign\">\n    {{ 'organization.assign' | cxTranslate }}\n  </a>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserAssignedUserGroupListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-assigned-user-group-list',
                        templateUrl: './user-assigned-user-group-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UserAssignedUserGroupListService,
                            },
                        ],
                    }]
            }] });

    var UserUserGroupListComponent = /** @class */ (function () {
        function UserUserGroupListComponent() {
        }
        return UserUserGroupListComponent;
    }());
    UserUserGroupListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserUserGroupListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserUserGroupListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserUserGroupListComponent, selector: "cx-org-user-user-group-list", host: { classAttribute: "content-wrapper" }, providers: [
            {
                provide: ListService,
                useExisting: UserUserGroupListService,
            },
        ], ngImport: i0__namespace, template: "<cx-org-sub-list [previous]=\"false\">\n  <button actions class=\"link\" routerLink=\"../\">\n    {{ 'organization.done' | cxTranslate }}\n  </button>\n</cx-org-sub-list>\n", components: [{ type: SubListComponent, selector: "cx-org-sub-list", inputs: ["previous", "key", "showHint", "routerKey"] }], directives: [{ type: i2__namespace.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["routerLink", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserUserGroupListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-user-group-list',
                        templateUrl: './user-user-group-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'content-wrapper' },
                        providers: [
                            {
                                provide: ListService,
                                useExisting: UserUserGroupListService,
                            },
                        ],
                    }]
            }] });

    var UserUserGroupsModule = /** @class */ (function () {
        function UserUserGroupsModule() {
        }
        return UserUserGroupsModule;
    }());
    UserUserGroupsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserUserGroupsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserUserGroupsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserUserGroupsModule, declarations: [UserUserGroupListComponent,
            UserAssignedUserGroupListComponent], imports: [ListModule, i3.I18nModule, i2.RouterModule, SubListModule] });
    UserUserGroupsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserUserGroupsModule, imports: [[ListModule, i3.I18nModule, i2.RouterModule, SubListModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserUserGroupsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [ListModule, i3.I18nModule, i2.RouterModule, SubListModule],
                        declarations: [
                            UserUserGroupListComponent,
                            UserAssignedUserGroupListComponent,
                        ],
                    }]
            }] });

    var UserGroupDetailsCellComponent = /** @class */ (function (_super) {
        __extends(UserGroupDetailsCellComponent, _super);
        function UserGroupDetailsCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return UserGroupDetailsCellComponent;
    }(CellComponent));
    UserGroupDetailsCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupDetailsCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    UserGroupDetailsCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UserGroupDetailsCellComponent, selector: "cx-org-user-group-details-cell", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #details>\n  <div class=\"popover-details\">\n    <div class=\"property\">\n      <label>{{ 'orgUserGroup.name' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUserGroupDetails',\n            params: model\n          } | cxUrl\n        \"\n        >{{ model.name }}</a\n      >\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUserGroup.uid' | cxTranslate }}</label>\n      <span class=\"value\">\n        {{ model.uid }}\n      </span>\n    </div>\n\n    <div class=\"property\">\n      <label>{{ 'orgUserGroup.orgUnit' | cxTranslate }}</label>\n      <a\n        class=\"value\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orgUnitDetails',\n            params: model.orgUnit\n          } | cxUrl\n        \"\n      >\n        {{ model.orgUnit?.name }}\n      </a>\n    </div>\n  </div>\n</ng-template>\n\n<button\n  class=\"button text\"\n  [cxPopover]=\"details\"\n  [cxPopoverOptions]=\"{\n    placement: 'auto',\n    class: 'my-company-popover',\n    appendToBody: true,\n    displayCloseButton: true\n  }\"\n>\n  {{ model?.name }}\n</button>\n", directives: [{ type: i2__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i1__namespace.PopoverDirective, selector: "[cxPopover]", inputs: ["cxPopover", "cxPopoverOptions"], outputs: ["openPopover", "closePopover"] }], pipes: { "cxTranslate": i3__namespace.TranslatePipe, "cxUrl": i3__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupDetailsCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-org-user-group-details-cell',
                        templateUrl: './user-group-details-cell.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    /**
     * Service to populate User data to `Table` data. The user
     * data is driven by the table configuration, using the `OrganizationTables.USER`.
     */
    var UserListService = /** @class */ (function (_super) {
        __extends(UserListService, _super);
        function UserListService(tableService, userService) {
            var _this = _super.call(this, tableService) || this;
            _this.tableService = tableService;
            _this.userService = userService;
            _this.tableType = exports.OrganizationTableType.USER;
            return _this;
        }
        UserListService.prototype.key = function () {
            return 'customerId';
        };
        UserListService.prototype.load = function (pagination) {
            var _this = this;
            return this.userService.getList(pagination).pipe(operators.filter(function (list) { return Boolean(list); }), operators.map(function (raw) { return _this.convertUsers(raw); }));
        };
        /**
         * Populates the cost center data to a convenient table data model, so that we
         * can skip specific conversion in the view logic where possible.
         */
        UserListService.prototype.convertUsers = function (_a) {
            var pagination = _a.pagination, sorts = _a.sorts, values = _a.values;
            var userModels = {
                pagination: pagination,
                sorts: sorts,
                values: values.map(function (value) { return (Object.assign(Object.assign({}, value), { unit: value.orgUnit })); }),
            };
            return userModels;
        };
        return UserListService;
    }(ListService));
    UserListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserListService, deps: [{ token: i1__namespace.TableService }, { token: i2__namespace$1.B2BUserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserListService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserListService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.TableService }, { type: i2__namespace$1.B2BUserService }]; } });

    var UserRoutePageMetaResolver = /** @class */ (function (_super) {
        __extends(UserRoutePageMetaResolver, _super);
        function UserRoutePageMetaResolver(translation, currentItemService) {
            var _this = _super.call(this, translation) || this;
            _this.currentItemService = currentItemService;
            return _this;
        }
        UserRoutePageMetaResolver.prototype.getParams = function () {
            return this.currentItemService.item$;
        };
        return UserRoutePageMetaResolver;
    }(i3.DefaultRoutePageMetaResolver));
    UserRoutePageMetaResolver.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserRoutePageMetaResolver, deps: [{ token: i3__namespace.TranslationService }, { token: CurrentUserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserRoutePageMetaResolver.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserRoutePageMetaResolver, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserRoutePageMetaResolver, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i3__namespace.TranslationService }, { type: CurrentUserService }]; } });

    var _a;
    var userCmsConfig = {
        cmsComponents: {
            ManageUsersListComponent: {
                component: ListComponent,
                providers: [
                    {
                        provide: ListService,
                        useExisting: UserListService,
                    },
                    {
                        provide: ItemService,
                        useExisting: UserItemService,
                    },
                ],
                childRoutes: {
                    parent: {
                        data: {
                            cxPageMeta: {
                                breadcrumb: 'orgUser.breadcrumbs.list',
                                resolver: UserRoutePageMetaResolver,
                            },
                        },
                    },
                    children: [
                        {
                            path: 'create',
                            component: UserFormComponent,
                        },
                        {
                            path: ":" + root.ROUTE_PARAMS.userCode,
                            component: UserDetailsComponent,
                            data: {
                                cxPageMeta: { breadcrumb: 'orgUser.breadcrumbs.details' },
                            },
                            children: [
                                {
                                    path: "edit",
                                    component: UserFormComponent,
                                },
                                {
                                    path: "change-password",
                                    component: UserChangePasswordFormComponent,
                                },
                                {
                                    path: 'user-groups',
                                    data: {
                                        cxPageMeta: { breadcrumb: 'orgUser.breadcrumbs.userGroups' },
                                    },
                                    children: [
                                        {
                                            path: '',
                                            component: UserAssignedUserGroupListComponent,
                                        },
                                        {
                                            path: 'assign',
                                            component: UserUserGroupListComponent,
                                        },
                                    ],
                                },
                                {
                                    path: 'approvers',
                                    data: {
                                        cxPageMeta: { breadcrumb: 'orgUser.breadcrumbs.approvers' },
                                    },
                                    children: [
                                        {
                                            path: '',
                                            component: UserAssignedApproverListComponent,
                                        },
                                        {
                                            path: 'assign',
                                            component: UserApproverListComponent,
                                        },
                                    ],
                                },
                                {
                                    path: 'purchase-limits',
                                    data: {
                                        cxPageMeta: { breadcrumb: 'orgUser.breadcrumbs.permissions' },
                                    },
                                    children: [
                                        {
                                            path: '',
                                            component: UserAssignedPermissionListComponent,
                                        },
                                        {
                                            path: 'assign',
                                            component: UserPermissionListComponent,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                guards: [i3.AuthGuard, i2$1.AdminGuard],
            },
        },
    };
    function userTableConfigFactory() {
        return userTableConfig;
    }
    var actions = {
        dataComponent: AssignCellComponent,
    };
    var pagination = {
        pageSize: MAX_OCC_INTEGER_VALUE,
    };
    var userTableConfig = {
        table: (_a = {},
            _a[exports.OrganizationTableType.USER] = {
                cells: ['name', 'active', 'uid', 'roles', 'unit'],
                options: {
                    cells: {
                        name: {
                            dataComponent: ActiveLinkCellComponent,
                        },
                        active: {
                            dataComponent: StatusCellComponent,
                        },
                        uid: {
                            dataComponent: CellComponent,
                        },
                        roles: {
                            dataComponent: RolesCellComponent,
                        },
                        unit: {
                            dataComponent: UnitCellComponent,
                        },
                    },
                },
            },
            _a[exports.OrganizationTableType.USER_APPROVERS] = {
                cells: ['name', 'actions'],
                options: {
                    cells: {
                        name: {
                            dataComponent: UserDetailsCellComponent,
                        },
                        actions: actions,
                    },
                },
            },
            _a[exports.OrganizationTableType.USER_ASSIGNED_APPROVERS] = {
                cells: ['name', 'actions'],
                options: {
                    cells: {
                        name: {
                            dataComponent: UserDetailsCellComponent,
                        },
                        actions: actions,
                    },
                    pagination: pagination,
                },
            },
            _a[exports.OrganizationTableType.USER_USER_GROUPS] = {
                cells: ['name', 'actions'],
                options: {
                    cells: {
                        name: {
                            dataComponent: UserGroupDetailsCellComponent,
                        },
                        actions: actions,
                    },
                },
            },
            _a[exports.OrganizationTableType.USER_ASSIGNED_USER_GROUPS] = {
                cells: ['name', 'actions'],
                options: {
                    cells: {
                        name: {
                            dataComponent: UserGroupDetailsCellComponent,
                        },
                        actions: actions,
                    },
                    pagination: pagination,
                },
            },
            _a[exports.OrganizationTableType.USER_PERMISSIONS] = {
                cells: ['code', 'actions'],
                options: {
                    cells: {
                        code: {
                            dataComponent: PermissionDetailsCellComponent,
                        },
                        actions: actions,
                    },
                },
            },
            _a[exports.OrganizationTableType.USER_ASSIGNED_PERMISSIONS] = {
                cells: ['code', 'actions'],
                options: {
                    cells: {
                        code: {
                            dataComponent: PermissionDetailsCellComponent,
                        },
                        actions: actions,
                    },
                    pagination: pagination,
                },
            },
            _a),
    };

    var UserComponentsModule = /** @class */ (function () {
        function UserComponentsModule() {
        }
        return UserComponentsModule;
    }());
    UserComponentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserComponentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserComponentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserComponentsModule, imports: [ListModule,
            UserChangePasswordFormModule,
            UserDetailsModule,
            UserFormModule,
            UserPermissionListModule,
            UserUserGroupsModule,
            UserApproverListModule] });
    UserComponentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserComponentsModule, providers: [
            i3.provideDefaultConfig(userCmsConfig),
            i3.provideDefaultConfigFactory(userTableConfigFactory),
        ], imports: [[
                ListModule,
                UserChangePasswordFormModule,
                UserDetailsModule,
                UserFormModule,
                UserPermissionListModule,
                UserUserGroupsModule,
                UserApproverListModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserComponentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            ListModule,
                            UserChangePasswordFormModule,
                            UserDetailsModule,
                            UserFormModule,
                            UserPermissionListModule,
                            UserUserGroupsModule,
                            UserApproverListModule,
                        ],
                        providers: [
                            i3.provideDefaultConfig(userCmsConfig),
                            i3.provideDefaultConfigFactory(userTableConfigFactory),
                        ],
                    }]
            }] });

    var AdministrationComponentsModule = /** @class */ (function () {
        function AdministrationComponentsModule() {
        }
        return AdministrationComponentsModule;
    }());
    AdministrationComponentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationComponentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AdministrationComponentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationComponentsModule, imports: [BudgetComponentsModule,
            CostCenterComponentsModule,
            UnitsComponentsModule,
            UserGroupComponentsModule,
            UserComponentsModule,
            PermissionComponentsModule] });
    AdministrationComponentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationComponentsModule, imports: [[
                BudgetComponentsModule,
                CostCenterComponentsModule,
                UnitsComponentsModule,
                UserGroupComponentsModule,
                UserComponentsModule,
                PermissionComponentsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationComponentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            BudgetComponentsModule,
                            CostCenterComponentsModule,
                            UnitsComponentsModule,
                            UserGroupComponentsModule,
                            UserComponentsModule,
                            PermissionComponentsModule,
                        ],
                    }]
            }] });

    var CostCenterDetailsCellModule = /** @class */ (function () {
        function CostCenterDetailsCellModule() {
        }
        return CostCenterDetailsCellModule;
    }());
    CostCenterDetailsCellModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterDetailsCellModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CostCenterDetailsCellModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterDetailsCellModule, declarations: [CostCenterDetailsCellComponent], imports: [i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule], exports: [CostCenterDetailsCellComponent] });
    CostCenterDetailsCellModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterDetailsCellModule, imports: [[i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterDetailsCellModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule],
                        declarations: [CostCenterDetailsCellComponent],
                        exports: [CostCenterDetailsCellComponent],
                    }]
            }] });

    var PermissionDetailsCellModule = /** @class */ (function () {
        function PermissionDetailsCellModule() {
        }
        return PermissionDetailsCellModule;
    }());
    PermissionDetailsCellModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionDetailsCellModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PermissionDetailsCellModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionDetailsCellModule, declarations: [PermissionDetailsCellComponent], imports: [i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule], exports: [PermissionDetailsCellComponent] });
    PermissionDetailsCellModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionDetailsCellModule, imports: [[i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionDetailsCellModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule],
                        declarations: [PermissionDetailsCellComponent],
                        exports: [PermissionDetailsCellComponent],
                    }]
            }] });

    var UnitDetailsCellModule = /** @class */ (function () {
        function UnitDetailsCellModule() {
        }
        return UnitDetailsCellModule;
    }());
    UnitDetailsCellModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitDetailsCellModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnitDetailsCellModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitDetailsCellModule, declarations: [UnitDetailsCellComponent], imports: [i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule], exports: [UnitDetailsCellComponent] });
    UnitDetailsCellModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitDetailsCellModule, imports: [[i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UnitDetailsCellModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule],
                        declarations: [UnitDetailsCellComponent],
                        exports: [UnitDetailsCellComponent],
                    }]
            }] });

    var UserGroupDetailsCellModule = /** @class */ (function () {
        function UserGroupDetailsCellModule() {
        }
        return UserGroupDetailsCellModule;
    }());
    UserGroupDetailsCellModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupDetailsCellModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserGroupDetailsCellModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupDetailsCellModule, declarations: [UserGroupDetailsCellComponent], imports: [i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule], exports: [UserGroupDetailsCellComponent] });
    UserGroupDetailsCellModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupDetailsCellModule, imports: [[i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupDetailsCellModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule],
                        declarations: [UserGroupDetailsCellComponent],
                        exports: [UserGroupDetailsCellComponent],
                    }]
            }] });

    var UserDetailsCellModule = /** @class */ (function () {
        function UserDetailsCellModule() {
        }
        return UserDetailsCellModule;
    }());
    UserDetailsCellModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserDetailsCellModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserDetailsCellModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserDetailsCellModule, declarations: [UserDetailsCellComponent], imports: [i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule], exports: [UserDetailsCellComponent] });
    UserDetailsCellModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserDetailsCellModule, imports: [[i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserDetailsCellModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i1.PopoverModule, i2.RouterModule, i3.I18nModule, i3.UrlModule],
                        declarations: [UserDetailsCellComponent],
                        exports: [UserDetailsCellComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ActiveLinkCellComponent = ActiveLinkCellComponent;
    exports.AdministrationComponentsModule = AdministrationComponentsModule;
    exports.AmountCellComponent = AmountCellComponent;
    exports.AssignCellComponent = AssignCellComponent;
    exports.BaseMessageComponent = BaseMessageComponent;
    exports.BudgetComponentsModule = BudgetComponentsModule;
    exports.BudgetCostCenterListComponent = BudgetCostCenterListComponent;
    exports.BudgetCostCenterListModule = BudgetCostCenterListModule;
    exports.BudgetCostCenterListService = BudgetCostCenterListService;
    exports.BudgetDetailsCellComponent = BudgetDetailsCellComponent;
    exports.BudgetDetailsCellModule = BudgetDetailsCellModule;
    exports.BudgetDetailsComponent = BudgetDetailsComponent;
    exports.BudgetDetailsModule = BudgetDetailsModule;
    exports.BudgetFormComponent = BudgetFormComponent;
    exports.BudgetFormModule = BudgetFormModule;
    exports.BudgetFormService = BudgetFormService;
    exports.BudgetItemService = BudgetItemService;
    exports.BudgetListService = BudgetListService;
    exports.CardComponent = CardComponent;
    exports.CardModule = CardModule;
    exports.CellComponent = CellComponent;
    exports.CellModule = CellModule;
    exports.ConfirmationMessageComponent = ConfirmationMessageComponent;
    exports.ConfirmationMessageModule = ConfirmationMessageModule;
    exports.CostCenterAssignedBudgetListComponent = CostCenterAssignedBudgetListComponent;
    exports.CostCenterAssignedBudgetListService = CostCenterAssignedBudgetListService;
    exports.CostCenterBudgetListComponent = CostCenterBudgetListComponent;
    exports.CostCenterBudgetListModule = CostCenterBudgetListModule;
    exports.CostCenterBudgetListService = CostCenterBudgetListService;
    exports.CostCenterComponentsModule = CostCenterComponentsModule;
    exports.CostCenterDetailsCellComponent = CostCenterDetailsCellComponent;
    exports.CostCenterDetailsCellModule = CostCenterDetailsCellModule;
    exports.CostCenterDetailsComponent = CostCenterDetailsComponent;
    exports.CostCenterDetailsModule = CostCenterDetailsModule;
    exports.CostCenterFormComponent = CostCenterFormComponent;
    exports.CostCenterFormModule = CostCenterFormModule;
    exports.CostCenterFormService = CostCenterFormService;
    exports.CostCenterListService = CostCenterListService;
    exports.CurrentBudgetService = CurrentBudgetService;
    exports.CurrentCostCenterService = CurrentCostCenterService;
    exports.CurrentItemService = CurrentItemService;
    exports.CurrentPermissionService = CurrentPermissionService;
    exports.CurrentUnitAddressService = CurrentUnitAddressService;
    exports.CurrentUnitChildService = CurrentUnitChildService;
    exports.CurrentUnitService = CurrentUnitService;
    exports.CurrentUnitUserService = CurrentUnitUserService;
    exports.CurrentUserGroupService = CurrentUserGroupService;
    exports.CurrentUserService = CurrentUserService;
    exports.DateRangeCellComponent = DateRangeCellComponent;
    exports.DeleteItemComponent = DeleteItemComponent;
    exports.DeleteItemModule = DeleteItemModule;
    exports.DisableInfoComponent = DisableInfoComponent;
    exports.DisableInfoModule = DisableInfoModule;
    exports.DisableInfoService = DisableInfoService;
    exports.FormComponent = FormComponent;
    exports.FormModule = FormModule;
    exports.FormService = FormService;
    exports.ItemActiveDirective = ItemActiveDirective;
    exports.ItemExistsDirective = ItemExistsDirective;
    exports.ItemService = ItemService;
    exports.LimitCellComponent = LimitCellComponent;
    exports.LinkCellComponent = LinkCellComponent;
    exports.ListComponent = ListComponent;
    exports.ListModule = ListModule;
    exports.ListService = ListService;
    exports.MessageComponent = MessageComponent;
    exports.MessageData = MessageData;
    exports.MessageModule = MessageModule;
    exports.MessageRenderService = MessageRenderService;
    exports.MessageService = MessageService;
    exports.NotificationMessageComponent = NotificationMessageComponent;
    exports.NotificationMessageModule = NotificationMessageModule;
    exports.PermissionComponentsModule = PermissionComponentsModule;
    exports.PermissionDetailsCellComponent = PermissionDetailsCellComponent;
    exports.PermissionDetailsCellModule = PermissionDetailsCellModule;
    exports.PermissionDetailsComponent = PermissionDetailsComponent;
    exports.PermissionDetailsModule = PermissionDetailsModule;
    exports.PermissionFormComponent = PermissionFormComponent;
    exports.PermissionFormModule = PermissionFormModule;
    exports.PermissionFormService = PermissionFormService;
    exports.PermissionItemService = PermissionItemService;
    exports.PermissionListService = PermissionListService;
    exports.RolesCellComponent = RolesCellComponent;
    exports.SharedOrganizationModule = SharedOrganizationModule;
    exports.StatusCellComponent = StatusCellComponent;
    exports.SubListComponent = SubListComponent;
    exports.SubListModule = SubListModule;
    exports.SubListService = SubListService;
    exports.ToggleLinkCellComponent = ToggleLinkCellComponent;
    exports.ToggleStatusComponent = ToggleStatusComponent;
    exports.ToggleStatusModule = ToggleStatusModule;
    exports.UnitAddressDetailsComponent = UnitAddressDetailsComponent;
    exports.UnitAddressDetailsModule = UnitAddressDetailsModule;
    exports.UnitAddressFormComponent = UnitAddressFormComponent;
    exports.UnitAddressFormModule = UnitAddressFormModule;
    exports.UnitAddressFormService = UnitAddressFormService;
    exports.UnitAddressItemService = UnitAddressItemService;
    exports.UnitAddressListComponent = UnitAddressListComponent;
    exports.UnitAddressListModule = UnitAddressListModule;
    exports.UnitAddressListService = UnitAddressListService;
    exports.UnitAddressModule = UnitAddressModule;
    exports.UnitApproverListComponent = UnitApproverListComponent;
    exports.UnitApproverListModule = UnitApproverListModule;
    exports.UnitApproverListService = UnitApproverListService;
    exports.UnitAssignedApproverListComponent = UnitAssignedApproverListComponent;
    exports.UnitAssignedApproverListService = UnitAssignedApproverListService;
    exports.UnitCellComponent = UnitCellComponent;
    exports.UnitChildCreateComponent = UnitChildCreateComponent;
    exports.UnitChildCreateModule = UnitChildCreateModule;
    exports.UnitChildItemService = UnitChildItemService;
    exports.UnitChildrenComponent = UnitChildrenComponent;
    exports.UnitChildrenModule = UnitChildrenModule;
    exports.UnitChildrenService = UnitChildrenService;
    exports.UnitCostCenterCreateComponent = UnitCostCenterCreateComponent;
    exports.UnitCostCenterCreateModule = UnitCostCenterCreateModule;
    exports.UnitCostCenterItemService = UnitCostCenterItemService;
    exports.UnitCostCenterListComponent = UnitCostCenterListComponent;
    exports.UnitCostCenterListModule = UnitCostCenterListModule;
    exports.UnitCostCenterListService = UnitCostCenterListService;
    exports.UnitDetailsCellComponent = UnitDetailsCellComponent;
    exports.UnitDetailsCellModule = UnitDetailsCellModule;
    exports.UnitDetailsComponent = UnitDetailsComponent;
    exports.UnitDetailsModule = UnitDetailsModule;
    exports.UnitFormComponent = UnitFormComponent;
    exports.UnitFormModule = UnitFormModule;
    exports.UnitFormService = UnitFormService;
    exports.UnitItemService = UnitItemService;
    exports.UnitListComponent = UnitListComponent;
    exports.UnitListModule = UnitListModule;
    exports.UnitListService = UnitListService;
    exports.UnitUserCreateComponent = UnitUserCreateComponent;
    exports.UnitUserCreateModule = UnitUserCreateModule;
    exports.UnitUserListComponent = UnitUserListComponent;
    exports.UnitUserListModule = UnitUserListModule;
    exports.UnitUserListService = UnitUserListService;
    exports.UnitUserRolesCellComponent = UnitUserRolesCellComponent;
    exports.UnitUserRolesFormComponent = UnitUserRolesFormComponent;
    exports.UnitUserRolesFormService = UnitUserRolesFormService;
    exports.UnitUserRolesItemService = UnitUserRolesItemService;
    exports.UnitUserRolesModule = UnitUserRolesModule;
    exports.UnitUsersModule = UnitUsersModule;
    exports.UnitsComponentsModule = UnitsComponentsModule;
    exports.UserApproverListComponent = UserApproverListComponent;
    exports.UserApproverListModule = UserApproverListModule;
    exports.UserApproverListService = UserApproverListService;
    exports.UserAssignedApproverListComponent = UserAssignedApproverListComponent;
    exports.UserAssignedApproverListService = UserAssignedApproverListService;
    exports.UserAssignedPermissionListComponent = UserAssignedPermissionListComponent;
    exports.UserAssignedPermissionListService = UserAssignedPermissionListService;
    exports.UserAssignedUserGroupListComponent = UserAssignedUserGroupListComponent;
    exports.UserAssignedUserGroupListService = UserAssignedUserGroupListService;
    exports.UserChangePasswordFormComponent = UserChangePasswordFormComponent;
    exports.UserChangePasswordFormModule = UserChangePasswordFormModule;
    exports.UserChangePasswordFormService = UserChangePasswordFormService;
    exports.UserComponentsModule = UserComponentsModule;
    exports.UserDetailsCellComponent = UserDetailsCellComponent;
    exports.UserDetailsCellModule = UserDetailsCellModule;
    exports.UserDetailsComponent = UserDetailsComponent;
    exports.UserDetailsModule = UserDetailsModule;
    exports.UserFormComponent = UserFormComponent;
    exports.UserFormModule = UserFormModule;
    exports.UserFormService = UserFormService;
    exports.UserGroupAssignedPermissionListComponent = UserGroupAssignedPermissionListComponent;
    exports.UserGroupAssignedPermissionsListService = UserGroupAssignedPermissionsListService;
    exports.UserGroupAssignedUserListComponent = UserGroupAssignedUserListComponent;
    exports.UserGroupAssignedUserListService = UserGroupAssignedUserListService;
    exports.UserGroupComponentsModule = UserGroupComponentsModule;
    exports.UserGroupDetailsCellComponent = UserGroupDetailsCellComponent;
    exports.UserGroupDetailsCellModule = UserGroupDetailsCellModule;
    exports.UserGroupDetailsComponent = UserGroupDetailsComponent;
    exports.UserGroupDetailsModule = UserGroupDetailsModule;
    exports.UserGroupFormComponent = UserGroupFormComponent;
    exports.UserGroupFormModule = UserGroupFormModule;
    exports.UserGroupFormService = UserGroupFormService;
    exports.UserGroupItemService = UserGroupItemService;
    exports.UserGroupListService = UserGroupListService;
    exports.UserGroupPermissionListComponent = UserGroupPermissionListComponent;
    exports.UserGroupPermissionListService = UserGroupPermissionListService;
    exports.UserGroupPermissionModule = UserGroupPermissionModule;
    exports.UserGroupUserListComponent = UserGroupUserListComponent;
    exports.UserGroupUserListService = UserGroupUserListService;
    exports.UserGroupUserModule = UserGroupUserModule;
    exports.UserItemService = UserItemService;
    exports.UserListService = UserListService;
    exports.UserPermissionListComponent = UserPermissionListComponent;
    exports.UserPermissionListModule = UserPermissionListModule;
    exports.UserPermissionListService = UserPermissionListService;
    exports.UserUserGroupListComponent = UserUserGroupListComponent;
    exports.UserUserGroupListService = UserUserGroupListService;
    exports.UserUserGroupsModule = UserUserGroupsModule;
    exports.budgetCmsConfig = budgetCmsConfig;
    exports.budgetTableConfig = budgetTableConfig;
    exports.budgetTableConfigFactory = budgetTableConfigFactory;
    exports.costCenterCmsConfig = costCenterCmsConfig;
    exports.costCenterTableConfig = costCenterTableConfig;
    exports.costCenterTableConfigFactory = costCenterTableConfigFactory;
    exports.permissionCmsConfig = permissionCmsConfig;
    exports.permissionTableConfig = permissionTableConfig;
    exports.permissionTableConfigFactory = permissionTableConfigFactory;
    exports.unitsCmsConfig = unitsCmsConfig;
    exports.unitsTableConfig = unitsTableConfig;
    exports.unitsTableConfigFactory = unitsTableConfigFactory;
    exports.userCmsConfig = userCmsConfig;
    exports.userGroupCmsConfig = userGroupCmsConfig;
    exports.userGroupTableConfig = userGroupTableConfig;
    exports.userGroupTableConfigFactory = userGroupTableConfigFactory;
    exports.userTableConfig = userTableConfig;
    exports.userTableConfigFactory = userTableConfigFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=spartacus-organization-administration-components.umd.js.map
