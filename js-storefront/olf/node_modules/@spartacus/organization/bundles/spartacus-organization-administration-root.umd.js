(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@spartacus/core'), require('@spartacus/organization/administration/core')) :
    typeof define === 'function' && define.amd ? define('@spartacus/organization/administration/root', ['exports', '@angular/core', '@spartacus/core', '@spartacus/organization/administration/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.organization = global.spartacus.organization || {}, global.spartacus.organization.administration = global.spartacus.organization.administration || {}, global.spartacus.organization.administration.root = {}), global.ng.core, global.core, global.spartacus.organization.administration.core));
}(this, (function (exports, i0, core, core$1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /**
     * Names of the route params used in the organization administration feature
     */
    var ROUTE_PARAMS = {
        budgetCode: 'budgetCode',
        unitCode: 'unitCode',
        costCenterCode: 'costCenterCode',
        userCode: 'userCode',
        userGroupCode: 'userGroupCode',
        permissionCode: 'permissionCode',
        addressCode: 'addressId',
    };

    var listPath$5 = "organization/budgets/:" + ROUTE_PARAMS.budgetCode;
    var paramsMapping$5 = {
        budgetCode: 'code',
    };
    var defaultBudgetRoutingConfig = {
        routing: {
            routes: {
                orgBudget: {
                    paths: ['organization/budgets'],
                },
                orgBudgetCreate: {
                    paths: ['organization/budgets/create'],
                },
                orgBudgetDetails: {
                    paths: ["" + listPath$5],
                    paramsMapping: paramsMapping$5,
                },
                orgBudgetCostCenters: {
                    paths: [listPath$5 + "/cost-centers"],
                    paramsMapping: paramsMapping$5,
                },
                orgBudgetEdit: {
                    paths: [listPath$5 + "/edit"],
                    paramsMapping: paramsMapping$5,
                },
            },
        },
    };

    var listPath$4 = "organization/cost-centers/:" + ROUTE_PARAMS.costCenterCode;
    var paramsMapping$4 = {
        costCenterCode: 'code',
    };
    var defaultCostCenterRoutingConfig = {
        routing: {
            routes: {
                orgCostCenter: {
                    paths: ['organization/cost-centers'],
                },
                orgCostCenterCreate: {
                    paths: ['organization/cost-centers/create'],
                },
                orgCostCenterDetails: {
                    paths: ["" + listPath$4],
                    paramsMapping: paramsMapping$4,
                },
                orgCostCenterBudgets: {
                    paths: [listPath$4 + "/budgets"],
                    paramsMapping: paramsMapping$4,
                },
                orgCostCenterAssignBudgets: {
                    paths: [listPath$4 + "/budgets/assign"],
                    paramsMapping: paramsMapping$4,
                },
                orgCostCenterEdit: {
                    paths: [listPath$4 + "/edit"],
                    paramsMapping: paramsMapping$4,
                },
            },
        },
    };

    var defaultOrganizationLayoutConfig = {
        layoutSlots: {
            CompanyPageTemplate: {
                slots: ['BodyContent'],
            },
        },
    };

    var listPath$3 = "organization/purchase-limits/:" + ROUTE_PARAMS.permissionCode;
    var paramsMapping$3 = {
        permissionCode: 'code',
    };
    var defaultPermissionRoutingConfig = {
        routing: {
            routes: {
                orgPurchaseLimit: {
                    paths: ['organization/purchase-limits'],
                },
                orgPurchaseLimitCreate: {
                    paths: ['organization/purchase-limits/create'],
                },
                orgPurchaseLimitDetails: {
                    paths: [listPath$3],
                    paramsMapping: paramsMapping$3,
                },
                orgPurchaseLimitEdit: {
                    paths: [listPath$3 + "/edit"],
                    paramsMapping: paramsMapping$3,
                },
            },
        },
    };

    var listPath$2 = "organization/units/:" + ROUTE_PARAMS.unitCode;
    var paramsMapping$2 = {
        unitCode: 'uid',
        addressId: 'id',
        userCode: 'customerId',
    };
    var defaultUnitsRoutingConfig = {
        routing: {
            routes: {
                orgUnits: {
                    paths: ['organization/units'],
                },
                orgUnitCreate: {
                    paths: ['organization/units/create'],
                },
                orgUnitDetails: {
                    paths: [listPath$2],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitEdit: {
                    paths: [listPath$2 + "/edit"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitChildren: {
                    paths: [listPath$2 + "/children"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitCreateChild: {
                    paths: [listPath$2 + "/children/create"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitUserList: {
                    paths: [listPath$2 + "/users"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitCreateUser: {
                    paths: [listPath$2 + "/users/create"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitUserRoles: {
                    paths: [listPath$2 + "/users/:userCode/roles"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitApprovers: {
                    paths: [listPath$2 + "/approvers"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitAssignApprovers: {
                    paths: [listPath$2 + "/approvers/assign"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitAddressList: {
                    paths: [listPath$2 + "/addresses"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitAddressCreate: {
                    paths: [listPath$2 + "/addresses/create"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitAddressDetails: {
                    paths: [listPath$2 + "/addresses/:addressId"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitAddressEdit: {
                    paths: [listPath$2 + "/addresses/:addressId/edit"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitCostCenters: {
                    paths: [listPath$2 + "/cost-centers"],
                    paramsMapping: paramsMapping$2,
                },
                orgUnitCreateCostCenter: {
                    paths: [listPath$2 + "/cost-centers/create"],
                    paramsMapping: paramsMapping$2,
                },
            },
        },
    };

    var listPath$1 = "organization/user-groups/:" + ROUTE_PARAMS.userGroupCode;
    var paramsMapping$1 = {
        userGroupCode: 'uid',
    };
    // TODO: this doesn't work with lazy loaded feature
    var defaultUserGroupRoutingConfig = {
        routing: {
            routes: {
                orgUserGroup: {
                    paths: ['organization/user-groups'],
                },
                orgUserGroupCreate: {
                    paths: ['organization/user-groups/create'],
                },
                orgUserGroupDetails: {
                    paths: [listPath$1],
                    paramsMapping: paramsMapping$1,
                },
                orgUserGroupEdit: {
                    paths: [listPath$1 + "/edit"],
                    paramsMapping: paramsMapping$1,
                },
                orgUserGroupUsers: {
                    paths: [listPath$1 + "/users"],
                    paramsMapping: paramsMapping$1,
                },
                orgUserGroupAssignUsers: {
                    paths: [listPath$1 + "/users/assign"],
                    paramsMapping: paramsMapping$1,
                },
                orgUserGroupPermissions: {
                    paths: [listPath$1 + "/purchase-limits"],
                    paramsMapping: paramsMapping$1,
                },
                orgUserGroupAssignPermissions: {
                    paths: [listPath$1 + "/purchase-limits/assign"],
                    paramsMapping: paramsMapping$1,
                },
            },
        },
    };

    var listPath = "organization/users/:" + ROUTE_PARAMS.userCode;
    var paramsMapping = {
        userCode: 'customerId',
    };
    var defaultUserRoutingConfig = {
        routing: {
            routes: {
                orgUser: {
                    paths: ['organization/users'],
                },
                orgUserCreate: {
                    paths: ['organization/users/create'],
                },
                orgUserDetails: {
                    paths: [listPath],
                    paramsMapping: paramsMapping,
                },
                orgUserEdit: {
                    paths: [listPath + "/edit"],
                    paramsMapping: paramsMapping,
                },
                orgUserChangePassword: {
                    paths: [listPath + "/change-password"],
                    paramsMapping: paramsMapping,
                },
                orgUserApprovers: {
                    paths: [listPath + "/approvers"],
                    paramsMapping: paramsMapping,
                },
                orgUserAssignApprovers: {
                    paths: [listPath + "/approvers/assign"],
                    paramsMapping: paramsMapping,
                },
                orgUserPermissions: {
                    paths: [listPath + "/purchase-limits"],
                    paramsMapping: paramsMapping,
                },
                orgUserAssignPermissions: {
                    paths: [listPath + "/purchase-limits/assign"],
                    paramsMapping: paramsMapping,
                },
                orgUserUserGroups: {
                    paths: [listPath + "/user-groups"],
                    paramsMapping: paramsMapping,
                },
                orgUserAssignUserGroups: {
                    paths: [listPath + "/user-groups/assign"],
                    paramsMapping: paramsMapping,
                },
            },
        },
    };

    var ORGANIZATION_ADMINISTRATION_FEATURE = 'organizationAdministration';

    // TODO: Inline this factory when we start releasing Ivy compiled libraries
    function defaultOrganizationAdministrationComponentsConfig() {
        var _a;
        var config = {
            featureModules: (_a = {},
                _a[ORGANIZATION_ADMINISTRATION_FEATURE] = {
                    cmsComponents: [
                        'ManageBudgetsListComponent',
                        'ManageCostCentersListComponent',
                        'ManagePermissionsListComponent',
                        'ManageUnitsListComponent',
                        'ManageUsersListComponent',
                        'ManageUserGroupsListComponent',
                    ],
                },
                _a),
        };
        return config;
    }
    var AdministrationRootModule = /** @class */ (function () {
        function AdministrationRootModule() {
        }
        return AdministrationRootModule;
    }());
    AdministrationRootModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationRootModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AdministrationRootModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationRootModule });
    AdministrationRootModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationRootModule, providers: [
            core.provideDefaultConfig(defaultOrganizationLayoutConfig),
            core.provideDefaultConfig({
                routing: { routes: { organization: { paths: ['organization'] } } },
            }),
            core.provideDefaultConfig(defaultBudgetRoutingConfig),
            core.provideDefaultConfig(defaultCostCenterRoutingConfig),
            core.provideDefaultConfig(defaultPermissionRoutingConfig),
            core.provideDefaultConfig(defaultUnitsRoutingConfig),
            core.provideDefaultConfig(defaultUserRoutingConfig),
            core.provideDefaultConfig(defaultUserGroupRoutingConfig),
            core.provideDefaultConfigFactory(defaultOrganizationAdministrationComponentsConfig),
            {
                provide: core.HttpErrorHandler,
                useExisting: core$1.OrganizationConflictHandler,
                multi: true,
            },
            {
                provide: core.HttpErrorHandler,
                useExisting: core$1.OrganizationBadRequestHandler,
                multi: true,
            },
        ] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationRootModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        providers: [
                            core.provideDefaultConfig(defaultOrganizationLayoutConfig),
                            core.provideDefaultConfig({
                                routing: { routes: { organization: { paths: ['organization'] } } },
                            }),
                            core.provideDefaultConfig(defaultBudgetRoutingConfig),
                            core.provideDefaultConfig(defaultCostCenterRoutingConfig),
                            core.provideDefaultConfig(defaultPermissionRoutingConfig),
                            core.provideDefaultConfig(defaultUnitsRoutingConfig),
                            core.provideDefaultConfig(defaultUserRoutingConfig),
                            core.provideDefaultConfig(defaultUserGroupRoutingConfig),
                            core.provideDefaultConfigFactory(defaultOrganizationAdministrationComponentsConfig),
                            {
                                provide: core.HttpErrorHandler,
                                useExisting: core$1.OrganizationConflictHandler,
                                multi: true,
                            },
                            {
                                provide: core.HttpErrorHandler,
                                useExisting: core$1.OrganizationBadRequestHandler,
                                multi: true,
                            },
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AdministrationRootModule = AdministrationRootModule;
    exports.ORGANIZATION_ADMINISTRATION_FEATURE = ORGANIZATION_ADMINISTRATION_FEATURE;
    exports.ROUTE_PARAMS = ROUTE_PARAMS;
    exports.defaultBudgetRoutingConfig = defaultBudgetRoutingConfig;
    exports.defaultCostCenterRoutingConfig = defaultCostCenterRoutingConfig;
    exports.defaultOrganizationAdministrationComponentsConfig = defaultOrganizationAdministrationComponentsConfig;
    exports.defaultOrganizationLayoutConfig = defaultOrganizationLayoutConfig;
    exports.defaultPermissionRoutingConfig = defaultPermissionRoutingConfig;
    exports.defaultUnitsRoutingConfig = defaultUnitsRoutingConfig;
    exports.defaultUserGroupRoutingConfig = defaultUserGroupRoutingConfig;
    exports.defaultUserRoutingConfig = defaultUserRoutingConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=spartacus-organization-administration-root.umd.js.map
