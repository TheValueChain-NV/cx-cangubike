(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@spartacus/core'), require('rxjs'), require('rxjs/operators'), require('@ngrx/effects'), require('@ngrx/store')) :
    typeof define === 'function' && define.amd ? define('@spartacus/organization/administration/core', ['exports', '@angular/core', '@spartacus/core', 'rxjs', 'rxjs/operators', '@ngrx/effects', '@ngrx/store'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.organization = global.spartacus.organization || {}, global.spartacus.organization.administration = global.spartacus.organization.administration || {}, global.spartacus.organization.administration.core = {}), global.ng.core, global.core, global.rxjs, global.rxjs.operators, global.effects, global.store));
}(this, (function (exports, i0, i1, rxjs, operators, i1$1, i1$2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);

    var B2BUserAdapter = /** @class */ (function () {
        function B2BUserAdapter() {
        }
        return B2BUserAdapter;
    }());

    var B2BUserConnector = /** @class */ (function () {
        function B2BUserConnector(adapter) {
            this.adapter = adapter;
        }
        B2BUserConnector.prototype.get = function (userId, orgUnitCustomerId) {
            return this.adapter.load(userId, orgUnitCustomerId);
        };
        B2BUserConnector.prototype.create = function (userId, orgCustomer) {
            return this.adapter.create(userId, orgCustomer);
        };
        B2BUserConnector.prototype.update = function (userId, orgCustomerId, orgCustomer) {
            return this.adapter.update(userId, orgCustomerId, orgCustomer);
        };
        B2BUserConnector.prototype.getList = function (userId, params) {
            return this.adapter.loadList(userId, params);
        };
        B2BUserConnector.prototype.getApprovers = function (userId, orgUnitCustomerId, params) {
            return this.adapter.loadApprovers(userId, orgUnitCustomerId, params);
        };
        B2BUserConnector.prototype.assignApprover = function (userId, orgCustomerId, approverId) {
            return this.adapter.assignApprover(userId, orgCustomerId, approverId);
        };
        B2BUserConnector.prototype.unassignApprover = function (userId, orgCustomerId, approverId) {
            return this.adapter.unassignApprover(userId, orgCustomerId, approverId);
        };
        B2BUserConnector.prototype.getPermissions = function (userId, orgUnitCustomerId, params) {
            return this.adapter.loadPermissions(userId, orgUnitCustomerId, params);
        };
        B2BUserConnector.prototype.assignPermission = function (userId, orgCustomerId, permissionId) {
            return this.adapter.assignPermission(userId, orgCustomerId, permissionId);
        };
        B2BUserConnector.prototype.unassignPermission = function (userId, orgCustomerId, permissionId) {
            return this.adapter.unassignPermission(userId, orgCustomerId, permissionId);
        };
        B2BUserConnector.prototype.getUserGroups = function (userId, orgUnitCustomerId, params) {
            return this.adapter.loadUserGroups(userId, orgUnitCustomerId, params);
        };
        B2BUserConnector.prototype.assignUserGroup = function (userId, orgCustomerId, userGroupId) {
            return this.adapter.assignUserGroup(userId, orgCustomerId, userGroupId);
        };
        B2BUserConnector.prototype.unassignUserGroup = function (userId, orgCustomerId, userGroupId) {
            return this.adapter.unassignUserGroup(userId, orgCustomerId, userGroupId);
        };
        return B2BUserConnector;
    }());
    B2BUserConnector.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: B2BUserConnector, deps: [{ token: B2BUserAdapter }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    B2BUserConnector.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: B2BUserConnector, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: B2BUserConnector, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: B2BUserAdapter }]; } });

    var BudgetAdapter = /** @class */ (function () {
        function BudgetAdapter() {
        }
        return BudgetAdapter;
    }());

    var BudgetConnector = /** @class */ (function () {
        function BudgetConnector(adapter) {
            this.adapter = adapter;
        }
        BudgetConnector.prototype.get = function (userId, budgetCode) {
            return this.adapter.load(userId, budgetCode);
        };
        BudgetConnector.prototype.getList = function (userId, params) {
            return this.adapter.loadList(userId, params);
        };
        BudgetConnector.prototype.create = function (userId, budget) {
            return this.adapter.create(userId, budget);
        };
        BudgetConnector.prototype.update = function (userId, budgetCode, budget) {
            return this.adapter.update(userId, budgetCode, budget);
        };
        return BudgetConnector;
    }());
    BudgetConnector.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetConnector, deps: [{ token: BudgetAdapter }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BudgetConnector.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetConnector, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetConnector, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: BudgetAdapter }]; } });

    var CostCenterAdapter = /** @class */ (function () {
        function CostCenterAdapter() {
        }
        return CostCenterAdapter;
    }());

    var CostCenterConnector = /** @class */ (function () {
        function CostCenterConnector(adapter) {
            this.adapter = adapter;
        }
        CostCenterConnector.prototype.get = function (userId, costCenterCode) {
            return this.adapter.load(userId, costCenterCode);
        };
        CostCenterConnector.prototype.getList = function (userId, params) {
            return this.adapter.loadList(userId, params);
        };
        CostCenterConnector.prototype.create = function (userId, costCenter) {
            return this.adapter.create(userId, costCenter);
        };
        CostCenterConnector.prototype.update = function (userId, costCenterCode, costCenter) {
            return this.adapter.update(userId, costCenterCode, costCenter);
        };
        CostCenterConnector.prototype.getBudgets = function (userId, costCenterCode, params) {
            return this.adapter.loadBudgets(userId, costCenterCode, params);
        };
        CostCenterConnector.prototype.assignBudget = function (userId, costCenterCode, budgetCode) {
            return this.adapter.assignBudget(userId, costCenterCode, budgetCode);
        };
        CostCenterConnector.prototype.unassignBudget = function (userId, costCenterCode, budgetCode) {
            return this.adapter.unassignBudget(userId, costCenterCode, budgetCode);
        };
        return CostCenterConnector;
    }());
    CostCenterConnector.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterConnector, deps: [{ token: CostCenterAdapter }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CostCenterConnector.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterConnector, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterConnector, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: CostCenterAdapter }]; } });

    var OrgUnitAdapter = /** @class */ (function () {
        function OrgUnitAdapter() {
        }
        return OrgUnitAdapter;
    }());

    var OrgUnitConnector = /** @class */ (function () {
        function OrgUnitConnector(adapter) {
            this.adapter = adapter;
        }
        OrgUnitConnector.prototype.get = function (userId, orgUnitId) {
            return this.adapter.load(userId, orgUnitId);
        };
        OrgUnitConnector.prototype.create = function (userId, orgUnit) {
            return this.adapter.create(userId, orgUnit);
        };
        OrgUnitConnector.prototype.update = function (userId, orgUnitId, orgUnit) {
            return this.adapter.update(userId, orgUnitId, orgUnit);
        };
        OrgUnitConnector.prototype.getList = function (userId) {
            return this.adapter.loadList(userId);
        };
        OrgUnitConnector.prototype.getApprovalProcesses = function (userId) {
            return this.adapter.loadApprovalProcesses(userId);
        };
        OrgUnitConnector.prototype.getTree = function (userId) {
            return this.adapter.loadTree(userId);
        };
        OrgUnitConnector.prototype.getUsers = function (userId, orgUnitId, roleId, params) {
            return this.adapter.loadUsers(userId, orgUnitId, roleId, params);
        };
        OrgUnitConnector.prototype.assignRole = function (userId, orgCustomerId, roleId) {
            return this.adapter.assignRole(userId, orgCustomerId, roleId);
        };
        OrgUnitConnector.prototype.unassignRole = function (userId, orgCustomerId, roleId) {
            return this.adapter.unassignRole(userId, orgCustomerId, roleId);
        };
        OrgUnitConnector.prototype.assignApprover = function (userId, orgUnitId, orgCustomerId, roleId) {
            return this.adapter.assignApprover(userId, orgUnitId, orgCustomerId, roleId);
        };
        OrgUnitConnector.prototype.unassignApprover = function (userId, orgUnitId, orgCustomerId, roleId) {
            return this.adapter.unassignApprover(userId, orgUnitId, orgCustomerId, roleId);
        };
        OrgUnitConnector.prototype.getAddresses = function (userId, orgUnitId) {
            return this.adapter.loadAddresses(userId, orgUnitId);
        };
        OrgUnitConnector.prototype.createAddress = function (userId, orgUnitId, address) {
            return this.adapter.createAddress(userId, orgUnitId, address);
        };
        OrgUnitConnector.prototype.updateAddress = function (userId, orgUnitId, addressId, address) {
            return this.adapter.updateAddress(userId, orgUnitId, addressId, address);
        };
        OrgUnitConnector.prototype.deleteAddress = function (userId, orgUnitId, addressId) {
            return this.adapter.deleteAddress(userId, orgUnitId, addressId);
        };
        return OrgUnitConnector;
    }());
    OrgUnitConnector.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrgUnitConnector, deps: [{ token: OrgUnitAdapter }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrgUnitConnector.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrgUnitConnector, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrgUnitConnector, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: OrgUnitAdapter }]; } });

    var PermissionAdapter = /** @class */ (function () {
        function PermissionAdapter() {
        }
        return PermissionAdapter;
    }());

    var PermissionConnector = /** @class */ (function () {
        function PermissionConnector(adapter) {
            this.adapter = adapter;
        }
        PermissionConnector.prototype.get = function (userId, permissionCode) {
            return this.adapter.load(userId, permissionCode);
        };
        PermissionConnector.prototype.getList = function (userId, params) {
            return this.adapter.loadList(userId, params);
        };
        PermissionConnector.prototype.create = function (userId, permission) {
            return this.adapter.create(userId, permission);
        };
        PermissionConnector.prototype.update = function (userId, permissionCode, permission) {
            return this.adapter.update(userId, permissionCode, permission);
        };
        PermissionConnector.prototype.getTypes = function () {
            return this.adapter.loadTypes();
        };
        return PermissionConnector;
    }());
    PermissionConnector.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionConnector, deps: [{ token: PermissionAdapter }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PermissionConnector.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionConnector, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionConnector, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: PermissionAdapter }]; } });

    var UserGroupAdapter = /** @class */ (function () {
        function UserGroupAdapter() {
        }
        return UserGroupAdapter;
    }());

    var UserGroupConnector = /** @class */ (function () {
        function UserGroupConnector(adapter) {
            this.adapter = adapter;
        }
        UserGroupConnector.prototype.get = function (userId, userGroupId) {
            return this.adapter.load(userId, userGroupId);
        };
        UserGroupConnector.prototype.getList = function (userId, params) {
            return this.adapter.loadList(userId, params);
        };
        UserGroupConnector.prototype.getAvailableOrderApprovalPermissions = function (userId, userGroupId, params) {
            return this.adapter.loadAvailableOrderApprovalPermissions(userId, userGroupId, params);
        };
        UserGroupConnector.prototype.getAvailableOrgCustomers = function (userId, userGroupId, params) {
            return this.adapter.loadAvailableOrgCustomers(userId, userGroupId, params);
        };
        UserGroupConnector.prototype.create = function (userId, userGroup) {
            return this.adapter.create(userId, userGroup);
        };
        UserGroupConnector.prototype.delete = function (userId, userGroupId) {
            return this.adapter.delete(userId, userGroupId);
        };
        UserGroupConnector.prototype.update = function (userId, userGroupId, userGroup) {
            return this.adapter.update(userId, userGroupId, userGroup);
        };
        UserGroupConnector.prototype.assignMember = function (userId, userGroupId, orgCustomerId) {
            return this.adapter.assignMember(userId, userGroupId, orgCustomerId);
        };
        UserGroupConnector.prototype.assignOrderApprovalPermission = function (userId, userGroupId, orderApprovalPermissionCode) {
            return this.adapter.assignOrderApprovalPermission(userId, userGroupId, orderApprovalPermissionCode);
        };
        UserGroupConnector.prototype.unassignMember = function (userId, userGroupId, orgCustomerId) {
            return this.adapter.unassignMember(userId, userGroupId, orgCustomerId);
        };
        UserGroupConnector.prototype.unassignAllMembers = function (userId, userGroupId) {
            return this.adapter.unassignAllMembers(userId, userGroupId);
        };
        UserGroupConnector.prototype.unassignOrderApprovalPermission = function (userId, userGroupId, orderApprovalPermissionCode) {
            return this.adapter.unassignOrderApprovalPermission(userId, userGroupId, orderApprovalPermissionCode);
        };
        return UserGroupConnector;
    }());
    UserGroupConnector.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupConnector, deps: [{ token: UserGroupAdapter }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserGroupConnector.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupConnector, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupConnector, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: UserGroupAdapter }]; } });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /**
     * Resolves the page data for Organization Pages.
     *
     * Breadcrumbs are built in this implementation only.
     *
     * @property {string} ORGANIZATION_SEMANTIC_ROUTE the default root path for organization pages.
     * @property {string} ORGANIZATION_TRANSLATION_KEY the default i18n key for the organization breadcrumb label.
     */
    var OrganizationPageMetaResolver = /** @class */ (function (_super) {
        __extends(OrganizationPageMetaResolver, _super);
        function OrganizationPageMetaResolver(contentPageMetaResolver, translation, semanticPath, routingService) {
            var _this = _super.call(this) || this;
            _this.contentPageMetaResolver = contentPageMetaResolver;
            _this.translation = translation;
            _this.semanticPath = semanticPath;
            _this.routingService = routingService;
            _this.pageTemplate = 'CompanyPageTemplate';
            _this.pageType = i1.PageType.CONTENT_PAGE;
            /**
             * Translation key for the breadcrumb of Organization home page
             */
            _this.ORGANIZATION_TRANSLATION_KEY = 'organization.breadcrumb';
            /**
             * The semantic route of the organization landing page. It's used to recognize whether
             * we are on this page. In such a case we avoid showing the breadcrumb for this page.
             */
            _this.ORGANIZATION_SEMANTIC_ROUTE = 'organization';
            /**
             * Breadcrumb of the Organization page.
             * It's empty when the current page is the Organization page.
             */
            _this.organizationPageBreadcrumb$ = rxjs.defer(function () { return _this.routingService.getRouterState(); }).pipe(operators.map(function (routerState) { var _a; return (_a = routerState === null || routerState === void 0 ? void 0 : routerState.state) === null || _a === void 0 ? void 0 : _a.semanticRoute; }), operators.distinctUntilChanged(), operators.switchMap(function (semanticRoute) { return semanticRoute === _this.ORGANIZATION_SEMANTIC_ROUTE
                ? rxjs.of([])
                : _this.translation.translate(_this.ORGANIZATION_TRANSLATION_KEY).pipe(operators.map(function (label) { return [
                    {
                        label: label,
                        link: _this.semanticPath.get(_this.ORGANIZATION_SEMANTIC_ROUTE),
                    },
                ]; })); }));
            /**
             * Breadcrumbs returned in the method #resolveBreadcrumbs.
             */
            _this.breadcrumbs$ = rxjs.combineLatest([
                _this.organizationPageBreadcrumb$,
                rxjs.defer(function () { return _this.contentPageMetaResolver.resolveBreadcrumbs(); }),
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), organizationPageBreadcrumb = _c[0], _d = _c[1], breadcrumbs = _d === void 0 ? [] : _d;
                var _e = __read(breadcrumbs), home = _e[0], restBreadcrumbs = _e.slice(1);
                return __spreadArray(__spreadArray([home], __read(organizationPageBreadcrumb)), __read(restBreadcrumbs));
            }), operators.shareReplay({ bufferSize: 1, refCount: true }));
            return _this;
        }
        OrganizationPageMetaResolver.prototype.resolveTitle = function () {
            return this.contentPageMetaResolver.resolveTitle();
        };
        OrganizationPageMetaResolver.prototype.resolveDescription = function () {
            return this.contentPageMetaResolver.resolveDescription();
        };
        OrganizationPageMetaResolver.prototype.resolveRobots = function () {
            return this.contentPageMetaResolver.resolveRobots();
        };
        /**
         * Returns list of breadcrumbs for:
         * - the home page
         * - the organization home page
         * - the organization's child pages (i.e. cost center list)
         * - sub-routes of the organization's child pages (i.e. cost center details, edit cost center, ...)
         */
        OrganizationPageMetaResolver.prototype.resolveBreadcrumbs = function () {
            return this.breadcrumbs$;
        };
        return OrganizationPageMetaResolver;
    }(i1.PageMetaResolver));
    OrganizationPageMetaResolver.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationPageMetaResolver, deps: [{ token: i1__namespace.ContentPageMetaResolver }, { token: i1__namespace.TranslationService }, { token: i1__namespace.SemanticPathService }, { token: i1__namespace.RoutingService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrganizationPageMetaResolver.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationPageMetaResolver, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationPageMetaResolver, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ContentPageMetaResolver }, { type: i1__namespace.TranslationService }, { type: i1__namespace.SemanticPathService }, { type: i1__namespace.RoutingService }]; } });

    var OrganizationPageMetaModule = /** @class */ (function () {
        function OrganizationPageMetaModule() {
        }
        return OrganizationPageMetaModule;
    }());
    OrganizationPageMetaModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationPageMetaModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    OrganizationPageMetaModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationPageMetaModule });
    OrganizationPageMetaModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationPageMetaModule, providers: [
            {
                provide: i1.PageMetaResolver,
                useExisting: OrganizationPageMetaResolver,
                multi: true,
            },
        ] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationPageMetaModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        providers: [
                            {
                                provide: i1.PageMetaResolver,
                                useExisting: OrganizationPageMetaResolver,
                                multi: true,
                            },
                        ],
                    }]
            }] });

    var ORGANIZATION_FEATURE = 'organization';
    var BUDGET_FEATURE = 'budget';
    var BUDGET_ENTITIES = 'budget-entities';
    var BUDGET_LIST = 'budget-list';
    var COST_CENTER_FEATURE = 'costCenter';
    var COST_CENTER_ENTITIES = 'costCenter-entities';
    var COST_CENTER_LIST = 'costCenter-list';
    var COST_CENTER_ASSIGNED_BUDGETS = 'costCenter-assigned-budgets';
    var PERMISSION_FEATURE = 'permission';
    var PERMISSION_ENTITIES = 'permission-entities';
    var PERMISSION_LIST = 'permission-list';
    var PERMISSION_TYPES = 'permission-types';
    var PERMISSION_TYPES_LIST = 'permission-types-list';
    var ORG_UNIT_FEATURE = 'orgUnit';
    var ORG_UNIT_NODE_ENTITIES = 'orgUnitNode-entities';
    var ORG_UNIT_NODE_LIST = 'orgUnitNode-list';
    var ORG_UNIT_ENTITIES = 'orgUnit-entities';
    var ORG_UNIT_TREE_ENTITY = 'orgUnit-tree';
    var ORG_UNIT_APPROVAL_PROCESSES_ENTITIES = 'orgUnit-approval-processes';
    var ORG_UNIT_ASSIGNED_USERS = 'orgUnit-assigned-users';
    var ORG_UNIT_TREE = 'tree';
    var ORG_UNIT_APPROVAL_PROCESSES = 'approvalProcesses';
    var ORG_UNIT_NODES = 'availableOrgUnitNodes';
    var B2B_USER_FEATURE = 'b2bUser';
    var B2B_USER_ENTITIES = 'b2bUser-entities';
    var USER_LIST = 'b2bUser-list';
    var B2B_USER_APPROVERS = 'b2bUser-approvers';
    var B2B_USER_PERMISSIONS = 'b2bUser-permissions';
    var B2B_USER_USER_GROUPS = 'b2bUser-user-groups';
    var USER_GROUP_FEATURE = 'userGroup';
    var USER_GROUP_ENTITIES = 'userGroup-entities';
    var USER_GROUP_LIST = 'userGroup-list';
    var USER_GROUP_PERMISSIONS = 'userGroup-available-order-approval-permissions';
    var USER_GROUP_AVAILABLE_CUSTOMERS = 'userGroup-available-org-customers';
    var ADDRESS_ENTITIES = 'addresses-entities';
    var ADDRESS_LIST = 'addresses-list';

    var LOAD_BUDGET = '[Budget] Load Budget Data';
    var LOAD_BUDGET_FAIL = '[Budget] Load Budget Data Fail';
    var LOAD_BUDGET_SUCCESS = '[Budget] Load Budget Data Success';
    var LOAD_BUDGETS = '[Budget] Load Budgets';
    var LOAD_BUDGETS_FAIL = '[Budget] Load Budgets Fail';
    var LOAD_BUDGETS_SUCCESS = '[Budget] Load Budgets Success';
    var CREATE_BUDGET = '[Budget] Create Budget';
    var CREATE_BUDGET_FAIL = '[Budget] Create Budget Fail';
    var CREATE_BUDGET_SUCCESS = '[Budget] Create Budget Success';
    var UPDATE_BUDGET = '[Budget] Update Budget';
    var UPDATE_BUDGET_FAIL = '[Budget] Update Budget Fail';
    var UPDATE_BUDGET_SUCCESS = '[Budget] Update Budget Success';
    var LoadBudget = /** @class */ (function (_super) {
        __extends(LoadBudget, _super);
        function LoadBudget(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.budgetCode) || this;
            _this.payload = payload;
            _this.type = LOAD_BUDGET;
            return _this;
        }
        return LoadBudget;
    }(i1.StateUtils.EntityLoadAction));
    var LoadBudgetFail = /** @class */ (function (_super) {
        __extends(LoadBudgetFail, _super);
        function LoadBudgetFail(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.budgetCode, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_BUDGET_FAIL;
            return _this;
        }
        return LoadBudgetFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadBudgetSuccess = /** @class */ (function (_super) {
        __extends(LoadBudgetSuccess, _super);
        function LoadBudgetSuccess(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, Array.isArray(payload)
                ? payload.map(function (budget) { return budget === null || budget === void 0 ? void 0 : budget.code; })
                : payload === null || payload === void 0 ? void 0 : payload.code) || this;
            _this.payload = payload;
            _this.type = LOAD_BUDGET_SUCCESS;
            return _this;
        }
        return LoadBudgetSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadBudgets = /** @class */ (function (_super) {
        __extends(LoadBudgets, _super);
        function LoadBudgets(payload) {
            var _this = _super.call(this, BUDGET_LIST, i1.StateUtils.serializeSearchConfig(payload.params)) || this;
            _this.payload = payload;
            _this.type = LOAD_BUDGETS;
            return _this;
        }
        return LoadBudgets;
    }(i1.StateUtils.EntityLoadAction));
    var LoadBudgetsFail = /** @class */ (function (_super) {
        __extends(LoadBudgetsFail, _super);
        function LoadBudgetsFail(payload) {
            var _this = _super.call(this, BUDGET_LIST, i1.StateUtils.serializeSearchConfig(payload.params), payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_BUDGETS_FAIL;
            return _this;
        }
        return LoadBudgetsFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadBudgetsSuccess = /** @class */ (function (_super) {
        __extends(LoadBudgetsSuccess, _super);
        function LoadBudgetsSuccess(payload) {
            var _this = _super.call(this, BUDGET_LIST, i1.StateUtils.serializeSearchConfig(payload.params)) || this;
            _this.payload = payload;
            _this.type = LOAD_BUDGETS_SUCCESS;
            return _this;
        }
        return LoadBudgetsSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var CreateBudget = /** @class */ (function (_super) {
        __extends(CreateBudget, _super);
        function CreateBudget(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.budget.code) || this;
            _this.payload = payload;
            _this.type = CREATE_BUDGET;
            return _this;
        }
        return CreateBudget;
    }(i1.StateUtils.EntityLoadAction));
    var CreateBudgetFail = /** @class */ (function (_super) {
        __extends(CreateBudgetFail, _super);
        function CreateBudgetFail(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.budgetCode, payload.error) || this;
            _this.payload = payload;
            _this.type = CREATE_BUDGET_FAIL;
            return _this;
        }
        return CreateBudgetFail;
    }(i1.StateUtils.EntityFailAction));
    var CreateBudgetSuccess = /** @class */ (function (_super) {
        __extends(CreateBudgetSuccess, _super);
        function CreateBudgetSuccess(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.code, payload) || this;
            _this.payload = payload;
            _this.type = CREATE_BUDGET_SUCCESS;
            return _this;
        }
        return CreateBudgetSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UpdateBudget = /** @class */ (function (_super) {
        __extends(UpdateBudget, _super);
        function UpdateBudget(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.budget.code) || this;
            _this.payload = payload;
            _this.type = UPDATE_BUDGET;
            return _this;
        }
        return UpdateBudget;
    }(i1.StateUtils.EntityLoadAction));
    var UpdateBudgetFail = /** @class */ (function (_super) {
        __extends(UpdateBudgetFail, _super);
        function UpdateBudgetFail(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.budgetCode, payload.error) || this;
            _this.payload = payload;
            _this.type = UPDATE_BUDGET_FAIL;
            return _this;
        }
        return UpdateBudgetFail;
    }(i1.StateUtils.EntityFailAction));
    var UpdateBudgetSuccess = /** @class */ (function (_super) {
        __extends(UpdateBudgetSuccess, _super);
        function UpdateBudgetSuccess(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.code, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_BUDGET_SUCCESS;
            return _this;
        }
        return UpdateBudgetSuccess;
    }(i1.StateUtils.EntitySuccessAction));

    var budget_action = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_BUDGET: LOAD_BUDGET,
        LOAD_BUDGET_FAIL: LOAD_BUDGET_FAIL,
        LOAD_BUDGET_SUCCESS: LOAD_BUDGET_SUCCESS,
        LOAD_BUDGETS: LOAD_BUDGETS,
        LOAD_BUDGETS_FAIL: LOAD_BUDGETS_FAIL,
        LOAD_BUDGETS_SUCCESS: LOAD_BUDGETS_SUCCESS,
        CREATE_BUDGET: CREATE_BUDGET,
        CREATE_BUDGET_FAIL: CREATE_BUDGET_FAIL,
        CREATE_BUDGET_SUCCESS: CREATE_BUDGET_SUCCESS,
        UPDATE_BUDGET: UPDATE_BUDGET,
        UPDATE_BUDGET_FAIL: UPDATE_BUDGET_FAIL,
        UPDATE_BUDGET_SUCCESS: UPDATE_BUDGET_SUCCESS,
        LoadBudget: LoadBudget,
        LoadBudgetFail: LoadBudgetFail,
        LoadBudgetSuccess: LoadBudgetSuccess,
        LoadBudgets: LoadBudgets,
        LoadBudgetsFail: LoadBudgetsFail,
        LoadBudgetsSuccess: LoadBudgetsSuccess,
        CreateBudget: CreateBudget,
        CreateBudgetFail: CreateBudgetFail,
        CreateBudgetSuccess: CreateBudgetSuccess,
        UpdateBudget: UpdateBudget,
        UpdateBudgetFail: UpdateBudgetFail,
        UpdateBudgetSuccess: UpdateBudgetSuccess
    });

    var LOAD_ORG_UNIT = '[B2BUnit] Load B2BUnit Data';
    var LOAD_ORG_UNIT_FAIL = '[B2BUnit] Load B2BUnit Data Fail';
    var LOAD_ORG_UNIT_SUCCESS = '[B2BUnit] Load B2BUnit Data Success';
    var LOAD_UNIT_NODE = '[B2BUnitNode] Load B2BUnitNode Data';
    var LOAD_UNIT_NODE_FAIL = '[B2BUnitNode] Load B2BUnitNode Data Fail';
    var LOAD_UNIT_NODE_SUCCESS = '[B2BUnitNode] Load B2BUnitNode Data Success';
    var LOAD_UNIT_NODES = '[B2BUnitNode] Load B2BUnitNodes';
    var LOAD_UNIT_NODES_FAIL = '[B2BUnitNode] Load B2BUnitNodes Fail';
    var LOAD_UNIT_NODES_SUCCESS = '[B2BUnitNode] Load B2BUnitNodes Success';
    var CREATE_ORG_UNIT = '[B2BUnit] Create B2BUnitNode';
    var CREATE_ORG_UNIT_FAIL = '[B2BUnit] Create B2BUnitNode Fail';
    var CREATE_ORG_UNIT_SUCCESS = '[B2BUnit] Create B2BUnitNode Success';
    var UPDATE_ORG_UNIT = '[B2BUnit] Update B2BUnitNode';
    var UPDATE_ORG_UNIT_FAIL = '[B2BUnit] Update B2BUnitNode Fail';
    var UPDATE_ORG_UNIT_SUCCESS = '[B2BUnit] Update B2BUnitNode Success';
    var LOAD_UNIT_TREE = '[B2BUnitNode] Load Tree';
    var LOAD_UNIT_TREE_FAIL = '[B2BUnitNode] Load Tree Fail';
    var LOAD_UNIT_TREE_SUCCESS = '[B2BUnitNode] Load Tree Success';
    var LOAD_APPROVAL_PROCESSES = '[B2BApprovalProcess] Load Approval Processes';
    var LOAD_APPROVAL_PROCESSES_FAIL = '[B2BApprovalProcess] Load Approval Processes Fail';
    var LOAD_APPROVAL_PROCESSES_SUCCESS = '[B2BApprovalProcess] Load Approval Processes Success';
    var LOAD_ASSIGNED_USERS = '[B2BUnit] Load Users';
    var LOAD_ASSIGNED_USERS_SUCCESS = '[B2BUnit] Load Users success';
    var LOAD_ASSIGNED_USERS_FAIL = '[B2BUnit] Load Users fail';
    var ASSIGN_ROLE = '[B2BUnit] Assign Role';
    var ASSIGN_ROLE_SUCCESS = '[B2BUnit] Assign Role success';
    var ASSIGN_ROLE_FAIL = '[B2BUnit] Assign Role fail';
    var UNASSIGN_ROLE = '[B2BUnit] Unassign Role';
    var UNASSIGN_ROLE_SUCCESS = '[B2BUnit] Unassign Role success';
    var UNASSIGN_ROLE_FAIL = '[B2BUnit] Unassign Role fail';
    var ASSIGN_APPROVER = '[B2BUnit] Assign Approver';
    var ASSIGN_APPROVER_SUCCESS = '[B2BUnit] Assign Approver success';
    var ASSIGN_APPROVER_FAIL = '[B2BUnit] Assign Approver fail';
    var UNASSIGN_APPROVER = '[B2BUnit] Unassign Approver';
    var UNASSIGN_APPROVER_SUCCESS = '[B2BUnit] Unassign Approver success';
    var UNASSIGN_APPROVER_FAIL = '[B2BUnit] Unassign Approver fail';
    var CREATE_ADDRESS = '[B2BUnit] Create address';
    var CREATE_ADDRESS_SUCCESS = '[B2BUnit] Create address success';
    var CREATE_ADDRESS_FAIL = '[B2BUnit] Create address fail';
    var UPDATE_ADDRESS = '[B2BUnit] Update address';
    var UPDATE_ADDRESS_SUCCESS = '[B2BUnit] Update address success';
    var UPDATE_ADDRESS_FAIL = '[B2BUnit] Update address fail';
    var DELETE_ADDRESS = '[B2BUnit] Delete address';
    var DELETE_ADDRESS_SUCCESS = '[B2BUnit] Delete address success';
    var DELETE_ADDRESS_FAIL = '[B2BUnit] Delete address fail';
    var LOAD_ADDRESS_SUCCESS = '[B2BUnit] Load address success';
    var LOAD_ADDRESSES = '[B2BUnit] Load addresses';
    var LOAD_ADDRESSES_SUCCESS = '[B2BUnit] Load addresses success';
    var LOAD_ADDRESSES_FAIL = '[B2BUnit] Load addresses fail';
    var CLEAR_ASSIGNED_USERS = '[B2BUnit] Clear Assigned Users';
    var LoadOrgUnit = /** @class */ (function (_super) {
        __extends(LoadOrgUnit, _super);
        function LoadOrgUnit(payload) {
            var _this = _super.call(this, ORG_UNIT_ENTITIES, payload.orgUnitId) || this;
            _this.payload = payload;
            _this.type = LOAD_ORG_UNIT;
            return _this;
        }
        return LoadOrgUnit;
    }(i1.StateUtils.EntityLoadAction));
    var LoadOrgUnitFail = /** @class */ (function (_super) {
        __extends(LoadOrgUnitFail, _super);
        function LoadOrgUnitFail(payload) {
            var _this = _super.call(this, ORG_UNIT_ENTITIES, payload.orgUnitId, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_ORG_UNIT_FAIL;
            return _this;
        }
        return LoadOrgUnitFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadOrgUnitSuccess = /** @class */ (function (_super) {
        __extends(LoadOrgUnitSuccess, _super);
        function LoadOrgUnitSuccess(payload) {
            var _this = _super.call(this, ORG_UNIT_ENTITIES, Array.isArray(payload)
                ? payload.map(function (orgUnit) { return orgUnit === null || orgUnit === void 0 ? void 0 : orgUnit.uid; })
                : payload === null || payload === void 0 ? void 0 : payload.uid) || this;
            _this.payload = payload;
            _this.type = LOAD_ORG_UNIT_SUCCESS;
            return _this;
        }
        return LoadOrgUnitSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadOrgUnitNodes = /** @class */ (function (_super) {
        __extends(LoadOrgUnitNodes, _super);
        function LoadOrgUnitNodes(payload) {
            var _this = _super.call(this, ORG_UNIT_NODE_LIST, ORG_UNIT_NODES) || this;
            _this.payload = payload;
            _this.type = LOAD_UNIT_NODES;
            return _this;
        }
        return LoadOrgUnitNodes;
    }(i1.StateUtils.EntityLoadAction));
    var LoadOrgUnitNodesFail = /** @class */ (function (_super) {
        __extends(LoadOrgUnitNodesFail, _super);
        function LoadOrgUnitNodesFail(payload) {
            var _this = _super.call(this, ORG_UNIT_NODE_LIST, ORG_UNIT_NODES, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_UNIT_NODES_FAIL;
            return _this;
        }
        return LoadOrgUnitNodesFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadOrgUnitNodesSuccess = /** @class */ (function (_super) {
        __extends(LoadOrgUnitNodesSuccess, _super);
        function LoadOrgUnitNodesSuccess(payload) {
            var _this = _super.call(this, ORG_UNIT_NODE_LIST, ORG_UNIT_NODES) || this;
            _this.payload = payload;
            _this.type = LOAD_UNIT_NODES_SUCCESS;
            return _this;
        }
        return LoadOrgUnitNodesSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var CreateUnit = /** @class */ (function (_super) {
        __extends(CreateUnit, _super);
        function CreateUnit(payload) {
            var _this = _super.call(this, ORG_UNIT_ENTITIES, payload.unit.uid) || this;
            _this.payload = payload;
            _this.type = CREATE_ORG_UNIT;
            return _this;
        }
        return CreateUnit;
    }(i1.StateUtils.EntityLoadAction));
    var CreateUnitFail = /** @class */ (function (_super) {
        __extends(CreateUnitFail, _super);
        function CreateUnitFail(payload) {
            var _this = _super.call(this, ORG_UNIT_ENTITIES, payload.unitCode, payload.error) || this;
            _this.payload = payload;
            _this.type = CREATE_ORG_UNIT_FAIL;
            return _this;
        }
        return CreateUnitFail;
    }(i1.StateUtils.EntityFailAction));
    var CreateUnitSuccess = /** @class */ (function (_super) {
        __extends(CreateUnitSuccess, _super);
        function CreateUnitSuccess(payload) {
            var _this = _super.call(this, ORG_UNIT_ENTITIES, payload.uid, payload) || this;
            _this.payload = payload;
            _this.type = CREATE_ORG_UNIT_SUCCESS;
            return _this;
        }
        return CreateUnitSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UpdateUnit = /** @class */ (function (_super) {
        __extends(UpdateUnit, _super);
        function UpdateUnit(payload) {
            var _this = _super.call(this, ORG_UNIT_ENTITIES, payload.unit.uid) || this;
            _this.payload = payload;
            _this.type = UPDATE_ORG_UNIT;
            return _this;
        }
        return UpdateUnit;
    }(i1.StateUtils.EntityLoadAction));
    var UpdateUnitFail = /** @class */ (function (_super) {
        __extends(UpdateUnitFail, _super);
        function UpdateUnitFail(payload) {
            var _this = _super.call(this, ORG_UNIT_ENTITIES, payload.unitCode, payload.error) || this;
            _this.payload = payload;
            _this.type = UPDATE_ORG_UNIT_FAIL;
            return _this;
        }
        return UpdateUnitFail;
    }(i1.StateUtils.EntityFailAction));
    var UpdateUnitSuccess = /** @class */ (function (_super) {
        __extends(UpdateUnitSuccess, _super);
        function UpdateUnitSuccess(payload) {
            var _this = _super.call(this, ORG_UNIT_ENTITIES, payload.uid, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_ORG_UNIT_SUCCESS;
            return _this;
        }
        return UpdateUnitSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadTree = /** @class */ (function (_super) {
        __extends(LoadTree, _super);
        function LoadTree(payload) {
            var _this = _super.call(this, ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE) || this;
            _this.payload = payload;
            _this.type = LOAD_UNIT_TREE;
            return _this;
        }
        return LoadTree;
    }(i1.StateUtils.EntityLoadAction));
    var LoadTreeFail = /** @class */ (function (_super) {
        __extends(LoadTreeFail, _super);
        function LoadTreeFail(payload) {
            var _this = _super.call(this, ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_UNIT_TREE_FAIL;
            return _this;
        }
        return LoadTreeFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadTreeSuccess = /** @class */ (function (_super) {
        __extends(LoadTreeSuccess, _super);
        function LoadTreeSuccess(payload) {
            var _this = _super.call(this, ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE) || this;
            _this.payload = payload;
            _this.type = LOAD_UNIT_TREE_SUCCESS;
            return _this;
        }
        return LoadTreeSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadApprovalProcesses = /** @class */ (function (_super) {
        __extends(LoadApprovalProcesses, _super);
        function LoadApprovalProcesses(payload) {
            var _this = _super.call(this, ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES) || this;
            _this.payload = payload;
            _this.type = LOAD_APPROVAL_PROCESSES;
            return _this;
        }
        return LoadApprovalProcesses;
    }(i1.StateUtils.EntityLoadAction));
    var LoadApprovalProcessesFail = /** @class */ (function (_super) {
        __extends(LoadApprovalProcessesFail, _super);
        function LoadApprovalProcessesFail(payload) {
            var _this = _super.call(this, ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_APPROVAL_PROCESSES_FAIL;
            return _this;
        }
        return LoadApprovalProcessesFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadApprovalProcessesSuccess = /** @class */ (function (_super) {
        __extends(LoadApprovalProcessesSuccess, _super);
        function LoadApprovalProcessesSuccess(payload) {
            var _this = _super.call(this, ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES) || this;
            _this.payload = payload;
            _this.type = LOAD_APPROVAL_PROCESSES_SUCCESS;
            return _this;
        }
        return LoadApprovalProcessesSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadAssignedUsers = /** @class */ (function (_super) {
        __extends(LoadAssignedUsers, _super);
        function LoadAssignedUsers(payload) {
            var _this = _super.call(this, ORG_UNIT_ASSIGNED_USERS, i1.StateUtils.serializeSearchConfig(payload.params, payload.orgUnitId + "," + payload.roleId)) || this;
            _this.payload = payload;
            _this.type = LOAD_ASSIGNED_USERS;
            return _this;
        }
        return LoadAssignedUsers;
    }(i1.StateUtils.EntityLoadAction));
    var ClearAssignedUsers = /** @class */ (function (_super) {
        __extends(ClearAssignedUsers, _super);
        function ClearAssignedUsers(payload) {
            var _this = _super.call(this, ORG_UNIT_ASSIGNED_USERS, i1.StateUtils.serializeSearchConfig(payload.params, payload.orgUnitId + "," + payload.roleId)) || this;
            _this.payload = payload;
            _this.type = CLEAR_ASSIGNED_USERS;
            return _this;
        }
        return ClearAssignedUsers;
    }(i1.StateUtils.EntityRemoveAction));
    var LoadAssignedUsersFail = /** @class */ (function (_super) {
        __extends(LoadAssignedUsersFail, _super);
        function LoadAssignedUsersFail(payload) {
            var _this = _super.call(this, ORG_UNIT_ASSIGNED_USERS, i1.StateUtils.serializeSearchConfig(payload.params, payload.orgUnitId + "," + payload.roleId), payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_ASSIGNED_USERS_FAIL;
            return _this;
        }
        return LoadAssignedUsersFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadAssignedUsersSuccess = /** @class */ (function (_super) {
        __extends(LoadAssignedUsersSuccess, _super);
        function LoadAssignedUsersSuccess(payload) {
            var _this = _super.call(this, ORG_UNIT_ASSIGNED_USERS, i1.StateUtils.serializeSearchConfig(payload.params, payload.orgUnitId + "," + payload.roleId)) || this;
            _this.payload = payload;
            _this.type = LOAD_ASSIGNED_USERS_SUCCESS;
            return _this;
        }
        return LoadAssignedUsersSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var AssignRole = /** @class */ (function (_super) {
        __extends(AssignRole, _super);
        function AssignRole(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomerId) || this;
            _this.payload = payload;
            _this.type = ASSIGN_ROLE;
            return _this;
        }
        return AssignRole;
    }(i1.StateUtils.EntityLoadAction));
    var AssignRoleFail = /** @class */ (function (_super) {
        __extends(AssignRoleFail, _super);
        function AssignRoleFail(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomerId, payload.error) || this;
            _this.payload = payload;
            _this.type = ASSIGN_ROLE_FAIL;
            return _this;
        }
        return AssignRoleFail;
    }(i1.StateUtils.EntityFailAction));
    var AssignRoleSuccess = /** @class */ (function (_super) {
        __extends(AssignRoleSuccess, _super);
        function AssignRoleSuccess(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.uid, payload) || this;
            _this.payload = payload;
            _this.type = ASSIGN_ROLE_SUCCESS;
            return _this;
        }
        return AssignRoleSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UnassignRole = /** @class */ (function (_super) {
        __extends(UnassignRole, _super);
        function UnassignRole(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomerId) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_ROLE;
            return _this;
        }
        return UnassignRole;
    }(i1.StateUtils.EntityLoadAction));
    var UnassignRoleFail = /** @class */ (function (_super) {
        __extends(UnassignRoleFail, _super);
        function UnassignRoleFail(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomerId, payload.error) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_ROLE_FAIL;
            return _this;
        }
        return UnassignRoleFail;
    }(i1.StateUtils.EntityFailAction));
    var UnassignRoleSuccess = /** @class */ (function (_super) {
        __extends(UnassignRoleSuccess, _super);
        function UnassignRoleSuccess(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.uid, payload) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_ROLE_SUCCESS;
            return _this;
        }
        return UnassignRoleSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var AssignApprover = /** @class */ (function (_super) {
        __extends(AssignApprover, _super);
        function AssignApprover(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomerId) || this;
            _this.payload = payload;
            _this.type = ASSIGN_APPROVER;
            return _this;
        }
        return AssignApprover;
    }(i1.StateUtils.EntityLoadAction));
    var AssignApproverFail = /** @class */ (function (_super) {
        __extends(AssignApproverFail, _super);
        function AssignApproverFail(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomerId, payload.error) || this;
            _this.payload = payload;
            _this.type = ASSIGN_APPROVER_FAIL;
            return _this;
        }
        return AssignApproverFail;
    }(i1.StateUtils.EntityFailAction));
    var AssignApproverSuccess = /** @class */ (function (_super) {
        __extends(AssignApproverSuccess, _super);
        function AssignApproverSuccess(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.uid, payload) || this;
            _this.payload = payload;
            _this.type = ASSIGN_APPROVER_SUCCESS;
            return _this;
        }
        return AssignApproverSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UnassignApprover = /** @class */ (function (_super) {
        __extends(UnassignApprover, _super);
        function UnassignApprover(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomerId) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_APPROVER;
            return _this;
        }
        return UnassignApprover;
    }(i1.StateUtils.EntityLoadAction));
    var UnassignApproverFail = /** @class */ (function (_super) {
        __extends(UnassignApproverFail, _super);
        function UnassignApproverFail(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomerId, payload.error) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_APPROVER_FAIL;
            return _this;
        }
        return UnassignApproverFail;
    }(i1.StateUtils.EntityFailAction));
    var UnassignApproverSuccess = /** @class */ (function (_super) {
        __extends(UnassignApproverSuccess, _super);
        function UnassignApproverSuccess(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.uid, payload) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_APPROVER_SUCCESS;
            return _this;
        }
        return UnassignApproverSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var CreateAddress = /** @class */ (function (_super) {
        __extends(CreateAddress, _super);
        function CreateAddress(payload) {
            var _this = _super.call(this, ADDRESS_ENTITIES, payload.address.id) || this;
            _this.payload = payload;
            _this.type = CREATE_ADDRESS;
            return _this;
        }
        return CreateAddress;
    }(i1.StateUtils.EntityLoadAction));
    var CreateAddressFail = /** @class */ (function (_super) {
        __extends(CreateAddressFail, _super);
        function CreateAddressFail(payload) {
            var _this = _super.call(this, ADDRESS_ENTITIES, payload.addressId, payload.error) || this;
            _this.payload = payload;
            _this.type = CREATE_ADDRESS_FAIL;
            return _this;
        }
        return CreateAddressFail;
    }(i1.StateUtils.EntityFailAction));
    var CreateAddressSuccess = /** @class */ (function (_super) {
        __extends(CreateAddressSuccess, _super);
        function CreateAddressSuccess(payload) {
            var _this = _super.call(this, ADDRESS_ENTITIES, payload.id, payload) || this;
            _this.payload = payload;
            _this.type = CREATE_ADDRESS_SUCCESS;
            return _this;
        }
        return CreateAddressSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UpdateAddress = /** @class */ (function (_super) {
        __extends(UpdateAddress, _super);
        function UpdateAddress(payload) {
            var _this = _super.call(this, ADDRESS_ENTITIES, payload.address.id) || this;
            _this.payload = payload;
            _this.type = UPDATE_ADDRESS;
            return _this;
        }
        return UpdateAddress;
    }(i1.StateUtils.EntityLoadAction));
    var UpdateAddressFail = /** @class */ (function (_super) {
        __extends(UpdateAddressFail, _super);
        function UpdateAddressFail(payload) {
            var _this = _super.call(this, ADDRESS_ENTITIES, payload.addressId, payload.error) || this;
            _this.payload = payload;
            _this.type = UPDATE_ADDRESS_FAIL;
            return _this;
        }
        return UpdateAddressFail;
    }(i1.StateUtils.EntityFailAction));
    var UpdateAddressSuccess = /** @class */ (function (_super) {
        __extends(UpdateAddressSuccess, _super);
        function UpdateAddressSuccess(payload) {
            var _this = _super.call(this, ADDRESS_ENTITIES, payload.id, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_ADDRESS_SUCCESS;
            return _this;
        }
        return UpdateAddressSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var DeleteAddress = /** @class */ (function (_super) {
        __extends(DeleteAddress, _super);
        function DeleteAddress(payload) {
            var _this = _super.call(this, ADDRESS_ENTITIES, payload.addressId) || this;
            _this.payload = payload;
            _this.type = DELETE_ADDRESS;
            return _this;
        }
        return DeleteAddress;
    }(i1.StateUtils.EntityLoadAction));
    var DeleteAddressFail = /** @class */ (function (_super) {
        __extends(DeleteAddressFail, _super);
        function DeleteAddressFail(payload) {
            var _this = _super.call(this, ADDRESS_ENTITIES, payload.addressId, payload.error) || this;
            _this.payload = payload;
            _this.type = DELETE_ADDRESS_FAIL;
            return _this;
        }
        return DeleteAddressFail;
    }(i1.StateUtils.EntityFailAction));
    var DeleteAddressSuccess = /** @class */ (function (_super) {
        __extends(DeleteAddressSuccess, _super);
        function DeleteAddressSuccess(payload) {
            var _this = _super.call(this, ADDRESS_ENTITIES, payload.id) || this;
            _this.payload = payload;
            _this.type = DELETE_ADDRESS_SUCCESS;
            return _this;
        }
        return DeleteAddressSuccess;
    }(i1.StateUtils.EntityRemoveAction));
    var LoadAddressSuccess = /** @class */ (function (_super) {
        __extends(LoadAddressSuccess, _super);
        function LoadAddressSuccess(payload) {
            var _this = _super.call(this, ADDRESS_ENTITIES, Array.isArray(payload)
                ? payload.map(function (address) { return address === null || address === void 0 ? void 0 : address.id; })
                : payload === null || payload === void 0 ? void 0 : payload.id) || this;
            _this.payload = payload;
            _this.type = LOAD_ADDRESS_SUCCESS;
            return _this;
        }
        return LoadAddressSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadAddresses = /** @class */ (function (_super) {
        __extends(LoadAddresses, _super);
        function LoadAddresses(payload) {
            var _this = _super.call(this, ADDRESS_LIST, payload.orgUnitId) || this;
            _this.payload = payload;
            _this.type = LOAD_ADDRESSES;
            return _this;
        }
        return LoadAddresses;
    }(i1.StateUtils.EntityLoadAction));
    var LoadAddressesFail = /** @class */ (function (_super) {
        __extends(LoadAddressesFail, _super);
        function LoadAddressesFail(payload) {
            var _this = _super.call(this, ADDRESS_LIST, payload.orgUnitId, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_ADDRESSES_FAIL;
            return _this;
        }
        return LoadAddressesFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadAddressesSuccess = /** @class */ (function (_super) {
        __extends(LoadAddressesSuccess, _super);
        function LoadAddressesSuccess(payload) {
            var _this = _super.call(this, ADDRESS_LIST, payload.orgUnitId) || this;
            _this.payload = payload;
            _this.type = LOAD_ADDRESSES_SUCCESS;
            return _this;
        }
        return LoadAddressesSuccess;
    }(i1.StateUtils.EntitySuccessAction));

    var orgUnit_action = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_ORG_UNIT: LOAD_ORG_UNIT,
        LOAD_ORG_UNIT_FAIL: LOAD_ORG_UNIT_FAIL,
        LOAD_ORG_UNIT_SUCCESS: LOAD_ORG_UNIT_SUCCESS,
        LOAD_UNIT_NODE: LOAD_UNIT_NODE,
        LOAD_UNIT_NODE_FAIL: LOAD_UNIT_NODE_FAIL,
        LOAD_UNIT_NODE_SUCCESS: LOAD_UNIT_NODE_SUCCESS,
        LOAD_UNIT_NODES: LOAD_UNIT_NODES,
        LOAD_UNIT_NODES_FAIL: LOAD_UNIT_NODES_FAIL,
        LOAD_UNIT_NODES_SUCCESS: LOAD_UNIT_NODES_SUCCESS,
        CREATE_ORG_UNIT: CREATE_ORG_UNIT,
        CREATE_ORG_UNIT_FAIL: CREATE_ORG_UNIT_FAIL,
        CREATE_ORG_UNIT_SUCCESS: CREATE_ORG_UNIT_SUCCESS,
        UPDATE_ORG_UNIT: UPDATE_ORG_UNIT,
        UPDATE_ORG_UNIT_FAIL: UPDATE_ORG_UNIT_FAIL,
        UPDATE_ORG_UNIT_SUCCESS: UPDATE_ORG_UNIT_SUCCESS,
        LOAD_UNIT_TREE: LOAD_UNIT_TREE,
        LOAD_UNIT_TREE_FAIL: LOAD_UNIT_TREE_FAIL,
        LOAD_UNIT_TREE_SUCCESS: LOAD_UNIT_TREE_SUCCESS,
        LOAD_APPROVAL_PROCESSES: LOAD_APPROVAL_PROCESSES,
        LOAD_APPROVAL_PROCESSES_FAIL: LOAD_APPROVAL_PROCESSES_FAIL,
        LOAD_APPROVAL_PROCESSES_SUCCESS: LOAD_APPROVAL_PROCESSES_SUCCESS,
        LOAD_ASSIGNED_USERS: LOAD_ASSIGNED_USERS,
        LOAD_ASSIGNED_USERS_SUCCESS: LOAD_ASSIGNED_USERS_SUCCESS,
        LOAD_ASSIGNED_USERS_FAIL: LOAD_ASSIGNED_USERS_FAIL,
        ASSIGN_ROLE: ASSIGN_ROLE,
        ASSIGN_ROLE_SUCCESS: ASSIGN_ROLE_SUCCESS,
        ASSIGN_ROLE_FAIL: ASSIGN_ROLE_FAIL,
        UNASSIGN_ROLE: UNASSIGN_ROLE,
        UNASSIGN_ROLE_SUCCESS: UNASSIGN_ROLE_SUCCESS,
        UNASSIGN_ROLE_FAIL: UNASSIGN_ROLE_FAIL,
        ASSIGN_APPROVER: ASSIGN_APPROVER,
        ASSIGN_APPROVER_SUCCESS: ASSIGN_APPROVER_SUCCESS,
        ASSIGN_APPROVER_FAIL: ASSIGN_APPROVER_FAIL,
        UNASSIGN_APPROVER: UNASSIGN_APPROVER,
        UNASSIGN_APPROVER_SUCCESS: UNASSIGN_APPROVER_SUCCESS,
        UNASSIGN_APPROVER_FAIL: UNASSIGN_APPROVER_FAIL,
        CREATE_ADDRESS: CREATE_ADDRESS,
        CREATE_ADDRESS_SUCCESS: CREATE_ADDRESS_SUCCESS,
        CREATE_ADDRESS_FAIL: CREATE_ADDRESS_FAIL,
        UPDATE_ADDRESS: UPDATE_ADDRESS,
        UPDATE_ADDRESS_SUCCESS: UPDATE_ADDRESS_SUCCESS,
        UPDATE_ADDRESS_FAIL: UPDATE_ADDRESS_FAIL,
        DELETE_ADDRESS: DELETE_ADDRESS,
        DELETE_ADDRESS_SUCCESS: DELETE_ADDRESS_SUCCESS,
        DELETE_ADDRESS_FAIL: DELETE_ADDRESS_FAIL,
        LOAD_ADDRESS_SUCCESS: LOAD_ADDRESS_SUCCESS,
        LOAD_ADDRESSES: LOAD_ADDRESSES,
        LOAD_ADDRESSES_SUCCESS: LOAD_ADDRESSES_SUCCESS,
        LOAD_ADDRESSES_FAIL: LOAD_ADDRESSES_FAIL,
        CLEAR_ASSIGNED_USERS: CLEAR_ASSIGNED_USERS,
        LoadOrgUnit: LoadOrgUnit,
        LoadOrgUnitFail: LoadOrgUnitFail,
        LoadOrgUnitSuccess: LoadOrgUnitSuccess,
        LoadOrgUnitNodes: LoadOrgUnitNodes,
        LoadOrgUnitNodesFail: LoadOrgUnitNodesFail,
        LoadOrgUnitNodesSuccess: LoadOrgUnitNodesSuccess,
        CreateUnit: CreateUnit,
        CreateUnitFail: CreateUnitFail,
        CreateUnitSuccess: CreateUnitSuccess,
        UpdateUnit: UpdateUnit,
        UpdateUnitFail: UpdateUnitFail,
        UpdateUnitSuccess: UpdateUnitSuccess,
        LoadTree: LoadTree,
        LoadTreeFail: LoadTreeFail,
        LoadTreeSuccess: LoadTreeSuccess,
        LoadApprovalProcesses: LoadApprovalProcesses,
        LoadApprovalProcessesFail: LoadApprovalProcessesFail,
        LoadApprovalProcessesSuccess: LoadApprovalProcessesSuccess,
        LoadAssignedUsers: LoadAssignedUsers,
        ClearAssignedUsers: ClearAssignedUsers,
        LoadAssignedUsersFail: LoadAssignedUsersFail,
        LoadAssignedUsersSuccess: LoadAssignedUsersSuccess,
        AssignRole: AssignRole,
        AssignRoleFail: AssignRoleFail,
        AssignRoleSuccess: AssignRoleSuccess,
        UnassignRole: UnassignRole,
        UnassignRoleFail: UnassignRoleFail,
        UnassignRoleSuccess: UnassignRoleSuccess,
        AssignApprover: AssignApprover,
        AssignApproverFail: AssignApproverFail,
        AssignApproverSuccess: AssignApproverSuccess,
        UnassignApprover: UnassignApprover,
        UnassignApproverFail: UnassignApproverFail,
        UnassignApproverSuccess: UnassignApproverSuccess,
        CreateAddress: CreateAddress,
        CreateAddressFail: CreateAddressFail,
        CreateAddressSuccess: CreateAddressSuccess,
        UpdateAddress: UpdateAddress,
        UpdateAddressFail: UpdateAddressFail,
        UpdateAddressSuccess: UpdateAddressSuccess,
        DeleteAddress: DeleteAddress,
        DeleteAddressFail: DeleteAddressFail,
        DeleteAddressSuccess: DeleteAddressSuccess,
        LoadAddressSuccess: LoadAddressSuccess,
        LoadAddresses: LoadAddresses,
        LoadAddressesFail: LoadAddressesFail,
        LoadAddressesSuccess: LoadAddressesSuccess
    });

    var LOAD_USER_GROUP = '[UserGroup] Load UserGroup Data';
    var LOAD_USER_GROUP_FAIL = '[UserGroup] Load UserGroup Data Fail';
    var LOAD_USER_GROUP_SUCCESS = '[UserGroup] Load UserGroup Data Success';
    var LOAD_USER_GROUPS = '[UserGroup] Load UserGroups';
    var LOAD_USER_GROUPS_FAIL = '[UserGroup] Load UserGroups Fail';
    var LOAD_USER_GROUPS_SUCCESS = '[UserGroup] Load UserGroups Success';
    var LOAD_USER_GROUP_PERMISSIONS = '[UserGroup] Load Permissions Data';
    var LOAD_USER_GROUP_PERMISSIONS_FAIL = '[UserGroup] Load Permissions Data Fail';
    var LOAD_USER_GROUP_PERMISSIONS_SUCCESS = '[UserGroup] Load Permissions Data Success';
    var LOAD_USER_GROUP_AVAILABLE_CUSTOMERS = '[UserGroup] Load Customers Data';
    var LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_FAIL = '[UserGroup] Load Customers Data Fail';
    var LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS = '[UserGroup] Load Customers Data Success';
    var CREATE_USER_GROUP = '[UserGroup] Create UserGroup';
    var CREATE_USER_GROUP_FAIL = '[UserGroup] Create UserGroup Fail';
    var CREATE_USER_GROUP_SUCCESS = '[UserGroup] Create UserGroup Success';
    var USER_GROUP_ASSIGN_MEMBER = '[UserGroup] Assign Member';
    var USER_GROUP_ASSIGN_MEMBER_FAIL = '[UserGroup] Assign Member Fail';
    var USER_GROUP_ASSIGN_MEMBER_SUCCESS = '[UserGroup] Assign Member Success';
    var USER_GROUP_ASSIGN_PERMISSION = '[UserGroup] Assign Permissions';
    var USER_GROUP_ASSIGN_PERMISSION_FAIL = '[UserGroup] Assign Permissions Fail';
    var USER_GROUP_ASSIGN_PERMISSION_SUCCESS = '[UserGroup] Assign Permissions Success';
    var UPDATE_USER_GROUP = '[UserGroup] Update UserGroup';
    var UPDATE_USER_GROUP_FAIL = '[UserGroup] Update UserGroup Fail';
    var UPDATE_USER_GROUP_SUCCESS = '[UserGroup] Update UserGroup Success';
    var DELETE_USER_GROUP = '[UserGroup] Delete UserGroup';
    var DELETE_USER_GROUP_FAIL = '[UserGroup] Delete UserGroup Fail';
    var DELETE_USER_GROUP_SUCCESS = '[UserGroup] Delete UserGroup Success';
    var USER_GROUP_UNASSIGN_ALL_MEMBERS = '[UserGroup] Unassign Members';
    var USER_GROUP_UNASSIGN_ALL_MEMBERS_FAIL = '[UserGroup] Unassign Members Fail';
    var USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS = '[UserGroup] Unassign Members Success';
    var USER_GROUP_UNASSIGN_MEMBER = '[UserGroup] Unassign Member';
    var USER_GROUP_UNASSIGN_MEMBER_FAIL = '[UserGroup] Unassign Member Fail';
    var USER_GROUP_UNASSIGN_MEMBER_SUCCESS = '[UserGroup] Unassign Member Success';
    var USER_GROUP_UNASSIGN_PERMISSION = '[UserGroup] Unassign Permission';
    var USER_GROUP_UNASSIGN_PERMISSION_FAIL = '[UserGroup] Unassign Permission Fail';
    var USER_GROUP_UNASSIGN_PERMISSION_SUCCESS = '[UserGroup] Unassign Permission Success';
    var LoadUserGroup = /** @class */ (function (_super) {
        __extends(LoadUserGroup, _super);
        function LoadUserGroup(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroupId) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_GROUP;
            return _this;
        }
        return LoadUserGroup;
    }(i1.StateUtils.EntityLoadAction));
    var LoadUserGroupFail = /** @class */ (function (_super) {
        __extends(LoadUserGroupFail, _super);
        function LoadUserGroupFail(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroupId, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_GROUP_FAIL;
            return _this;
        }
        return LoadUserGroupFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadUserGroupSuccess = /** @class */ (function (_super) {
        __extends(LoadUserGroupSuccess, _super);
        function LoadUserGroupSuccess(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, Array.isArray(payload)
                ? payload.map(function (userGroup) { return userGroup === null || userGroup === void 0 ? void 0 : userGroup.uid; })
                : payload === null || payload === void 0 ? void 0 : payload.uid) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_GROUP_SUCCESS;
            return _this;
        }
        return LoadUserGroupSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadUserGroups = /** @class */ (function (_super) {
        __extends(LoadUserGroups, _super);
        function LoadUserGroups(payload) {
            var _this = _super.call(this, USER_GROUP_LIST, i1.StateUtils.serializeSearchConfig(payload.params)) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_GROUPS;
            return _this;
        }
        return LoadUserGroups;
    }(i1.StateUtils.EntityLoadAction));
    var LoadUserGroupsFail = /** @class */ (function (_super) {
        __extends(LoadUserGroupsFail, _super);
        function LoadUserGroupsFail(payload) {
            var _this = _super.call(this, USER_GROUP_LIST, i1.StateUtils.serializeSearchConfig(payload.params), payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_GROUPS_FAIL;
            return _this;
        }
        return LoadUserGroupsFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadUserGroupsSuccess = /** @class */ (function (_super) {
        __extends(LoadUserGroupsSuccess, _super);
        function LoadUserGroupsSuccess(payload) {
            var _this = _super.call(this, USER_GROUP_LIST, i1.StateUtils.serializeSearchConfig(payload.params)) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_GROUPS_SUCCESS;
            return _this;
        }
        return LoadUserGroupsSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadPermissions$1 = /** @class */ (function (_super) {
        __extends(LoadPermissions, _super);
        function LoadPermissions(payload) {
            var _this = _super.call(this, USER_GROUP_PERMISSIONS, i1.StateUtils.serializeSearchConfig(payload.params, payload.userGroupId)) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_GROUP_PERMISSIONS;
            return _this;
        }
        return LoadPermissions;
    }(i1.StateUtils.EntityLoadAction));
    var LoadPermissionsFail$1 = /** @class */ (function (_super) {
        __extends(LoadPermissionsFail, _super);
        function LoadPermissionsFail(payload) {
            var _this = _super.call(this, USER_GROUP_PERMISSIONS, i1.StateUtils.serializeSearchConfig(payload.params, payload.userGroupId), payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_GROUP_PERMISSIONS_FAIL;
            return _this;
        }
        return LoadPermissionsFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadPermissionsSuccess$1 = /** @class */ (function (_super) {
        __extends(LoadPermissionsSuccess, _super);
        function LoadPermissionsSuccess(payload) {
            var _this = _super.call(this, USER_GROUP_PERMISSIONS, i1.StateUtils.serializeSearchConfig(payload.params, payload.userGroupId)) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_GROUP_PERMISSIONS_SUCCESS;
            return _this;
        }
        return LoadPermissionsSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadAvailableOrgCustomers = /** @class */ (function (_super) {
        __extends(LoadAvailableOrgCustomers, _super);
        function LoadAvailableOrgCustomers(payload) {
            var _this = _super.call(this, USER_GROUP_AVAILABLE_CUSTOMERS, i1.StateUtils.serializeSearchConfig(payload.params, payload.userGroupId)) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_GROUP_AVAILABLE_CUSTOMERS;
            return _this;
        }
        return LoadAvailableOrgCustomers;
    }(i1.StateUtils.EntityLoadAction));
    var LoadAvailableOrgCustomersFail = /** @class */ (function (_super) {
        __extends(LoadAvailableOrgCustomersFail, _super);
        function LoadAvailableOrgCustomersFail(payload) {
            var _this = _super.call(this, USER_GROUP_AVAILABLE_CUSTOMERS, i1.StateUtils.serializeSearchConfig(payload.params, payload.userGroupId), payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_FAIL;
            return _this;
        }
        return LoadAvailableOrgCustomersFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadAvailableOrgCustomersSuccess = /** @class */ (function (_super) {
        __extends(LoadAvailableOrgCustomersSuccess, _super);
        function LoadAvailableOrgCustomersSuccess(payload) {
            var _this = _super.call(this, USER_GROUP_AVAILABLE_CUSTOMERS, i1.StateUtils.serializeSearchConfig(payload.params, payload.userGroupId)) || this;
            _this.payload = payload;
            _this.type = LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS;
            return _this;
        }
        return LoadAvailableOrgCustomersSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var CreateUserGroup = /** @class */ (function (_super) {
        __extends(CreateUserGroup, _super);
        function CreateUserGroup(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroup.uid) || this;
            _this.payload = payload;
            _this.type = CREATE_USER_GROUP;
            return _this;
        }
        return CreateUserGroup;
    }(i1.StateUtils.EntityLoadAction));
    var CreateUserGroupFail = /** @class */ (function (_super) {
        __extends(CreateUserGroupFail, _super);
        function CreateUserGroupFail(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroupId, payload.error) || this;
            _this.payload = payload;
            _this.type = CREATE_USER_GROUP_FAIL;
            return _this;
        }
        return CreateUserGroupFail;
    }(i1.StateUtils.EntityFailAction));
    var CreateUserGroupSuccess = /** @class */ (function (_super) {
        __extends(CreateUserGroupSuccess, _super);
        function CreateUserGroupSuccess(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.uid, payload) || this;
            _this.payload = payload;
            _this.type = CREATE_USER_GROUP_SUCCESS;
            return _this;
        }
        return CreateUserGroupSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var AssignMember = /** @class */ (function (_super) {
        __extends(AssignMember, _super);
        function AssignMember(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.customerId) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_ASSIGN_MEMBER;
            return _this;
        }
        return AssignMember;
    }(i1.StateUtils.EntityLoadAction));
    var AssignMemberFail = /** @class */ (function (_super) {
        __extends(AssignMemberFail, _super);
        function AssignMemberFail(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.customerId, payload.error) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_ASSIGN_MEMBER_FAIL;
            return _this;
        }
        return AssignMemberFail;
    }(i1.StateUtils.EntityFailAction));
    var AssignMemberSuccess = /** @class */ (function (_super) {
        __extends(AssignMemberSuccess, _super);
        function AssignMemberSuccess(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.customerId, payload) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_ASSIGN_MEMBER_SUCCESS;
            return _this;
        }
        return AssignMemberSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var AssignPermission = /** @class */ (function (_super) {
        __extends(AssignPermission, _super);
        function AssignPermission(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionUid) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_ASSIGN_PERMISSION;
            return _this;
        }
        return AssignPermission;
    }(i1.StateUtils.EntityLoadAction));
    var AssignPermissionFail = /** @class */ (function (_super) {
        __extends(AssignPermissionFail, _super);
        function AssignPermissionFail(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionUid, payload.error) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_ASSIGN_PERMISSION_FAIL;
            return _this;
        }
        return AssignPermissionFail;
    }(i1.StateUtils.EntityFailAction));
    var AssignPermissionSuccess = /** @class */ (function (_super) {
        __extends(AssignPermissionSuccess, _super);
        function AssignPermissionSuccess(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionUid, payload) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_ASSIGN_PERMISSION_SUCCESS;
            return _this;
        }
        return AssignPermissionSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UpdateUserGroup = /** @class */ (function (_super) {
        __extends(UpdateUserGroup, _super);
        function UpdateUserGroup(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroup.uid) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_GROUP;
            return _this;
        }
        return UpdateUserGroup;
    }(i1.StateUtils.EntityLoadAction));
    var UpdateUserGroupFail = /** @class */ (function (_super) {
        __extends(UpdateUserGroupFail, _super);
        function UpdateUserGroupFail(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroupId, payload.error) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_GROUP_FAIL;
            return _this;
        }
        return UpdateUserGroupFail;
    }(i1.StateUtils.EntityFailAction));
    var UpdateUserGroupSuccess = /** @class */ (function (_super) {
        __extends(UpdateUserGroupSuccess, _super);
        function UpdateUserGroupSuccess(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.uid, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_USER_GROUP_SUCCESS;
            return _this;
        }
        return UpdateUserGroupSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var DeleteUserGroup = /** @class */ (function (_super) {
        __extends(DeleteUserGroup, _super);
        function DeleteUserGroup(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroupId) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_GROUP;
            return _this;
        }
        return DeleteUserGroup;
    }(i1.StateUtils.EntityLoadAction));
    var DeleteUserGroupFail = /** @class */ (function (_super) {
        __extends(DeleteUserGroupFail, _super);
        function DeleteUserGroupFail(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroupId, payload.error) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_GROUP_FAIL;
            return _this;
        }
        return DeleteUserGroupFail;
    }(i1.StateUtils.EntityFailAction));
    var DeleteUserGroupSuccess = /** @class */ (function (_super) {
        __extends(DeleteUserGroupSuccess, _super);
        function DeleteUserGroupSuccess(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.uid, payload) || this;
            _this.payload = payload;
            _this.type = DELETE_USER_GROUP_SUCCESS;
            return _this;
        }
        return DeleteUserGroupSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UnassignMember = /** @class */ (function (_super) {
        __extends(UnassignMember, _super);
        function UnassignMember(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.customerId) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_UNASSIGN_MEMBER;
            return _this;
        }
        return UnassignMember;
    }(i1.StateUtils.EntityLoadAction));
    var UnassignMemberFail = /** @class */ (function (_super) {
        __extends(UnassignMemberFail, _super);
        function UnassignMemberFail(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.customerId, payload.error) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_UNASSIGN_MEMBER_FAIL;
            return _this;
        }
        return UnassignMemberFail;
    }(i1.StateUtils.EntityFailAction));
    var UnassignMemberSuccess = /** @class */ (function (_super) {
        __extends(UnassignMemberSuccess, _super);
        function UnassignMemberSuccess(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.customerId, payload) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_UNASSIGN_MEMBER_SUCCESS;
            return _this;
        }
        return UnassignMemberSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UnassignAllMembers = /** @class */ (function (_super) {
        __extends(UnassignAllMembers, _super);
        function UnassignAllMembers(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroupId) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_UNASSIGN_ALL_MEMBERS;
            return _this;
        }
        return UnassignAllMembers;
    }(i1.StateUtils.EntityLoadAction));
    var UnassignAllMembersFail = /** @class */ (function (_super) {
        __extends(UnassignAllMembersFail, _super);
        function UnassignAllMembersFail(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroupId, payload.error) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_UNASSIGN_ALL_MEMBERS_FAIL;
            return _this;
        }
        return UnassignAllMembersFail;
    }(i1.StateUtils.EntityFailAction));
    var UnassignAllMembersSuccess = /** @class */ (function (_super) {
        __extends(UnassignAllMembersSuccess, _super);
        function UnassignAllMembersSuccess(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.uid, payload) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS;
            return _this;
        }
        return UnassignAllMembersSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UnassignPermission = /** @class */ (function (_super) {
        __extends(UnassignPermission, _super);
        function UnassignPermission(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionUid) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_UNASSIGN_PERMISSION;
            return _this;
        }
        return UnassignPermission;
    }(i1.StateUtils.EntityLoadAction));
    var UnassignPermissionFail = /** @class */ (function (_super) {
        __extends(UnassignPermissionFail, _super);
        function UnassignPermissionFail(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionUid, payload.error) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_UNASSIGN_PERMISSION_FAIL;
            return _this;
        }
        return UnassignPermissionFail;
    }(i1.StateUtils.EntityFailAction));
    var UnassignPermissionSuccess = /** @class */ (function (_super) {
        __extends(UnassignPermissionSuccess, _super);
        function UnassignPermissionSuccess(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionUid, payload) || this;
            _this.payload = payload;
            _this.type = USER_GROUP_UNASSIGN_PERMISSION_SUCCESS;
            return _this;
        }
        return UnassignPermissionSuccess;
    }(i1.StateUtils.EntitySuccessAction));

    var userGroup_action = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_USER_GROUP: LOAD_USER_GROUP,
        LOAD_USER_GROUP_FAIL: LOAD_USER_GROUP_FAIL,
        LOAD_USER_GROUP_SUCCESS: LOAD_USER_GROUP_SUCCESS,
        LOAD_USER_GROUPS: LOAD_USER_GROUPS,
        LOAD_USER_GROUPS_FAIL: LOAD_USER_GROUPS_FAIL,
        LOAD_USER_GROUPS_SUCCESS: LOAD_USER_GROUPS_SUCCESS,
        LOAD_USER_GROUP_PERMISSIONS: LOAD_USER_GROUP_PERMISSIONS,
        LOAD_USER_GROUP_PERMISSIONS_FAIL: LOAD_USER_GROUP_PERMISSIONS_FAIL,
        LOAD_USER_GROUP_PERMISSIONS_SUCCESS: LOAD_USER_GROUP_PERMISSIONS_SUCCESS,
        LOAD_USER_GROUP_AVAILABLE_CUSTOMERS: LOAD_USER_GROUP_AVAILABLE_CUSTOMERS,
        LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_FAIL: LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_FAIL,
        LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS: LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS,
        CREATE_USER_GROUP: CREATE_USER_GROUP,
        CREATE_USER_GROUP_FAIL: CREATE_USER_GROUP_FAIL,
        CREATE_USER_GROUP_SUCCESS: CREATE_USER_GROUP_SUCCESS,
        USER_GROUP_ASSIGN_MEMBER: USER_GROUP_ASSIGN_MEMBER,
        USER_GROUP_ASSIGN_MEMBER_FAIL: USER_GROUP_ASSIGN_MEMBER_FAIL,
        USER_GROUP_ASSIGN_MEMBER_SUCCESS: USER_GROUP_ASSIGN_MEMBER_SUCCESS,
        USER_GROUP_ASSIGN_PERMISSION: USER_GROUP_ASSIGN_PERMISSION,
        USER_GROUP_ASSIGN_PERMISSION_FAIL: USER_GROUP_ASSIGN_PERMISSION_FAIL,
        USER_GROUP_ASSIGN_PERMISSION_SUCCESS: USER_GROUP_ASSIGN_PERMISSION_SUCCESS,
        UPDATE_USER_GROUP: UPDATE_USER_GROUP,
        UPDATE_USER_GROUP_FAIL: UPDATE_USER_GROUP_FAIL,
        UPDATE_USER_GROUP_SUCCESS: UPDATE_USER_GROUP_SUCCESS,
        DELETE_USER_GROUP: DELETE_USER_GROUP,
        DELETE_USER_GROUP_FAIL: DELETE_USER_GROUP_FAIL,
        DELETE_USER_GROUP_SUCCESS: DELETE_USER_GROUP_SUCCESS,
        USER_GROUP_UNASSIGN_ALL_MEMBERS: USER_GROUP_UNASSIGN_ALL_MEMBERS,
        USER_GROUP_UNASSIGN_ALL_MEMBERS_FAIL: USER_GROUP_UNASSIGN_ALL_MEMBERS_FAIL,
        USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS: USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS,
        USER_GROUP_UNASSIGN_MEMBER: USER_GROUP_UNASSIGN_MEMBER,
        USER_GROUP_UNASSIGN_MEMBER_FAIL: USER_GROUP_UNASSIGN_MEMBER_FAIL,
        USER_GROUP_UNASSIGN_MEMBER_SUCCESS: USER_GROUP_UNASSIGN_MEMBER_SUCCESS,
        USER_GROUP_UNASSIGN_PERMISSION: USER_GROUP_UNASSIGN_PERMISSION,
        USER_GROUP_UNASSIGN_PERMISSION_FAIL: USER_GROUP_UNASSIGN_PERMISSION_FAIL,
        USER_GROUP_UNASSIGN_PERMISSION_SUCCESS: USER_GROUP_UNASSIGN_PERMISSION_SUCCESS,
        LoadUserGroup: LoadUserGroup,
        LoadUserGroupFail: LoadUserGroupFail,
        LoadUserGroupSuccess: LoadUserGroupSuccess,
        LoadUserGroups: LoadUserGroups,
        LoadUserGroupsFail: LoadUserGroupsFail,
        LoadUserGroupsSuccess: LoadUserGroupsSuccess,
        LoadPermissions: LoadPermissions$1,
        LoadPermissionsFail: LoadPermissionsFail$1,
        LoadPermissionsSuccess: LoadPermissionsSuccess$1,
        LoadAvailableOrgCustomers: LoadAvailableOrgCustomers,
        LoadAvailableOrgCustomersFail: LoadAvailableOrgCustomersFail,
        LoadAvailableOrgCustomersSuccess: LoadAvailableOrgCustomersSuccess,
        CreateUserGroup: CreateUserGroup,
        CreateUserGroupFail: CreateUserGroupFail,
        CreateUserGroupSuccess: CreateUserGroupSuccess,
        AssignMember: AssignMember,
        AssignMemberFail: AssignMemberFail,
        AssignMemberSuccess: AssignMemberSuccess,
        AssignPermission: AssignPermission,
        AssignPermissionFail: AssignPermissionFail,
        AssignPermissionSuccess: AssignPermissionSuccess,
        UpdateUserGroup: UpdateUserGroup,
        UpdateUserGroupFail: UpdateUserGroupFail,
        UpdateUserGroupSuccess: UpdateUserGroupSuccess,
        DeleteUserGroup: DeleteUserGroup,
        DeleteUserGroupFail: DeleteUserGroupFail,
        DeleteUserGroupSuccess: DeleteUserGroupSuccess,
        UnassignMember: UnassignMember,
        UnassignMemberFail: UnassignMemberFail,
        UnassignMemberSuccess: UnassignMemberSuccess,
        UnassignAllMembers: UnassignAllMembers,
        UnassignAllMembersFail: UnassignAllMembersFail,
        UnassignAllMembersSuccess: UnassignAllMembersSuccess,
        UnassignPermission: UnassignPermission,
        UnassignPermissionFail: UnassignPermissionFail,
        UnassignPermissionSuccess: UnassignPermissionSuccess
    });

    var LOAD_PERMISSION = '[Permission] Load Permission Data';
    var LOAD_PERMISSION_FAIL = '[Permission] Load Permission Data Fail';
    var LOAD_PERMISSION_SUCCESS = '[Permission] Load Permission Data Success';
    var LOAD_PERMISSIONS = '[Permission] Load Permissions';
    var LOAD_PERMISSIONS_FAIL = '[Permission] Load Permissions Fail';
    var LOAD_PERMISSIONS_SUCCESS = '[Permission] Load Permissions Success';
    var CREATE_PERMISSION = '[Permission] Create Permission';
    var CREATE_PERMISSION_FAIL = '[Permission] Create Permission Fail';
    var CREATE_PERMISSION_SUCCESS = '[Permission] Create Permission Success';
    var UPDATE_PERMISSION = '[Permission] Update Permission';
    var UPDATE_PERMISSION_FAIL = '[Permission] Update Permission Fail';
    var UPDATE_PERMISSION_SUCCESS = '[Permission] Update Permission Success';
    var LOAD_PERMISSION_TYPES = '[Permission Types] Load Permission Types';
    var LOAD_PERMISSION_TYPES_FAIL = '[Permission Types] Load Permission Types Fail';
    var LOAD_PERMISSION_TYPES_SUCCESS = '[Permission Types] Load Permission Types Success';
    var LoadPermission = /** @class */ (function (_super) {
        __extends(LoadPermission, _super);
        function LoadPermission(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionCode) || this;
            _this.payload = payload;
            _this.type = LOAD_PERMISSION;
            return _this;
        }
        return LoadPermission;
    }(i1.StateUtils.EntityLoadAction));
    var LoadPermissionFail = /** @class */ (function (_super) {
        __extends(LoadPermissionFail, _super);
        function LoadPermissionFail(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionCode, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_PERMISSION_FAIL;
            return _this;
        }
        return LoadPermissionFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadPermissionSuccess = /** @class */ (function (_super) {
        __extends(LoadPermissionSuccess, _super);
        function LoadPermissionSuccess(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, Array.isArray(payload)
                ? payload.map(function (permission) { return permission === null || permission === void 0 ? void 0 : permission.code; })
                : payload === null || payload === void 0 ? void 0 : payload.code) || this;
            _this.payload = payload;
            _this.type = LOAD_PERMISSION_SUCCESS;
            return _this;
        }
        return LoadPermissionSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadPermissions = /** @class */ (function (_super) {
        __extends(LoadPermissions, _super);
        function LoadPermissions(payload) {
            var _this = _super.call(this, PERMISSION_LIST, i1.StateUtils.serializeSearchConfig(payload.params)) || this;
            _this.payload = payload;
            _this.type = LOAD_PERMISSIONS;
            return _this;
        }
        return LoadPermissions;
    }(i1.StateUtils.EntityLoadAction));
    var LoadPermissionsFail = /** @class */ (function (_super) {
        __extends(LoadPermissionsFail, _super);
        function LoadPermissionsFail(payload) {
            var _this = _super.call(this, PERMISSION_LIST, i1.StateUtils.serializeSearchConfig(payload.params), payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_PERMISSIONS_FAIL;
            return _this;
        }
        return LoadPermissionsFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadPermissionsSuccess = /** @class */ (function (_super) {
        __extends(LoadPermissionsSuccess, _super);
        function LoadPermissionsSuccess(payload) {
            var _this = _super.call(this, PERMISSION_LIST, i1.StateUtils.serializeSearchConfig(payload.params)) || this;
            _this.payload = payload;
            _this.type = LOAD_PERMISSIONS_SUCCESS;
            return _this;
        }
        return LoadPermissionsSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var CreatePermission = /** @class */ (function (_super) {
        __extends(CreatePermission, _super);
        function CreatePermission(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permission.code) || this;
            _this.payload = payload;
            _this.type = CREATE_PERMISSION;
            return _this;
        }
        return CreatePermission;
    }(i1.StateUtils.EntityLoadAction));
    var CreatePermissionFail = /** @class */ (function (_super) {
        __extends(CreatePermissionFail, _super);
        function CreatePermissionFail(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionCode, payload.error) || this;
            _this.payload = payload;
            _this.type = CREATE_PERMISSION_FAIL;
            return _this;
        }
        return CreatePermissionFail;
    }(i1.StateUtils.EntityFailAction));
    var CreatePermissionSuccess = /** @class */ (function (_super) {
        __extends(CreatePermissionSuccess, _super);
        function CreatePermissionSuccess(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.code, payload) || this;
            _this.payload = payload;
            _this.type = CREATE_PERMISSION_SUCCESS;
            return _this;
        }
        return CreatePermissionSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UpdatePermission = /** @class */ (function (_super) {
        __extends(UpdatePermission, _super);
        function UpdatePermission(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permission.code) || this;
            _this.payload = payload;
            _this.type = UPDATE_PERMISSION;
            return _this;
        }
        return UpdatePermission;
    }(i1.StateUtils.EntityLoadAction));
    var UpdatePermissionFail = /** @class */ (function (_super) {
        __extends(UpdatePermissionFail, _super);
        function UpdatePermissionFail(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionCode, payload.error) || this;
            _this.payload = payload;
            _this.type = UPDATE_PERMISSION_FAIL;
            return _this;
        }
        return UpdatePermissionFail;
    }(i1.StateUtils.EntityFailAction));
    var UpdatePermissionSuccess = /** @class */ (function (_super) {
        __extends(UpdatePermissionSuccess, _super);
        function UpdatePermissionSuccess(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.code, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_PERMISSION_SUCCESS;
            return _this;
        }
        return UpdatePermissionSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadPermissionTypes = /** @class */ (function (_super) {
        __extends(LoadPermissionTypes, _super);
        function LoadPermissionTypes() {
            var _this = _super.call(this, PERMISSION_TYPES_LIST, PERMISSION_TYPES) || this;
            _this.type = LOAD_PERMISSION_TYPES;
            return _this;
        }
        return LoadPermissionTypes;
    }(i1.StateUtils.EntityLoadAction));
    var LoadPermissionTypesFail = /** @class */ (function (_super) {
        __extends(LoadPermissionTypesFail, _super);
        function LoadPermissionTypesFail(payload) {
            var _this = _super.call(this, PERMISSION_TYPES_LIST, PERMISSION_TYPES, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_PERMISSION_TYPES_FAIL;
            return _this;
        }
        return LoadPermissionTypesFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadPermissionTypesSuccess = /** @class */ (function (_super) {
        __extends(LoadPermissionTypesSuccess, _super);
        function LoadPermissionTypesSuccess(payload) {
            var _this = _super.call(this, PERMISSION_TYPES_LIST, PERMISSION_TYPES) || this;
            _this.payload = payload;
            _this.type = LOAD_PERMISSION_TYPES_SUCCESS;
            return _this;
        }
        return LoadPermissionTypesSuccess;
    }(i1.StateUtils.EntitySuccessAction));

    var permission_action = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_PERMISSION: LOAD_PERMISSION,
        LOAD_PERMISSION_FAIL: LOAD_PERMISSION_FAIL,
        LOAD_PERMISSION_SUCCESS: LOAD_PERMISSION_SUCCESS,
        LOAD_PERMISSIONS: LOAD_PERMISSIONS,
        LOAD_PERMISSIONS_FAIL: LOAD_PERMISSIONS_FAIL,
        LOAD_PERMISSIONS_SUCCESS: LOAD_PERMISSIONS_SUCCESS,
        CREATE_PERMISSION: CREATE_PERMISSION,
        CREATE_PERMISSION_FAIL: CREATE_PERMISSION_FAIL,
        CREATE_PERMISSION_SUCCESS: CREATE_PERMISSION_SUCCESS,
        UPDATE_PERMISSION: UPDATE_PERMISSION,
        UPDATE_PERMISSION_FAIL: UPDATE_PERMISSION_FAIL,
        UPDATE_PERMISSION_SUCCESS: UPDATE_PERMISSION_SUCCESS,
        LOAD_PERMISSION_TYPES: LOAD_PERMISSION_TYPES,
        LOAD_PERMISSION_TYPES_FAIL: LOAD_PERMISSION_TYPES_FAIL,
        LOAD_PERMISSION_TYPES_SUCCESS: LOAD_PERMISSION_TYPES_SUCCESS,
        LoadPermission: LoadPermission,
        LoadPermissionFail: LoadPermissionFail,
        LoadPermissionSuccess: LoadPermissionSuccess,
        LoadPermissions: LoadPermissions,
        LoadPermissionsFail: LoadPermissionsFail,
        LoadPermissionsSuccess: LoadPermissionsSuccess,
        CreatePermission: CreatePermission,
        CreatePermissionFail: CreatePermissionFail,
        CreatePermissionSuccess: CreatePermissionSuccess,
        UpdatePermission: UpdatePermission,
        UpdatePermissionFail: UpdatePermissionFail,
        UpdatePermissionSuccess: UpdatePermissionSuccess,
        LoadPermissionTypes: LoadPermissionTypes,
        LoadPermissionTypesFail: LoadPermissionTypesFail,
        LoadPermissionTypesSuccess: LoadPermissionTypesSuccess
    });

    var LOAD_COST_CENTER = '[CostCenter] Load CostCenter Data';
    var LOAD_COST_CENTER_FAIL = '[CostCenter] Load CostCenter Data Fail';
    var LOAD_COST_CENTER_SUCCESS = '[CostCenter] Load CostCenter Data Success';
    var LOAD_COST_CENTERS = '[CostCenter] Load CostCenters';
    var LOAD_COST_CENTERS_FAIL = '[CostCenter] Load CostCenters Fail';
    var LOAD_COST_CENTERS_SUCCESS = '[CostCenter] Load CostCenters Success';
    var CREATE_COST_CENTER = '[CostCenter] Create CostCenter';
    var CREATE_COST_CENTER_FAIL = '[CostCenter] Create CostCenter Fail';
    var CREATE_COST_CENTER_SUCCESS = '[CostCenter] Create CostCenter Success';
    var UPDATE_COST_CENTER = '[CostCenter] Update CostCenter';
    var UPDATE_COST_CENTER_FAIL = '[CostCenter] Update CostCenter Fail';
    var UPDATE_COST_CENTER_SUCCESS = '[CostCenter] Update CostCenter Success';
    var LOAD_ASSIGNED_BUDGETS = '[CostCenter] Load Budgets';
    var LOAD_ASSIGNED_BUDGETS_SUCCESS = '[CostCenter] Load Budgets success';
    var LOAD_ASSIGNED_BUDGETS_FAIL = '[CostCenter] Load Budgets fail';
    var ASSIGN_BUDGET = '[CostCenter] Assign Budget';
    var ASSIGN_BUDGET_SUCCESS = '[CostCenter] Assign Budget success';
    var ASSIGN_BUDGET_FAIL = '[CostCenter] Assign Budget fail';
    var UNASSIGN_BUDGET = '[CostCenter] Unassign Budget';
    var UNASSIGN_BUDGET_SUCCESS = '[CostCenter] Unassign Budget success';
    var UNASSIGN_BUDGET_FAIL = '[CostCenter] Unassign Budget fail';
    var LoadCostCenter = /** @class */ (function (_super) {
        __extends(LoadCostCenter, _super);
        function LoadCostCenter(payload) {
            var _this = _super.call(this, COST_CENTER_ENTITIES, payload.costCenterCode) || this;
            _this.payload = payload;
            _this.type = LOAD_COST_CENTER;
            return _this;
        }
        return LoadCostCenter;
    }(i1.StateUtils.EntityLoadAction));
    var LoadCostCenterFail = /** @class */ (function (_super) {
        __extends(LoadCostCenterFail, _super);
        function LoadCostCenterFail(payload) {
            var _this = _super.call(this, COST_CENTER_ENTITIES, payload.costCenterCode, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_COST_CENTER_FAIL;
            return _this;
        }
        return LoadCostCenterFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadCostCenterSuccess = /** @class */ (function (_super) {
        __extends(LoadCostCenterSuccess, _super);
        function LoadCostCenterSuccess(payload) {
            var _this = _super.call(this, COST_CENTER_ENTITIES, Array.isArray(payload)
                ? payload.map(function (costCenter) { return costCenter === null || costCenter === void 0 ? void 0 : costCenter.code; })
                : payload === null || payload === void 0 ? void 0 : payload.code) || this;
            _this.payload = payload;
            _this.type = LOAD_COST_CENTER_SUCCESS;
            return _this;
        }
        return LoadCostCenterSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadCostCenters = /** @class */ (function (_super) {
        __extends(LoadCostCenters, _super);
        function LoadCostCenters(payload) {
            var _this = _super.call(this, COST_CENTER_LIST, i1.StateUtils.serializeSearchConfig(payload.params)) || this;
            _this.payload = payload;
            _this.type = LOAD_COST_CENTERS;
            return _this;
        }
        return LoadCostCenters;
    }(i1.StateUtils.EntityLoadAction));
    var LoadCostCentersFail = /** @class */ (function (_super) {
        __extends(LoadCostCentersFail, _super);
        function LoadCostCentersFail(payload) {
            var _this = _super.call(this, COST_CENTER_LIST, i1.StateUtils.serializeSearchConfig(payload.params), payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_COST_CENTERS_FAIL;
            return _this;
        }
        return LoadCostCentersFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadCostCentersSuccess = /** @class */ (function (_super) {
        __extends(LoadCostCentersSuccess, _super);
        function LoadCostCentersSuccess(payload) {
            var _this = _super.call(this, COST_CENTER_LIST, i1.StateUtils.serializeSearchConfig(payload.params)) || this;
            _this.payload = payload;
            _this.type = LOAD_COST_CENTERS_SUCCESS;
            return _this;
        }
        return LoadCostCentersSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var CreateCostCenter = /** @class */ (function (_super) {
        __extends(CreateCostCenter, _super);
        function CreateCostCenter(payload) {
            var _this = _super.call(this, COST_CENTER_ENTITIES, payload.costCenter.code) || this;
            _this.payload = payload;
            _this.type = CREATE_COST_CENTER;
            return _this;
        }
        return CreateCostCenter;
    }(i1.StateUtils.EntityLoadAction));
    var CreateCostCenterFail = /** @class */ (function (_super) {
        __extends(CreateCostCenterFail, _super);
        function CreateCostCenterFail(payload) {
            var _this = _super.call(this, COST_CENTER_ENTITIES, payload.costCenterCode, payload.error) || this;
            _this.payload = payload;
            _this.type = CREATE_COST_CENTER_FAIL;
            return _this;
        }
        return CreateCostCenterFail;
    }(i1.StateUtils.EntityFailAction));
    var CreateCostCenterSuccess = /** @class */ (function (_super) {
        __extends(CreateCostCenterSuccess, _super);
        function CreateCostCenterSuccess(payload) {
            var _this = _super.call(this, COST_CENTER_ENTITIES, payload.code, payload) || this;
            _this.payload = payload;
            _this.type = CREATE_COST_CENTER_SUCCESS;
            return _this;
        }
        return CreateCostCenterSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UpdateCostCenter = /** @class */ (function (_super) {
        __extends(UpdateCostCenter, _super);
        function UpdateCostCenter(payload) {
            var _this = _super.call(this, COST_CENTER_ENTITIES, payload.costCenter.code) || this;
            _this.payload = payload;
            _this.type = UPDATE_COST_CENTER;
            return _this;
        }
        return UpdateCostCenter;
    }(i1.StateUtils.EntityLoadAction));
    var UpdateCostCenterFail = /** @class */ (function (_super) {
        __extends(UpdateCostCenterFail, _super);
        function UpdateCostCenterFail(payload) {
            var _this = _super.call(this, COST_CENTER_ENTITIES, payload.costCenterCode, payload.error) || this;
            _this.payload = payload;
            _this.type = UPDATE_COST_CENTER_FAIL;
            return _this;
        }
        return UpdateCostCenterFail;
    }(i1.StateUtils.EntityFailAction));
    var UpdateCostCenterSuccess = /** @class */ (function (_super) {
        __extends(UpdateCostCenterSuccess, _super);
        function UpdateCostCenterSuccess(payload) {
            var _this = _super.call(this, COST_CENTER_ENTITIES, payload.code, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_COST_CENTER_SUCCESS;
            return _this;
        }
        return UpdateCostCenterSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadAssignedBudgets = /** @class */ (function (_super) {
        __extends(LoadAssignedBudgets, _super);
        function LoadAssignedBudgets(payload) {
            var _this = _super.call(this, COST_CENTER_ASSIGNED_BUDGETS, i1.StateUtils.serializeSearchConfig(payload.params, payload.costCenterCode)) || this;
            _this.payload = payload;
            _this.type = LOAD_ASSIGNED_BUDGETS;
            return _this;
        }
        return LoadAssignedBudgets;
    }(i1.StateUtils.EntityLoadAction));
    var LoadAssignedBudgetsFail = /** @class */ (function (_super) {
        __extends(LoadAssignedBudgetsFail, _super);
        function LoadAssignedBudgetsFail(payload) {
            var _this = _super.call(this, COST_CENTER_ASSIGNED_BUDGETS, i1.StateUtils.serializeSearchConfig(payload.params, payload.costCenterCode), payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_ASSIGNED_BUDGETS_FAIL;
            return _this;
        }
        return LoadAssignedBudgetsFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadAssignedBudgetsSuccess = /** @class */ (function (_super) {
        __extends(LoadAssignedBudgetsSuccess, _super);
        function LoadAssignedBudgetsSuccess(payload) {
            var _this = _super.call(this, COST_CENTER_ASSIGNED_BUDGETS, i1.StateUtils.serializeSearchConfig(payload.params, payload.costCenterCode)) || this;
            _this.payload = payload;
            _this.type = LOAD_ASSIGNED_BUDGETS_SUCCESS;
            return _this;
        }
        return LoadAssignedBudgetsSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var AssignBudget = /** @class */ (function (_super) {
        __extends(AssignBudget, _super);
        function AssignBudget(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.budgetCode) || this;
            _this.payload = payload;
            _this.type = ASSIGN_BUDGET;
            return _this;
        }
        return AssignBudget;
    }(i1.StateUtils.EntityLoadAction));
    var AssignBudgetFail = /** @class */ (function (_super) {
        __extends(AssignBudgetFail, _super);
        function AssignBudgetFail(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.budgetCode, payload.error) || this;
            _this.payload = payload;
            _this.type = ASSIGN_BUDGET_FAIL;
            return _this;
        }
        return AssignBudgetFail;
    }(i1.StateUtils.EntityFailAction));
    var AssignBudgetSuccess = /** @class */ (function (_super) {
        __extends(AssignBudgetSuccess, _super);
        function AssignBudgetSuccess(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.code, payload) || this;
            _this.payload = payload;
            _this.type = ASSIGN_BUDGET_SUCCESS;
            return _this;
        }
        return AssignBudgetSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UnassignBudget = /** @class */ (function (_super) {
        __extends(UnassignBudget, _super);
        function UnassignBudget(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.budgetCode) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_BUDGET;
            return _this;
        }
        return UnassignBudget;
    }(i1.StateUtils.EntityLoadAction));
    var UnassignBudgetFail = /** @class */ (function (_super) {
        __extends(UnassignBudgetFail, _super);
        function UnassignBudgetFail(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.budgetCode, payload.error) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_BUDGET_FAIL;
            return _this;
        }
        return UnassignBudgetFail;
    }(i1.StateUtils.EntityFailAction));
    var UnassignBudgetSuccess = /** @class */ (function (_super) {
        __extends(UnassignBudgetSuccess, _super);
        function UnassignBudgetSuccess(payload) {
            var _this = _super.call(this, BUDGET_ENTITIES, payload.code, payload) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_BUDGET_SUCCESS;
            return _this;
        }
        return UnassignBudgetSuccess;
    }(i1.StateUtils.EntitySuccessAction));

    var costCenter_action = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_COST_CENTER: LOAD_COST_CENTER,
        LOAD_COST_CENTER_FAIL: LOAD_COST_CENTER_FAIL,
        LOAD_COST_CENTER_SUCCESS: LOAD_COST_CENTER_SUCCESS,
        LOAD_COST_CENTERS: LOAD_COST_CENTERS,
        LOAD_COST_CENTERS_FAIL: LOAD_COST_CENTERS_FAIL,
        LOAD_COST_CENTERS_SUCCESS: LOAD_COST_CENTERS_SUCCESS,
        CREATE_COST_CENTER: CREATE_COST_CENTER,
        CREATE_COST_CENTER_FAIL: CREATE_COST_CENTER_FAIL,
        CREATE_COST_CENTER_SUCCESS: CREATE_COST_CENTER_SUCCESS,
        UPDATE_COST_CENTER: UPDATE_COST_CENTER,
        UPDATE_COST_CENTER_FAIL: UPDATE_COST_CENTER_FAIL,
        UPDATE_COST_CENTER_SUCCESS: UPDATE_COST_CENTER_SUCCESS,
        LOAD_ASSIGNED_BUDGETS: LOAD_ASSIGNED_BUDGETS,
        LOAD_ASSIGNED_BUDGETS_SUCCESS: LOAD_ASSIGNED_BUDGETS_SUCCESS,
        LOAD_ASSIGNED_BUDGETS_FAIL: LOAD_ASSIGNED_BUDGETS_FAIL,
        ASSIGN_BUDGET: ASSIGN_BUDGET,
        ASSIGN_BUDGET_SUCCESS: ASSIGN_BUDGET_SUCCESS,
        ASSIGN_BUDGET_FAIL: ASSIGN_BUDGET_FAIL,
        UNASSIGN_BUDGET: UNASSIGN_BUDGET,
        UNASSIGN_BUDGET_SUCCESS: UNASSIGN_BUDGET_SUCCESS,
        UNASSIGN_BUDGET_FAIL: UNASSIGN_BUDGET_FAIL,
        LoadCostCenter: LoadCostCenter,
        LoadCostCenterFail: LoadCostCenterFail,
        LoadCostCenterSuccess: LoadCostCenterSuccess,
        LoadCostCenters: LoadCostCenters,
        LoadCostCentersFail: LoadCostCentersFail,
        LoadCostCentersSuccess: LoadCostCentersSuccess,
        CreateCostCenter: CreateCostCenter,
        CreateCostCenterFail: CreateCostCenterFail,
        CreateCostCenterSuccess: CreateCostCenterSuccess,
        UpdateCostCenter: UpdateCostCenter,
        UpdateCostCenterFail: UpdateCostCenterFail,
        UpdateCostCenterSuccess: UpdateCostCenterSuccess,
        LoadAssignedBudgets: LoadAssignedBudgets,
        LoadAssignedBudgetsFail: LoadAssignedBudgetsFail,
        LoadAssignedBudgetsSuccess: LoadAssignedBudgetsSuccess,
        AssignBudget: AssignBudget,
        AssignBudgetFail: AssignBudgetFail,
        AssignBudgetSuccess: AssignBudgetSuccess,
        UnassignBudget: UnassignBudget,
        UnassignBudgetFail: UnassignBudgetFail,
        UnassignBudgetSuccess: UnassignBudgetSuccess
    });

    var LOAD_B2B_USER = '[B2BUser] Load B2BUser Data';
    var LOAD_B2B_USER_FAIL = '[B2BUser] Load B2BUser Data Fail';
    var LOAD_B2B_USER_SUCCESS = '[B2BUser] Load B2BUser Data Success';
    var CREATE_B2B_USER = '[B2BUser] Create B2BUser Data';
    var CREATE_B2B_USER_FAIL = '[B2BUser] Create B2BUser Data Fail';
    var CREATE_B2B_USER_SUCCESS = '[B2BUser] Create B2BUser Data Success';
    var UPDATE_B2B_USER = '[B2BUser] Update B2BUser Data';
    var UPDATE_B2B_USER_FAIL = '[B2BUser] Update B2BUser Data Fail';
    var UPDATE_B2B_USER_SUCCESS = '[B2BUser] Update B2BUser Data Success';
    var LOAD_B2B_USERS = '[B2BUser] Load B2BUsers';
    var LOAD_B2B_USERS_FAIL = '[B2BUser] Load B2BUsers Fail';
    var LOAD_B2B_USERS_SUCCESS = '[B2BUser] Load B2BUsers Success';
    var LOAD_B2B_USER_APPROVERS = '[B2BUser] Load B2BUser Approvers';
    var LOAD_B2B_USER_APPROVERS_FAIL = '[B2BUser] Load B2BUser Approvers Fail';
    var LOAD_B2B_USER_APPROVERS_SUCCESS = '[B2BUser] Load B2BUser Approvers Success';
    var ASSIGN_B2B_USER_APPROVER = '[B2BUser] Assign B2BUser Approver';
    var ASSIGN_B2B_USER_APPROVER_FAIL = '[B2BUser] Assign B2BUser Approver Fail';
    var ASSIGN_B2B_USER_APPROVER_SUCCESS = '[B2BUser] Assign B2BUser Approver Success';
    var UNASSIGN_B2B_USER_APPROVER = '[B2BUser] Unassign B2BUser Approver';
    var UNASSIGN_B2B_USER_APPROVER_FAIL = '[B2BUser] Unassign B2BUser Approver Fail';
    var UNASSIGN_B2B_USER_APPROVER_SUCCESS = '[B2BUser] Unassign B2BUser Approver Success';
    var LOAD_B2B_USER_PERMISSIONS = '[B2BUser] Load B2BUser Permissions';
    var LOAD_B2B_USER_PERMISSIONS_FAIL = '[B2BUser] Load B2BUser Permissions Fail';
    var LOAD_B2B_USER_PERMISSIONS_SUCCESS = '[B2BUser] Load B2BUser Permissions Success';
    var ASSIGN_B2B_USER_PERMISSION = '[B2BUser] Assign B2BUser Permission';
    var ASSIGN_B2B_USER_PERMISSION_FAIL = '[B2BUser] Assign B2BUser Permission Fail';
    var ASSIGN_B2B_USER_PERMISSION_SUCCESS = '[B2BUser] Assign B2BUser Permission Success';
    var UNASSIGN_B2B_USER_PERMISSION = '[B2BUser] Unassign B2BUser Permission';
    var UNASSIGN_B2B_USER_PERMISSION_FAIL = '[B2BUser] Unassign B2BUser Permission Fail';
    var UNASSIGN_B2B_USER_PERMISSION_SUCCESS = '[B2BUser] Unassign B2BUser Permission Success';
    var LOAD_B2B_USER_USER_GROUPS = '[B2BUser] Load B2BUser User Groups';
    var LOAD_B2B_USER_USER_GROUPS_FAIL = '[B2BUser] Load B2BUser User Groups Fail';
    var LOAD_B2B_USER_USER_GROUPS_SUCCESS = '[B2BUser] Load B2BUser User Groups Success';
    var ASSIGN_B2B_USER_USER_GROUP = '[B2BUser] Assign B2BUser User Group';
    var ASSIGN_B2B_USER_USER_GROUP_FAIL = '[B2BUser] Assign B2BUser User Group Fail';
    var ASSIGN_B2B_USER_USER_GROUP_SUCCESS = '[B2BUser] Assign B2BUser User Group Success';
    var UNASSIGN_B2B_USER_USER_GROUP = '[B2BUser] Unassign B2BUser User Group';
    var UNASSIGN_B2B_USER_USER_GROUP_FAIL = '[B2BUser] Unassign B2BUser User Group Fail';
    var UNASSIGN_B2B_USER_USER_GROUP_SUCCESS = '[B2BUser] Unassign B2BUser User Group Success';
    var LoadB2BUser = /** @class */ (function (_super) {
        __extends(LoadB2BUser, _super);
        function LoadB2BUser(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomerId) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USER;
            return _this;
        }
        return LoadB2BUser;
    }(i1.StateUtils.EntityLoadAction));
    var LoadB2BUserFail = /** @class */ (function (_super) {
        __extends(LoadB2BUserFail, _super);
        function LoadB2BUserFail(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomerId, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USER_FAIL;
            return _this;
        }
        return LoadB2BUserFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadB2BUserSuccess = /** @class */ (function (_super) {
        __extends(LoadB2BUserSuccess, _super);
        function LoadB2BUserSuccess(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, Array.isArray(payload)
                ? payload.map(function (orgUnitCustomer) { return orgUnitCustomer === null || orgUnitCustomer === void 0 ? void 0 : orgUnitCustomer.customerId; })
                : payload === null || payload === void 0 ? void 0 : payload.customerId) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USER_SUCCESS;
            return _this;
        }
        return LoadB2BUserSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var CreateB2BUser = /** @class */ (function (_super) {
        __extends(CreateB2BUser, _super);
        function CreateB2BUser(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomer.customerId) || this;
            _this.payload = payload;
            _this.type = CREATE_B2B_USER;
            return _this;
        }
        return CreateB2BUser;
    }(i1.StateUtils.EntityLoadAction));
    var CreateB2BUserFail = /** @class */ (function (_super) {
        __extends(CreateB2BUserFail, _super);
        function CreateB2BUserFail(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomerId, payload.error) || this;
            _this.payload = payload;
            _this.type = CREATE_B2B_USER_FAIL;
            return _this;
        }
        return CreateB2BUserFail;
    }(i1.StateUtils.EntityFailAction));
    var CreateB2BUserSuccess = /** @class */ (function (_super) {
        __extends(CreateB2BUserSuccess, _super);
        function CreateB2BUserSuccess(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.customerId, payload) || this;
            _this.payload = payload;
            _this.type = CREATE_B2B_USER_SUCCESS;
            return _this;
        }
        return CreateB2BUserSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UpdateB2BUser = /** @class */ (function (_super) {
        __extends(UpdateB2BUser, _super);
        function UpdateB2BUser(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomer.customerId) || this;
            _this.payload = payload;
            _this.type = UPDATE_B2B_USER;
            return _this;
        }
        return UpdateB2BUser;
    }(i1.StateUtils.EntityLoadAction));
    var UpdateB2BUserFail = /** @class */ (function (_super) {
        __extends(UpdateB2BUserFail, _super);
        function UpdateB2BUserFail(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.orgCustomerId, payload.error) || this;
            _this.payload = payload;
            _this.type = UPDATE_B2B_USER_FAIL;
            return _this;
        }
        return UpdateB2BUserFail;
    }(i1.StateUtils.EntityFailAction));
    var UpdateB2BUserSuccess = /** @class */ (function (_super) {
        __extends(UpdateB2BUserSuccess, _super);
        function UpdateB2BUserSuccess(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.customerId, payload) || this;
            _this.payload = payload;
            _this.type = UPDATE_B2B_USER_SUCCESS;
            return _this;
        }
        return UpdateB2BUserSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadB2BUsers = /** @class */ (function (_super) {
        __extends(LoadB2BUsers, _super);
        function LoadB2BUsers(payload) {
            var _this = _super.call(this, USER_LIST, i1.StateUtils.serializeSearchConfig(payload.params)) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USERS;
            return _this;
        }
        return LoadB2BUsers;
    }(i1.StateUtils.EntityLoadAction));
    var LoadB2BUsersFail = /** @class */ (function (_super) {
        __extends(LoadB2BUsersFail, _super);
        function LoadB2BUsersFail(payload) {
            var _this = _super.call(this, USER_LIST, i1.StateUtils.serializeSearchConfig(payload.params), payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USERS_FAIL;
            return _this;
        }
        return LoadB2BUsersFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadB2BUsersSuccess = /** @class */ (function (_super) {
        __extends(LoadB2BUsersSuccess, _super);
        function LoadB2BUsersSuccess(payload) {
            var _this = _super.call(this, USER_LIST, i1.StateUtils.serializeSearchConfig(payload.params)) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USERS_SUCCESS;
            return _this;
        }
        return LoadB2BUsersSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadB2BUserApprovers = /** @class */ (function (_super) {
        __extends(LoadB2BUserApprovers, _super);
        function LoadB2BUserApprovers(payload) {
            var _this = _super.call(this, B2B_USER_APPROVERS, i1.StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId)) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USER_APPROVERS;
            return _this;
        }
        return LoadB2BUserApprovers;
    }(i1.StateUtils.EntityLoadAction));
    var LoadB2BUserApproversFail = /** @class */ (function (_super) {
        __extends(LoadB2BUserApproversFail, _super);
        function LoadB2BUserApproversFail(payload) {
            var _this = _super.call(this, B2B_USER_APPROVERS, i1.StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId), payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USER_APPROVERS_FAIL;
            return _this;
        }
        return LoadB2BUserApproversFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadB2BUserApproversSuccess = /** @class */ (function (_super) {
        __extends(LoadB2BUserApproversSuccess, _super);
        function LoadB2BUserApproversSuccess(payload) {
            var _this = _super.call(this, B2B_USER_APPROVERS, i1.StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId)) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USER_APPROVERS_SUCCESS;
            return _this;
        }
        return LoadB2BUserApproversSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var AssignB2BUserApprover = /** @class */ (function (_super) {
        __extends(AssignB2BUserApprover, _super);
        function AssignB2BUserApprover(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.approverId) || this;
            _this.payload = payload;
            _this.type = ASSIGN_B2B_USER_APPROVER;
            return _this;
        }
        return AssignB2BUserApprover;
    }(i1.StateUtils.EntityLoadAction));
    var AssignB2BUserApproverFail = /** @class */ (function (_super) {
        __extends(AssignB2BUserApproverFail, _super);
        function AssignB2BUserApproverFail(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.approverId) || this;
            _this.payload = payload;
            _this.type = ASSIGN_B2B_USER_APPROVER_FAIL;
            return _this;
        }
        return AssignB2BUserApproverFail;
    }(i1.StateUtils.EntityFailAction));
    var AssignB2BUserApproverSuccess = /** @class */ (function (_super) {
        __extends(AssignB2BUserApproverSuccess, _super);
        function AssignB2BUserApproverSuccess(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.approverId, payload) || this;
            _this.payload = payload;
            _this.type = ASSIGN_B2B_USER_APPROVER_SUCCESS;
            return _this;
        }
        return AssignB2BUserApproverSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UnassignB2BUserApprover = /** @class */ (function (_super) {
        __extends(UnassignB2BUserApprover, _super);
        function UnassignB2BUserApprover(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.approverId) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_B2B_USER_APPROVER;
            return _this;
        }
        return UnassignB2BUserApprover;
    }(i1.StateUtils.EntityLoadAction));
    var UnassignB2BUserApproverFail = /** @class */ (function (_super) {
        __extends(UnassignB2BUserApproverFail, _super);
        function UnassignB2BUserApproverFail(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.approverId) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_B2B_USER_APPROVER_FAIL;
            return _this;
        }
        return UnassignB2BUserApproverFail;
    }(i1.StateUtils.EntityFailAction));
    var UnassignB2BUserApproverSuccess = /** @class */ (function (_super) {
        __extends(UnassignB2BUserApproverSuccess, _super);
        function UnassignB2BUserApproverSuccess(payload) {
            var _this = _super.call(this, B2B_USER_ENTITIES, payload.approverId, payload) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_B2B_USER_APPROVER_SUCCESS;
            return _this;
        }
        return UnassignB2BUserApproverSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadB2BUserPermissions = /** @class */ (function (_super) {
        __extends(LoadB2BUserPermissions, _super);
        function LoadB2BUserPermissions(payload) {
            var _this = _super.call(this, B2B_USER_PERMISSIONS, i1.StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId)) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USER_PERMISSIONS;
            return _this;
        }
        return LoadB2BUserPermissions;
    }(i1.StateUtils.EntityLoadAction));
    var LoadB2BUserPermissionsFail = /** @class */ (function (_super) {
        __extends(LoadB2BUserPermissionsFail, _super);
        function LoadB2BUserPermissionsFail(payload) {
            var _this = _super.call(this, B2B_USER_PERMISSIONS, payload.orgCustomerId, payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USER_PERMISSIONS_FAIL;
            return _this;
        }
        return LoadB2BUserPermissionsFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadB2BUserPermissionsSuccess = /** @class */ (function (_super) {
        __extends(LoadB2BUserPermissionsSuccess, _super);
        function LoadB2BUserPermissionsSuccess(payload) {
            var _this = _super.call(this, B2B_USER_PERMISSIONS, i1.StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId)) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USER_PERMISSIONS_SUCCESS;
            return _this;
        }
        return LoadB2BUserPermissionsSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var AssignB2BUserPermission = /** @class */ (function (_super) {
        __extends(AssignB2BUserPermission, _super);
        function AssignB2BUserPermission(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionId) || this;
            _this.payload = payload;
            _this.type = ASSIGN_B2B_USER_PERMISSION;
            return _this;
        }
        return AssignB2BUserPermission;
    }(i1.StateUtils.EntityLoadAction));
    var AssignB2BUserPermissionFail = /** @class */ (function (_super) {
        __extends(AssignB2BUserPermissionFail, _super);
        function AssignB2BUserPermissionFail(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionId, payload.error) || this;
            _this.payload = payload;
            _this.type = ASSIGN_B2B_USER_PERMISSION_FAIL;
            return _this;
        }
        return AssignB2BUserPermissionFail;
    }(i1.StateUtils.EntityFailAction));
    var AssignB2BUserPermissionSuccess = /** @class */ (function (_super) {
        __extends(AssignB2BUserPermissionSuccess, _super);
        function AssignB2BUserPermissionSuccess(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionId, payload) || this;
            _this.payload = payload;
            _this.type = ASSIGN_B2B_USER_PERMISSION_SUCCESS;
            return _this;
        }
        return AssignB2BUserPermissionSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UnassignB2BUserPermission = /** @class */ (function (_super) {
        __extends(UnassignB2BUserPermission, _super);
        function UnassignB2BUserPermission(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionId) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_B2B_USER_PERMISSION;
            return _this;
        }
        return UnassignB2BUserPermission;
    }(i1.StateUtils.EntityLoadAction));
    var UnassignB2BUserPermissionFail = /** @class */ (function (_super) {
        __extends(UnassignB2BUserPermissionFail, _super);
        function UnassignB2BUserPermissionFail(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionId, payload.error) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_B2B_USER_PERMISSION_FAIL;
            return _this;
        }
        return UnassignB2BUserPermissionFail;
    }(i1.StateUtils.EntityFailAction));
    var UnassignB2BUserPermissionSuccess = /** @class */ (function (_super) {
        __extends(UnassignB2BUserPermissionSuccess, _super);
        function UnassignB2BUserPermissionSuccess(payload) {
            var _this = _super.call(this, PERMISSION_ENTITIES, payload.permissionId, payload) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_B2B_USER_PERMISSION_SUCCESS;
            return _this;
        }
        return UnassignB2BUserPermissionSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var LoadB2BUserUserGroups = /** @class */ (function (_super) {
        __extends(LoadB2BUserUserGroups, _super);
        function LoadB2BUserUserGroups(payload) {
            var _this = _super.call(this, B2B_USER_USER_GROUPS, i1.StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId)) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USER_USER_GROUPS;
            return _this;
        }
        return LoadB2BUserUserGroups;
    }(i1.StateUtils.EntityLoadAction));
    var LoadB2BUserUserGroupsFail = /** @class */ (function (_super) {
        __extends(LoadB2BUserUserGroupsFail, _super);
        function LoadB2BUserUserGroupsFail(payload) {
            var _this = _super.call(this, B2B_USER_USER_GROUPS, i1.StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId), payload.error) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USER_USER_GROUPS_FAIL;
            return _this;
        }
        return LoadB2BUserUserGroupsFail;
    }(i1.StateUtils.EntityFailAction));
    var LoadB2BUserUserGroupsSuccess = /** @class */ (function (_super) {
        __extends(LoadB2BUserUserGroupsSuccess, _super);
        function LoadB2BUserUserGroupsSuccess(payload) {
            var _this = _super.call(this, B2B_USER_USER_GROUPS, i1.StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId)) || this;
            _this.payload = payload;
            _this.type = LOAD_B2B_USER_USER_GROUPS_SUCCESS;
            return _this;
        }
        return LoadB2BUserUserGroupsSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var AssignB2BUserUserGroup = /** @class */ (function (_super) {
        __extends(AssignB2BUserUserGroup, _super);
        function AssignB2BUserUserGroup(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroupId) || this;
            _this.payload = payload;
            _this.type = ASSIGN_B2B_USER_USER_GROUP;
            return _this;
        }
        return AssignB2BUserUserGroup;
    }(i1.StateUtils.EntityLoadAction));
    var AssignB2BUserUserGroupFail = /** @class */ (function (_super) {
        __extends(AssignB2BUserUserGroupFail, _super);
        function AssignB2BUserUserGroupFail(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroupId, payload.error) || this;
            _this.payload = payload;
            _this.type = ASSIGN_B2B_USER_USER_GROUP_FAIL;
            return _this;
        }
        return AssignB2BUserUserGroupFail;
    }(i1.StateUtils.EntityFailAction));
    var AssignB2BUserUserGroupSuccess = /** @class */ (function (_super) {
        __extends(AssignB2BUserUserGroupSuccess, _super);
        function AssignB2BUserUserGroupSuccess(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.uid, payload) || this;
            _this.payload = payload;
            _this.type = ASSIGN_B2B_USER_USER_GROUP_SUCCESS;
            return _this;
        }
        return AssignB2BUserUserGroupSuccess;
    }(i1.StateUtils.EntitySuccessAction));
    var UnassignB2BUserUserGroup = /** @class */ (function (_super) {
        __extends(UnassignB2BUserUserGroup, _super);
        function UnassignB2BUserUserGroup(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroupId) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_B2B_USER_USER_GROUP;
            return _this;
        }
        return UnassignB2BUserUserGroup;
    }(i1.StateUtils.EntityLoadAction));
    var UnassignB2BUserUserGroupFail = /** @class */ (function (_super) {
        __extends(UnassignB2BUserUserGroupFail, _super);
        function UnassignB2BUserUserGroupFail(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.userGroupId, payload.error) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_B2B_USER_USER_GROUP_FAIL;
            return _this;
        }
        return UnassignB2BUserUserGroupFail;
    }(i1.StateUtils.EntityFailAction));
    var UnassignB2BUserUserGroupSuccess = /** @class */ (function (_super) {
        __extends(UnassignB2BUserUserGroupSuccess, _super);
        function UnassignB2BUserUserGroupSuccess(payload) {
            var _this = _super.call(this, USER_GROUP_ENTITIES, payload.uid, payload) || this;
            _this.payload = payload;
            _this.type = UNASSIGN_B2B_USER_USER_GROUP_SUCCESS;
            return _this;
        }
        return UnassignB2BUserUserGroupSuccess;
    }(i1.StateUtils.EntitySuccessAction));

    var b2bUser_action = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_B2B_USER: LOAD_B2B_USER,
        LOAD_B2B_USER_FAIL: LOAD_B2B_USER_FAIL,
        LOAD_B2B_USER_SUCCESS: LOAD_B2B_USER_SUCCESS,
        CREATE_B2B_USER: CREATE_B2B_USER,
        CREATE_B2B_USER_FAIL: CREATE_B2B_USER_FAIL,
        CREATE_B2B_USER_SUCCESS: CREATE_B2B_USER_SUCCESS,
        UPDATE_B2B_USER: UPDATE_B2B_USER,
        UPDATE_B2B_USER_FAIL: UPDATE_B2B_USER_FAIL,
        UPDATE_B2B_USER_SUCCESS: UPDATE_B2B_USER_SUCCESS,
        LOAD_B2B_USERS: LOAD_B2B_USERS,
        LOAD_B2B_USERS_FAIL: LOAD_B2B_USERS_FAIL,
        LOAD_B2B_USERS_SUCCESS: LOAD_B2B_USERS_SUCCESS,
        LOAD_B2B_USER_APPROVERS: LOAD_B2B_USER_APPROVERS,
        LOAD_B2B_USER_APPROVERS_FAIL: LOAD_B2B_USER_APPROVERS_FAIL,
        LOAD_B2B_USER_APPROVERS_SUCCESS: LOAD_B2B_USER_APPROVERS_SUCCESS,
        ASSIGN_B2B_USER_APPROVER: ASSIGN_B2B_USER_APPROVER,
        ASSIGN_B2B_USER_APPROVER_FAIL: ASSIGN_B2B_USER_APPROVER_FAIL,
        ASSIGN_B2B_USER_APPROVER_SUCCESS: ASSIGN_B2B_USER_APPROVER_SUCCESS,
        UNASSIGN_B2B_USER_APPROVER: UNASSIGN_B2B_USER_APPROVER,
        UNASSIGN_B2B_USER_APPROVER_FAIL: UNASSIGN_B2B_USER_APPROVER_FAIL,
        UNASSIGN_B2B_USER_APPROVER_SUCCESS: UNASSIGN_B2B_USER_APPROVER_SUCCESS,
        LOAD_B2B_USER_PERMISSIONS: LOAD_B2B_USER_PERMISSIONS,
        LOAD_B2B_USER_PERMISSIONS_FAIL: LOAD_B2B_USER_PERMISSIONS_FAIL,
        LOAD_B2B_USER_PERMISSIONS_SUCCESS: LOAD_B2B_USER_PERMISSIONS_SUCCESS,
        ASSIGN_B2B_USER_PERMISSION: ASSIGN_B2B_USER_PERMISSION,
        ASSIGN_B2B_USER_PERMISSION_FAIL: ASSIGN_B2B_USER_PERMISSION_FAIL,
        ASSIGN_B2B_USER_PERMISSION_SUCCESS: ASSIGN_B2B_USER_PERMISSION_SUCCESS,
        UNASSIGN_B2B_USER_PERMISSION: UNASSIGN_B2B_USER_PERMISSION,
        UNASSIGN_B2B_USER_PERMISSION_FAIL: UNASSIGN_B2B_USER_PERMISSION_FAIL,
        UNASSIGN_B2B_USER_PERMISSION_SUCCESS: UNASSIGN_B2B_USER_PERMISSION_SUCCESS,
        LOAD_B2B_USER_USER_GROUPS: LOAD_B2B_USER_USER_GROUPS,
        LOAD_B2B_USER_USER_GROUPS_FAIL: LOAD_B2B_USER_USER_GROUPS_FAIL,
        LOAD_B2B_USER_USER_GROUPS_SUCCESS: LOAD_B2B_USER_USER_GROUPS_SUCCESS,
        ASSIGN_B2B_USER_USER_GROUP: ASSIGN_B2B_USER_USER_GROUP,
        ASSIGN_B2B_USER_USER_GROUP_FAIL: ASSIGN_B2B_USER_USER_GROUP_FAIL,
        ASSIGN_B2B_USER_USER_GROUP_SUCCESS: ASSIGN_B2B_USER_USER_GROUP_SUCCESS,
        UNASSIGN_B2B_USER_USER_GROUP: UNASSIGN_B2B_USER_USER_GROUP,
        UNASSIGN_B2B_USER_USER_GROUP_FAIL: UNASSIGN_B2B_USER_USER_GROUP_FAIL,
        UNASSIGN_B2B_USER_USER_GROUP_SUCCESS: UNASSIGN_B2B_USER_USER_GROUP_SUCCESS,
        LoadB2BUser: LoadB2BUser,
        LoadB2BUserFail: LoadB2BUserFail,
        LoadB2BUserSuccess: LoadB2BUserSuccess,
        CreateB2BUser: CreateB2BUser,
        CreateB2BUserFail: CreateB2BUserFail,
        CreateB2BUserSuccess: CreateB2BUserSuccess,
        UpdateB2BUser: UpdateB2BUser,
        UpdateB2BUserFail: UpdateB2BUserFail,
        UpdateB2BUserSuccess: UpdateB2BUserSuccess,
        LoadB2BUsers: LoadB2BUsers,
        LoadB2BUsersFail: LoadB2BUsersFail,
        LoadB2BUsersSuccess: LoadB2BUsersSuccess,
        LoadB2BUserApprovers: LoadB2BUserApprovers,
        LoadB2BUserApproversFail: LoadB2BUserApproversFail,
        LoadB2BUserApproversSuccess: LoadB2BUserApproversSuccess,
        AssignB2BUserApprover: AssignB2BUserApprover,
        AssignB2BUserApproverFail: AssignB2BUserApproverFail,
        AssignB2BUserApproverSuccess: AssignB2BUserApproverSuccess,
        UnassignB2BUserApprover: UnassignB2BUserApprover,
        UnassignB2BUserApproverFail: UnassignB2BUserApproverFail,
        UnassignB2BUserApproverSuccess: UnassignB2BUserApproverSuccess,
        LoadB2BUserPermissions: LoadB2BUserPermissions,
        LoadB2BUserPermissionsFail: LoadB2BUserPermissionsFail,
        LoadB2BUserPermissionsSuccess: LoadB2BUserPermissionsSuccess,
        AssignB2BUserPermission: AssignB2BUserPermission,
        AssignB2BUserPermissionFail: AssignB2BUserPermissionFail,
        AssignB2BUserPermissionSuccess: AssignB2BUserPermissionSuccess,
        UnassignB2BUserPermission: UnassignB2BUserPermission,
        UnassignB2BUserPermissionFail: UnassignB2BUserPermissionFail,
        UnassignB2BUserPermissionSuccess: UnassignB2BUserPermissionSuccess,
        LoadB2BUserUserGroups: LoadB2BUserUserGroups,
        LoadB2BUserUserGroupsFail: LoadB2BUserUserGroupsFail,
        LoadB2BUserUserGroupsSuccess: LoadB2BUserUserGroupsSuccess,
        AssignB2BUserUserGroup: AssignB2BUserUserGroup,
        AssignB2BUserUserGroupFail: AssignB2BUserUserGroupFail,
        AssignB2BUserUserGroupSuccess: AssignB2BUserUserGroupSuccess,
        UnassignB2BUserUserGroup: UnassignB2BUserUserGroup,
        UnassignB2BUserUserGroupFail: UnassignB2BUserUserGroupFail,
        UnassignB2BUserUserGroupSuccess: UnassignB2BUserUserGroupSuccess
    });

    var CLEAR_ORGANIZATION_DATA = '[Organization] Clear Data';
    var OrganizationClearData = /** @class */ (function () {
        function OrganizationClearData() {
            this.type = CLEAR_ORGANIZATION_DATA;
        }
        return OrganizationClearData;
    }());

    var organization_action = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CLEAR_ORGANIZATION_DATA: CLEAR_ORGANIZATION_DATA,
        OrganizationClearData: OrganizationClearData
    });

    var BudgetEffects = /** @class */ (function () {
        function BudgetEffects(actions$, budgetConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.budgetConnector = budgetConnector;
            this.loadBudget$ = this.actions$.pipe(i1$1.ofType(LOAD_BUDGET), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_a) {
                var userId = _a.userId, budgetCode = _a.budgetCode;
                return _this.budgetConnector.get(userId, budgetCode).pipe(operators.map(function (budget) {
                    return new LoadBudgetSuccess([budget]);
                }), operators.catchError(function (error) { return rxjs.of(new LoadBudgetFail({
                    budgetCode: budgetCode,
                    error: i1.normalizeHttpError(error),
                })); }));
            }));
            this.loadBudgets$ = this.actions$.pipe(i1$1.ofType(LOAD_BUDGETS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.budgetConnector.getList(payload.userId, payload.params).pipe(operators.switchMap(function (budgets) {
                var _a = i1.StateUtils.normalizeListPage(budgets, 'code'), values = _a.values, page = _a.page;
                return [
                    new LoadBudgetSuccess(values),
                    new LoadBudgetsSuccess({
                        page: page,
                        params: payload.params,
                    }),
                ];
            }), operators.catchError(function (error) { return rxjs.of(new LoadBudgetsFail({
                params: payload.params,
                error: i1.normalizeHttpError(error),
            })); })); }));
            this.createBudget$ = this.actions$.pipe(i1$1.ofType(CREATE_BUDGET), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.budgetConnector.create(payload.userId, payload.budget).pipe(operators.switchMap(function (data) { return [
                new CreateBudgetSuccess(data),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new CreateBudgetFail({
                    budgetCode: payload.budget.code,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.updateBudget$ = this.actions$.pipe(i1$1.ofType(UPDATE_BUDGET), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.budgetConnector
                .update(payload.userId, payload.budgetCode, payload.budget)
                .pipe(operators.switchMap(function (data) { return [
                new UpdateBudgetSuccess(data),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new UpdateBudgetFail({
                    budgetCode: payload.budget.code,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
        }
        return BudgetEffects;
    }());
    BudgetEffects.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetEffects, deps: [{ token: i1__namespace$1.Actions }, { token: BudgetConnector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BudgetEffects.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetEffects });
    __decorate([
        i1$1.Effect()
    ], BudgetEffects.prototype, "loadBudget$", void 0);
    __decorate([
        i1$1.Effect()
    ], BudgetEffects.prototype, "loadBudgets$", void 0);
    __decorate([
        i1$1.Effect()
    ], BudgetEffects.prototype, "createBudget$", void 0);
    __decorate([
        i1$1.Effect()
    ], BudgetEffects.prototype, "updateBudget$", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetEffects, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Actions }, { type: BudgetConnector }]; }, propDecorators: { loadBudget$: [], loadBudgets$: [], createBudget$: [], updateBudget$: [] } });

    var OrgUnitEffects = /** @class */ (function () {
        // @Effect()
        // loadAddress$: Observable<
        //   | OrgUnitActions.LoadAddressSuccess
        //   | OrgUnitActions.LoadAddressesSuccess
        //   | OrgUnitActions.LoadAddressesFail
        // > = this.actions$.pipe(
        //   ofType(OrgUnitActions.LOAD_ADDRESSES),
        //   map((action: OrgUnitActions.LoadAddresses) => action.payload),
        //   switchMap(({ userId, orgUnitId }) => {
        //     return this.orgUnitConnector.getAddresses(userId, orgUnitId).pipe(
        //       switchMap((addresses: EntitiesModel<B2BAddress>) => {
        //         const { values, page } = StateUtils.normalizeListPage(addresses, 'id');
        //         return [
        //           new OrgUnitActions.LoadAddressSuccess(values),
        //           new OrgUnitActions.LoadAddressesSuccess({ page, orgUnitId }),
        //         ];
        //       }),
        //       catchError(error =>
        //         of(
        //           new OrgUnitActions.LoadAddressesFail({
        //             orgUnitId,
        //             error: normalizeHttpError(error),
        //           })
        //         )
        //       )
        //     );
        //   })
        // );
        function OrgUnitEffects(actions$, orgUnitConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.orgUnitConnector = orgUnitConnector;
            this.loadOrgUnit$ = this.actions$.pipe(i1$1.ofType(LOAD_ORG_UNIT), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_a) {
                var userId = _a.userId, orgUnitId = _a.orgUnitId;
                return _this.orgUnitConnector.get(userId, orgUnitId).pipe(operators.switchMap(function (orgUnit) {
                    var _a = i1.StateUtils.normalizeListPage({ values: orgUnit.addresses }, 'id'), values = _a.values, page = _a.page;
                    return [
                        new LoadOrgUnitSuccess([orgUnit]),
                        new LoadAddressSuccess(values),
                        new LoadAddressesSuccess({ page: page, orgUnitId: orgUnitId }),
                    ];
                }), operators.catchError(function (error) { return rxjs.of(new LoadOrgUnitFail({
                    orgUnitId: orgUnitId,
                    error: i1.normalizeHttpError(error),
                })); }));
            }));
            this.loadAvailableOrgUnits$ = this.actions$.pipe(i1$1.ofType(LOAD_UNIT_NODES), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.orgUnitConnector.getList(payload.userId).pipe(operators.map(function (orgUnitsList) { return new LoadOrgUnitNodesSuccess(orgUnitsList); }), operators.catchError(function (error) { return rxjs.of(new LoadOrgUnitNodesFail({
                error: i1.normalizeHttpError(error),
            })); })); }));
            this.createUnit$ = this.actions$.pipe(i1$1.ofType(CREATE_ORG_UNIT), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.orgUnitConnector.create(payload.userId, payload.unit).pipe(operators.switchMap(function (data) { return [
                new CreateUnitSuccess(data),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new CreateUnitFail({
                    unitCode: payload.unit.uid,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.updateUnit$ = this.actions$.pipe(i1$1.ofType(UPDATE_ORG_UNIT), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.orgUnitConnector
                .update(payload.userId, payload.unitCode, payload.unit)
                .pipe(operators.switchMap(function (_data) { return [
                // Workaround for empty response
                new UpdateUnitSuccess(payload.unit),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new UpdateUnitFail({
                    unitCode: payload.unit.uid,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.loadTree$ = this.actions$.pipe(i1$1.ofType(LOAD_UNIT_TREE), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_a) {
                var userId = _a.userId;
                return _this.orgUnitConnector.getTree(userId).pipe(operators.map(function (orgUnit) { return new LoadTreeSuccess(orgUnit); }), operators.catchError(function (error) { return rxjs.of(new LoadTreeFail({
                    error: i1.normalizeHttpError(error),
                })); }));
            }));
            this.loadApprovalProcesses$ = this.actions$.pipe(i1$1.ofType(LOAD_APPROVAL_PROCESSES), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_a) {
                var userId = _a.userId;
                return _this.orgUnitConnector.getApprovalProcesses(userId).pipe(operators.map(function (approvalProcesses) { return new LoadApprovalProcessesSuccess(approvalProcesses); }), operators.catchError(function (error) { return rxjs.of(new LoadApprovalProcessesFail({
                    error: i1.normalizeHttpError(error),
                })); }));
            }));
            this.loadUsers$ = this.actions$.pipe(i1$1.ofType(LOAD_ASSIGNED_USERS), operators.map(function (action) { return action.payload; }), operators.groupBy(function (_a) {
                var orgUnitId = _a.orgUnitId, roleId = _a.roleId, params = _a.params;
                return i1.StateUtils.serializeParams([orgUnitId, roleId], params);
            }), operators.mergeMap(function (group) { return group.pipe(operators.switchMap(function (_a) {
                var userId = _a.userId, orgUnitId = _a.orgUnitId, roleId = _a.roleId, params = _a.params;
                return _this.orgUnitConnector
                    .getUsers(userId, orgUnitId, roleId, params)
                    .pipe(operators.switchMap(function (users) {
                    var _a = i1.StateUtils.normalizeListPage(users, 'customerId'), values = _a.values, page = _a.page;
                    return [
                        new LoadB2BUserSuccess(values),
                        new LoadAssignedUsersSuccess({
                            orgUnitId: orgUnitId,
                            roleId: roleId,
                            page: page,
                            params: params,
                        }),
                    ];
                }), operators.catchError(function (error) { return rxjs.of(new LoadAssignedUsersFail({
                    orgUnitId: orgUnitId,
                    roleId: roleId,
                    params: params,
                    error: i1.normalizeHttpError(error),
                })); }));
            })); }));
            this.assignRoleToUser = this.actions$.pipe(i1$1.ofType(ASSIGN_ROLE), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_a) {
                var userId = _a.userId, orgCustomerId = _a.orgCustomerId, roleId = _a.roleId;
                return _this.orgUnitConnector.assignRole(userId, orgCustomerId, roleId).pipe(operators.map(function () { return new AssignRoleSuccess({
                    uid: orgCustomerId,
                    roleId: roleId,
                    selected: true,
                }); }), operators.catchError(function (error) { return rxjs.of(new AssignRoleFail({
                    orgCustomerId: orgCustomerId,
                    error: i1.normalizeHttpError(error),
                })); }));
            }));
            this.unassignRoleToUser$ = this.actions$.pipe(i1$1.ofType(UNASSIGN_ROLE), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_a) {
                var userId = _a.userId, orgCustomerId = _a.orgCustomerId, roleId = _a.roleId;
                return _this.orgUnitConnector.unassignRole(userId, orgCustomerId, roleId).pipe(operators.map(function () { return new UnassignRoleSuccess({
                    uid: orgCustomerId,
                    roleId: roleId,
                    selected: false,
                }); }), operators.catchError(function (error) { return rxjs.of(new UnassignRoleFail({
                    orgCustomerId: orgCustomerId,
                    error: i1.normalizeHttpError(error),
                })); }));
            }));
            this.assignApprover = this.actions$.pipe(i1$1.ofType(ASSIGN_APPROVER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (_a) {
                var userId = _a.userId, orgUnitId = _a.orgUnitId, orgCustomerId = _a.orgCustomerId, roleId = _a.roleId;
                return _this.orgUnitConnector
                    .assignApprover(userId, orgUnitId, orgCustomerId, roleId)
                    .pipe(operators.switchMap(function () { return [
                    new AssignApproverSuccess({
                        uid: orgCustomerId,
                        roleId: roleId,
                        selected: true,
                    }),
                    new OrganizationClearData(),
                ]; }), operators.catchError(function (error) { return rxjs.from([
                    new AssignApproverFail({
                        orgCustomerId: orgCustomerId,
                        error: i1.normalizeHttpError(error),
                    }),
                    new OrganizationClearData(),
                ]); }));
            }));
            this.unassignApprover = this.actions$.pipe(i1$1.ofType(UNASSIGN_APPROVER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (_a) {
                var userId = _a.userId, orgUnitId = _a.orgUnitId, orgCustomerId = _a.orgCustomerId, roleId = _a.roleId;
                return _this.orgUnitConnector
                    .unassignApprover(userId, orgUnitId, orgCustomerId, roleId)
                    .pipe(operators.switchMap(function () { return [
                    new UnassignApproverSuccess({
                        uid: orgCustomerId,
                        roleId: roleId,
                        selected: false,
                    }),
                    new OrganizationClearData(),
                ]; }), operators.catchError(function (error) { return rxjs.from([
                    new UnassignApproverFail({
                        orgCustomerId: orgCustomerId,
                        error: i1.normalizeHttpError(error),
                    }),
                    new OrganizationClearData(),
                ]); }));
            }));
            this.createAddress$ = this.actions$.pipe(i1$1.ofType(CREATE_ADDRESS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.orgUnitConnector
                .createAddress(payload.userId, payload.orgUnitId, payload.address)
                .pipe(operators.switchMap(function (data) { return [
                new CreateAddressSuccess(data),
                new CreateAddressSuccess({ id: null }),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new CreateAddressFail({
                    addressId: payload.address.id,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.updateAddress$ = this.actions$.pipe(i1$1.ofType(UPDATE_ADDRESS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_a) {
                var userId = _a.userId, orgUnitId = _a.orgUnitId, addressId = _a.addressId, address = _a.address;
                return _this.orgUnitConnector
                    .updateAddress(userId, orgUnitId, addressId, address)
                    .pipe(operators.switchMap(function () { return [
                    // commented out due to no response from backend on PATCH request
                    // new OrgUnitActions.UpdateAddressSuccess(data),
                    new UpdateAddressSuccess(address),
                    new OrganizationClearData(),
                ]; }), operators.catchError(function (error) { return rxjs.from([
                    new UpdateAddressFail({
                        addressId: address.id,
                        error: i1.normalizeHttpError(error),
                    }),
                    new OrganizationClearData(),
                ]); }));
            }));
            this.deleteAddress$ = this.actions$.pipe(i1$1.ofType(DELETE_ADDRESS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.orgUnitConnector
                .deleteAddress(payload.userId, payload.orgUnitId, payload.addressId)
                .pipe(operators.switchMap(function () { return [
                new DeleteAddressSuccess({ id: payload.addressId }),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new DeleteAddressFail({
                    addressId: payload.addressId,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
        }
        return OrgUnitEffects;
    }());
    OrgUnitEffects.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrgUnitEffects, deps: [{ token: i1__namespace$1.Actions }, { token: OrgUnitConnector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrgUnitEffects.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrgUnitEffects });
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "loadOrgUnit$", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "loadAvailableOrgUnits$", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "createUnit$", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "updateUnit$", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "loadTree$", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "loadApprovalProcesses$", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "loadUsers$", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "assignRoleToUser", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "unassignRoleToUser$", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "assignApprover", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "unassignApprover", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "createAddress$", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "updateAddress$", void 0);
    __decorate([
        i1$1.Effect()
    ], OrgUnitEffects.prototype, "deleteAddress$", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrgUnitEffects, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Actions }, { type: OrgUnitConnector }]; }, propDecorators: { loadOrgUnit$: [], loadAvailableOrgUnits$: [], createUnit$: [], updateUnit$: [], loadTree$: [], loadApprovalProcesses$: [], loadUsers$: [], assignRoleToUser: [], unassignRoleToUser$: [], assignApprover: [], unassignApprover: [], createAddress$: [], updateAddress$: [], deleteAddress$: [] } });

    var PermissionEffects = /** @class */ (function () {
        function PermissionEffects(actions$, permissionConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.permissionConnector = permissionConnector;
            this.loadPermission$ = this.actions$.pipe(i1$1.ofType(LOAD_PERMISSION), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_a) {
                var userId = _a.userId, permissionCode = _a.permissionCode;
                return _this.permissionConnector.get(userId, permissionCode).pipe(operators.map(function (permission) {
                    return new LoadPermissionSuccess([permission]);
                }), operators.catchError(function (error) { return rxjs.of(new LoadPermissionFail({
                    permissionCode: permissionCode,
                    error: i1.normalizeHttpError(error),
                })); }));
            }));
            this.loadPermissions$ = this.actions$.pipe(i1$1.ofType(LOAD_PERMISSIONS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.permissionConnector.getList(payload.userId, payload.params).pipe(operators.switchMap(function (permissions) {
                var _a = i1.StateUtils.normalizeListPage(permissions, 'code'), values = _a.values, page = _a.page;
                return [
                    new LoadPermissionSuccess(values),
                    new LoadPermissionsSuccess({
                        page: page,
                        params: payload.params,
                    }),
                ];
            }), operators.catchError(function (error) { return rxjs.of(new LoadPermissionsFail({
                params: payload.params,
                error: i1.normalizeHttpError(error),
            })); })); }));
            this.createPermission$ = this.actions$.pipe(i1$1.ofType(CREATE_PERMISSION), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.permissionConnector.create(payload.userId, payload.permission).pipe(operators.switchMap(function (data) { return [
                new CreatePermissionSuccess(data),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new CreatePermissionFail({
                    permissionCode: payload.permission.code,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.updatePermission$ = this.actions$.pipe(i1$1.ofType(UPDATE_PERMISSION), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.permissionConnector
                .update(payload.userId, payload.permissionCode, payload.permission)
                .pipe(operators.switchMap(function (data) { return [
                new UpdatePermissionSuccess(data),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new UpdatePermissionFail({
                    permissionCode: payload.permission.code,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.loadPermissionTypes$ = this.actions$.pipe(i1$1.ofType(LOAD_PERMISSION_TYPES), operators.switchMap(function () { return _this.permissionConnector.getTypes().pipe(operators.map(function (permissionTypeList) { return new LoadPermissionTypesSuccess(permissionTypeList); }), operators.catchError(function (error) { return rxjs.of(new LoadPermissionTypesFail({
                error: i1.normalizeHttpError(error),
            })); })); }));
        }
        return PermissionEffects;
    }());
    PermissionEffects.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionEffects, deps: [{ token: i1__namespace$1.Actions }, { token: PermissionConnector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PermissionEffects.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionEffects });
    __decorate([
        i1$1.Effect()
    ], PermissionEffects.prototype, "loadPermission$", void 0);
    __decorate([
        i1$1.Effect()
    ], PermissionEffects.prototype, "loadPermissions$", void 0);
    __decorate([
        i1$1.Effect()
    ], PermissionEffects.prototype, "createPermission$", void 0);
    __decorate([
        i1$1.Effect()
    ], PermissionEffects.prototype, "updatePermission$", void 0);
    __decorate([
        i1$1.Effect()
    ], PermissionEffects.prototype, "loadPermissionTypes$", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionEffects, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Actions }, { type: PermissionConnector }]; }, propDecorators: { loadPermission$: [], loadPermissions$: [], createPermission$: [], updatePermission$: [], loadPermissionTypes$: [] } });

    var CostCenterEffects = /** @class */ (function () {
        function CostCenterEffects(actions$, costCenterConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.costCenterConnector = costCenterConnector;
            this.loadCostCenter$ = this.actions$.pipe(i1$1.ofType(LOAD_COST_CENTER), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_a) {
                var userId = _a.userId, costCenterCode = _a.costCenterCode;
                return _this.costCenterConnector.get(userId, costCenterCode).pipe(operators.map(function (costCenter) {
                    return new LoadCostCenterSuccess([costCenter]);
                }), operators.catchError(function (error) { return rxjs.of(new LoadCostCenterFail({
                    costCenterCode: costCenterCode,
                    error: i1.normalizeHttpError(error),
                })); }));
            }));
            this.loadCostCenters$ = this.actions$.pipe(i1$1.ofType(LOAD_COST_CENTERS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.costCenterConnector.getList(payload.userId, payload.params).pipe(operators.switchMap(function (costCenters) {
                var _a = i1.StateUtils.normalizeListPage(costCenters, 'code'), values = _a.values, page = _a.page;
                return [
                    new LoadCostCenterSuccess(values),
                    new LoadCostCentersSuccess({
                        page: page,
                        params: payload.params,
                    }),
                ];
            }), operators.catchError(function (error) { return rxjs.of(new LoadCostCentersFail({
                params: payload.params,
                error: i1.normalizeHttpError(error),
            })); })); }));
            this.createCostCenter$ = this.actions$.pipe(i1$1.ofType(CREATE_COST_CENTER), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.costCenterConnector.create(payload.userId, payload.costCenter).pipe(operators.switchMap(function (data) { return [
                new CreateCostCenterSuccess(data),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new CreateCostCenterFail({
                    costCenterCode: payload.costCenter.code,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.updateCostCenter$ = this.actions$.pipe(i1$1.ofType(UPDATE_COST_CENTER), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.costCenterConnector
                .update(payload.userId, payload.costCenterCode, payload.costCenter)
                .pipe(operators.switchMap(function (data) { return [
                new UpdateCostCenterSuccess(data),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new UpdateCostCenterFail({
                    costCenterCode: payload.costCenter.code,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.loadAssignedBudgets$ = this.actions$.pipe(i1$1.ofType(LOAD_ASSIGNED_BUDGETS), operators.map(function (action) { return action.payload; }), operators.groupBy(function (_a) {
                var costCenterCode = _a.costCenterCode, params = _a.params;
                return i1.StateUtils.serializeParams(costCenterCode, params);
            }), operators.mergeMap(function (group) { return group.pipe(operators.switchMap(function (_a) {
                var userId = _a.userId, costCenterCode = _a.costCenterCode, params = _a.params;
                return _this.costCenterConnector
                    .getBudgets(userId, costCenterCode, params)
                    .pipe(operators.switchMap(function (budgets) {
                    var _a = i1.StateUtils.normalizeListPage(budgets, 'code'), values = _a.values, page = _a.page;
                    return [
                        new LoadBudgetSuccess(values),
                        new LoadAssignedBudgetsSuccess({
                            costCenterCode: costCenterCode,
                            page: page,
                            params: params,
                        }),
                    ];
                }), operators.catchError(function (error) { return rxjs.of(new LoadAssignedBudgetsFail({
                    costCenterCode: costCenterCode,
                    params: params,
                    error: i1.normalizeHttpError(error),
                })); }));
            })); }));
            this.assignBudgetToCostCenter$ = this.actions$.pipe(i1$1.ofType(ASSIGN_BUDGET), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (_a) {
                var userId = _a.userId, costCenterCode = _a.costCenterCode, budgetCode = _a.budgetCode;
                return _this.costCenterConnector
                    .assignBudget(userId, costCenterCode, budgetCode)
                    .pipe(operators.switchMap(function () { return [
                    new AssignBudgetSuccess({
                        code: budgetCode,
                        selected: true,
                    }),
                    new OrganizationClearData(),
                ]; }), operators.catchError(function (error) { return rxjs.from([
                    new AssignBudgetFail({
                        budgetCode: budgetCode,
                        error: i1.normalizeHttpError(error),
                    }),
                    new OrganizationClearData(),
                ]); }));
            }));
            this.unassignBudgetToCostCenter$ = this.actions$.pipe(i1$1.ofType(UNASSIGN_BUDGET), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (_a) {
                var userId = _a.userId, costCenterCode = _a.costCenterCode, budgetCode = _a.budgetCode;
                return _this.costCenterConnector
                    .unassignBudget(userId, costCenterCode, budgetCode)
                    .pipe(operators.switchMap(function () { return [
                    new UnassignBudgetSuccess({
                        code: budgetCode,
                        selected: false,
                    }),
                    new OrganizationClearData(),
                ]; }), operators.catchError(function (error) { return rxjs.from([
                    new UnassignBudgetFail({
                        budgetCode: budgetCode,
                        error: i1.normalizeHttpError(error),
                    }),
                    new OrganizationClearData(),
                ]); }));
            }));
        }
        return CostCenterEffects;
    }());
    CostCenterEffects.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterEffects, deps: [{ token: i1__namespace$1.Actions }, { token: CostCenterConnector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CostCenterEffects.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterEffects });
    __decorate([
        i1$1.Effect()
    ], CostCenterEffects.prototype, "loadCostCenter$", void 0);
    __decorate([
        i1$1.Effect()
    ], CostCenterEffects.prototype, "loadCostCenters$", void 0);
    __decorate([
        i1$1.Effect()
    ], CostCenterEffects.prototype, "createCostCenter$", void 0);
    __decorate([
        i1$1.Effect()
    ], CostCenterEffects.prototype, "updateCostCenter$", void 0);
    __decorate([
        i1$1.Effect()
    ], CostCenterEffects.prototype, "loadAssignedBudgets$", void 0);
    __decorate([
        i1$1.Effect()
    ], CostCenterEffects.prototype, "assignBudgetToCostCenter$", void 0);
    __decorate([
        i1$1.Effect()
    ], CostCenterEffects.prototype, "unassignBudgetToCostCenter$", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterEffects, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Actions }, { type: CostCenterConnector }]; }, propDecorators: { loadCostCenter$: [], loadCostCenters$: [], createCostCenter$: [], updateCostCenter$: [], loadAssignedBudgets$: [], assignBudgetToCostCenter$: [], unassignBudgetToCostCenter$: [] } });

    var B2BUserEffects = /** @class */ (function () {
        function B2BUserEffects(actions$, b2bUserConnector, routingService, userService, userIdService) {
            var _this = this;
            this.actions$ = actions$;
            this.b2bUserConnector = b2bUserConnector;
            this.routingService = routingService;
            this.userService = userService;
            this.userIdService = userIdService;
            this.loadB2BUser$ = this.actions$.pipe(i1$1.ofType(LOAD_B2B_USER), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_d) {
                var userId = _d.userId, orgCustomerId = _d.orgCustomerId;
                return _this.b2bUserConnector.get(userId, orgCustomerId).pipe(operators.map(function (b2bUser) {
                    return new LoadB2BUserSuccess([b2bUser]);
                }), operators.catchError(function (error) { return rxjs.of(new LoadB2BUserFail({
                    orgCustomerId: orgCustomerId,
                    error: i1.normalizeHttpError(error),
                })); }));
            }));
            this.createB2BUser$ = this.actions$.pipe(i1$1.ofType(CREATE_B2B_USER), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_d) {
                var userId = _d.userId, orgCustomer = _d.orgCustomer;
                return _this.b2bUserConnector.create(userId, orgCustomer).pipe(operators.switchMap(function (data) {
                    var isAssignedToApprovers = orgCustomer.isAssignedToApprovers;
                    // TODO Workaround for not known customerId while user creation (redireciton)
                    return _this.routingService.getRouterState().pipe(operators.take(1), operators.tap(function (route) { return _this.redirectToDetails(route, data); }), operators.switchMap(function () {
                        var successActions = [
                            new CreateB2BUserSuccess(data),
                            new CreateB2BUserSuccess({ customerId: null }),
                            new OrganizationClearData(),
                        ];
                        if (isAssignedToApprovers) {
                            successActions.splice(1, 0, new AssignApprover({
                                userId: userId,
                                orgUnitId: orgCustomer.orgUnit.uid,
                                orgCustomerId: data.customerId,
                                roleId: i1.B2BUserRole.APPROVER,
                            }));
                        }
                        return successActions;
                    }));
                }), operators.catchError(function (error) { return rxjs.from([
                    new CreateB2BUserFail({
                        orgCustomerId: orgCustomer.customerId,
                        error: i1.normalizeHttpError(error),
                    }),
                    new OrganizationClearData(),
                ]); }));
            }));
            this.updateB2BUser$ = this.actions$.pipe(i1$1.ofType(UPDATE_B2B_USER), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_d) {
                var userId = _d.userId, orgCustomerId = _d.orgCustomerId, orgCustomer = _d.orgCustomer;
                var isAssignedToApprovers = orgCustomer.isAssignedToApprovers;
                return _this.b2bUserConnector
                    .update(userId, orgCustomerId, orgCustomer)
                    .pipe(operators.switchMap(function (_data) {
                    var successActions = [
                        // TODO: change for 'payload: data' when backend API start to return user data on PATCH
                        new UpdateB2BUserSuccess(orgCustomer),
                    ];
                    if (isAssignedToApprovers) {
                        successActions.push(new AssignApprover({
                            userId: userId,
                            orgUnitId: orgCustomer.orgUnit.uid,
                            orgCustomerId: orgCustomerId,
                            roleId: i1.B2BUserRole.APPROVER,
                        }));
                    }
                    return successActions;
                }), operators.catchError(function (error) { return rxjs.from([
                    new UpdateB2BUserFail({
                        orgCustomerId: orgCustomer.customerId,
                        error: i1.normalizeHttpError(error),
                    }),
                    new OrganizationClearData(),
                ]); }));
            }));
            this.checkSelfEmailUpdate$ = this.actions$.pipe(i1$1.ofType(UPDATE_B2B_USER_SUCCESS), operators.map(function (action) { return action.payload; }), operators.withLatestFrom(this.userService.get(), this.userIdService.getUserId()), operators.switchMap(function (_d) {
                var _e = __read(_d, 2), payload = _e[0], currentUser = _e[1];
                var currentUserEmailMatch = payload.customerId === currentUser.customerId &&
                    payload.email !== currentUser.displayUid;
                if (currentUserEmailMatch) {
                    _this.routingService.go({ cxRoute: 'login' });
                }
                return currentUserEmailMatch
                    ? [new i1.AuthActions.Logout()]
                    : [new OrganizationClearData()];
            }));
            this.loadB2BUsers$ = this.actions$.pipe(i1$1.ofType(LOAD_B2B_USERS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.b2bUserConnector.getList(payload.userId, payload.params).pipe(operators.switchMap(function (b2bUsers) {
                var _d = i1.StateUtils.normalizeListPage(b2bUsers, 'customerId'), values = _d.values, page = _d.page;
                return [
                    new LoadB2BUserSuccess(values),
                    new LoadB2BUsersSuccess({
                        page: page,
                        params: payload.params,
                    }),
                ];
            }), operators.catchError(function (error) { return rxjs.of(new LoadB2BUsersFail({
                params: payload.params,
                error: i1.normalizeHttpError(error),
            })); })); }));
            this.loadB2BUserApprovers$ = this.actions$.pipe(i1$1.ofType(LOAD_B2B_USER_APPROVERS), operators.map(function (action) { return action.payload; }), operators.groupBy(function (_d) {
                var orgCustomerId = _d.orgCustomerId, params = _d.params;
                return i1.StateUtils.serializeParams(orgCustomerId, params);
            }), operators.mergeMap(function (group) { return group.pipe(operators.switchMap(function (payload) { return _this.b2bUserConnector
                .getApprovers(payload.userId, payload.orgCustomerId, payload.params)
                .pipe(operators.switchMap(function (approvers) {
                var _d = i1.StateUtils.normalizeListPage(approvers, 'customerId'), values = _d.values, page = _d.page;
                return [
                    new LoadB2BUserSuccess(values),
                    new LoadB2BUserApproversSuccess({
                        orgCustomerId: payload.orgCustomerId,
                        page: page,
                        params: payload.params,
                    }),
                ];
            }), operators.catchError(function (error) { return rxjs.of(new LoadB2BUserApproversFail({
                orgCustomerId: payload.orgCustomerId,
                params: payload.params,
                error: i1.normalizeHttpError(error),
            })); })); })); }));
            this.loadB2BUserPermissions$ = this.actions$.pipe(i1$1.ofType(LOAD_B2B_USER_PERMISSIONS), operators.map(function (action) { return action.payload; }), operators.groupBy(function (_d) {
                var orgCustomerId = _d.orgCustomerId, params = _d.params;
                return i1.StateUtils.serializeParams(orgCustomerId, params);
            }), operators.mergeMap(function (group) { return group.pipe(operators.switchMap(function (payload) { return _this.b2bUserConnector
                .getPermissions(payload.userId, payload.orgCustomerId, payload.params)
                .pipe(operators.switchMap(function (permissions) {
                var _d = i1.StateUtils.normalizeListPage(permissions, 'code'), values = _d.values, page = _d.page;
                return [
                    new LoadPermissionSuccess(values),
                    new LoadB2BUserPermissionsSuccess({
                        orgCustomerId: payload.orgCustomerId,
                        page: page,
                        params: payload.params,
                    }),
                ];
            }), operators.catchError(function (error) { return rxjs.of(new LoadB2BUserPermissionsFail({
                orgCustomerId: payload.orgCustomerId,
                params: payload.params,
                error: i1.normalizeHttpError(error),
            })); })); })); }));
            this.loadB2BUserUserGroups$ = this.actions$.pipe(i1$1.ofType(LOAD_B2B_USER_USER_GROUPS), operators.map(function (action) { return action.payload; }), operators.groupBy(function (_d) {
                var orgCustomerId = _d.orgCustomerId, params = _d.params;
                return i1.StateUtils.serializeParams(orgCustomerId, params);
            }), operators.mergeMap(function (group) { return group.pipe(operators.switchMap(function (payload) { return _this.b2bUserConnector
                .getUserGroups(payload.userId, payload.orgCustomerId, payload.params)
                .pipe(operators.switchMap(function (userGroups) {
                var _d = i1.StateUtils.normalizeListPage(userGroups, 'uid'), values = _d.values, page = _d.page;
                return [
                    new LoadUserGroupSuccess(values),
                    new LoadB2BUserUserGroupsSuccess({
                        orgCustomerId: payload.orgCustomerId,
                        page: page,
                        params: payload.params,
                    }),
                ];
            }), operators.catchError(function (error) { return rxjs.of(new LoadB2BUserUserGroupsFail({
                orgCustomerId: payload.orgCustomerId,
                params: payload.params,
                error: i1.normalizeHttpError(error),
            })); })); })); }));
            this.assignApproverToB2BUser$ = this.actions$.pipe(i1$1.ofType(ASSIGN_B2B_USER_APPROVER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.b2bUserConnector
                .assignApprover(payload.userId, payload.orgCustomerId, payload.approverId)
                .pipe(operators.switchMap(function (data) { return [
                new AssignB2BUserApproverSuccess({
                    // Occ returned email, but we use customerId in store
                    approverId: payload.approverId,
                    selected: data.selected,
                }),
                // Clearing data in this case causes unexpected behavior (#10468)
                // new OrganizationActions.OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new AssignB2BUserApproverFail({
                    orgCustomerId: payload.orgCustomerId,
                    approverId: payload.approverId,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.unassignApproverFromB2BUser$ = this.actions$.pipe(i1$1.ofType(UNASSIGN_B2B_USER_APPROVER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.b2bUserConnector
                .unassignApprover(payload.userId, payload.orgCustomerId, payload.approverId)
                .pipe(operators.switchMap(function (data) { return [
                new UnassignB2BUserApproverSuccess({
                    // Occ returned email, but we use customerId in store
                    approverId: payload.approverId,
                    selected: data.selected,
                }),
                // Clearing data in this case causes unexpected behavior (#10468)
                // new OrganizationActions.OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new UnassignB2BUserApproverFail({
                    orgCustomerId: payload.orgCustomerId,
                    approverId: payload.approverId,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.assignPermissionToB2BUser$ = this.actions$.pipe(i1$1.ofType(ASSIGN_B2B_USER_PERMISSION), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.b2bUserConnector
                .assignPermission(payload.userId, payload.orgCustomerId, payload.permissionId)
                .pipe(operators.switchMap(function (data) { return [
                new AssignB2BUserPermissionSuccess({
                    permissionId: data.id,
                    selected: data.selected,
                }),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new AssignB2BUserPermissionFail({
                    orgCustomerId: payload.orgCustomerId,
                    permissionId: payload.permissionId,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.unassignPermissionFromB2BUser$ = this.actions$.pipe(i1$1.ofType(UNASSIGN_B2B_USER_PERMISSION), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.b2bUserConnector
                .unassignPermission(payload.userId, payload.orgCustomerId, payload.permissionId)
                .pipe(operators.switchMap(function (data) { return [
                new UnassignB2BUserPermissionSuccess({
                    permissionId: data.id,
                    selected: data.selected,
                }),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new UnassignB2BUserPermissionFail({
                    orgCustomerId: payload.orgCustomerId,
                    permissionId: payload.permissionId,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.assignUserGroupToB2BUser$ = this.actions$.pipe(i1$1.ofType(ASSIGN_B2B_USER_USER_GROUP), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.b2bUserConnector
                .assignUserGroup(payload.userId, payload.orgCustomerId, payload.userGroupId)
                .pipe(operators.switchMap(function (data) { return [
                new AssignB2BUserUserGroupSuccess({
                    uid: data.id,
                    selected: data.selected,
                }),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new AssignB2BUserUserGroupFail({
                    orgCustomerId: payload.orgCustomerId,
                    userGroupId: payload.userGroupId,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.unassignUserGroupFromB2BUser$ = this.actions$.pipe(i1$1.ofType(UNASSIGN_B2B_USER_USER_GROUP), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.b2bUserConnector
                .unassignUserGroup(payload.userId, payload.orgCustomerId, payload.userGroupId)
                .pipe(operators.switchMap(
            // TODO: Workaround because occ doesn't respond here
            // (data) =>
            //   new B2BUserActions.DeleteB2BUserUserGroupSuccess({
            //     uid: data.id,
            //     selected: data.selected,
            //   })
            function () { return [
                new UnassignB2BUserUserGroupSuccess({
                    uid: payload.userGroupId,
                    selected: false,
                }),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new UnassignB2BUserUserGroupFail({
                    orgCustomerId: payload.orgCustomerId,
                    userGroupId: payload.userGroupId,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
        }
        B2BUserEffects.prototype.redirectToDetails = function (route, data) {
            var _a, _b, _c;
            if (((_c = (_b = (_a = route) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.context) === null || _c === void 0 ? void 0 : _c.id) !== '/organization/units') {
                this.routingService.go({
                    cxRoute: 'orgUserDetails',
                    params: data,
                });
            }
        };
        return B2BUserEffects;
    }());
    B2BUserEffects.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: B2BUserEffects, deps: [{ token: i1__namespace$1.Actions }, { token: B2BUserConnector }, { token: i1__namespace.RoutingService }, { token: i1__namespace.UserService }, { token: i1__namespace.UserIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    B2BUserEffects.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: B2BUserEffects });
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "loadB2BUser$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "createB2BUser$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "updateB2BUser$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "checkSelfEmailUpdate$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "loadB2BUsers$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "loadB2BUserApprovers$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "loadB2BUserPermissions$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "loadB2BUserUserGroups$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "assignApproverToB2BUser$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "unassignApproverFromB2BUser$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "assignPermissionToB2BUser$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "unassignPermissionFromB2BUser$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "assignUserGroupToB2BUser$", void 0);
    __decorate([
        i1$1.Effect()
    ], B2BUserEffects.prototype, "unassignUserGroupFromB2BUser$", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: B2BUserEffects, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Actions }, { type: B2BUserConnector }, { type: i1__namespace.RoutingService }, { type: i1__namespace.UserService }, { type: i1__namespace.UserIdService }]; }, propDecorators: { loadB2BUser$: [], createB2BUser$: [], updateB2BUser$: [], checkSelfEmailUpdate$: [], loadB2BUsers$: [], loadB2BUserApprovers$: [], loadB2BUserPermissions$: [], loadB2BUserUserGroups$: [], assignApproverToB2BUser$: [], unassignApproverFromB2BUser$: [], assignPermissionToB2BUser$: [], unassignPermissionFromB2BUser$: [], assignUserGroupToB2BUser$: [], unassignUserGroupFromB2BUser$: [] } });

    var UserGroupEffects = /** @class */ (function () {
        function UserGroupEffects(actions$, userGroupConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.userGroupConnector = userGroupConnector;
            this.loadUserGroup$ = this.actions$.pipe(i1$1.ofType(LOAD_USER_GROUP), operators.map(function (action) { return action.payload; }), operators.switchMap(function (_a) {
                var userId = _a.userId, userGroupId = _a.userGroupId;
                return _this.userGroupConnector.get(userId, userGroupId).pipe(operators.map(function (userGroup) {
                    return new LoadUserGroupSuccess([userGroup]);
                }), operators.catchError(function (error) { return rxjs.of(new LoadUserGroupFail({
                    userGroupId: userGroupId,
                    error: i1.normalizeHttpError(error),
                })); }));
            }));
            this.loadUserGroups$ = this.actions$.pipe(i1$1.ofType(LOAD_USER_GROUPS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.userGroupConnector.getList(payload.userId, payload.params).pipe(operators.switchMap(function (userGroups) {
                var _a = i1.StateUtils.normalizeListPage(userGroups, 'uid'), values = _a.values, page = _a.page;
                return [
                    new LoadUserGroupSuccess(values),
                    new LoadUserGroupsSuccess({
                        page: page,
                        params: payload.params,
                    }),
                ];
            }), operators.catchError(function (error) { return rxjs.of(new LoadUserGroupsFail({
                params: payload.params,
                error: i1.normalizeHttpError(error),
            })); })); }));
            this.loadAvailableOrderApprovalPermissions$ = this.actions$.pipe(i1$1.ofType(LOAD_USER_GROUP_PERMISSIONS), operators.map(function (action) { return action.payload; }), operators.groupBy(function (_a) {
                var userGroupId = _a.userGroupId, params = _a.params;
                return i1.StateUtils.serializeParams(userGroupId, params);
            }), operators.mergeMap(function (group) { return group.pipe(operators.switchMap(function (payload) { return _this.userGroupConnector
                .getAvailableOrderApprovalPermissions(payload.userId, payload.userGroupId, payload.params)
                .pipe(operators.switchMap(function (permissions) {
                var _a = i1.StateUtils.normalizeListPage(permissions, 'code'), values = _a.values, page = _a.page;
                return [
                    new LoadPermissionSuccess(values),
                    new LoadPermissionsSuccess$1({
                        userGroupId: payload.userGroupId,
                        page: page,
                        params: payload.params,
                    }),
                ];
            }), operators.catchError(function (error) { return rxjs.of(new LoadPermissionsFail$1({
                userGroupId: payload.userGroupId,
                params: payload.params,
                error: i1.normalizeHttpError(error),
            })); })); })); }));
            this.loadAvailableOrgCustomers$ = this.actions$.pipe(i1$1.ofType(LOAD_USER_GROUP_AVAILABLE_CUSTOMERS), operators.map(function (action) { return action.payload; }), operators.groupBy(function (_a) {
                var userGroupId = _a.userGroupId, params = _a.params;
                return i1.StateUtils.serializeParams(userGroupId, params);
            }), operators.mergeMap(function (group) { return group.pipe(operators.switchMap(function (payload) { return _this.userGroupConnector
                .getAvailableOrgCustomers(payload.userId, payload.userGroupId, payload.params)
                .pipe(operators.switchMap(function (customers) {
                var _a = i1.StateUtils.normalizeListPage(customers, 'customerId'), values = _a.values, page = _a.page;
                return [
                    new LoadB2BUserSuccess(values),
                    new LoadAvailableOrgCustomersSuccess({
                        userGroupId: payload.userGroupId,
                        page: page,
                        params: payload.params,
                    }),
                ];
            }), operators.catchError(function (error) { return rxjs.of(new LoadAvailableOrgCustomersFail({
                userGroupId: payload.userGroupId,
                params: payload.params,
                error: i1.normalizeHttpError(error),
            })); })); })); }));
            this.createUserGroup$ = this.actions$.pipe(i1$1.ofType(CREATE_USER_GROUP), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.userGroupConnector.create(payload.userId, payload.userGroup).pipe(operators.switchMap(function (data) { return [
                new CreateUserGroupSuccess(data),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new CreateUserGroupFail({
                    userGroupId: payload.userGroup.uid,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.updateUserGroup$ = this.actions$.pipe(i1$1.ofType(UPDATE_USER_GROUP), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.userGroupConnector
                .update(payload.userId, payload.userGroupId, payload.userGroup)
                .pipe(operators.switchMap(function () { return [
                // TODO: Workaround for empty PATCH response:
                new UpdateUserGroupSuccess(payload.userGroup),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new UpdateUserGroupFail({
                    userGroupId: payload.userGroup.uid,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.deleteUserGroup$ = this.actions$.pipe(i1$1.ofType(DELETE_USER_GROUP), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.userGroupConnector.delete(payload.userId, payload.userGroupId).pipe(operators.switchMap(function (data) { return [
                new DeleteUserGroupSuccess(data),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new DeleteUserGroupFail({
                    userGroupId: payload.userGroupId,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.assignPermissionToUserGroup$ = this.actions$.pipe(i1$1.ofType(USER_GROUP_ASSIGN_PERMISSION), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.userGroupConnector
                .assignOrderApprovalPermission(payload.userId, payload.userGroupId, payload.permissionUid)
                .pipe(operators.switchMap(function (data) { return [
                new AssignPermissionSuccess({
                    permissionUid: data.id,
                    selected: data.selected,
                }),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new AssignPermissionFail({
                    userGroupId: payload.userGroupId,
                    permissionUid: payload.permissionUid,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.assignMemberUnitUserGroup$ = this.actions$.pipe(i1$1.ofType(USER_GROUP_ASSIGN_MEMBER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.userGroupConnector
                .assignMember(payload.userId, payload.userGroupId, payload.customerId)
                .pipe(operators.switchMap(function () { return [
                new AssignMemberSuccess({
                    customerId: payload.customerId,
                    selected: true,
                }),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new AssignMemberFail({
                    userGroupId: payload.userGroupId,
                    customerId: payload.customerId,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.unassignMemberFromUserGroup$ = this.actions$.pipe(i1$1.ofType(USER_GROUP_UNASSIGN_MEMBER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.userGroupConnector
                .unassignMember(payload.userId, payload.userGroupId, payload.customerId)
                .pipe(operators.switchMap(function () { return [
                new UnassignMemberSuccess({
                    customerId: payload.customerId,
                    selected: false,
                }),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new UnassignMemberFail({
                    userGroupId: payload.userGroupId,
                    customerId: payload.customerId,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.unassignPermissionFromUserGroup$ = this.actions$.pipe(i1$1.ofType(USER_GROUP_UNASSIGN_PERMISSION), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.userGroupConnector
                .unassignOrderApprovalPermission(payload.userId, payload.userGroupId, payload.permissionUid)
                .pipe(operators.switchMap(function (data) { return [
                new UnassignPermissionSuccess({
                    permissionUid: data.id,
                    selected: data.selected,
                }),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new UnassignPermissionFail({
                    userGroupId: payload.userGroupId,
                    permissionUid: payload.permissionUid,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
            this.unassignAllMembersFromUserGroup$ = this.actions$.pipe(i1$1.ofType(USER_GROUP_UNASSIGN_ALL_MEMBERS), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) { return _this.userGroupConnector
                .unassignAllMembers(payload.userId, payload.userGroupId)
                .pipe(operators.switchMap(function () { return [
                new UnassignAllMembersSuccess({
                    selected: false,
                }),
                new OrganizationClearData(),
            ]; }), operators.catchError(function (error) { return rxjs.from([
                new UnassignAllMembersFail({
                    userGroupId: payload.userGroupId,
                    error: i1.normalizeHttpError(error),
                }),
                new OrganizationClearData(),
            ]); })); }));
        }
        return UserGroupEffects;
    }());
    UserGroupEffects.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupEffects, deps: [{ token: i1__namespace$1.Actions }, { token: UserGroupConnector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserGroupEffects.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupEffects });
    __decorate([
        i1$1.Effect()
    ], UserGroupEffects.prototype, "loadUserGroup$", void 0);
    __decorate([
        i1$1.Effect()
    ], UserGroupEffects.prototype, "loadUserGroups$", void 0);
    __decorate([
        i1$1.Effect()
    ], UserGroupEffects.prototype, "loadAvailableOrderApprovalPermissions$", void 0);
    __decorate([
        i1$1.Effect()
    ], UserGroupEffects.prototype, "loadAvailableOrgCustomers$", void 0);
    __decorate([
        i1$1.Effect()
    ], UserGroupEffects.prototype, "createUserGroup$", void 0);
    __decorate([
        i1$1.Effect()
    ], UserGroupEffects.prototype, "updateUserGroup$", void 0);
    __decorate([
        i1$1.Effect()
    ], UserGroupEffects.prototype, "deleteUserGroup$", void 0);
    __decorate([
        i1$1.Effect()
    ], UserGroupEffects.prototype, "assignPermissionToUserGroup$", void 0);
    __decorate([
        i1$1.Effect()
    ], UserGroupEffects.prototype, "assignMemberUnitUserGroup$", void 0);
    __decorate([
        i1$1.Effect()
    ], UserGroupEffects.prototype, "unassignMemberFromUserGroup$", void 0);
    __decorate([
        i1$1.Effect()
    ], UserGroupEffects.prototype, "unassignPermissionFromUserGroup$", void 0);
    __decorate([
        i1$1.Effect()
    ], UserGroupEffects.prototype, "unassignAllMembersFromUserGroup$", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupEffects, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Actions }, { type: UserGroupConnector }]; }, propDecorators: { loadUserGroup$: [], loadUserGroups$: [], loadAvailableOrderApprovalPermissions$: [], loadAvailableOrgCustomers$: [], createUserGroup$: [], updateUserGroup$: [], deleteUserGroup$: [], assignPermissionToUserGroup$: [], assignMemberUnitUserGroup$: [], unassignMemberFromUserGroup$: [], unassignPermissionFromUserGroup$: [], unassignAllMembersFromUserGroup$: [] } });

    var effects = [
        BudgetEffects,
        OrgUnitEffects,
        UserGroupEffects,
        PermissionEffects,
        CostCenterEffects,
        B2BUserEffects,
    ];

    var b2bUserInitialState = undefined;
    var b2bUsersInitialState = undefined;
    function b2bUserEntitiesReducer(state, action) {
        if (state === void 0) { state = b2bUserInitialState; }
        var _a, _b, _c;
        switch (action.type) {
            case LOAD_B2B_USER_SUCCESS:
            case CREATE_B2B_USER_SUCCESS:
            case UPDATE_B2B_USER_SUCCESS:
                return action.payload;
            case ASSIGN_ROLE_SUCCESS:
            case ASSIGN_APPROVER_SUCCESS:
                return Object.assign(Object.assign({}, state), { selected: (_a = action.payload) === null || _a === void 0 ? void 0 : _a.selected, roles: __spreadArray(__spreadArray([], __read(((state === null || state === void 0 ? void 0 : state.roles) || []))), [(_b = action.payload) === null || _b === void 0 ? void 0 : _b.roleId]) });
            case UNASSIGN_ROLE_SUCCESS:
            case UNASSIGN_APPROVER_SUCCESS:
                return Object.assign(Object.assign({}, state), { selected: (_c = action.payload) === null || _c === void 0 ? void 0 : _c.selected, roles: __spreadArray([], __read(((state === null || state === void 0 ? void 0 : state.roles) || []))).filter(function (role) { var _a; return role !== ((_a = action.payload) === null || _a === void 0 ? void 0 : _a.roleId); }) });
            case ASSIGN_B2B_USER_APPROVER_SUCCESS:
            case UNASSIGN_B2B_USER_APPROVER_SUCCESS:
            case USER_GROUP_ASSIGN_MEMBER_SUCCESS:
            case USER_GROUP_UNASSIGN_MEMBER_SUCCESS:
            case USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS:
                return Object.assign(Object.assign({}, state), action.payload);
        }
        return state;
    }
    function userListReducer(state, action) {
        if (state === void 0) { state = b2bUsersInitialState; }
        switch (action.type) {
            case LOAD_B2B_USERS_SUCCESS:
                return action.payload.page;
        }
        return state;
    }
    function b2bUserApproverListReducer(state, action) {
        if (state === void 0) { state = b2bUsersInitialState; }
        switch (action.type) {
            case LOAD_B2B_USER_APPROVERS_SUCCESS:
                return action.payload.page;
        }
        return state;
    }
    function b2bUserPermissionListReducer(state, action) {
        if (state === void 0) { state = b2bUsersInitialState; }
        switch (action.type) {
            case LOAD_B2B_USER_PERMISSIONS_SUCCESS:
                return action.payload.page;
        }
        return state;
    }
    function b2bUserUserGroupListReducer(state, action) {
        if (state === void 0) { state = b2bUsersInitialState; }
        switch (action.type) {
            case LOAD_B2B_USER_USER_GROUPS_SUCCESS:
                return action.payload.page;
        }
        return state;
    }

    var budgetInitialState = undefined;
    var budgetsInitialState = undefined;
    function budgetsEntitiesReducer(state, action) {
        if (state === void 0) { state = budgetInitialState; }
        switch (action.type) {
            case LOAD_BUDGET_SUCCESS:
            case CREATE_BUDGET_SUCCESS:
            case UPDATE_BUDGET_SUCCESS:
                return action.payload;
            case UNASSIGN_BUDGET_SUCCESS:
            case ASSIGN_BUDGET_SUCCESS:
                return Object.assign(Object.assign({}, state), action.payload);
        }
        return state;
    }
    function budgetsListReducer(state, action) {
        if (state === void 0) { state = budgetsInitialState; }
        switch (action.type) {
            case LOAD_BUDGETS_SUCCESS:
                return action.payload.page;
        }
        return state;
    }

    var costCenterInitialState = undefined;
    var costCentersInitialState = undefined;
    function costCentersEntitiesReducer(state, action) {
        if (state === void 0) { state = costCenterInitialState; }
        switch (action.type) {
            case LOAD_COST_CENTER_SUCCESS:
            case CREATE_COST_CENTER_SUCCESS:
            case UPDATE_COST_CENTER_SUCCESS:
                return action.payload;
        }
        return state;
    }
    function costCentersListReducer(state, action) {
        if (state === void 0) { state = costCentersInitialState; }
        switch (action.type) {
            case LOAD_COST_CENTERS_SUCCESS:
                return action.payload.page;
        }
        return state;
    }
    function costCenterAssignedBudgetsListReducer(state, action) {
        if (state === void 0) { state = costCentersInitialState; }
        switch (action.type) {
            case LOAD_ASSIGNED_BUDGETS_SUCCESS:
                return action.payload.page;
        }
        return state;
    }

    var orgUnitInitialState = undefined;
    var orgUnitsInitialState = undefined;
    function orgUnitEntitiesReducer(state, action) {
        if (state === void 0) { state = orgUnitInitialState; }
        switch (action.type) {
            case LOAD_ORG_UNIT_SUCCESS:
            case CREATE_ORG_UNIT_SUCCESS:
                return action.payload;
            case UPDATE_ORG_UNIT_SUCCESS:
                return Object.assign(Object.assign({}, state), action.payload);
        }
        return state;
    }
    function orgUnitListReducer(state, action) {
        if (state === void 0) { state = orgUnitsInitialState; }
        switch (action.type) {
        }
        return state;
    }
    function orgUnitUserListReducer(state, action) {
        if (state === void 0) { state = orgUnitsInitialState; }
        switch (action.type) {
            case LOAD_ASSIGNED_USERS_SUCCESS:
                return action.payload.page;
        }
        return state;
    }
    function orgUnitAddressListReducer(state, action) {
        if (state === void 0) { state = orgUnitsInitialState; }
        switch (action.type) {
            case LOAD_ADDRESSES_SUCCESS:
                return action.payload.page;
        }
        return state;
    }

    var permissionInitialState = undefined;
    var permissionsInitialState = undefined;
    function permissionsEntitiesReducer(state, action) {
        if (state === void 0) { state = permissionInitialState; }
        switch (action.type) {
            case LOAD_PERMISSION_SUCCESS:
            case CREATE_PERMISSION_SUCCESS:
            case UPDATE_PERMISSION_SUCCESS:
                return action.payload;
            case USER_GROUP_ASSIGN_PERMISSION_SUCCESS:
            case USER_GROUP_UNASSIGN_PERMISSION_SUCCESS:
            case ASSIGN_B2B_USER_PERMISSION_SUCCESS:
            case UNASSIGN_B2B_USER_PERMISSION_SUCCESS:
                return Object.assign(Object.assign({}, state), action.payload);
        }
        return state;
    }
    function permissionsListReducer(state, action) {
        if (state === void 0) { state = permissionsInitialState; }
        switch (action.type) {
            case LOAD_PERMISSIONS_SUCCESS:
                return action.payload.page;
        }
        return state;
    }

    var userGroupInitialState = undefined;
    var userGroupsInitialState = undefined;
    function userGroupEntitiesReducer(state, action) {
        if (state === void 0) { state = userGroupInitialState; }
        switch (action.type) {
            case LOAD_USER_GROUP_SUCCESS:
            case CREATE_USER_GROUP_SUCCESS:
            case UPDATE_USER_GROUP_SUCCESS:
                return action.payload;
            case ASSIGN_B2B_USER_USER_GROUP_SUCCESS:
            case UNASSIGN_B2B_USER_USER_GROUP_SUCCESS:
                return Object.assign(Object.assign({}, state), action.payload);
        }
        return state;
    }
    function userGroupsListReducer(state, action) {
        if (state === void 0) { state = userGroupsInitialState; }
        switch (action.type) {
            case LOAD_USER_GROUPS_SUCCESS:
                return action.payload.page;
        }
        return state;
    }
    function userGroupAvailableOrderApprovalPermissionsListReducer(state, action) {
        if (state === void 0) { state = userGroupsInitialState; }
        switch (action.type) {
            case LOAD_USER_GROUP_PERMISSIONS_SUCCESS:
                return action.payload.page;
        }
        return state;
    }
    function userGroupAvailablOrgCustomersListReducer(state, action) {
        if (state === void 0) { state = userGroupsInitialState; }
        switch (action.type) {
            case LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS:
                return action.payload.page;
        }
        return state;
    }

    function getReducers() {
        var _a;
        return _a = {},
            _a[BUDGET_FEATURE] = i1$2.combineReducers({
                entities: i1.StateUtils.entityLoaderReducer(BUDGET_ENTITIES, budgetsEntitiesReducer),
                list: i1.StateUtils.entityLoaderReducer(BUDGET_LIST, budgetsListReducer),
            }),
            _a[PERMISSION_FEATURE] = i1$2.combineReducers({
                entities: i1.StateUtils.entityLoaderReducer(PERMISSION_ENTITIES, permissionsEntitiesReducer),
                list: i1.StateUtils.entityLoaderReducer(PERMISSION_LIST, permissionsListReducer),
                permissionTypes: i1.StateUtils.entityLoaderReducer(PERMISSION_TYPES_LIST),
            }),
            _a[ORG_UNIT_FEATURE] = i1$2.combineReducers({
                entities: i1.StateUtils.entityLoaderReducer(ORG_UNIT_ENTITIES, orgUnitEntitiesReducer),
                availableOrgUnitNodes: i1.StateUtils.entityLoaderReducer(ORG_UNIT_NODE_LIST),
                tree: i1.StateUtils.entityLoaderReducer(ORG_UNIT_TREE_ENTITY),
                approvalProcesses: i1.StateUtils.entityLoaderReducer(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES),
                users: i1.StateUtils.entityLoaderReducer(ORG_UNIT_ASSIGNED_USERS, orgUnitUserListReducer),
                addressList: i1.StateUtils.entityLoaderReducer(ADDRESS_LIST, orgUnitAddressListReducer),
                addressEntities: i1.StateUtils.entityLoaderReducer(ADDRESS_ENTITIES),
            }),
            _a[USER_GROUP_FEATURE] = i1$2.combineReducers({
                entities: i1.StateUtils.entityLoaderReducer(USER_GROUP_ENTITIES, userGroupEntitiesReducer),
                list: i1.StateUtils.entityLoaderReducer(USER_GROUP_LIST, userGroupsListReducer),
                permissions: i1.StateUtils.entityLoaderReducer(USER_GROUP_PERMISSIONS, userGroupAvailableOrderApprovalPermissionsListReducer),
                customers: i1.StateUtils.entityLoaderReducer(USER_GROUP_AVAILABLE_CUSTOMERS, userGroupAvailablOrgCustomersListReducer),
            }),
            _a[COST_CENTER_FEATURE] = i1$2.combineReducers({
                entities: i1.StateUtils.entityLoaderReducer(COST_CENTER_ENTITIES, costCentersEntitiesReducer),
                list: i1.StateUtils.entityLoaderReducer(COST_CENTER_LIST, costCentersListReducer),
                budgets: i1.StateUtils.entityLoaderReducer(COST_CENTER_ASSIGNED_BUDGETS, costCenterAssignedBudgetsListReducer),
            }),
            _a[B2B_USER_FEATURE] = i1$2.combineReducers({
                entities: i1.StateUtils.entityLoaderReducer(B2B_USER_ENTITIES, b2bUserEntitiesReducer),
                list: i1.StateUtils.entityLoaderReducer(USER_LIST, userListReducer),
                approvers: i1.StateUtils.entityLoaderReducer(B2B_USER_APPROVERS, b2bUserApproverListReducer),
                permissions: i1.StateUtils.entityLoaderReducer(B2B_USER_PERMISSIONS, b2bUserPermissionListReducer),
                userGroups: i1.StateUtils.entityLoaderReducer(B2B_USER_USER_GROUPS, b2bUserUserGroupListReducer),
            }),
            _a;
    }
    var reducerToken = new i0.InjectionToken('OrganizationReducers');
    var reducerProvider = {
        provide: reducerToken,
        useFactory: getReducers,
    };
    function clearOrganizationState(reducer) {
        return function (state, action) {
            if (action.type === CLEAR_ORGANIZATION_DATA) {
                state = undefined;
            }
            if (action.type === i1.AuthActions.LOGOUT) {
                state = undefined;
            }
            if (action.type === i1.SiteContextActions.LANGUAGE_CHANGE) {
                state = undefined;
            }
            return reducer(state, action);
        };
    }
    var metaReducers = [clearOrganizationState];

    var OrganizationStoreModule = /** @class */ (function () {
        function OrganizationStoreModule() {
        }
        return OrganizationStoreModule;
    }());
    OrganizationStoreModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationStoreModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    OrganizationStoreModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationStoreModule, imports: [i1__namespace$2.StoreFeatureModule, i1__namespace$1.EffectsFeatureModule] });
    OrganizationStoreModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationStoreModule, providers: [reducerProvider], imports: [[
                i1$2.StoreModule.forFeature(ORGANIZATION_FEATURE, reducerToken, {
                    metaReducers: metaReducers,
                }),
                i1$1.EffectsModule.forFeature(effects),
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationStoreModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$2.StoreModule.forFeature(ORGANIZATION_FEATURE, reducerToken, {
                                metaReducers: metaReducers,
                            }),
                            i1$1.EffectsModule.forFeature(effects),
                        ],
                        providers: [reducerProvider],
                    }]
            }] });

    var AdministrationCoreModule = /** @class */ (function () {
        function AdministrationCoreModule() {
        }
        AdministrationCoreModule.forRoot = function () {
            return {
                ngModule: AdministrationCoreModule,
                providers: [
                    BudgetConnector,
                    OrgUnitConnector,
                    UserGroupConnector,
                    PermissionConnector,
                    CostCenterConnector,
                    B2BUserConnector,
                ],
            };
        };
        return AdministrationCoreModule;
    }());
    AdministrationCoreModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationCoreModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AdministrationCoreModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationCoreModule, imports: [OrganizationPageMetaModule, OrganizationStoreModule] });
    AdministrationCoreModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationCoreModule, imports: [[OrganizationPageMetaModule, OrganizationStoreModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdministrationCoreModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [OrganizationPageMetaModule, OrganizationStoreModule],
                    }]
            }] });

    var B2B_USER_NORMALIZER = new i0.InjectionToken('B2BUserNormalizer');
    var B2B_USER_SERIALIZER = new i0.InjectionToken('B2BUserSerializer');
    var B2B_USERS_NORMALIZER = new i0.InjectionToken('UserListNormalizer');

    var BUDGET_NORMALIZER = new i0.InjectionToken('BudgetNormalizer');
    var BUDGETS_NORMALIZER = new i0.InjectionToken('BudgetsListNormalizer');
    var BUDGET_SERIALIZER = new i0.InjectionToken('BudgetSerializer');

    var B2BUNIT_NODE_NORMALIZER = new i0.InjectionToken('B2BUnitNodeNormalizer');
    var B2BUNIT_NODE_LIST_NORMALIZER = new i0.InjectionToken('B2BUnitNodeListNormalizer');
    var B2BUNIT_NORMALIZER = new i0.InjectionToken('B2BUnitNormalizer');
    var B2BUNIT_SERIALIZER = new i0.InjectionToken('B2BUnitSerializer');
    var B2BUNIT_APPROVAL_PROCESSES_NORMALIZER = new i0.InjectionToken('B2BUnitApprovalProcessNormalizer');

    var PERMISSION_NORMALIZER = new i0.InjectionToken('PermissionNormalizer');
    var PERMISSIONS_NORMALIZER = new i0.InjectionToken('PermissionsListNormalizer');
    var PERMISSION_TYPE_NORMALIZER = new i0.InjectionToken('PermissionTypeNormalizer');
    var PERMISSION_TYPES_NORMALIZER = new i0.InjectionToken('PermissionTypesListNormalizer');
    var PERMISSION_SERIALIZER = new i0.InjectionToken('PermissionSerializer');

    var USER_GROUP_NORMALIZER = new i0.InjectionToken('UserGroupNormalizer');
    var USER_GROUP_SERIALIZER = new i0.InjectionToken('UserGroupSerializer');
    var USER_GROUPS_NORMALIZER = new i0.InjectionToken('UserGroupListNormalizer');

    var AdminGuard = /** @class */ (function () {
        function AdminGuard(userService, routingService, globalMessageService) {
            this.userService = userService;
            this.routingService = routingService;
            this.globalMessageService = globalMessageService;
        }
        AdminGuard.prototype.canActivate = function () {
            var _this = this;
            return this.userService.get().pipe(operators.filter(function (user) { return user && Object.keys(user).length > 0; }), operators.pluck('roles'), operators.map(function (roles) {
                var hasRole = Array.isArray(roles) && roles.includes(i1.B2BUserRole.ADMIN);
                if (!hasRole) {
                    // routing as temporary solution until /organization won't
                    // have set up proper permission on backend
                    _this.routingService.go({ cxRoute: 'organization' });
                    _this.globalMessageService.add({ key: 'organization.notification.noSufficientPermissions' }, i1.GlobalMessageType.MSG_TYPE_WARNING);
                }
                return hasRole;
            }));
        };
        return AdminGuard;
    }());
    AdminGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdminGuard, deps: [{ token: i1__namespace.UserService }, { token: i1__namespace.RoutingService }, { token: i1__namespace.GlobalMessageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AdminGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdminGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AdminGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.UserService }, { type: i1__namespace.RoutingService }, { type: i1__namespace.GlobalMessageService }]; } });

    var OrganizationBadRequestHandler = /** @class */ (function (_super) {
        __extends(OrganizationBadRequestHandler, _super);
        function OrganizationBadRequestHandler() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.responseStatus = i1.HttpResponseStatus.BAD_REQUEST;
            _this.costCenterMask = /ambiguous unique keys \{code\=(.*)\} for model B2BCostCenterModel/;
            _this.unitMask = /ambiguous unique keys \{uid\=(.*)\} for model B2BUnitModel/;
            _this.permissionMask = /Approval Permission with code\: (.*) already exists\./;
            _this.unknownMask = /Model saving error\./;
            return _this;
        }
        OrganizationBadRequestHandler.prototype.hasMatch = function (errorResponse) {
            return _super.prototype.hasMatch.call(this, errorResponse) && this.matchMask(errorResponse);
        };
        OrganizationBadRequestHandler.prototype.handleError = function (_request, response) {
            var _this = this;
            this.getErrors(response).forEach(function (_b) {
                var message = _b.message;
                // Handle cost center conflict
                _this.handleOrganizationConflict(message, _this.costCenterMask, 'costCenter');
                // Handle unit conflict
                _this.handleOrganizationConflict(message, _this.unitMask, 'unit');
                // Handle unit conflict
                _this.handleOrganizationConflict(message, _this.permissionMask, 'permission');
                // Handle unknown conflict
                _this.handleOrganizationConflict(message, _this.unknownMask, 'unknown');
            });
        };
        OrganizationBadRequestHandler.prototype.matchMask = function (response) {
            var _this = this;
            return this.getErrors(response).some(function (error) { return [
                _this.costCenterMask,
                _this.unitMask,
                _this.permissionMask,
                _this.unknownMask,
            ].some(function (mask) { return mask.test(error.message); }); });
        };
        OrganizationBadRequestHandler.prototype.handleOrganizationConflict = function (message, mask, key) {
            var result = message.match(mask);
            var params = { code: result === null || result === void 0 ? void 0 : result[1] };
            if (result) {
                this.globalMessageService.add({ key: "organization.httpHandlers.conflict." + key, params: params }, i1.GlobalMessageType.MSG_TYPE_ERROR);
            }
        };
        OrganizationBadRequestHandler.prototype.getErrors = function (response) {
            var _a;
            return (((_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) || []).filter(function (error) { return error.type === 'ModelSavingError' || error.type === 'DuplicateUidError'; });
        };
        OrganizationBadRequestHandler.prototype.getPriority = function () {
            return 0 /* NORMAL */;
        };
        return OrganizationBadRequestHandler;
    }(i1.HttpErrorHandler));
    OrganizationBadRequestHandler.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationBadRequestHandler, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrganizationBadRequestHandler.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationBadRequestHandler, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationBadRequestHandler, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var OrganizationConflictHandler = /** @class */ (function (_super) {
        __extends(OrganizationConflictHandler, _super);
        function OrganizationConflictHandler() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.responseStatus = i1.HttpResponseStatus.CONFLICT;
            _this.budgetMask = /Budget with code \[(.*)\] already exists/;
            _this.userMask = /User already exists/;
            _this.userGroupMask = /Member Permission with the same id already exists/;
            _this.unitMask = /Organizational unit with uid \[(.*)\] already exists/;
            return _this;
        }
        OrganizationConflictHandler.prototype.hasMatch = function (errorResponse) {
            return _super.prototype.hasMatch.call(this, errorResponse) && this.matchMask(errorResponse);
        };
        OrganizationConflictHandler.prototype.handleError = function (request, response) {
            var _this = this;
            return this.getErrors(response).forEach(function (_c) {
                var message = _c.message;
                var _a, _b;
                // Handle budget conflict
                _this.handleConflict(message, _this.budgetMask, 'budget');
                // Handle user email conflict
                _this.handleConflict(message, _this.userMask, 'user', (_a = request === null || request === void 0 ? void 0 : request.body) === null || _a === void 0 ? void 0 : _a.email);
                // Handle user group conflict
                _this.handleConflict(message, _this.userGroupMask, 'userGroup', (_b = request === null || request === void 0 ? void 0 : request.body) === null || _b === void 0 ? void 0 : _b.uid);
                // Handle unit conflict
                _this.handleConflict(message, _this.unitMask, 'unit');
            });
        };
        OrganizationConflictHandler.prototype.matchMask = function (response) {
            var _this = this;
            return this.getErrors(response).some(function (error) { return [_this.budgetMask, _this.userMask, _this.userGroupMask, _this.unitMask].some(function (mask) { return mask.test(error.message); }); });
        };
        OrganizationConflictHandler.prototype.handleConflict = function (message, mask, key, code) {
            var _a;
            var result = message.match(mask);
            var params = { code: (_a = result === null || result === void 0 ? void 0 : result[1]) !== null && _a !== void 0 ? _a : code };
            if (result) {
                this.globalMessageService.add({ key: "organization.httpHandlers.conflict." + key, params: params }, i1.GlobalMessageType.MSG_TYPE_ERROR);
            }
        };
        OrganizationConflictHandler.prototype.getErrors = function (response) {
            var _a;
            return (((_a = response.error) === null || _a === void 0 ? void 0 : _a.errors) || []).filter(function (error) { return error.type === 'AlreadyExistsError'; });
        };
        OrganizationConflictHandler.prototype.getPriority = function () {
            return 0 /* NORMAL */;
        };
        return OrganizationConflictHandler;
    }(i1.HttpErrorHandler));
    OrganizationConflictHandler.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationConflictHandler, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrganizationConflictHandler.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationConflictHandler, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrganizationConflictHandler, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    exports.LoadStatus = void 0;
    (function (LoadStatus) {
        LoadStatus[LoadStatus["SUCCESS"] = 0] = "SUCCESS";
        LoadStatus[LoadStatus["ERROR"] = 1] = "ERROR";
    })(exports.LoadStatus || (exports.LoadStatus = {}));

    exports.Period = void 0;
    (function (Period) {
        Period["DAY"] = "DAY";
        Period["WEEK"] = "WEEK";
        Period["MONTH"] = "MONTH";
        Period["QUARTER"] = "QUARTER";
        Period["YEAR"] = "YEAR";
    })(exports.Period || (exports.Period = {}));

    var getOrganizationState = i1$2.createFeatureSelector(ORGANIZATION_FEATURE);

    var getPermissionManagementState = i1$2.createSelector(getOrganizationState, function (state) { return state[PERMISSION_FEATURE]; });
    var getPermissionsState = i1$2.createSelector(getPermissionManagementState, function (state) { return state && state.entities; });
    var getPermissionState = function (permissionId) { return i1$2.createSelector(getPermissionsState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, permissionId); }); };
    var getPermissionTypesState = i1$2.createSelector(getPermissionManagementState, function (state) { return state && state.permissionTypes; });
    var getPermission = function (permissionCode) { return i1$2.createSelector(getPermissionsState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, permissionCode); }); };
    var getPermissionValue = function (permissionCode) {
        return i1$2.createSelector(getPermission(permissionCode), function (permissionState) { return i1.StateUtils.loaderValueSelector(permissionState); });
    };
    var getPermissionList = function (params) { return i1$2.createSelector(getPermissionManagementState, function (state) { return i1.StateUtils.denormalizeSearch(state, params); }); };
    var getPermissionTypes = function () { return i1$2.createSelector(getPermissionTypesState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, PERMISSION_TYPES); }); };

    var permission_selector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getPermissionManagementState: getPermissionManagementState,
        getPermissionsState: getPermissionsState,
        getPermissionState: getPermissionState,
        getPermissionTypesState: getPermissionTypesState,
        getPermission: getPermission,
        getPermissionValue: getPermissionValue,
        getPermissionList: getPermissionList,
        getPermissionTypes: getPermissionTypes
    });

    var getB2BUserManagementState = i1$2.createSelector(getOrganizationState, function (state) { return state[B2B_USER_FEATURE]; });
    var getB2BUsersState = i1$2.createSelector(getB2BUserManagementState, function (state) { return state && state.entities; });
    var getB2BUserState = function (orgCustomerId) { return i1$2.createSelector(getB2BUsersState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, orgCustomerId); }); };
    var getB2BUserValue = function (orgCustomerId) {
        return i1$2.createSelector(getB2BUserState(orgCustomerId), function (b2BUserState) { return i1.StateUtils.loaderValueSelector(b2BUserState); });
    };
    var getUserList = function (params) { return i1$2.createSelector(getB2BUserManagementState, function (state) { return i1.StateUtils.denormalizeSearch(state, params); }); };
    var getB2BUserApprovers = function (code, params) { return i1$2.createSelector(getB2BUserManagementState, getB2BUsersState, function (state, approvers) { return i1.StateUtils.denormalizeCustomB2BSearch(state.approvers, approvers, params, code); }); };
    var getB2BUserPermissions = function (code, params) { return i1$2.createSelector(getB2BUserManagementState, getPermissionsState, function (state, permissions) { return i1.StateUtils.denormalizeCustomB2BSearch(state.permissions, permissions, params, code); }); };
    // avoid circular dependency
    var getUserGroupsState$1 = i1$2.createSelector(getOrganizationState, function (state) { return state[USER_GROUP_FEATURE].entities; });
    var getB2BUserUserGroups = function (code, params) { return i1$2.createSelector(getB2BUserManagementState, getUserGroupsState$1, function (state, userGroups) { return i1.StateUtils.denormalizeCustomB2BSearch(state.userGroups, userGroups, params, code); }); };

    var b2bUser_selector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getB2BUserManagementState: getB2BUserManagementState,
        getB2BUsersState: getB2BUsersState,
        getB2BUserState: getB2BUserState,
        getB2BUserValue: getB2BUserValue,
        getUserList: getUserList,
        getB2BUserApprovers: getB2BUserApprovers,
        getB2BUserPermissions: getB2BUserPermissions,
        getB2BUserUserGroups: getB2BUserUserGroups
    });

    function getItemStatus(itemState) {
        return itemState.pipe(operators.observeOn(rxjs.queueScheduler), operators.pairwise(), operators.filter(function (_a) {
            var _b = __read(_a, 1), previousState = _b[0];
            return previousState.loading;
        }), operators.map(function (_a) {
            var _b = __read(_a, 2), _previousState = _b[0], currentState = _b[1];
            return ({
                status: currentState.success
                    ? exports.LoadStatus.SUCCESS
                    : currentState.error
                        ? exports.LoadStatus.ERROR
                        : null,
                item: currentState.value,
            });
        }));
    }

    var B2BUserService = /** @class */ (function () {
        function B2BUserService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        B2BUserService.prototype.load = function (orgCustomerId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadB2BUser({
                userId: userId,
                orgCustomerId: orgCustomerId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        B2BUserService.prototype.loadList = function (params) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadB2BUsers({ userId: userId, params: params })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        B2BUserService.prototype.getB2BUserValue = function (orgCustomerId) {
            return this.store
                .select(getB2BUserValue(orgCustomerId))
                .pipe(operators.filter(Boolean));
        };
        B2BUserService.prototype.get = function (orgCustomerId) {
            var _this = this;
            var loading$ = this.getB2BUserState(orgCustomerId).pipe(operators.auditTime(0), operators.tap(function (state) {
                if (!(state.loading || state.success || state.error)) {
                    _this.load(orgCustomerId);
                }
            }));
            return rxjs.using(function () { return loading$.subscribe(); }, function () { return _this.getB2BUserValue(orgCustomerId); });
        };
        B2BUserService.prototype.getList = function (params) {
            var _this = this;
            return this.getUserList(params).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadList(params);
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        B2BUserService.prototype.getErrorState = function (orgCustomerId) {
            return this.getB2BUserState(orgCustomerId).pipe(operators.map(function (state) { return state.error; }));
        };
        B2BUserService.prototype.create = function (orgCustomer) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new CreateB2BUser({
                userId: userId,
                orgCustomer: orgCustomer,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        B2BUserService.prototype.update = function (orgCustomerId, orgCustomer) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UpdateB2BUser({
                userId: userId,
                orgCustomerId: orgCustomerId,
                orgCustomer: orgCustomer,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        B2BUserService.prototype.getLoadingStatus = function (orgCustomerId) {
            return getItemStatus(this.getB2BUserState(orgCustomerId));
        };
        B2BUserService.prototype.loadApprovers = function (orgCustomerId, params) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadB2BUserApprovers({
                userId: userId,
                orgCustomerId: orgCustomerId,
                params: params,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        B2BUserService.prototype.getApprovers = function (orgCustomerId, params) {
            var _this = this;
            return this.getB2BUserApproverList(orgCustomerId, params).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadApprovers(orgCustomerId, params);
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        B2BUserService.prototype.assignApprover = function (orgCustomerId, approverId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new AssignB2BUserApprover({
                userId: userId,
                orgCustomerId: orgCustomerId,
                approverId: approverId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        B2BUserService.prototype.unassignApprover = function (orgCustomerId, approverId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UnassignB2BUserApprover({
                userId: userId,
                orgCustomerId: orgCustomerId,
                approverId: approverId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        B2BUserService.prototype.loadPermissions = function (orgCustomerId, params) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadB2BUserPermissions({
                userId: userId,
                orgCustomerId: orgCustomerId,
                params: params,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        B2BUserService.prototype.getPermissions = function (orgCustomerId, params) {
            var _this = this;
            return this.getB2BUserPermissionList(orgCustomerId, params).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadPermissions(orgCustomerId, params);
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        B2BUserService.prototype.assignPermission = function (orgCustomerId, permissionId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new AssignB2BUserPermission({
                userId: userId,
                orgCustomerId: orgCustomerId,
                permissionId: permissionId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        B2BUserService.prototype.unassignPermission = function (orgCustomerId, permissionId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UnassignB2BUserPermission({
                userId: userId,
                orgCustomerId: orgCustomerId,
                permissionId: permissionId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        B2BUserService.prototype.loadUserGroups = function (orgCustomerId, params) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadB2BUserUserGroups({
                userId: userId,
                orgCustomerId: orgCustomerId,
                params: params,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        B2BUserService.prototype.getUserGroups = function (orgCustomerId, params) {
            var _this = this;
            return this.getB2BUserUserGroupList(orgCustomerId, params).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadUserGroups(orgCustomerId, params);
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        B2BUserService.prototype.assignUserGroup = function (orgCustomerId, userGroupId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new AssignB2BUserUserGroup({
                userId: userId,
                orgCustomerId: orgCustomerId,
                userGroupId: userGroupId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        B2BUserService.prototype.unassignUserGroup = function (orgCustomerId, userGroupId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UnassignB2BUserUserGroup({
                userId: userId,
                orgCustomerId: orgCustomerId,
                userGroupId: userGroupId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        /**
         * Get list of all roles for B2BUser sorted by increasing privileges.
         *
         * This list is not driven by the backend (lack of API), but reflects roles
         * from the backend: `b2badmingroup`, `b2bcustomergroup`, `b2bmanagergroup` and `b2bapprovergroup`.
         *
         * If you reconfigure those roles in the backend or extend the list, you should change
         * this implementation accordingly.
         */
        B2BUserService.prototype.getAllRoles = function () {
            return [
                i1.B2BUserRole.CUSTOMER,
                i1.B2BUserRole.MANAGER,
                i1.B2BUserRole.APPROVER,
                i1.B2BUserRole.ADMIN,
            ];
        };
        B2BUserService.prototype.getB2BUserApproverList = function (orgCustomerId, params) {
            return this.store.select(getB2BUserApprovers(orgCustomerId, params));
        };
        B2BUserService.prototype.getB2BUserPermissionList = function (orgCustomerId, params) {
            return this.store.select(getB2BUserPermissions(orgCustomerId, params));
        };
        B2BUserService.prototype.getB2BUserUserGroupList = function (orgCustomerId, params) {
            return this.store.select(getB2BUserUserGroups(orgCustomerId, params));
        };
        B2BUserService.prototype.getB2BUserState = function (orgCustomerId) {
            return this.store.select(getB2BUserState(orgCustomerId));
        };
        B2BUserService.prototype.getUserList = function (params) {
            return this.store.select(getUserList(params));
        };
        return B2BUserService;
    }());
    B2BUserService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: B2BUserService, deps: [{ token: i1__namespace$2.Store }, { token: i1__namespace.UserIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    B2BUserService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: B2BUserService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: B2BUserService, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.Store }, { type: i1__namespace.UserIdService }]; } });

    var getBudgetManagementState = i1$2.createSelector(getOrganizationState, function (state) { return state[BUDGET_FEATURE]; });
    var getBudgetsState = i1$2.createSelector(getBudgetManagementState, function (state) { return state && state.entities; });
    var getBudget = function (budgetCode) { return i1$2.createSelector(getBudgetsState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, budgetCode); }); };
    var getBudgetValue = function (budgetCode) {
        return i1$2.createSelector(getBudget(budgetCode), function (budgetState) { return i1.StateUtils.loaderValueSelector(budgetState); });
    };
    var getBudgetList = function (params) { return i1$2.createSelector(getBudgetManagementState, function (state) { return i1.StateUtils.denormalizeSearch(state, params); }); };

    var budget_selector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getBudgetManagementState: getBudgetManagementState,
        getBudgetsState: getBudgetsState,
        getBudget: getBudget,
        getBudgetValue: getBudgetValue,
        getBudgetList: getBudgetList
    });

    var getB2BOrgUnitState = i1$2.createSelector(getOrganizationState, function (state) { return state[ORG_UNIT_FEATURE]; });
    var getOrgUnitsNodeListState = i1$2.createSelector(getB2BOrgUnitState, function (state) { return state && state.availableOrgUnitNodes; });
    var getOrgUnitsState = i1$2.createSelector(getB2BOrgUnitState, function (state) { return state && state.entities; });
    var getOrgUnitsTreeState = i1$2.createSelector(getB2BOrgUnitState, function (state) { return state && state.tree; });
    var getAddressesState = i1$2.createSelector(getB2BOrgUnitState, function (state) { return state && state.addressEntities; });
    var getApprovalProcessesState = i1$2.createSelector(getB2BOrgUnitState, function (state) { return state && state.approvalProcesses; });
    var getOrgUnit = function (orgUnitId) { return i1$2.createSelector(getOrgUnitsState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, orgUnitId); }); };
    var getOrgUnitValue = function (orgUnitId) {
        return i1$2.createSelector(getOrgUnit(orgUnitId), function (orgUnitState) { return i1.StateUtils.loaderValueSelector(orgUnitState); });
    };
    var getOrgUnitState = function (orgUnitId) { return i1$2.createSelector(getOrgUnitsState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, orgUnitId); }); };
    var getOrgUnitList = function () { return i1$2.createSelector(getOrgUnitsNodeListState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, ORG_UNIT_NODES); }); };
    var getOrgUnitTree = function () { return i1$2.createSelector(getOrgUnitsTreeState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, ORG_UNIT_TREE); }); };
    var getApprovalProcesses = function () { return i1$2.createSelector(getApprovalProcessesState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, ORG_UNIT_APPROVAL_PROCESSES); }); };
    var getAssignedUsers = function (orgUnitId, roleId, params) { return i1$2.createSelector(getB2BOrgUnitState, getB2BUsersState, function (state, users) { return i1.StateUtils.denormalizeCustomB2BSearch(state.users, users, params, orgUnitId + "," + roleId); }); };
    var getB2BAddresses = function (orgUnitId, params) { return i1$2.createSelector(getB2BOrgUnitState, function (state) { return i1.StateUtils.denormalizeCustomB2BSearch(state.addressList, state.addressEntities, params, orgUnitId); }); };
    var getB2BAddress = function (addressId) { return i1$2.createSelector(getAddressesState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, addressId); }); };

    var orgUnit_selector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getB2BOrgUnitState: getB2BOrgUnitState,
        getOrgUnitsNodeListState: getOrgUnitsNodeListState,
        getOrgUnitsState: getOrgUnitsState,
        getOrgUnitsTreeState: getOrgUnitsTreeState,
        getAddressesState: getAddressesState,
        getApprovalProcessesState: getApprovalProcessesState,
        getOrgUnit: getOrgUnit,
        getOrgUnitValue: getOrgUnitValue,
        getOrgUnitState: getOrgUnitState,
        getOrgUnitList: getOrgUnitList,
        getOrgUnitTree: getOrgUnitTree,
        getApprovalProcesses: getApprovalProcesses,
        getAssignedUsers: getAssignedUsers,
        getB2BAddresses: getB2BAddresses,
        getB2BAddress: getB2BAddress
    });

    var getUserGroupManagementState = i1$2.createSelector(getOrganizationState, function (state) { return state[USER_GROUP_FEATURE]; });
    var getUserGroupsState = i1$2.createSelector(getUserGroupManagementState, function (state) { return state && state.entities; });
    var getUserGroup = function (userGroupId) { return i1$2.createSelector(getUserGroupsState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, userGroupId); }); };
    var getUserGroupValue = function (userGroupId) {
        return i1$2.createSelector(getUserGroup(userGroupId), function (userGroupState) { return i1.StateUtils.loaderValueSelector(userGroupState); });
    };
    var getUserGroupList = function (params) { return i1$2.createSelector(getUserGroupManagementState, function (state) { return i1.StateUtils.denormalizeSearch(state, params); }); };
    var getAvailableOrgCustomers = function (code, params) { return i1$2.createSelector(getUserGroupManagementState, getB2BUsersState, function (state, customers) { return i1.StateUtils.denormalizeCustomB2BSearch(state.customers, customers, params, code); }); };
    var getAvailableOrderApprovalPermissions = function (code, params) { return i1$2.createSelector(getUserGroupManagementState, getPermissionsState, function (state, permissions) { return i1.StateUtils.denormalizeCustomB2BSearch(state.permissions, permissions, params, code); }); };
    var getUserGroupState = function (code) { return i1$2.createSelector(getUserGroupsState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, code); }); };

    var userGroup_selector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getUserGroupManagementState: getUserGroupManagementState,
        getUserGroupsState: getUserGroupsState,
        getUserGroup: getUserGroup,
        getUserGroupValue: getUserGroupValue,
        getUserGroupList: getUserGroupList,
        getAvailableOrgCustomers: getAvailableOrgCustomers,
        getAvailableOrderApprovalPermissions: getAvailableOrderApprovalPermissions,
        getUserGroupState: getUserGroupState
    });

    var getCostCenterManagementState = i1$2.createSelector(getOrganizationState, function (state) { return state[COST_CENTER_FEATURE]; });
    var getCostCentersState = i1$2.createSelector(getCostCenterManagementState, function (state) { return state && state.entities; });
    var getCostCenter = function (costCenterCode) { return i1$2.createSelector(getCostCentersState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, costCenterCode); }); };
    var getCostCenterValue = function (costCenterCode) {
        return i1$2.createSelector(getCostCenter(costCenterCode), function (costCenterState) { return i1.StateUtils.loaderValueSelector(costCenterState); });
    };
    var getCostCenterList = function (params) { return i1$2.createSelector(getCostCenterManagementState, function (state) { return i1.StateUtils.denormalizeSearch(state, params); }); };
    var getAssignedBudgets = function (code, params) { return i1$2.createSelector(getCostCenterManagementState, getBudgetsState, function (state, budgets) { return i1.StateUtils.denormalizeCustomB2BSearch(state.budgets, budgets, params, code); }); };
    var getCostCenterState = function (code) { return i1$2.createSelector(getCostCentersState, function (state) { return i1.StateUtils.entityLoaderStateSelector(state, code); }); };

    var costCenter_selector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getCostCenterManagementState: getCostCenterManagementState,
        getCostCentersState: getCostCentersState,
        getCostCenter: getCostCenter,
        getCostCenterValue: getCostCenterValue,
        getCostCenterList: getCostCenterList,
        getAssignedBudgets: getAssignedBudgets,
        getCostCenterState: getCostCenterState
    });

    var BudgetService = /** @class */ (function () {
        function BudgetService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        BudgetService.prototype.loadBudget = function (budgetCode) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadBudget({ userId: userId, budgetCode: budgetCode })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        BudgetService.prototype.loadBudgets = function (params) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadBudgets({ userId: userId, params: params })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        BudgetService.prototype.getBudgetState = function (budgetCode) {
            return this.store.select(getBudget(budgetCode));
        };
        BudgetService.prototype.getBudgetValue = function (budgetCode) {
            return this.store.select(getBudgetValue(budgetCode)).pipe(operators.filter(Boolean));
        };
        BudgetService.prototype.getBudgetList = function (params) {
            return this.store.select(getBudgetList(params));
        };
        BudgetService.prototype.get = function (budgetCode) {
            var _this = this;
            var loading$ = this.getBudgetState(budgetCode).pipe(operators.auditTime(0), operators.tap(function (state) {
                if (!(state.loading || state.success || state.error)) {
                    _this.loadBudget(budgetCode);
                }
            }));
            return rxjs.using(function () { return loading$.subscribe(); }, function () { return _this.getBudgetValue(budgetCode); });
        };
        BudgetService.prototype.getList = function (params) {
            var _this = this;
            return this.getBudgetList(params).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadBudgets(params);
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        BudgetService.prototype.getCostCenters = function (budgetCode) {
            return this.get(budgetCode).pipe(operators.map(function (budget) {
                var _a;
                return ({
                    values: (_a = budget.costCenters) !== null && _a !== void 0 ? _a : [],
                });
            }));
        };
        BudgetService.prototype.getErrorState = function (budgetCode) {
            return this.getBudgetState(budgetCode).pipe(operators.map(function (state) { return state.error; }));
        };
        BudgetService.prototype.create = function (budget) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new CreateBudget({ userId: userId, budget: budget })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        BudgetService.prototype.update = function (budgetCode, budget) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UpdateBudget({ userId: userId, budgetCode: budgetCode, budget: budget })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        BudgetService.prototype.getLoadingStatus = function (budgetCode) {
            return getItemStatus(this.getBudgetState(budgetCode));
        };
        return BudgetService;
    }());
    BudgetService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetService, deps: [{ token: i1__namespace$2.Store }, { token: i1__namespace.UserIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BudgetService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: BudgetService, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.Store }, { type: i1__namespace.UserIdService }]; } });

    var CostCenterService = /** @class */ (function () {
        function CostCenterService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        CostCenterService.prototype.load = function (costCenterCode) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadCostCenter({ userId: userId, costCenterCode: costCenterCode })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        CostCenterService.prototype.loadList = function (params) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadCostCenters({ userId: userId, params: params })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        CostCenterService.prototype.getCostCenter = function (costCenterCode) {
            return this.store.select(getCostCenter(costCenterCode));
        };
        CostCenterService.prototype.getCostCenterValue = function (costCenterCode) {
            return this.store
                .select(getCostCenterValue(costCenterCode))
                .pipe(operators.filter(Boolean));
        };
        CostCenterService.prototype.getCostCenterList = function (params) {
            return this.store.select(getCostCenterList(params));
        };
        CostCenterService.prototype.getBudgetList = function (costCenterCode, params) {
            return this.store.select(getAssignedBudgets(costCenterCode, params));
        };
        CostCenterService.prototype.get = function (costCenterCode) {
            var _this = this;
            var loading$ = this.getCostCenter(costCenterCode).pipe(operators.auditTime(0), operators.tap(function (state) {
                if (!(state.loading || state.success || state.error)) {
                    _this.load(costCenterCode);
                }
            }));
            return rxjs.using(function () { return loading$.subscribe(); }, function () { return _this.getCostCenterValue(costCenterCode); });
        };
        CostCenterService.prototype.getList = function (params) {
            var _this = this;
            return this.getCostCenterList(params).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadList(params);
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        CostCenterService.prototype.getCostCenterState = function (costCenterCode) {
            return this.store.select(getCostCenterState(costCenterCode));
        };
        CostCenterService.prototype.create = function (costCenter) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new CreateCostCenter({ userId: userId, costCenter: costCenter })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        CostCenterService.prototype.update = function (costCenterCode, costCenter) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UpdateCostCenter({
                userId: userId,
                costCenterCode: costCenterCode,
                costCenter: costCenter,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        CostCenterService.prototype.getLoadingStatus = function (costCenterCode) {
            return getItemStatus(this.getCostCenter(costCenterCode));
        };
        CostCenterService.prototype.loadBudgets = function (costCenterCode, params) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadAssignedBudgets({
                userId: userId,
                costCenterCode: costCenterCode,
                params: params,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        CostCenterService.prototype.getBudgets = function (costCenterCode, params) {
            var _this = this;
            return this.getBudgetList(costCenterCode, params).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadBudgets(costCenterCode, params);
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        CostCenterService.prototype.assignBudget = function (costCenterCode, budgetCode) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new AssignBudget({
                userId: userId,
                costCenterCode: costCenterCode,
                budgetCode: budgetCode,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        CostCenterService.prototype.unassignBudget = function (costCenterCode, budgetCode) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UnassignBudget({
                userId: userId,
                costCenterCode: costCenterCode,
                budgetCode: budgetCode,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        CostCenterService.prototype.getErrorState = function (costCenterCode) {
            return this.getCostCenterState(costCenterCode).pipe(operators.map(function (state) { return state.error; }));
        };
        return CostCenterService;
    }());
    CostCenterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterService, deps: [{ token: i1__namespace$2.Store }, { token: i1__namespace.UserIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CostCenterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterService, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.Store }, { type: i1__namespace.UserIdService }]; } });

    var OrgUnitService = /** @class */ (function () {
        function OrgUnitService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        OrgUnitService.prototype.clearAssignedUsersList = function (orgUnitId, roleId, params) {
            this.store.dispatch(new ClearAssignedUsers({ orgUnitId: orgUnitId, roleId: roleId, params: params }));
        };
        OrgUnitService.prototype.load = function (orgUnitId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadOrgUnit({ userId: userId, orgUnitId: orgUnitId })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.loadList = function () {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadOrgUnitNodes({ userId: userId })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.loadTree = function () {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadTree({ userId: userId })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.loadApprovalProcesses = function () {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadApprovalProcesses({ userId: userId })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.loadUsers = function (orgUnitId, roleId, params) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadAssignedUsers({
                userId: userId,
                orgUnitId: orgUnitId,
                roleId: roleId,
                params: params,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.loadAddresses = function (orgUnitId) {
            var _this = this;
            // TODO: replace it after turn on loadAddresses$
            // this.store.dispatch(
            //   new OrgUnitActions.LoadAddresses({ userId, orgUnitId })
            // );
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadOrgUnit({ userId: userId, orgUnitId: orgUnitId })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.getOrgUnit = function (orgUnitId) {
            return this.store.select(getOrgUnit(orgUnitId));
        };
        OrgUnitService.prototype.getOrgUnitValue = function (orgUnitId) {
            return this.store.select(getOrgUnitValue(orgUnitId)).pipe(operators.filter(Boolean));
        };
        OrgUnitService.prototype.getTreeState = function () {
            return this.store.select(getOrgUnitTree());
        };
        OrgUnitService.prototype.getOrgUnitsList = function () {
            return this.store.select(getOrgUnitList());
        };
        OrgUnitService.prototype.getAddressesState = function (orgUnitId) {
            return this.store.select(getB2BAddresses(orgUnitId, null));
        };
        OrgUnitService.prototype.getAddressState = function (addressId) {
            return this.store.select(getB2BAddress(addressId));
        };
        OrgUnitService.prototype.getAssignedUsers = function (orgUnitId, roleId, params) {
            return this.store.select(getAssignedUsers(orgUnitId, roleId, params));
        };
        OrgUnitService.prototype.getApprovalProcessesList = function () {
            return this.store.select(getApprovalProcesses());
        };
        OrgUnitService.prototype.get = function (orgUnitId) {
            var _this = this;
            var loading$ = this.getOrgUnit(orgUnitId).pipe(operators.auditTime(0), operators.tap(function (state) {
                if (!(state.loading || state.success || state.error)) {
                    _this.load(orgUnitId);
                }
            }));
            return rxjs.using(function () { return loading$.subscribe(); }, function () { return _this.getOrgUnitValue(orgUnitId); });
        };
        OrgUnitService.prototype.getCostCenters = function (orgUnitId) {
            return this.get(orgUnitId).pipe(operators.map(function (orgUnit) {
                var _a;
                return ({
                    values: (_a = orgUnit.costCenters) !== null && _a !== void 0 ? _a : [],
                });
            }));
        };
        OrgUnitService.prototype.findUnitChildrenInTree = function (orginitId, unit) {
            var _this = this;
            return unit.id === orginitId
                ? unit.children
                : unit.children.flatMap(function (child) { return _this.findUnitChildrenInTree(orginitId, child); });
        };
        OrgUnitService.prototype.getChildUnits = function (orgUnitId) {
            var _this = this;
            return this.getTree().pipe(operators.map(function (tree) { return ({
                values: _this.findUnitChildrenInTree(orgUnitId, tree),
            }); }));
        };
        OrgUnitService.prototype.getTree = function () {
            var _this = this;
            return this.getTreeState().pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadTree();
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        OrgUnitService.prototype.getApprovalProcesses = function () {
            var _this = this;
            return this.getApprovalProcessesList().pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadApprovalProcesses();
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        OrgUnitService.prototype.getList = function () {
            var _this = this;
            return this.getOrgUnitsList().pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadList();
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        OrgUnitService.prototype.getActiveUnitList = function () {
            var _this = this;
            return this.getList().pipe(operators.map(function (units) { return units.filter(function (unit) { return unit.active; }); }), operators.map(function (units) { return units.sort(_this.sortUnitList); }));
        };
        OrgUnitService.prototype.sortUnitList = function (a, b) {
            return a.id.toLowerCase() < b.id.toLowerCase()
                ? -1
                : a.id.toLowerCase() > b.id.toLowerCase()
                    ? 1
                    : 0;
        };
        OrgUnitService.prototype.getUsers = function (orgUnitId, roleId, params) {
            var _this = this;
            return this.getAssignedUsers(orgUnitId, roleId, params).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadUsers(orgUnitId, roleId, params);
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        OrgUnitService.prototype.getErrorState = function (orgCustomerId) {
            return this.getOrgUnitState(orgCustomerId).pipe(operators.map(function (state) { return state.error; }));
        };
        OrgUnitService.prototype.create = function (unit) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new CreateUnit({ userId: userId, unit: unit })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.update = function (unitCode, unit) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UpdateUnit({ userId: userId, unitCode: unitCode, unit: unit })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.getLoadingStatus = function (orgUnitId) {
            return getItemStatus(this.getOrgUnit(orgUnitId));
        };
        OrgUnitService.prototype.assignRole = function (orgCustomerId, roleId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new AssignRole({
                userId: userId,
                orgCustomerId: orgCustomerId,
                roleId: roleId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.unassignRole = function (orgCustomerId, roleId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UnassignRole({
                userId: userId,
                orgCustomerId: orgCustomerId,
                roleId: roleId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.assignApprover = function (orgUnitId, orgCustomerId, roleId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new AssignApprover({
                orgUnitId: orgUnitId,
                userId: userId,
                orgCustomerId: orgCustomerId,
                roleId: roleId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.unassignApprover = function (orgUnitId, orgCustomerId, roleId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UnassignApprover({
                orgUnitId: orgUnitId,
                userId: userId,
                orgCustomerId: orgCustomerId,
                roleId: roleId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.createAddress = function (orgUnitId, address) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new CreateAddress({
                userId: userId,
                orgUnitId: orgUnitId,
                address: address,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.getAddresses = function (orgUnitId) {
            var _this = this;
            return this.getAddressesState(orgUnitId).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (state) {
                if (!(state.loading || state.success || state.error)) {
                    _this.loadAddresses(orgUnitId);
                }
            }), operators.filter(function (state) { return state.success || state.error; }), operators.map(function (state) { return state.value; }));
        };
        OrgUnitService.prototype.getAddress = function (orgUnitId, addressId) {
            var _this = this;
            return this.getAddressState(addressId).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (state) {
                if (!(state.loading || state.success || state.error)) {
                    _this.loadAddresses(orgUnitId);
                }
            }), operators.filter(function (state) { return state.success || state.error; }), operators.map(function (state) { return state.value; }));
        };
        OrgUnitService.prototype.updateAddress = function (orgUnitId, addressId, address) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UpdateAddress({
                userId: userId,
                orgUnitId: orgUnitId,
                addressId: addressId,
                address: address,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.getAddressLoadingStatus = function (addressId) {
            return getItemStatus(this.getAddressState(addressId));
        };
        OrgUnitService.prototype.deleteAddress = function (orgUnitId, addressId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new DeleteAddress({
                userId: userId,
                orgUnitId: orgUnitId,
                addressId: addressId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        OrgUnitService.prototype.getOrgUnitState = function (orgUnitId) {
            return this.store.select(getOrgUnitState(orgUnitId));
        };
        return OrgUnitService;
    }());
    OrgUnitService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrgUnitService, deps: [{ token: i1__namespace$2.Store }, { token: i1__namespace.UserIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrgUnitService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrgUnitService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrgUnitService, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.Store }, { type: i1__namespace.UserIdService }]; } });

    var PermissionService = /** @class */ (function () {
        function PermissionService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        PermissionService.prototype.loadPermission = function (permissionCode) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadPermission({
                userId: userId,
                permissionCode: permissionCode,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        PermissionService.prototype.loadPermissions = function (params) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadPermissions({ userId: userId, params: params })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        PermissionService.prototype.loadPermissionTypes = function () {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function () { return _this.store.dispatch(new LoadPermissionTypes()); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        PermissionService.prototype.getPermission = function (permissionCode) {
            return this.store.select(getPermission(permissionCode));
        };
        PermissionService.prototype.getPermissionValue = function (permissionCode) {
            return this.store
                .select(getPermissionValue(permissionCode))
                .pipe(operators.filter(Boolean));
        };
        PermissionService.prototype.getPermissionList = function (params) {
            return this.store.select(getPermissionList(params));
        };
        PermissionService.prototype.getPermissionTypeList = function () {
            return this.store.select(getPermissionTypes());
        };
        PermissionService.prototype.get = function (permissionCode) {
            var _this = this;
            var loading$ = this.getPermission(permissionCode).pipe(operators.auditTime(0), operators.tap(function (state) {
                if (!(state.loading || state.success || state.error)) {
                    _this.loadPermission(permissionCode);
                }
            }));
            return rxjs.using(function () { return loading$.subscribe(); }, function () { return _this.getPermissionValue(permissionCode); });
        };
        PermissionService.prototype.getTypes = function () {
            var _this = this;
            return this.getPermissionTypeList().pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadPermissionTypes();
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        PermissionService.prototype.getList = function (params) {
            var _this = this;
            return this.getPermissionList(params).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadPermissions(params);
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        PermissionService.prototype.create = function (permission) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new CreatePermission({ userId: userId, permission: permission })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        PermissionService.prototype.update = function (permissionCode, permission) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UpdatePermission({
                userId: userId,
                permissionCode: permissionCode,
                permission: permission,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        PermissionService.prototype.getLoadingStatus = function (permissionCode) {
            return getItemStatus(this.getPermission(permissionCode));
        };
        PermissionService.prototype.getPermissionState = function (code) {
            return this.store.select(getPermissionState(code));
        };
        PermissionService.prototype.getErrorState = function (permissionCode) {
            return this.getPermissionState(permissionCode).pipe(operators.map(function (state) { return state.error; }));
        };
        return PermissionService;
    }());
    PermissionService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionService, deps: [{ token: i1__namespace$2.Store }, { token: i1__namespace.UserIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PermissionService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PermissionService, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.Store }, { type: i1__namespace.UserIdService }]; } });

    var UserGroupService = /** @class */ (function () {
        function UserGroupService(store, userIdService) {
            this.store = store;
            this.userIdService = userIdService;
        }
        UserGroupService.prototype.load = function (userGroupId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadUserGroup({
                userId: userId,
                userGroupId: userGroupId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        UserGroupService.prototype.loadList = function (params) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadUserGroups({ userId: userId, params: params })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        UserGroupService.prototype.getUserGroup = function (userGroupId) {
            return this.store.select(getUserGroup(userGroupId));
        };
        UserGroupService.prototype.getUserGroupValue = function (userGroupId) {
            return this.store
                .select(getUserGroupValue(userGroupId))
                .pipe(operators.filter(Boolean));
        };
        UserGroupService.prototype.getUserGroupList = function (params) {
            return this.store.select(getUserGroupList(params));
        };
        UserGroupService.prototype.getAvailableOrgCustomersList = function (userGroupId, params) {
            return this.store.select(getAvailableOrgCustomers(userGroupId, params));
        };
        UserGroupService.prototype.getAvailableOrderApprovalPermissionsList = function (userGroupId, params) {
            return this.store.select(getAvailableOrderApprovalPermissions(userGroupId, params));
        };
        UserGroupService.prototype.get = function (userGroupUid) {
            var _this = this;
            var loading$ = this.getUserGroup(userGroupUid).pipe(operators.auditTime(0), operators.tap(function (state) {
                if (!(state.loading || state.success || state.error)) {
                    _this.load(userGroupUid);
                }
            }));
            return rxjs.using(function () { return loading$.subscribe(); }, function () { return _this.getUserGroupValue(userGroupUid); });
        };
        UserGroupService.prototype.getList = function (params) {
            var _this = this;
            return this.getUserGroupList(params).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadList(params);
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        UserGroupService.prototype.create = function (userGroup) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new CreateUserGroup({
                userId: userId,
                userGroup: userGroup,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        UserGroupService.prototype.update = function (userGroupId, userGroup) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UpdateUserGroup({
                userId: userId,
                userGroupId: userGroupId,
                userGroup: userGroup,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        UserGroupService.prototype.getLoadingStatus = function (budgetCode) {
            return getItemStatus(this.getUserGroup(budgetCode));
        };
        UserGroupService.prototype.delete = function (userGroupId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new DeleteUserGroup({
                userId: userId,
                userGroupId: userGroupId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        UserGroupService.prototype.loadAvailableOrgCustomers = function (userGroupId, params) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadAvailableOrgCustomers({
                userId: userId,
                userGroupId: userGroupId,
                params: params,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        UserGroupService.prototype.loadAvailableOrderApprovalPermissions = function (userGroupId, params) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new LoadPermissions$1({
                userId: userId,
                userGroupId: userGroupId,
                params: params,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        UserGroupService.prototype.getAvailableOrgCustomers = function (userGroupId, params) {
            var _this = this;
            return this.getAvailableOrgCustomersList(userGroupId, params).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadAvailableOrgCustomers(userGroupId, params);
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        UserGroupService.prototype.getAvailableOrderApprovalPermissions = function (userGroupId, params) {
            var _this = this;
            return this.getAvailableOrderApprovalPermissionsList(userGroupId, params).pipe(operators.observeOn(rxjs.queueScheduler), operators.tap(function (process) {
                if (!(process.loading || process.success || process.error)) {
                    _this.loadAvailableOrderApprovalPermissions(userGroupId, params);
                }
            }), operators.filter(function (process) { return process.success || process.error; }), operators.map(function (result) { return result.value; }));
        };
        UserGroupService.prototype.assignMember = function (userGroupId, customerId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new AssignMember({
                userId: userId,
                userGroupId: userGroupId,
                customerId: customerId,
            })); }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        UserGroupService.prototype.unassignMember = function (userGroupId, customerId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UnassignMember({
                userId: userId,
                userGroupId: userGroupId,
                customerId: customerId,
            })); }, function () { });
        };
        UserGroupService.prototype.unassignAllMembers = function (userGroupId) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UnassignAllMembers({
                userId: userId,
                userGroupId: userGroupId,
            })); }, function () { });
        };
        UserGroupService.prototype.assignPermission = function (userGroupId, permissionUid) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new AssignPermission({
                userId: userId,
                userGroupId: userGroupId,
                permissionUid: permissionUid,
            })); }, function () { });
        };
        UserGroupService.prototype.unassignPermission = function (userGroupId, permissionUid) {
            var _this = this;
            this.userIdService.takeUserId(true).subscribe(function (userId) { return _this.store.dispatch(new UnassignPermission({
                userId: userId,
                userGroupId: userGroupId,
                permissionUid: permissionUid,
            })); }, function () { });
        };
        UserGroupService.prototype.getUserGroupState = function (code) {
            return this.store.select(getUserGroupState(code));
        };
        UserGroupService.prototype.getErrorState = function (code) {
            return this.getUserGroupState(code).pipe(operators.map(function (state) { return state.error; }));
        };
        return UserGroupService;
    }());
    UserGroupService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupService, deps: [{ token: i1__namespace$2.Store }, { token: i1__namespace.UserIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserGroupService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: UserGroupService, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.Store }, { type: i1__namespace.UserIdService }]; } });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ADDRESS_ENTITIES = ADDRESS_ENTITIES;
    exports.ADDRESS_LIST = ADDRESS_LIST;
    exports.AdminGuard = AdminGuard;
    exports.AdministrationCoreModule = AdministrationCoreModule;
    exports.B2BUNIT_APPROVAL_PROCESSES_NORMALIZER = B2BUNIT_APPROVAL_PROCESSES_NORMALIZER;
    exports.B2BUNIT_NODE_LIST_NORMALIZER = B2BUNIT_NODE_LIST_NORMALIZER;
    exports.B2BUNIT_NODE_NORMALIZER = B2BUNIT_NODE_NORMALIZER;
    exports.B2BUNIT_NORMALIZER = B2BUNIT_NORMALIZER;
    exports.B2BUNIT_SERIALIZER = B2BUNIT_SERIALIZER;
    exports.B2BUserActions = b2bUser_action;
    exports.B2BUserAdapter = B2BUserAdapter;
    exports.B2BUserConnector = B2BUserConnector;
    exports.B2BUserSelectors = b2bUser_selector;
    exports.B2BUserService = B2BUserService;
    exports.B2B_USERS_NORMALIZER = B2B_USERS_NORMALIZER;
    exports.B2B_USER_APPROVERS = B2B_USER_APPROVERS;
    exports.B2B_USER_ENTITIES = B2B_USER_ENTITIES;
    exports.B2B_USER_FEATURE = B2B_USER_FEATURE;
    exports.B2B_USER_NORMALIZER = B2B_USER_NORMALIZER;
    exports.B2B_USER_PERMISSIONS = B2B_USER_PERMISSIONS;
    exports.B2B_USER_SERIALIZER = B2B_USER_SERIALIZER;
    exports.B2B_USER_USER_GROUPS = B2B_USER_USER_GROUPS;
    exports.BUDGETS_NORMALIZER = BUDGETS_NORMALIZER;
    exports.BUDGET_ENTITIES = BUDGET_ENTITIES;
    exports.BUDGET_FEATURE = BUDGET_FEATURE;
    exports.BUDGET_LIST = BUDGET_LIST;
    exports.BUDGET_NORMALIZER = BUDGET_NORMALIZER;
    exports.BUDGET_SERIALIZER = BUDGET_SERIALIZER;
    exports.BudgetActions = budget_action;
    exports.BudgetAdapter = BudgetAdapter;
    exports.BudgetConnector = BudgetConnector;
    exports.BudgetSelectors = budget_selector;
    exports.BudgetService = BudgetService;
    exports.COST_CENTER_ASSIGNED_BUDGETS = COST_CENTER_ASSIGNED_BUDGETS;
    exports.COST_CENTER_ENTITIES = COST_CENTER_ENTITIES;
    exports.COST_CENTER_FEATURE = COST_CENTER_FEATURE;
    exports.COST_CENTER_LIST = COST_CENTER_LIST;
    exports.CostCenterActions = costCenter_action;
    exports.CostCenterAdapter = CostCenterAdapter;
    exports.CostCenterConnector = CostCenterConnector;
    exports.CostCenterSelectors = costCenter_selector;
    exports.CostCenterService = CostCenterService;
    exports.ORGANIZATION_FEATURE = ORGANIZATION_FEATURE;
    exports.ORG_UNIT_APPROVAL_PROCESSES = ORG_UNIT_APPROVAL_PROCESSES;
    exports.ORG_UNIT_APPROVAL_PROCESSES_ENTITIES = ORG_UNIT_APPROVAL_PROCESSES_ENTITIES;
    exports.ORG_UNIT_ASSIGNED_USERS = ORG_UNIT_ASSIGNED_USERS;
    exports.ORG_UNIT_ENTITIES = ORG_UNIT_ENTITIES;
    exports.ORG_UNIT_FEATURE = ORG_UNIT_FEATURE;
    exports.ORG_UNIT_NODES = ORG_UNIT_NODES;
    exports.ORG_UNIT_NODE_ENTITIES = ORG_UNIT_NODE_ENTITIES;
    exports.ORG_UNIT_NODE_LIST = ORG_UNIT_NODE_LIST;
    exports.ORG_UNIT_TREE = ORG_UNIT_TREE;
    exports.ORG_UNIT_TREE_ENTITY = ORG_UNIT_TREE_ENTITY;
    exports.OrgUnitActions = orgUnit_action;
    exports.OrgUnitAdapter = OrgUnitAdapter;
    exports.OrgUnitConnector = OrgUnitConnector;
    exports.OrgUnitSelectors = orgUnit_selector;
    exports.OrgUnitService = OrgUnitService;
    exports.OrganizationActions = organization_action;
    exports.OrganizationBadRequestHandler = OrganizationBadRequestHandler;
    exports.OrganizationConflictHandler = OrganizationConflictHandler;
    exports.OrganizationPageMetaModule = OrganizationPageMetaModule;
    exports.OrganizationPageMetaResolver = OrganizationPageMetaResolver;
    exports.PERMISSIONS_NORMALIZER = PERMISSIONS_NORMALIZER;
    exports.PERMISSION_ENTITIES = PERMISSION_ENTITIES;
    exports.PERMISSION_FEATURE = PERMISSION_FEATURE;
    exports.PERMISSION_LIST = PERMISSION_LIST;
    exports.PERMISSION_NORMALIZER = PERMISSION_NORMALIZER;
    exports.PERMISSION_SERIALIZER = PERMISSION_SERIALIZER;
    exports.PERMISSION_TYPES = PERMISSION_TYPES;
    exports.PERMISSION_TYPES_LIST = PERMISSION_TYPES_LIST;
    exports.PERMISSION_TYPES_NORMALIZER = PERMISSION_TYPES_NORMALIZER;
    exports.PERMISSION_TYPE_NORMALIZER = PERMISSION_TYPE_NORMALIZER;
    exports.PermissionActions = permission_action;
    exports.PermissionAdapter = PermissionAdapter;
    exports.PermissionConnector = PermissionConnector;
    exports.PermissionSelectors = permission_selector;
    exports.PermissionService = PermissionService;
    exports.USER_GROUPS_NORMALIZER = USER_GROUPS_NORMALIZER;
    exports.USER_GROUP_AVAILABLE_CUSTOMERS = USER_GROUP_AVAILABLE_CUSTOMERS;
    exports.USER_GROUP_ENTITIES = USER_GROUP_ENTITIES;
    exports.USER_GROUP_FEATURE = USER_GROUP_FEATURE;
    exports.USER_GROUP_LIST = USER_GROUP_LIST;
    exports.USER_GROUP_NORMALIZER = USER_GROUP_NORMALIZER;
    exports.USER_GROUP_PERMISSIONS = USER_GROUP_PERMISSIONS;
    exports.USER_GROUP_SERIALIZER = USER_GROUP_SERIALIZER;
    exports.USER_LIST = USER_LIST;
    exports.UserGroupActions = userGroup_action;
    exports.UserGroupAdapter = UserGroupAdapter;
    exports.UserGroupConnector = UserGroupConnector;
    exports.UserGroupSelectors = userGroup_selector;
    exports.UserGroupService = UserGroupService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=spartacus-organization-administration-core.umd.js.map
