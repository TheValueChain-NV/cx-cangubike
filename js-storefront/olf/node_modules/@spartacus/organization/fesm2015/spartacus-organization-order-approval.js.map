{"version":3,"file":"spartacus-organization-order-approval.js","sources":["../../../feature-libs/organization/order-approval/core/model/order-approval.model.ts","../../../feature-libs/organization/order-approval/core/store/order-approval-state.ts","../../../feature-libs/organization/order-approval/core/store/actions/order-approval.action.ts","../../../feature-libs/organization/order-approval/core/store/selectors/order-approval.selector.ts","../../../feature-libs/organization/order-approval/core/services/order-approval.service.ts","../../../feature-libs/organization/order-approval/components/details/order-approval-detail.service.ts","../../../feature-libs/organization/order-approval/components/details/order-approval-detail-form/order-approval-detail-form.component.ts","../../../feature-libs/organization/order-approval/components/details/order-approval-detail-form/order-approval-detail-form.component.html","../../../feature-libs/organization/order-approval/core/guards/approver.guard.ts","../../../feature-libs/organization/order-approval/components/details/order-detail-permission-results/order-detail-permission-results.component.ts","../../../feature-libs/organization/order-approval/components/details/order-detail-permission-results/order-detail-permission-results.component.html","../../../feature-libs/organization/order-approval/components/details/order-approval-details.module.ts","../../../feature-libs/organization/order-approval/components/list/order-approval-list.component.ts","../../../feature-libs/organization/order-approval/components/list/order-approval-list.component.html","../../../feature-libs/organization/order-approval/components/list/order-approval-list.module.ts","../../../feature-libs/organization/order-approval/components/order-approval-components.module.ts","../../../feature-libs/organization/order-approval/core/connectors/order-approval.adapter.ts","../../../feature-libs/organization/order-approval/core/connectors/order-approval.connector.ts","../../../feature-libs/organization/order-approval/core/connectors/converters.ts","../../../feature-libs/organization/order-approval/occ/adapters/occ-order-approval.adapter.ts","../../../feature-libs/organization/order-approval/occ/converters/occ-order-approval-decision-normalizer.ts","../../../feature-libs/organization/order-approval/occ/converters/occ-order-approval-list-normalizer.ts","../../../feature-libs/organization/order-approval/occ/converters/occ-order-approval-normalizer.ts","../../../feature-libs/organization/order-approval/occ/model/index.ts","../../../feature-libs/organization/order-approval/occ/config/default-occ-organization-config.ts","../../../feature-libs/organization/order-approval/occ/order-approval-occ.module.ts","../../../feature-libs/organization/order-approval/core/store/effects/order-approval.effect.ts","../../../feature-libs/organization/order-approval/core/store/effects/index.ts","../../../feature-libs/organization/order-approval/core/store/reducers/order-approval.reducer.ts","../../../feature-libs/organization/order-approval/core/store/reducers/index.ts","../../../feature-libs/organization/order-approval/core/store/order-approval-store.module.ts","../../../feature-libs/organization/order-approval/core/order-approval-core.module.ts","../../../feature-libs/organization/order-approval/order-approval.module.ts","../../../feature-libs/organization/order-approval/spartacus-organization-order-approval.ts"],"sourcesContent":["import { Order, Principal, OrderApprovalPermissionType } from '@spartacus/core';\n\nexport enum OrderApprovalDecisionValue {\n  APPROVE = 'APPROVE',\n  REJECT = 'REJECT',\n}\nexport interface OrderApprovalDecision {\n  decision?: OrderApprovalDecisionValue;\n  comment?: string;\n}\n\nexport interface OrderApprovalRecord {\n  approver?: Principal;\n  comments?: string;\n  permissionTypes?: OrderApprovalPermissionType[];\n  statusDisplay?: string;\n}\n\nexport interface OrderApproval {\n  approvalDecisionRequired?: boolean;\n  code?: string;\n  customerOrderApprovalRecords?: OrderApprovalRecord[];\n  merchantOrderApprovalRecords?: OrderApprovalRecord[];\n  order?: Order;\n  trigger?: OrderApprovalTrigger;\n}\n\nexport interface OrderApprovalPermissionResult {\n  approverName: string;\n  approverNotes: string;\n  permissionType: OrderApprovalPermissionType;\n  statusDisplay: string;\n}\n\nexport interface OrderApprovalTrigger {\n  activationTime?: string;\n  displayTimeTable?: string;\n}\n","import { StateUtils } from '@spartacus/core';\nimport { OrderApproval } from '../model/order-approval.model';\n\nexport const ORDER_APPROVAL_FEATURE = 'order-approval';\nexport const ORDER_APPROVAL_ENTITIES = 'order-approval-entities';\nexport const ORDER_APPROVAL_LIST = 'order-approval-list';\nexport const ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID =\n  'orderApproval.makeDecision';\n\nexport interface OrderApprovalManagement\n  extends StateUtils.EntityListState<OrderApproval> {}\n\nexport interface OrderApprovalState {\n  [ORDER_APPROVAL_FEATURE]: OrderApprovalManagement;\n}\n","import {\n  ListModel,\n  PROCESS_FEATURE,\n  SearchConfig,\n  StateUtils,\n} from '@spartacus/core';\nimport {\n  OrderApproval,\n  OrderApprovalDecision,\n} from '../../model/order-approval.model';\nimport {\n  ORDER_APPROVAL_ENTITIES,\n  ORDER_APPROVAL_LIST,\n  ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID,\n} from '../order-approval-state';\n\nexport const LOAD_ORDER_APPROVAL = '[OrderApproval] Load OrderApproval Data';\nexport const LOAD_ORDER_APPROVAL_FAIL =\n  '[OrderApproval] Load OrderApproval Data Fail';\nexport const LOAD_ORDER_APPROVAL_SUCCESS =\n  '[OrderApproval] Load OrderApproval Data Success';\n\nexport const LOAD_ORDER_APPROVALS = '[OrderApproval] Load OrderApprovals';\nexport const LOAD_ORDER_APPROVALS_FAIL =\n  '[OrderApproval] Load OrderApprovals Fail';\nexport const LOAD_ORDER_APPROVALS_SUCCESS =\n  '[OrderApproval] Load OrderApprovals Success';\n\nexport const MAKE_DECISION = '[OrderApproval] Make OrderApproval Decision';\nexport const MAKE_DECISION_FAIL =\n  '[OrderApproval] Make OrderApproval Decision Fail';\nexport const MAKE_DECISION_SUCCESS =\n  '[OrderApproval] Make OrderApproval Decision Success';\nexport const MAKE_DECISION_RESET =\n  '[OrderApproval] Make OrderApproval Decision Reset';\n\nexport class LoadOrderApproval extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_ORDER_APPROVAL;\n  constructor(public payload: { userId: string; orderApprovalCode: string }) {\n    super(ORDER_APPROVAL_ENTITIES, payload.orderApprovalCode);\n  }\n}\n\nexport class LoadOrderApprovalFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_ORDER_APPROVAL_FAIL;\n  constructor(public payload: { orderApprovalCode: string; error: any }) {\n    super(ORDER_APPROVAL_ENTITIES, payload.orderApprovalCode, payload.error);\n  }\n}\n\nexport class LoadOrderApprovalSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_ORDER_APPROVAL_SUCCESS;\n  constructor(public payload: OrderApproval | OrderApproval[]) {\n    super(\n      ORDER_APPROVAL_ENTITIES,\n      Array.isArray(payload)\n        ? payload.map((orderApproval) => orderApproval?.code)\n        : payload?.code\n    );\n  }\n}\n\nexport class LoadOrderApprovals extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_ORDER_APPROVALS;\n  constructor(\n    public payload: {\n      userId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      ORDER_APPROVAL_LIST,\n      StateUtils.serializeSearchConfig(payload.params)\n    );\n  }\n}\n\nexport class LoadOrderApprovalsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_ORDER_APPROVALS_FAIL;\n  constructor(public payload: { params: SearchConfig; error: any }) {\n    super(\n      ORDER_APPROVAL_LIST,\n      StateUtils.serializeSearchConfig(payload.params),\n      payload.error\n    );\n  }\n}\n\nexport class LoadOrderApprovalsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_ORDER_APPROVALS_SUCCESS;\n  constructor(\n    public payload: {\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      ORDER_APPROVAL_LIST,\n      StateUtils.serializeSearchConfig(payload.params)\n    );\n  }\n}\n\nexport class MakeDecision extends StateUtils.EntityLoadAction {\n  readonly type = MAKE_DECISION;\n  constructor(\n    public payload: {\n      userId: string;\n      orderApprovalCode: string;\n      orderApprovalDecision: OrderApprovalDecision;\n    }\n  ) {\n    super(PROCESS_FEATURE, ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID);\n  }\n}\n\nexport class MakeDecisionFail extends StateUtils.EntityFailAction {\n  readonly type = MAKE_DECISION_FAIL;\n  constructor(public payload: { orderApprovalCode: string; error: any }) {\n    super(PROCESS_FEATURE, ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID, payload);\n  }\n}\n\nexport class MakeDecisionSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = MAKE_DECISION_SUCCESS;\n  constructor(\n    public payload: {\n      orderApprovalCode: string;\n      orderApprovalDecision: OrderApprovalDecision;\n    }\n  ) {\n    super(PROCESS_FEATURE, ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID);\n  }\n}\n\nexport class MakeDecisionReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = MAKE_DECISION_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID);\n  }\n}\n\nexport type OrderApprovalAction =\n  | LoadOrderApproval\n  | LoadOrderApprovalFail\n  | LoadOrderApprovalSuccess\n  | LoadOrderApprovals\n  | LoadOrderApprovalsFail\n  | LoadOrderApprovalsSuccess\n  | MakeDecision\n  | MakeDecisionFail\n  | MakeDecisionSuccess\n  | MakeDecisionReset;\n","import {\n  createSelector,\n  MemoizedSelector,\n  createFeatureSelector,\n} from '@ngrx/store';\nimport { EntitiesModel, SearchConfig, StateUtils } from '@spartacus/core';\nimport { OrderApproval } from '../../model/order-approval.model';\nimport {\n  OrderApprovalManagement,\n  ORDER_APPROVAL_FEATURE,\n  OrderApprovalState,\n} from '../order-approval-state';\n\nexport const getOrderApprovalState: MemoizedSelector<\n  OrderApprovalState,\n  OrderApprovalState\n> = createFeatureSelector<OrderApprovalState>(ORDER_APPROVAL_FEATURE);\n\nexport const getOrderApprovalManagementState: MemoizedSelector<\n  OrderApprovalState,\n  OrderApprovalManagement\n> = createSelector(\n  getOrderApprovalState,\n  (state: OrderApprovalState) => state[ORDER_APPROVAL_FEATURE]\n);\n\nexport const getOrderApprovalsState: MemoizedSelector<\n  OrderApprovalState,\n  StateUtils.EntityLoaderState<OrderApproval>\n> = createSelector(\n  getOrderApprovalManagementState,\n  (state: OrderApprovalManagement) => state && state.entities\n);\n\nexport const getOrderApproval = (\n  orderApprovalCode: string\n): MemoizedSelector<\n  OrderApprovalState,\n  StateUtils.LoaderState<OrderApproval>\n> =>\n  createSelector(\n    getOrderApprovalsState,\n    (state: StateUtils.EntityLoaderState<OrderApproval>) =>\n      StateUtils.entityLoaderStateSelector(state, orderApprovalCode)\n  );\n\nexport const getOrderApprovalList = (\n  params: SearchConfig\n): MemoizedSelector<\n  OrderApprovalState,\n  StateUtils.LoaderState<EntitiesModel<OrderApproval>>\n> =>\n  createSelector(\n    getOrderApprovalManagementState,\n    (state: OrderApprovalManagement) =>\n      StateUtils.denormalizeSearch<OrderApproval>(state, params)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  EntitiesModel,\n  ProcessSelectors,\n  SearchConfig,\n  StateUtils,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport { Observable, queueScheduler } from 'rxjs';\nimport { filter, map, observeOn, pluck, tap } from 'rxjs/operators';\nimport {\n  OrderApproval,\n  OrderApprovalDecision,\n} from '../model/order-approval.model';\nimport { OrderApprovalActions } from '../store/actions/index';\nimport {\n  OrderApprovalState,\n  ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID,\n} from '../store/order-approval-state';\nimport { OrderApprovalSelectors } from '../store/selectors';\n\n@Injectable({ providedIn: 'root' })\nexport class OrderApprovalService {\n  constructor(\n    protected store: Store<OrderApprovalState | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  loadOrderApproval(orderApprovalCode: string): void {\n    this.userIdService.takeUserId().subscribe((userId) =>\n      this.store.dispatch(\n        new OrderApprovalActions.LoadOrderApproval({\n          userId,\n          orderApprovalCode,\n        })\n      )\n    );\n  }\n\n  loadOrderApprovals(params?: SearchConfig): void {\n    this.userIdService\n      .takeUserId()\n      .subscribe((userId) =>\n        this.store.dispatch(\n          new OrderApprovalActions.LoadOrderApprovals({ userId, params })\n        )\n      );\n  }\n\n  private getOrderApproval(\n    orderApprovalCode: string\n  ): Observable<StateUtils.LoaderState<OrderApproval>> {\n    return this.store.select(\n      OrderApprovalSelectors.getOrderApproval(orderApprovalCode)\n    );\n  }\n\n  private getOrderApprovalList(\n    params\n  ): Observable<StateUtils.LoaderState<EntitiesModel<OrderApproval>>> {\n    return this.store.select(\n      OrderApprovalSelectors.getOrderApprovalList(params)\n    );\n  }\n\n  get(orderApprovalCode: string): Observable<OrderApproval> {\n    return this.getOrderApproval(orderApprovalCode).pipe(\n      observeOn(queueScheduler),\n      tap((state) => {\n        if (!(state.loading || state.success || state.error)) {\n          this.loadOrderApproval(orderApprovalCode);\n        }\n      }),\n      filter((state) => state.success || state.error),\n      map((state) => state.value)\n    );\n  }\n\n  /**\n   * Emits true if a request is currently fetching order approval data from\n   * the server.\n   *\n   * @param orderApprovalCode The approval code for which we want the loading status.\n   */\n  getOrderApprovalLoading(orderApprovalCode: string): Observable<boolean> {\n    return this.getOrderApproval(orderApprovalCode).pipe(pluck('loading'));\n  }\n\n  getList(params: SearchConfig): Observable<EntitiesModel<OrderApproval>> {\n    return this.getOrderApprovalList(params).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<OrderApproval>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadOrderApprovals(params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<OrderApproval>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  makeDecision(\n    orderApprovalCode: string,\n    orderApprovalDecision: OrderApprovalDecision\n  ): void {\n    this.userIdService.takeUserId().subscribe((userId) =>\n      this.store.dispatch(\n        new OrderApprovalActions.MakeDecision({\n          userId,\n          orderApprovalCode,\n          orderApprovalDecision,\n        })\n      )\n    );\n  }\n\n  /**\n   * Returns the makeDecision loading flag.  Returns true when the process triggered\n   * by makeDecision() is currently running.\n   */\n  getMakeDecisionResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(\n          ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Returns the makeDecision failure outcome.  Returns true when the outcome\n   * of makeDecision() was an error.\n   */\n  getMakeDecisionResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProcessSelectors.getProcessErrorFactory(\n          ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Returns the makeDecision process success outcome.  Returns true when the outcome\n   * of makeDecision() was a success.\n   */\n  getMakeDecisionResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProcessSelectors.getProcessSuccessFactory(\n          ORDER_APPROVAL_MAKE_DECISION_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Resets the makeDecision process state. It is usually preferable to reset the\n   * process state before making a call to makeDecision() for which we then want\n   * to monitor the loading state or the outcome.\n   */\n  resetMakeDecisionProcessState(): void {\n    this.store.dispatch(new OrderApprovalActions.MakeDecisionReset());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService } from '@spartacus/core';\nimport { OrderApproval } from '../../core/model/order-approval.model';\nimport { OrderApprovalService } from '../../core/services/order-approval.service';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  pluck,\n  shareReplay,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderApprovalDetailService {\n  protected approvalCode$ = this.routingService\n    .getRouterState()\n    .pipe(map((routingData) => routingData.state.params.approvalCode));\n\n  protected orderApproval$ = this.approvalCode$.pipe(\n    filter(Boolean),\n    tap((approvalCode: string) =>\n      this.orderApprovalService.loadOrderApproval(approvalCode)\n    ),\n    switchMap((approvalCode: string) =>\n      this.orderApprovalService.get(approvalCode)\n    ),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  protected order$ = this.orderApproval$.pipe(pluck('order'));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected orderApprovalService: OrderApprovalService\n  ) {}\n\n  /**\n   * Returns a string that represents the approval code\n   * found in the page url.\n   */\n  getOrderApprovalCodeFromRoute(): Observable<string> {\n    return this.approvalCode$;\n  }\n\n  /**\n   * Returns the order data from the approval details that have been\n   * retrieved from the approval code in the page url.\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.order$;\n  }\n\n  /**\n   * Returns the approval details that have been retrieved from the\n   * approval code in the page url.\n   */\n  getOrderApproval(): Observable<OrderApproval> {\n    return this.orderApproval$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  OrderApproval,\n  OrderApprovalDecisionValue,\n} from '../../../core/model/order-approval.model';\nimport { OrderApprovalService } from '../../../core/services/order-approval.service';\nimport { OrderApprovalDetailService } from '../order-approval-detail.service';\n\n@Component({\n  selector: 'cx-order-approval-detail-form',\n  templateUrl: './order-approval-detail-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderApprovalDetailFormComponent implements OnDestroy {\n  approvalDecisionValue = OrderApprovalDecisionValue;\n  approvalDecision: OrderApprovalDecisionValue;\n  approvalFormVisible = false;\n  approvalForm: FormGroup = this.fb.group({\n    comment: [''],\n  });\n\n  protected orderApprovalLoading$: Observable<boolean> =\n    this.orderApprovalDetailService\n      .getOrderApprovalCodeFromRoute()\n      .pipe(\n        switchMap((approvalCode: string) =>\n          this.orderApprovalService.getOrderApprovalLoading(approvalCode)\n        )\n      );\n\n  protected decisionResultLoading$ =\n    this.orderApprovalService.getMakeDecisionResultLoading();\n\n  loading$ = combineLatest([\n    this.orderApprovalLoading$,\n    this.decisionResultLoading$,\n  ]).pipe(\n    map(\n      ([approvalLoading, decisionResultLoading]) =>\n        approvalLoading || decisionResultLoading\n    )\n  );\n\n  orderApproval$: Observable<OrderApproval> =\n    this.orderApprovalDetailService.getOrderApproval();\n\n  constructor(\n    protected orderApprovalDetailService: OrderApprovalDetailService,\n    protected orderApprovalService: OrderApprovalService,\n    private fb: FormBuilder\n  ) {\n    this.orderApprovalService.resetMakeDecisionProcessState();\n  }\n\n  displayDecisionForm(decision: OrderApprovalDecisionValue) {\n    this.approvalDecision = decision;\n    if (decision === OrderApprovalDecisionValue.APPROVE) {\n      this.approvalForm.controls.comment.clearValidators();\n    } else {\n      this.approvalForm.controls.comment.setValidators([Validators.required]);\n    }\n    this.approvalFormVisible = true;\n  }\n\n  cancelDecisionForm() {\n    this.approvalFormVisible = false;\n    this.approvalForm.reset();\n  }\n\n  submitDecision(orderApproval: OrderApproval) {\n    if (this.approvalForm.valid) {\n      this.orderApprovalService.makeDecision(orderApproval.code, {\n        decision: this.approvalDecision,\n        comment: this.approvalForm.controls.comment.value,\n      });\n      this.approvalFormVisible = false;\n    } else {\n      this.approvalForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.orderApprovalService.resetMakeDecisionProcessState();\n  }\n}\n","<ng-container *ngIf=\"orderApproval$ | async as orderApproval\">\n  <div *ngIf=\"loading$ | async; else approvalFormTemplate\">\n    <div class=\"cx-spinner\">\n      <cx-spinner></cx-spinner>\n    </div>\n  </div>\n\n  <ng-template #approvalFormTemplate>\n    <ng-container *ngIf=\"orderApproval?.approvalDecisionRequired\">\n      <div *ngIf=\"approvalFormVisible\" class=\"cx-approval-form-header row\">\n        <div class=\"cx-approval-form-label col-sm-12\">\n          {{\n            'orderApprovalDetails.form.title_' + approvalDecision\n              | cxTranslate\n                : {\n                    orderCode: orderApproval?.order?.code,\n                    orderTotal:\n                      orderApproval?.order?.totalPriceWithTax?.formattedValue\n                  }\n          }}\n        </div>\n      </div>\n\n      <form\n        [formGroup]=\"approvalForm\"\n        (ngSubmit)=\"submitDecision(orderApproval)\"\n        *ngIf=\"approvalFormVisible\"\n      >\n        <label\n          >{{\n            'orderApprovalDetails.form.comment_' + approvalDecision + '.label'\n              | cxTranslate\n          }}\n          <textarea\n            class=\"form-control\"\n            rows=\"3\"\n            formControlName=\"comment\"\n            maxlength=\"255\"\n          ></textarea>\n          <cx-form-errors\n            [control]=\"approvalForm.get('comment')\"\n          ></cx-form-errors>\n        </label>\n        <div class=\"form-group row\">\n          <div class=\"col-lg-6 col-md-12\">\n            <button\n              class=\"btn btn-block btn-secondary\"\n              (click)=\"cancelDecisionForm()\"\n              type=\"button\"\n            >\n              {{ 'orderApprovalDetails.form.cancel' | cxTranslate }}\n            </button>\n          </div>\n          <div class=\"col-lg-6 col-md-12\">\n            <button class=\"btn btn-block btn-primary\" type=\"submit\">\n              {{\n                'orderApprovalDetails.form.submit_' + approvalDecision\n                  | cxTranslate\n              }}\n            </button>\n          </div>\n        </div>\n      </form>\n    </ng-container>\n    <ng-container *ngIf=\"!approvalFormVisible\">\n      <div class=\"form-group row\">\n        <div class=\"col-lg-4 col-md-12\">\n          <a\n            [routerLink]=\"{ cxRoute: 'orderApprovals' } | cxUrl\"\n            class=\"btn btn-block btn-secondary\"\n            >{{ 'orderApprovalDetails.back' | cxTranslate }}</a\n          >\n        </div>\n        <div\n          class=\"col-lg-4 col-md-12\"\n          *ngIf=\"orderApproval?.approvalDecisionRequired\"\n        >\n          <button\n            class=\"btn btn-block btn-primary\"\n            (click)=\"displayDecisionForm(approvalDecisionValue.REJECT)\"\n          >\n            {{ 'orderApprovalDetails.showForm_REJECT' | cxTranslate }}\n          </button>\n        </div>\n        <div\n          class=\"col-lg-4 col-md-12\"\n          *ngIf=\"orderApproval?.approvalDecisionRequired\"\n        >\n          <button\n            class=\"btn btn-block btn-primary\"\n            (click)=\"displayDecisionForm(approvalDecisionValue.APPROVE)\"\n          >\n            {{ 'orderApprovalDetails.showForm_APPROVE' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </ng-container>\n  </ng-template>\n</ng-container>\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  B2BUserRole,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApproverGuard implements CanActivate {\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.userService.get().pipe(\n      filter((user: User) => user && Object.keys(user).length > 0),\n      pluck('roles'),\n      map((roles: string[]) => {\n        const hasRole =\n          Array.isArray(roles) &&\n          (roles.includes(B2BUserRole.APPROVER) ||\n            roles.includes(B2BUserRole.ADMIN));\n\n        if (!hasRole) {\n          this.routingService.go({ cxRoute: 'home' });\n\n          this.globalMessageService.add(\n            {\n              key: 'orderApprovalGlobal.notification.noSufficientPermissions',\n            },\n            GlobalMessageType.MSG_TYPE_WARNING\n          );\n        }\n\n        return hasRole;\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Order } from '@spartacus/core';\nimport { OrderDetailsService } from '@spartacus/storefront';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-detail-permission-results',\n  templateUrl: './order-detail-permission-results.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderDetailPermissionResultsComponent {\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n}\n","<ng-container *ngIf=\"order$ | async as order\">\n  <ng-container *ngIf=\"order.permissionResults?.length\">\n    <div class=\"cx-approval-header row\">\n      <div class=\"cx-approval-label col-sm-12\">\n        {{ 'orderApprovalDetails.permissionResults.header' | cxTranslate }}\n      </div>\n    </div>\n    <div class=\"row\">\n      <table class=\"table table-striped cx-approval-table\">\n        <thead class=\"cx-approval-thead-mobile\">\n          <th scope=\"col\">\n            {{\n              'orderApprovalDetails.permissionResults.permission' | cxTranslate\n            }}\n          </th>\n          <th scope=\"col\">\n            {{\n              'orderApprovalDetails.permissionResults.approver' | cxTranslate\n            }}\n          </th>\n          <th scope=\"col\">\n            {{ 'orderApprovalDetails.permissionResults.status' | cxTranslate }}\n          </th>\n          <th scope=\"col\">\n            {{\n              'orderApprovalDetails.permissionResults.approverComments'\n                | cxTranslate\n            }}\n          </th>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let permissionResult of order.permissionResults\">\n            <td class=\"cx-approval-permissionCode\">\n              <div class=\"d-md-none cx-approval-table-label\">\n                {{\n                  'orderApprovalDetails.permissionResults.permission'\n                    | cxTranslate\n                }}\n              </div>\n              {{\n                'orderApprovalDetails.permissionResults.permissionType_' +\n                  permissionResult?.permissionType?.code | cxTranslate\n              }}\n            </td>\n            <td class=\"cx-approval-approverName\">\n              <div class=\"d-md-none cx-approval-table-label\">\n                {{\n                  'orderApprovalDetails.permissionResults.approver'\n                    | cxTranslate\n                }}\n              </div>\n              {{ permissionResult.approverName }}\n            </td>\n            <td class=\"cx-approval-statusDisplay\">\n              <div class=\"d-md-none cx-approval-table-label\">\n                {{\n                  'orderApprovalDetails.permissionResults.status' | cxTranslate\n                }}\n              </div>\n              {{ permissionResult.statusDisplay }}\n            </td>\n            <td class=\"cx-approval-approvalNotes\">\n              <div class=\"d-md-none cx-approval-table-label\">\n                {{\n                  'orderApprovalDetails.permissionResults.approverComments'\n                    | cxTranslate\n                }}\n              </div>\n              {{\n                permissionResult.approverNotes\n                  ? permissionResult.approverNotes\n                  : ('orderApprovalDetails.permissionResults.noApprovalComments'\n                    | cxTranslate)\n              }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </ng-container>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  CartSharedModule,\n  FormErrorsModule,\n  OrderDetailItemsComponent,\n  OrderDetailShippingComponent,\n  OrderDetailsService,\n  OrderDetailTotalsComponent,\n  SpinnerModule,\n} from '@spartacus/storefront';\nimport { ApproverGuard } from '../../core/guards/approver.guard';\nimport { OrderApprovalDetailFormComponent } from './order-approval-detail-form/order-approval-detail-form.component';\nimport { OrderApprovalDetailService } from './order-approval-detail.service';\nimport { OrderDetailPermissionResultsComponent } from './order-detail-permission-results/order-detail-permission-results.component';\n\n@NgModule({\n  imports: [\n    ReactiveFormsModule,\n    CartSharedModule,\n    CommonModule,\n    I18nModule,\n    UrlModule,\n    FormErrorsModule,\n    SpinnerModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderApprovalDetailTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n          providers: [\n            {\n              provide: OrderDetailsService,\n              useExisting: OrderApprovalDetailService,\n            },\n          ],\n          guards: [AuthGuard, ApproverGuard],\n        },\n        OrderApprovalDetailApprovalDetailsComponent: {\n          component: OrderDetailPermissionResultsComponent,\n          providers: [\n            {\n              provide: OrderDetailsService,\n              useExisting: OrderApprovalDetailService,\n            },\n          ],\n          guards: [AuthGuard, ApproverGuard],\n        },\n        AccountOrderDetailsApprovalDetailsComponent: {\n          component: OrderDetailPermissionResultsComponent,\n        },\n\n        OrderApprovalDetailShippingComponent: {\n          component: OrderDetailShippingComponent,\n          providers: [\n            {\n              provide: OrderDetailsService,\n              useExisting: OrderApprovalDetailService,\n            },\n          ],\n          guards: [AuthGuard, ApproverGuard],\n        },\n        OrderApprovalDetailItemsComponent: {\n          component: OrderDetailItemsComponent,\n          providers: [\n            {\n              provide: OrderDetailsService,\n              useExisting: OrderApprovalDetailService,\n            },\n          ],\n          guards: [AuthGuard, ApproverGuard],\n        },\n        OrderApprovalDetailFormComponent: {\n          component: OrderApprovalDetailFormComponent,\n          guards: [AuthGuard, ApproverGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    OrderApprovalDetailFormComponent,\n    OrderDetailPermissionResultsComponent,\n  ],\n  exports: [\n    OrderApprovalDetailFormComponent,\n    OrderDetailPermissionResultsComponent,\n  ],\n})\nexport class OrderApprovalDetailsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  EntitiesModel,\n  RoutingService,\n  SearchConfig,\n  TranslationService,\n} from '@spartacus/core';\nimport { OrderApproval } from '../../core/model/order-approval.model';\nimport { OrderApprovalService } from '../../core/services/order-approval.service';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-approval-list',\n  templateUrl: './order-approval-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderApprovalListComponent implements OnInit {\n  constructor(\n    protected routing: RoutingService,\n    protected orderApprovalService: OrderApprovalService,\n    protected translation: TranslationService\n  ) {}\n\n  sortLabels$;\n  protected PAGE_SIZE = 5;\n  sortType: string;\n\n  orderApprovals$: Observable<EntitiesModel<OrderApproval>>;\n\n  ngOnInit(): void {\n    this.fetchApprovalListPage({});\n    this.sortLabels$ = combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  changeSortCode(sortCode: string): void {\n    const fetchParams: SearchConfig = {\n      sort: sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchApprovalListPage(fetchParams);\n  }\n\n  pageChange(page: number): void {\n    const fetchParams: SearchConfig = {\n      sort: this.sortType,\n      currentPage: page,\n    };\n    this.fetchApprovalListPage(fetchParams);\n  }\n\n  protected fetchApprovalListPage(searchConfig: SearchConfig): void {\n    searchConfig.pageSize = this.PAGE_SIZE;\n    this.orderApprovalService.loadOrderApprovals(searchConfig);\n    this.orderApprovals$ = this.orderApprovalService.getList(searchConfig);\n  }\n\n  goToApprovalDetails(event, orderApproval: OrderApproval): void {\n    if (event?.target?.nodeName.toLowerCase() !== 'a') {\n      this.routing.go({\n        cxRoute: 'orderApprovalDetails',\n        params: { approvalCode: orderApproval.code },\n      });\n    }\n  }\n}\n","<ng-container *ngIf=\"orderApprovals$ | async as orderApprovals\">\n  <ng-container\n    *ngIf=\"orderApprovals.pagination.totalResults > 0; else noOrder\"\n  >\n    <!-- Select Form and Pagination Top -->\n    <div class=\"cx-order-approval-sort top row\">\n      <div\n        class=\"\n          cx-order-approval-form-group\n          form-group\n          col-sm-12 col-md-4 col-lg-4\n        \"\n      >\n        <cx-sorting\n          [sortOptions]=\"orderApprovals.sorts\"\n          [sortLabels]=\"sortLabels$ | async\"\n          (sortListEvent)=\"changeSortCode($event)\"\n          [selectedOption]=\"orderApprovals.pagination.sort\"\n        ></cx-sorting>\n      </div>\n      <div class=\"cx-order-approval-pagination\">\n        <cx-pagination\n          [pagination]=\"orderApprovals.pagination\"\n          (viewPageEvent)=\"pageChange($event)\"\n        ></cx-pagination>\n      </div>\n    </div>\n    <!-- TABLE -->\n    <table class=\"table cx-order-approval-table\">\n      <thead class=\"cx-order-approval-thead-mobile\">\n        <th scope=\"col\">\n          {{ 'orderApprovalList.orderCode' | cxTranslate }}\n        </th>\n        <th scope=\"col\">{{ 'orderApprovalList.POCode' | cxTranslate }}</th>\n        <th scope=\"col\">{{ 'orderApprovalList.placedBy' | cxTranslate }}</th>\n        <th scope=\"col\">{{ 'orderApprovalList.date' | cxTranslate }}</th>\n        <th scope=\"col\">\n          {{ 'orderApprovalList.status' | cxTranslate }}\n        </th>\n        <th scope=\"col\">{{ 'orderApprovalList.total' | cxTranslate }}</th>\n      </thead>\n      <tbody>\n        <tr\n          *ngFor=\"let approval of orderApprovals.values\"\n          (click)=\"goToApprovalDetails($event, approval)\"\n        >\n          <td class=\"cx-order-approval-code\">\n            <div class=\"d-md-none cx-order-approval-label\">\n              {{ 'orderApprovalList.orderCode' | cxTranslate }}\n            </div>\n            <a\n              [routerLink]=\"\n                {\n                  cxRoute: 'orderApprovalDetails',\n                  params: { approvalCode: approval?.code }\n                } | cxUrl\n              \"\n              class=\"cx-order-approval-value\"\n            >\n              {{ approval.order?.code }}</a\n            >\n          </td>\n          <td class=\"cx-order-approval-po-code\">\n            <div class=\"d-md-none cx-order-approval-label\">\n              {{ 'orderApprovalList.POCode' | cxTranslate }}\n            </div>\n            <a\n              [routerLink]=\"\n                {\n                  cxRoute: 'orderApprovalDetails',\n                  params: { approvalCode: approval?.code }\n                } | cxUrl\n              \"\n              class=\"cx-order-approval-value\"\n              >{{\n                approval.order?.purchaseOrderNumber ||\n                  ('orderApprovalList.none' | cxTranslate)\n              }}</a\n            >\n          </td>\n          <td class=\"cx-order-approval-placed\">\n            <div class=\"d-md-none cx-order-approval-label\">\n              {{ 'orderApprovalList.placedBy' | cxTranslate }}\n            </div>\n            <a\n              [routerLink]=\"\n                {\n                  cxRoute: 'orderApprovalDetails',\n                  params: { approvalCode: approval?.code }\n                } | cxUrl\n              \"\n              class=\"cx-order-approval-value\"\n              >{{ approval.order?.orgCustomer?.name }}</a\n            >\n          </td>\n          <td class=\"cx-order-approval-date\">\n            <div class=\"d-md-none cx-order-approval-label\">\n              {{ 'orderApprovalList.date' | cxTranslate }}\n            </div>\n            <a\n              [routerLink]=\"\n                {\n                  cxRoute: 'orderApprovalDetails',\n                  params: { approvalCode: approval?.code }\n                } | cxUrl\n              \"\n              class=\"cx-order-approval-value\"\n              >{{ approval.order?.created | cxDate: 'longDate' }}</a\n            >\n          </td>\n\n          <td class=\"cx-order-approval-status\">\n            <div class=\"d-md-none cx-order-approval-label\">\n              {{ 'orderApprovalList.status' | cxTranslate }}\n            </div>\n            <a\n              [routerLink]=\"\n                {\n                  cxRoute: 'orderApprovalDetails',\n                  params: { approvalCode: approval?.code }\n                } | cxUrl\n              \"\n              class=\"cx-order-approval-value\"\n            >\n              {{\n                'orderDetails.statusDisplay_' + approval.order?.statusDisplay\n                  | cxTranslate\n              }}</a\n            >\n          </td>\n          <td class=\"cx-order-approval-total\">\n            <div class=\"d-md-none cx-order-approval-label\">\n              {{ 'orderApprovalList.total' | cxTranslate }}\n            </div>\n            <a\n              [routerLink]=\"\n                {\n                  cxRoute: 'orderApprovalDetails',\n                  params: { approvalCode: approval?.code }\n                } | cxUrl\n              \"\n              class=\"cx-order-approval-value\"\n            >\n              {{ approval.order?.totalPrice?.formattedValue }}</a\n            >\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <!-- Select Form and Pagination Bottom -->\n    <div class=\"cx-order-approval-sort bottom row\">\n      <div\n        class=\"\n          cx-order-approval-form-group\n          form-group\n          col-sm-12 col-md-4 col-lg-4\n        \"\n      >\n        <cx-sorting\n          [sortOptions]=\"orderApprovals.sorts\"\n          [sortLabels]=\"sortLabels$ | async\"\n          (sortListEvent)=\"changeSortCode($event)\"\n          [selectedOption]=\"orderApprovals.pagination.sort\"\n        ></cx-sorting>\n      </div>\n      <div class=\"cx-order-approval-pagination\">\n        <cx-pagination\n          [pagination]=\"orderApprovals.pagination\"\n          (viewPageEvent)=\"pageChange($event)\"\n        ></cx-pagination>\n      </div>\n    </div>\n  </ng-container>\n\n  <!-- NO ORDER CONTAINER -->\n  <ng-template #noOrder>\n    <div class=\"cx-order-approval-no-order row\">\n      <div class=\"col-sm-12 col-md-6 col-lg-4\">\n        <div>{{ 'orderApprovalList.emptyList' | cxTranslate }}</div>\n      </div>\n    </div>\n  </ng-template>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '@spartacus/storefront';\nimport { ApproverGuard } from '../../core/guards/approver.guard';\nimport { OrderApprovalListComponent } from './order-approval-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderApprovalListComponent: {\n          component: OrderApprovalListComponent,\n          guards: [AuthGuard, ApproverGuard],\n        },\n      },\n    }),\n    UrlModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n  ],\n  declarations: [OrderApprovalListComponent],\n  exports: [OrderApprovalListComponent],\n})\nexport class OrderApprovalListModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { OrderApprovalDetailsModule } from './details/order-approval-details.module';\nimport { OrderApprovalListModule } from './list/order-approval-list.module';\n\n@NgModule({\n  imports: [RouterModule, OrderApprovalListModule, OrderApprovalDetailsModule],\n})\nexport class OrderApprovalComponentsModule {}\n","import { EntitiesModel, SearchConfig } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  OrderApproval,\n  OrderApprovalDecision,\n} from '../model/order-approval.model';\n\nexport abstract class OrderApprovalAdapter {\n  /**\n   * Abstract method used to load orderApprovalManagement's details data.\n   * OrderApproval's data can be loaded from alternative sources, as long as the structure\n   * converts to the `OrderApproval`.\n   *\n   * @param userId The `userId` for given orderApprovalManagement\n   * @param orderApprovalCode The `orderApprovalCode` for given orderApprovalManagement\n   */\n  abstract load(\n    userId: string,\n    orderApprovalCode: string\n  ): Observable<OrderApproval>;\n\n  abstract loadList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<OrderApproval>>;\n\n  abstract makeDecision(\n    userId: string,\n    orderApprovalCode: string,\n    orderApprovalDecision: OrderApprovalDecision\n  ): Observable<OrderApprovalDecision>;\n}\n","import { Injectable } from '@angular/core';\nimport { EntitiesModel, SearchConfig } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  OrderApproval,\n  OrderApprovalDecision,\n} from '../model/order-approval.model';\nimport { OrderApprovalAdapter } from './order-approval.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderApprovalConnector {\n  constructor(protected adapter: OrderApprovalAdapter) {}\n\n  get(userId: string, orderApprovalCode: string): Observable<OrderApproval> {\n    return this.adapter.load(userId, orderApprovalCode);\n  }\n\n  getList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<OrderApproval>> {\n    return this.adapter.loadList(userId, params);\n  }\n\n  makeDecision(\n    userId: string,\n    orderApprovalCode: string,\n    orderApprovalDecision: OrderApprovalDecision\n  ): Observable<OrderApprovalDecision> {\n    return this.adapter.makeDecision(\n      userId,\n      orderApprovalCode,\n      orderApprovalDecision\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter, EntitiesModel } from '@spartacus/core';\nimport {\n  OrderApproval,\n  OrderApprovalDecision,\n} from '../model/order-approval.model';\n\nexport const ORDER_APPROVAL_NORMALIZER = new InjectionToken<\n  Converter<any, OrderApproval>\n>('OrderApprovalNormalizer');\n\nexport const ORDER_APPROVALS_NORMALIZER = new InjectionToken<\n  Converter<any, EntitiesModel<OrderApproval>>\n>('OrderApprovalsListNormalizer');\n\nexport const ORDER_APPROVAL_DECISION_NORMALIZER = new InjectionToken<\n  Converter<any, OrderApprovalDecision>\n>('OrderApprovalDecisionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  ConverterService,\n  EntitiesModel,\n  Occ,\n  OccEndpointsService,\n  SearchConfig,\n} from '@spartacus/core';\nimport {\n  OrderApproval,\n  OrderApprovalDecision,\n} from '../../core/model/order-approval.model';\nimport { OrderApprovalAdapter } from '../../core/connectors/order-approval.adapter';\nimport {\n  ORDER_APPROVALS_NORMALIZER,\n  ORDER_APPROVAL_DECISION_NORMALIZER,\n  ORDER_APPROVAL_NORMALIZER,\n} from '../../core/connectors/converters';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class OccOrderApprovalAdapter implements OrderApprovalAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string, orderApprovalCode: string): Observable<OrderApproval> {\n    return this.http\n      .get<Occ.OrderApproval>(\n        this.getOrderApprovalEndpoint(userId, orderApprovalCode)\n      )\n      .pipe(this.converter.pipeable(ORDER_APPROVAL_NORMALIZER));\n  }\n\n  loadList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<OrderApproval>> {\n    return this.http\n      .get<Occ.OrderApprovalsList>(\n        this.getOrderApprovalsEndpoint(userId, params)\n      )\n      .pipe(this.converter.pipeable(ORDER_APPROVALS_NORMALIZER));\n  }\n\n  makeDecision(\n    userId: string,\n    orderApprovalCode: string,\n    orderApprovalDecision: OrderApprovalDecision\n  ): Observable<OrderApprovalDecision> {\n    return this.http\n      .post<Occ.OrderApproval>(\n        this.getOrderApprovalDecisionEndpoint(userId, orderApprovalCode),\n        orderApprovalDecision\n      )\n      .pipe(this.converter.pipeable(ORDER_APPROVAL_DECISION_NORMALIZER));\n  }\n\n  protected getOrderApprovalEndpoint(\n    userId: string,\n    orderApprovalCode: string\n  ): string {\n    return this.occEndpoints.buildUrl('orderApproval', {\n      urlParams: {\n        userId,\n        orderApprovalCode,\n      },\n    });\n  }\n\n  protected getOrderApprovalsEndpoint(\n    userId: string,\n    params?: SearchConfig\n  ): string {\n    return this.occEndpoints.buildUrl('orderApprovals', {\n      urlParams: { userId },\n      queryParams: params,\n    });\n  }\n\n  protected getOrderApprovalDecisionEndpoint(\n    userId: string,\n    orderApprovalCode: string\n  ): string {\n    return this.occEndpoints.buildUrl('orderApprovalDecision', {\n      urlParams: {\n        userId,\n        orderApprovalCode,\n      },\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Converter, Occ } from '@spartacus/core';\nimport { OrderApprovalDecision } from '../../core/model/order-approval.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccOrderApprovalDecisionNormalizer\n  implements Converter<Occ.OrderApprovalDecision, OrderApprovalDecision>\n{\n  constructor() {}\n\n  convert(\n    source: Occ.OrderApprovalDecision,\n    target?: OrderApprovalDecision\n  ): OrderApprovalDecision {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Converter,\n  ConverterService,\n  EntitiesModel,\n  Occ,\n} from '@spartacus/core';\nimport { OrderApproval } from '../../core/model/order-approval.model';\nimport { ORDER_APPROVAL_NORMALIZER } from '../../core/connectors/converters';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccOrderApprovalListNormalizer\n  implements Converter<Occ.OrderApprovalsList, EntitiesModel<OrderApproval>>\n{\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.OrderApprovalsList,\n    target?: EntitiesModel<OrderApproval>\n  ): EntitiesModel<OrderApproval> {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    target.values = source.orderApprovals.map((orderApproval) => ({\n      ...this.converter.convert(orderApproval, ORDER_APPROVAL_NORMALIZER),\n    }));\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Converter,\n  ConverterService,\n  Occ,\n  ORDER_NORMALIZER,\n} from '@spartacus/core';\nimport { OrderApproval } from '../../core/model/order-approval.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccOrderApprovalNormalizer\n  implements Converter<Occ.OrderApproval, OrderApproval>\n{\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.OrderApproval, target?: OrderApproval): OrderApproval {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.order) {\n      target.order = this.converter.convert(source.order, ORDER_NORMALIZER);\n    }\n    return target;\n  }\n}\n","// Imported for side effects (module augmentation)\nimport './occ-order-approval-endpoints.model';\n","import { OccConfig } from '@spartacus/core';\n\nexport const defaultOccOrderApprovalConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        orderApprovals: '/users/${userId}/orderapprovals',\n        orderApproval:\n          '/users/${userId}/orderapprovals/${orderApprovalCode}?fields=FULL',\n        orderApprovalDecision:\n          '/users/${userId}/orderapprovals/${orderApprovalCode}/decision',\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { OrderApprovalAdapter } from '../core/connectors/order-approval.adapter';\nimport {\n  ORDER_APPROVALS_NORMALIZER,\n  ORDER_APPROVAL_DECISION_NORMALIZER,\n  ORDER_APPROVAL_NORMALIZER,\n} from '../core/connectors/converters';\n\nimport { OccOrderApprovalAdapter } from './adapters/occ-order-approval.adapter';\n\nimport { OccOrderApprovalDecisionNormalizer } from './converters/occ-order-approval-decision-normalizer';\nimport { OccOrderApprovalListNormalizer } from './converters/occ-order-approval-list-normalizer';\nimport { OccOrderApprovalNormalizer } from './converters/occ-order-approval-normalizer';\nimport { defaultOccOrderApprovalConfig } from './config/default-occ-organization-config';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultOccOrderApprovalConfig),\n    {\n      provide: OrderApprovalAdapter,\n      useClass: OccOrderApprovalAdapter,\n    },\n    {\n      provide: ORDER_APPROVAL_NORMALIZER,\n      useExisting: OccOrderApprovalNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_APPROVALS_NORMALIZER,\n      useExisting: OccOrderApprovalListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_APPROVAL_DECISION_NORMALIZER,\n      useExisting: OccOrderApprovalDecisionNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class OrderApprovalOccModule {}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport {\n  EntitiesModel,\n  normalizeHttpError,\n  StateUtils,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, switchMap } from 'rxjs/operators';\nimport { OrderApprovalConnector } from '../../connectors/order-approval.connector';\nimport { OrderApproval } from '../../model/order-approval.model';\nimport { OrderApprovalActions } from '../actions/index';\n\n@Injectable()\nexport class OrderApprovalEffects {\n  @Effect()\n  loadOrderApproval$: Observable<\n    | OrderApprovalActions.LoadOrderApprovalSuccess\n    | OrderApprovalActions.LoadOrderApprovalFail\n  > = this.actions$.pipe(\n    ofType(OrderApprovalActions.LOAD_ORDER_APPROVAL),\n    map((action: OrderApprovalActions.LoadOrderApproval) => action.payload),\n    filter((payload) => payload.userId !== OCC_USER_ID_ANONYMOUS),\n    switchMap(({ userId, orderApprovalCode }) => {\n      return this.orderApprovalConnector.get(userId, orderApprovalCode).pipe(\n        map((orderApproval: OrderApproval) => {\n          return new OrderApprovalActions.LoadOrderApprovalSuccess([\n            orderApproval,\n          ]);\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new OrderApprovalActions.LoadOrderApprovalFail({\n              orderApprovalCode,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  loadOrderApprovals$: Observable<\n    | OrderApprovalActions.LoadOrderApprovalsSuccess\n    | OrderApprovalActions.LoadOrderApprovalSuccess\n    | OrderApprovalActions.LoadOrderApprovalsFail\n  > = this.actions$.pipe(\n    ofType(OrderApprovalActions.LOAD_ORDER_APPROVALS),\n    map((action: OrderApprovalActions.LoadOrderApprovals) => action.payload),\n    filter((payload) => payload.userId !== OCC_USER_ID_ANONYMOUS),\n    switchMap(({ userId, params }) =>\n      this.orderApprovalConnector.getList(userId, params).pipe(\n        switchMap((orderApprovals: EntitiesModel<OrderApproval>) => {\n          const { values, page } = StateUtils.normalizeListPage(\n            orderApprovals,\n            'code'\n          );\n          return [\n            new OrderApprovalActions.LoadOrderApprovalSuccess(values),\n            new OrderApprovalActions.LoadOrderApprovalsSuccess({\n              page,\n              params,\n            }),\n          ];\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new OrderApprovalActions.LoadOrderApprovalsFail({\n              params: params,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  makeDecision$: Observable<\n    | OrderApprovalActions.MakeDecisionSuccess\n    | OrderApprovalActions.LoadOrderApproval\n    | OrderApprovalActions.MakeDecisionFail\n  > = this.actions$.pipe(\n    ofType(OrderApprovalActions.MAKE_DECISION),\n    map((action: OrderApprovalActions.MakeDecision) => action.payload),\n    filter((payload) => payload.userId !== OCC_USER_ID_ANONYMOUS),\n    switchMap(({ userId, orderApprovalCode, orderApprovalDecision }) =>\n      this.orderApprovalConnector\n        .makeDecision(userId, orderApprovalCode, orderApprovalDecision)\n        .pipe(\n          switchMap((orderApprovalDecisionData) => [\n            new OrderApprovalActions.MakeDecisionSuccess({\n              orderApprovalCode,\n              orderApprovalDecision: orderApprovalDecisionData,\n            }),\n            new OrderApprovalActions.LoadOrderApproval({\n              userId,\n              orderApprovalCode,\n            }),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            of(\n              new OrderApprovalActions.MakeDecisionFail({\n                orderApprovalCode: orderApprovalCode,\n                error: normalizeHttpError(error),\n              })\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderApprovalConnector: OrderApprovalConnector\n  ) {}\n}\n","import { OrderApprovalEffects } from './order-approval.effect';\n\nexport const effects: any[] = [OrderApprovalEffects];\n\nexport * from './order-approval.effect';\n","import { StateUtils } from '@spartacus/core';\nimport { OrderApproval } from '../../model/order-approval.model';\nimport { OrderApprovalActions } from '../actions/index';\n\nexport const orderApprovalInitialState = undefined;\nexport const orderApprovalsInitialState = undefined;\n\nexport function orderApprovalsEntitiesReducer(\n  state: OrderApproval = orderApprovalInitialState,\n  action: StateUtils.LoaderAction\n): OrderApproval {\n  switch (action.type) {\n    case OrderApprovalActions.LOAD_ORDER_APPROVAL_SUCCESS:\n      return action.payload;\n    case OrderApprovalActions.MAKE_DECISION_SUCCESS:\n      return state;\n  }\n  return state;\n}\n\nexport function orderApprovalsListReducer(\n  state = orderApprovalsInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case OrderApprovalActions.LOAD_ORDER_APPROVALS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions, ListModel, StateUtils } from '@spartacus/core';\nimport { OrderApproval } from '../../model/order-approval.model';\nimport {\n  OrderApprovalState,\n  ORDER_APPROVAL_ENTITIES,\n  ORDER_APPROVAL_FEATURE,\n  ORDER_APPROVAL_LIST,\n} from '../order-approval-state';\nimport {\n  orderApprovalsEntitiesReducer,\n  orderApprovalsListReducer,\n} from './order-approval.reducer';\n\nexport function getReducers(): ActionReducerMap<OrderApprovalState> {\n  return {\n    [ORDER_APPROVAL_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer<OrderApproval>(\n        ORDER_APPROVAL_ENTITIES,\n        orderApprovalsEntitiesReducer\n      ),\n      list: StateUtils.entityLoaderReducer<ListModel>(\n        ORDER_APPROVAL_LIST,\n        orderApprovalsListReducer\n      ),\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<\n  ActionReducerMap<OrderApprovalState>\n> = new InjectionToken<ActionReducerMap<OrderApprovalState>>(\n  'OrganizationReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearOrganizationState(\n  reducer: ActionReducer<OrderApprovalState, Action>\n): ActionReducer<OrderApprovalState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearOrganizationState];\n","import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { effects } from './effects/index';\nimport { ORDER_APPROVAL_FEATURE } from './order-approval-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ORDER_APPROVAL_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class OrderApprovalStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { OrderApprovalStoreModule } from './store/order-approval-store.module';\nimport { OrderApprovalConnector } from './connectors/order-approval.connector';\n\n@NgModule({\n  imports: [OrderApprovalStoreModule],\n})\nexport class OrderApprovalCoreModule {\n  static forRoot(): ModuleWithProviders<OrderApprovalCoreModule> {\n    return {\n      ngModule: OrderApprovalCoreModule,\n      providers: [OrderApprovalConnector],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OrderApprovalComponentsModule } from './components/order-approval-components.module';\nimport { OrderApprovalCoreModule } from './core/order-approval-core.module';\nimport { OrderApprovalOccModule } from './occ/order-approval-occ.module';\n\n@NgModule({\n  imports: [\n    OrderApprovalCoreModule.forRoot(),\n    OrderApprovalOccModule,\n    OrderApprovalComponentsModule,\n  ],\n})\nexport class OrderApprovalModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["OrderApprovalActions.LoadOrderApproval","OrderApprovalActions.LoadOrderApprovals","OrderApprovalSelectors.getOrderApproval","OrderApprovalSelectors.getOrderApprovalList","OrderApprovalActions.MakeDecision","OrderApprovalActions.MakeDecisionReset","OrderApprovalActions.LOAD_ORDER_APPROVAL","OrderApprovalActions.LoadOrderApprovalSuccess","OrderApprovalActions.LoadOrderApprovalFail","OrderApprovalActions.LOAD_ORDER_APPROVALS","OrderApprovalActions.LoadOrderApprovalsSuccess","OrderApprovalActions.LoadOrderApprovalsFail","OrderApprovalActions.MAKE_DECISION","OrderApprovalActions.MakeDecisionSuccess","OrderApprovalActions.MakeDecisionFail","OrderApprovalActions.LOAD_ORDER_APPROVAL_SUCCESS","OrderApprovalActions.MAKE_DECISION_SUCCESS","OrderApprovalActions.LOAD_ORDER_APPROVALS_SUCCESS"],"mappings":"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"}