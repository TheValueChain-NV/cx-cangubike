{"version":3,"file":"spartacus-organization-administration-core.js","sources":["../../../feature-libs/organization/administration/core/connectors/b2b-user/b2b-user.adapter.ts","../../../feature-libs/organization/administration/core/connectors/b2b-user/b2b-user.connector.ts","../../../feature-libs/organization/administration/core/connectors/budget/budget.adapter.ts","../../../feature-libs/organization/administration/core/connectors/budget/budget.connector.ts","../../../feature-libs/organization/administration/core/connectors/cost-center/cost-center.adapter.ts","../../../feature-libs/organization/administration/core/connectors/cost-center/cost-center.connector.ts","../../../feature-libs/organization/administration/core/connectors/org-unit/org-unit.adapter.ts","../../../feature-libs/organization/administration/core/connectors/org-unit/org-unit.connector.ts","../../../feature-libs/organization/administration/core/connectors/permission/permission.adapter.ts","../../../feature-libs/organization/administration/core/connectors/permission/permission.connector.ts","../../../feature-libs/organization/administration/core/connectors/user-group/user-group.adapter.ts","../../../feature-libs/organization/administration/core/connectors/user-group/user-group.connector.ts","../../../feature-libs/organization/administration/core/services/organization-page-meta.resolver.ts","../../../feature-libs/organization/administration/core/services/organization-page-meta.module.ts","../../../feature-libs/organization/administration/core/store/organization-state.ts","../../../feature-libs/organization/administration/core/store/actions/budget.action.ts","../../../feature-libs/organization/administration/core/store/actions/org-unit.action.ts","../../../feature-libs/organization/administration/core/store/actions/user-group.action.ts","../../../feature-libs/organization/administration/core/store/actions/permission.action.ts","../../../feature-libs/organization/administration/core/store/actions/cost-center.action.ts","../../../feature-libs/organization/administration/core/store/actions/b2b-user.action.ts","../../../feature-libs/organization/administration/core/store/actions/organization.action.ts","../../../feature-libs/organization/administration/core/store/effects/budget.effect.ts","../../../feature-libs/organization/administration/core/store/effects/org-unit.effect.ts","../../../feature-libs/organization/administration/core/store/effects/permission.effect.ts","../../../feature-libs/organization/administration/core/store/effects/cost-center.effect.ts","../../../feature-libs/organization/administration/core/store/effects/b2b-user.effect.ts","../../../feature-libs/organization/administration/core/store/effects/user-group.effect.ts","../../../feature-libs/organization/administration/core/store/effects/index.ts","../../../feature-libs/organization/administration/core/store/reducers/b2b-user.reducer.ts","../../../feature-libs/organization/administration/core/store/reducers/budget.reducer.ts","../../../feature-libs/organization/administration/core/store/reducers/cost-center.reducer.ts","../../../feature-libs/organization/administration/core/store/reducers/org-unit.reducer.ts","../../../feature-libs/organization/administration/core/store/reducers/permission.reducer.ts","../../../feature-libs/organization/administration/core/store/reducers/user-group.reducer.ts","../../../feature-libs/organization/administration/core/store/reducers/index.ts","../../../feature-libs/organization/administration/core/store/organization-store.module.ts","../../../feature-libs/organization/administration/core/administration-core.module.ts","../../../feature-libs/organization/administration/core/connectors/b2b-user/converters.ts","../../../feature-libs/organization/administration/core/connectors/budget/converters.ts","../../../feature-libs/organization/administration/core/connectors/org-unit/converters.ts","../../../feature-libs/organization/administration/core/connectors/permission/converters.ts","../../../feature-libs/organization/administration/core/connectors/user-group/converters.ts","../../../feature-libs/organization/administration/core/guards/admin.guard.ts","../../../feature-libs/organization/administration/core/http-interceptors/bad-request/bad-request.handler.ts","../../../feature-libs/organization/administration/core/http-interceptors/conflict/conflict.handler.ts","../../../feature-libs/organization/administration/core/model/organization-item-status.ts","../../../feature-libs/organization/administration/core/model/permission.model.ts","../../../feature-libs/organization/administration/core/store/selectors/feature.selector.ts","../../../feature-libs/organization/administration/core/store/selectors/permission.selector.ts","../../../feature-libs/organization/administration/core/store/selectors/b2b-user.selector.ts","../../../feature-libs/organization/administration/core/utils/get-item-status.ts","../../../feature-libs/organization/administration/core/services/b2b-user.service.ts","../../../feature-libs/organization/administration/core/store/selectors/budget.selector.ts","../../../feature-libs/organization/administration/core/store/selectors/org-unit.selector.ts","../../../feature-libs/organization/administration/core/store/selectors/user-group.selector.ts","../../../feature-libs/organization/administration/core/store/selectors/cost-center.selector.ts","../../../feature-libs/organization/administration/core/services/budget.service.ts","../../../feature-libs/organization/administration/core/services/cost-center.service.ts","../../../feature-libs/organization/administration/core/services/org-unit.service.ts","../../../feature-libs/organization/administration/core/services/permission.service.ts","../../../feature-libs/organization/administration/core/services/user-group.service.ts","../../../feature-libs/organization/administration/core/spartacus-organization-administration-core.ts"],"sourcesContent":["import { B2BUser, EntitiesModel, SearchConfig } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { Permission } from '../../model/permission.model';\nimport { UserGroup } from '../../model/user-group.model';\n\nexport abstract class B2BUserAdapter {\n  /**\n   * Abstract method used to load orgUnitCustomerManagement's details data.\n   * orgUnitCustomer's data can be loaded from alternative sources, as long as the structure\n   * converts to the `B2BUser`.\n   *\n   * @param userId The `userId` for given orgUnitCustomerManagement\n   * @param orgCustomerId The `orgUnitCustomerId` for given orgUnitCustomerManagement\n   */\n  abstract load(userId: string, orgCustomerId: string): Observable<B2BUser>;\n\n  abstract loadList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<B2BUser>>;\n\n  abstract create(userId: string, orgCustomer: B2BUser): Observable<B2BUser>;\n\n  abstract update(\n    userId: string,\n    orgCustomerId: string,\n    orgCustomer: B2BUser\n  ): Observable<B2BUser>;\n\n  abstract loadApprovers(\n    userId: string,\n    orgCustomerId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<B2BUser>>;\n\n  abstract assignApprover(\n    userId: string,\n    orgCustomerId: string,\n    approverId: string\n  ): Observable<any>;\n\n  abstract unassignApprover(\n    userId: string,\n    orgCustomerId: string,\n    approverId: string\n  ): Observable<any>;\n\n  abstract loadPermissions(\n    userId: string,\n    orgCustomerId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<Permission>>;\n\n  abstract assignPermission(\n    userId: string,\n    orgCustomerId: string,\n    permissionId: string\n  ): Observable<any>;\n\n  abstract unassignPermission(\n    userId: string,\n    orgCustomerId: string,\n    permissionId: string\n  ): Observable<any>;\n\n  abstract loadUserGroups(\n    userId: string,\n    orgCustomerId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<UserGroup>>;\n\n  abstract assignUserGroup(\n    userId: string,\n    orgCustomerId: string,\n    userGroupId: string\n  ): Observable<any>;\n\n  abstract unassignUserGroup(\n    userId: string,\n    orgCustomerId: string,\n    userGroupId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { B2BUser, EntitiesModel, SearchConfig } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { Permission } from '../../model/permission.model';\nimport { UserGroup } from '../../model/user-group.model';\nimport { B2BUserAdapter } from './b2b-user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class B2BUserConnector {\n  constructor(protected adapter: B2BUserAdapter) {}\n\n  get(userId: string, orgUnitCustomerId: string): Observable<B2BUser> {\n    return this.adapter.load(userId, orgUnitCustomerId);\n  }\n\n  create(userId: string, orgCustomer: B2BUser): Observable<B2BUser> {\n    return this.adapter.create(userId, orgCustomer);\n  }\n\n  update(\n    userId: string,\n    orgCustomerId: string,\n    orgCustomer: B2BUser\n  ): Observable<B2BUser> {\n    return this.adapter.update(userId, orgCustomerId, orgCustomer);\n  }\n\n  getList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<B2BUser>> {\n    return this.adapter.loadList(userId, params);\n  }\n\n  getApprovers(\n    userId: string,\n    orgUnitCustomerId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<B2BUser>> {\n    return this.adapter.loadApprovers(userId, orgUnitCustomerId, params);\n  }\n\n  assignApprover(\n    userId: string,\n    orgCustomerId: string,\n    approverId: string\n  ): Observable<any> {\n    return this.adapter.assignApprover(userId, orgCustomerId, approverId);\n  }\n\n  unassignApprover(\n    userId: string,\n    orgCustomerId: string,\n    approverId: string\n  ): Observable<any> {\n    return this.adapter.unassignApprover(userId, orgCustomerId, approverId);\n  }\n\n  getPermissions(\n    userId: string,\n    orgUnitCustomerId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<Permission>> {\n    return this.adapter.loadPermissions(userId, orgUnitCustomerId, params);\n  }\n\n  assignPermission(\n    userId: string,\n    orgCustomerId: string,\n    permissionId: string\n  ): Observable<any> {\n    return this.adapter.assignPermission(userId, orgCustomerId, permissionId);\n  }\n\n  unassignPermission(\n    userId: string,\n    orgCustomerId: string,\n    permissionId: string\n  ): Observable<any> {\n    return this.adapter.unassignPermission(userId, orgCustomerId, permissionId);\n  }\n\n  getUserGroups(\n    userId: string,\n    orgUnitCustomerId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<UserGroup>> {\n    return this.adapter.loadUserGroups(userId, orgUnitCustomerId, params);\n  }\n\n  assignUserGroup(\n    userId: string,\n    orgCustomerId: string,\n    userGroupId: string\n  ): Observable<any> {\n    return this.adapter.assignUserGroup(userId, orgCustomerId, userGroupId);\n  }\n\n  unassignUserGroup(\n    userId: string,\n    orgCustomerId: string,\n    userGroupId: string\n  ): Observable<any> {\n    return this.adapter.unassignUserGroup(userId, orgCustomerId, userGroupId);\n  }\n}\n","import { EntitiesModel, SearchConfig } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { Budget } from '../../model/budget.model';\n\nexport abstract class BudgetAdapter {\n  /**\n   * Abstract method used to load budgetManagement's details data.\n   * Budget's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Budget`.\n   *\n   * @param userId The `userId` for given budgetManagement\n   * @param budgetCode The `budgetCode` for given budgetManagement\n   */\n  abstract load(userId: string, budgetCode: string): Observable<Budget>;\n\n  abstract loadList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<Budget>>;\n\n  abstract create(userId: string, budget: Budget): Observable<Budget>;\n\n  abstract update(\n    userId: string,\n    budgetCode: string,\n    budget: Budget\n  ): Observable<Budget>;\n}\n","import { Injectable } from '@angular/core';\nimport { EntitiesModel, SearchConfig } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { Budget } from '../../model/budget.model';\nimport { BudgetAdapter } from './budget.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BudgetConnector {\n  constructor(protected adapter: BudgetAdapter) {}\n\n  get(userId: string, budgetCode: string): Observable<Budget> {\n    return this.adapter.load(userId, budgetCode);\n  }\n\n  getList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<Budget>> {\n    return this.adapter.loadList(userId, params);\n  }\n\n  create(userId: string, budget: Budget): Observable<Budget> {\n    return this.adapter.create(userId, budget);\n  }\n\n  update(\n    userId: string,\n    budgetCode: string,\n    budget: Budget\n  ): Observable<Budget> {\n    return this.adapter.update(userId, budgetCode, budget);\n  }\n}\n","import { CostCenter, EntitiesModel, SearchConfig } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { Budget } from '../../model/budget.model';\n\nexport abstract class CostCenterAdapter {\n  /**\n   * Abstract method used to load costCenterManagement's details data.\n   * CostCenter's data can be loaded from alternative sources, as long as the structure\n   * converts to the `CostCenter`.\n   *\n   * @param userId The `userId` for given costCenterManagement\n   * @param costCenterCode The `costCenterCode` for given costCenterManagement\n   */\n  abstract load(userId: string, costCenterCode: string): Observable<CostCenter>;\n\n  abstract loadList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<CostCenter>>;\n\n  abstract create(\n    userId: string,\n    costCenter: CostCenter\n  ): Observable<CostCenter>;\n\n  abstract update(\n    userId: string,\n    costCenterCode: string,\n    costCenter: CostCenter\n  ): Observable<CostCenter>;\n\n  abstract loadBudgets(\n    userId: string,\n    costCenterCode: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<Budget>>;\n\n  abstract assignBudget(\n    userId: string,\n    costCenterCode: string,\n    budgetCode: string\n  ): Observable<any>;\n\n  abstract unassignBudget(\n    userId: string,\n    costCenterCode: string,\n    budgetCode: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { CostCenter, EntitiesModel, SearchConfig } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { Budget } from '../../model/budget.model';\nimport { CostCenterAdapter } from './cost-center.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CostCenterConnector {\n  constructor(protected adapter: CostCenterAdapter) {}\n\n  get(userId: string, costCenterCode: string): Observable<CostCenter> {\n    return this.adapter.load(userId, costCenterCode);\n  }\n\n  getList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<CostCenter>> {\n    return this.adapter.loadList(userId, params);\n  }\n\n  create(userId: string, costCenter: CostCenter): Observable<CostCenter> {\n    return this.adapter.create(userId, costCenter);\n  }\n\n  update(\n    userId: string,\n    costCenterCode: string,\n    costCenter: CostCenter\n  ): Observable<CostCenter> {\n    return this.adapter.update(userId, costCenterCode, costCenter);\n  }\n\n  getBudgets(\n    userId: string,\n    costCenterCode: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<Budget>> {\n    return this.adapter.loadBudgets(userId, costCenterCode, params);\n  }\n\n  assignBudget(\n    userId: string,\n    costCenterCode: string,\n    budgetCode: string\n  ): Observable<any> {\n    return this.adapter.assignBudget(userId, costCenterCode, budgetCode);\n  }\n\n  unassignBudget(\n    userId: string,\n    costCenterCode: string,\n    budgetCode: string\n  ): Observable<any> {\n    return this.adapter.unassignBudget(userId, costCenterCode, budgetCode);\n  }\n}\n","import {\n  Address,\n  B2BApprovalProcess,\n  B2BUnit,\n  B2BUser,\n  EntitiesModel,\n  SearchConfig,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { B2BUnitNode } from '../../model/unit-node.model';\n\nexport abstract class OrgUnitAdapter {\n  /**\n   * Abstract method used to load orgUnit's details data.\n   * B2BUnitNode's data can be loaded from alternative sources, as long as the structure\n   * converts to the `B2BUnitNode`.\n   *\n   * @param userId The `userId` for given orgUnit\n   * @param orgUnitId The `orgUnitId` for given orgUnit\n   */\n  abstract load(userId: string, orgUnitId: string): Observable<B2BUnit>;\n\n  abstract loadList(userId: string): Observable<B2BUnitNode[]>;\n\n  abstract create(userId: string, orgUnit: B2BUnit): Observable<B2BUnit>;\n\n  abstract update(\n    userId: string,\n    orgUnitId: string,\n    orgUnit: B2BUnit\n  ): Observable<B2BUnit>;\n\n  abstract loadApprovalProcesses(\n    userId: string\n  ): Observable<B2BApprovalProcess[]>;\n\n  abstract loadTree(userId: string): Observable<B2BUnitNode>;\n\n  abstract loadUsers(\n    userId: string,\n    orgUnitId: string,\n    roleId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<B2BUser>>;\n\n  abstract assignRole(\n    userId: string,\n    orgCustomerId: string,\n    roleId: string\n  ): Observable<any>;\n\n  abstract unassignRole(\n    userId: string,\n    orgCustomerId: string,\n    roleId: string\n  ): Observable<any>;\n\n  abstract assignApprover(\n    userId: string,\n    orgUnitId: string,\n    orgCustomerId: string,\n    roleId: string\n  ): Observable<any>;\n\n  abstract unassignApprover(\n    userId: string,\n    orgUnitId: string,\n    orgCustomerId: string,\n    roleId: string\n  ): Observable<any>;\n\n  abstract loadAddresses(\n    userId: string,\n    orgUnitId: string\n  ): Observable<EntitiesModel<Address>>;\n\n  abstract createAddress(\n    userId: string,\n    orgUnitId: string,\n    address: Address\n  ): Observable<Address>;\n\n  abstract updateAddress(\n    userId: string,\n    orgUnitId: string,\n    addressId: string,\n    address: Address\n  ): Observable<Address>;\n\n  abstract deleteAddress(\n    userId: string,\n    orgUnitId: string,\n    addressId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  B2BApprovalProcess,\n  B2BUnit,\n  B2BUser,\n  EntitiesModel,\n  SearchConfig,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { B2BUnitNode } from '../../model/unit-node.model';\nimport { OrgUnitAdapter } from './org-unit.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrgUnitConnector {\n  constructor(protected adapter: OrgUnitAdapter) {}\n\n  get(userId: string, orgUnitId: string): Observable<B2BUnit> {\n    return this.adapter.load(userId, orgUnitId);\n  }\n\n  create(userId: string, orgUnit: B2BUnit): Observable<B2BUnit> {\n    return this.adapter.create(userId, orgUnit);\n  }\n\n  update(\n    userId: string,\n    orgUnitId: string,\n    orgUnit: B2BUnit\n  ): Observable<B2BUnit> {\n    return this.adapter.update(userId, orgUnitId, orgUnit);\n  }\n\n  getList(userId: string): Observable<B2BUnitNode[]> {\n    return this.adapter.loadList(userId);\n  }\n\n  getApprovalProcesses(userId: string): Observable<B2BApprovalProcess[]> {\n    return this.adapter.loadApprovalProcesses(userId);\n  }\n\n  getTree(userId: string): Observable<B2BUnitNode> {\n    return this.adapter.loadTree(userId);\n  }\n\n  getUsers(\n    userId: string,\n    orgUnitId: string,\n    roleId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<B2BUser>> {\n    return this.adapter.loadUsers(userId, orgUnitId, roleId, params);\n  }\n\n  assignRole(\n    userId: string,\n    orgCustomerId: string,\n    roleId: string\n  ): Observable<any> {\n    return this.adapter.assignRole(userId, orgCustomerId, roleId);\n  }\n\n  unassignRole(\n    userId: string,\n    orgCustomerId: string,\n    roleId: string\n  ): Observable<any> {\n    return this.adapter.unassignRole(userId, orgCustomerId, roleId);\n  }\n\n  assignApprover(\n    userId: string,\n    orgUnitId: string,\n    orgCustomerId: string,\n    roleId: string\n  ): Observable<any> {\n    return this.adapter.assignApprover(\n      userId,\n      orgUnitId,\n      orgCustomerId,\n      roleId\n    );\n  }\n\n  unassignApprover(\n    userId: string,\n    orgUnitId: string,\n    orgCustomerId: string,\n    roleId: string\n  ): Observable<any> {\n    return this.adapter.unassignApprover(\n      userId,\n      orgUnitId,\n      orgCustomerId,\n      roleId\n    );\n  }\n\n  getAddresses(\n    userId: string,\n    orgUnitId: string\n  ): Observable<EntitiesModel<Address>> {\n    return this.adapter.loadAddresses(userId, orgUnitId);\n  }\n\n  createAddress(\n    userId: string,\n    orgUnitId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, orgUnitId, address);\n  }\n\n  updateAddress(\n    userId: string,\n    orgUnitId: string,\n    addressId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.updateAddress(userId, orgUnitId, addressId, address);\n  }\n\n  deleteAddress(\n    userId: string,\n    orgUnitId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.deleteAddress(userId, orgUnitId, addressId);\n  }\n}\n","import {\n  EntitiesModel,\n  SearchConfig,\n  OrderApprovalPermissionType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { Permission } from '../../model/permission.model';\n\nexport abstract class PermissionAdapter {\n  /**\n   * Abstract method used to load permissionManagement's details data.\n   * Permission's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Permission`.\n   *\n   * @param userId The `userId` for given permissionManagement\n   * @param permissionCode The `permissionCode` for given permissionManagement\n   */\n  abstract load(userId: string, permissionCode: string): Observable<Permission>;\n\n  abstract loadList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<Permission>>;\n\n  abstract create(\n    userId: string,\n    permission: Permission\n  ): Observable<Permission>;\n\n  abstract update(\n    userId: string,\n    permissionCode: string,\n    permission: Permission\n  ): Observable<Permission>;\n\n  abstract loadTypes(): Observable<OrderApprovalPermissionType[]>;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  EntitiesModel,\n  SearchConfig,\n  OrderApprovalPermissionType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { Permission } from '../../model/permission.model';\nimport { PermissionAdapter } from './permission.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PermissionConnector {\n  constructor(protected adapter: PermissionAdapter) {}\n\n  get(userId: string, permissionCode: string): Observable<Permission> {\n    return this.adapter.load(userId, permissionCode);\n  }\n\n  getList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<Permission>> {\n    return this.adapter.loadList(userId, params);\n  }\n\n  create(userId: string, permission: Permission): Observable<Permission> {\n    return this.adapter.create(userId, permission);\n  }\n\n  update(\n    userId: string,\n    permissionCode: string,\n    permission: Permission\n  ): Observable<Permission> {\n    return this.adapter.update(userId, permissionCode, permission);\n  }\n\n  getTypes(): Observable<OrderApprovalPermissionType[]> {\n    return this.adapter.loadTypes();\n  }\n}\n","import { B2BUser, EntitiesModel, SearchConfig } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { Permission } from '../../model/permission.model';\nimport { UserGroup } from '../../model/user-group.model';\n\nexport abstract class UserGroupAdapter {\n  /**\n   * Abstract method used to load userGroupManagement's details data.\n   * userGroup's data can be loaded from alternative sources, as long as the structure\n   * converts to the `OrgUnitUserGroup`.\n   *\n   * @param userId The `userId` for given userGroupManagement\n   * @param userGroupId The `userGroupId` for given userGroupManagement\n   */\n  abstract load(userId: string, userGroupId: string): Observable<UserGroup>;\n\n  abstract loadList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<UserGroup>>;\n\n  abstract loadAvailableOrderApprovalPermissions(\n    userId: string,\n    userGroupId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<Permission>>;\n\n  abstract loadAvailableOrgCustomers(\n    userId: string,\n    userGroupId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<B2BUser>>;\n\n  abstract create(userId: string, userGroup: UserGroup): Observable<UserGroup>;\n\n  abstract update(\n    userId: string,\n    userGroupId: string,\n    userGroup: UserGroup\n  ): Observable<UserGroup>;\n\n  abstract delete(userId: string, userGroupId: string): Observable<UserGroup>;\n\n  abstract assignMember(\n    userId: string,\n    userGroupId: string,\n    orgCustomerId: string\n  ): Observable<any>;\n\n  abstract assignOrderApprovalPermission(\n    userId: string,\n    userGroupId: string,\n    orderApprovalPermissionCode: string\n  ): Observable<any>;\n\n  abstract unassignMember(\n    userId: string,\n    userGroupId: string,\n    orgCustomerId: string\n  ): Observable<any>;\n\n  abstract unassignAllMembers(\n    userId: string,\n    userGroupId: string\n  ): Observable<any>;\n\n  abstract unassignOrderApprovalPermission(\n    userId: string,\n    userGroupId: string,\n    orderApprovalPermissionCode: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { B2BUser, EntitiesModel, SearchConfig } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { Permission } from '../../model/permission.model';\nimport { UserGroup } from '../../model/user-group.model';\nimport { UserGroupAdapter } from './user-group.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserGroupConnector {\n  constructor(protected adapter: UserGroupAdapter) {}\n\n  get(userId: string, userGroupId: string): Observable<UserGroup> {\n    return this.adapter.load(userId, userGroupId);\n  }\n\n  getList(\n    userId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<UserGroup>> {\n    return this.adapter.loadList(userId, params);\n  }\n\n  getAvailableOrderApprovalPermissions(\n    userId: string,\n    userGroupId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<Permission>> {\n    return this.adapter.loadAvailableOrderApprovalPermissions(\n      userId,\n      userGroupId,\n      params\n    );\n  }\n\n  getAvailableOrgCustomers(\n    userId: string,\n    userGroupId: string,\n    params?: SearchConfig\n  ): Observable<EntitiesModel<B2BUser>> {\n    return this.adapter.loadAvailableOrgCustomers(userId, userGroupId, params);\n  }\n\n  create(userId: string, userGroup: UserGroup): Observable<UserGroup> {\n    return this.adapter.create(userId, userGroup);\n  }\n\n  delete(userId: string, userGroupId: string): Observable<UserGroup> {\n    return this.adapter.delete(userId, userGroupId);\n  }\n\n  update(\n    userId: string,\n    userGroupId: string,\n    userGroup: UserGroup\n  ): Observable<UserGroup> {\n    return this.adapter.update(userId, userGroupId, userGroup);\n  }\n\n  assignMember(\n    userId: string,\n    userGroupId: string,\n    orgCustomerId: string\n  ): Observable<any> {\n    return this.adapter.assignMember(userId, userGroupId, orgCustomerId);\n  }\n\n  assignOrderApprovalPermission(\n    userId: string,\n    userGroupId: string,\n    orderApprovalPermissionCode: string\n  ): Observable<any> {\n    return this.adapter.assignOrderApprovalPermission(\n      userId,\n      userGroupId,\n      orderApprovalPermissionCode\n    );\n  }\n\n  unassignMember(\n    userId: string,\n    userGroupId: string,\n    orgCustomerId: string\n  ): Observable<any> {\n    return this.adapter.unassignMember(userId, userGroupId, orgCustomerId);\n  }\n\n  unassignAllMembers(userId: string, userGroupId: string): Observable<any> {\n    return this.adapter.unassignAllMembers(userId, userGroupId);\n  }\n\n  unassignOrderApprovalPermission(\n    userId: string,\n    userGroupId: string,\n    orderApprovalPermissionCode: string\n  ): Observable<any> {\n    return this.adapter.unassignOrderApprovalPermission(\n      userId,\n      userGroupId,\n      orderApprovalPermissionCode\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  BreadcrumbMeta,\n  ContentPageMetaResolver,\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageMetaResolver,\n  PageRobotsMeta,\n  PageRobotsResolver,\n  PageTitleResolver,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, defer, Observable, of } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  switchMap,\n} from 'rxjs/operators';\n\n/**\n * Resolves the page data for Organization Pages.\n *\n * Breadcrumbs are built in this implementation only.\n *\n * @property {string} ORGANIZATION_SEMANTIC_ROUTE the default root path for organization pages.\n * @property {string} ORGANIZATION_TRANSLATION_KEY the default i18n key for the organization breadcrumb label.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrganizationPageMetaResolver\n  extends PageMetaResolver\n  implements\n    PageBreadcrumbResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageRobotsResolver\n{\n  pageTemplate = 'CompanyPageTemplate';\n  pageType = PageType.CONTENT_PAGE;\n\n  /**\n   * Translation key for the breadcrumb of Organization home page\n   */\n  protected readonly ORGANIZATION_TRANSLATION_KEY = 'organization.breadcrumb';\n\n  /**\n   * The semantic route of the organization landing page. It's used to recognize whether\n   * we are on this page. In such a case we avoid showing the breadcrumb for this page.\n   */\n  protected readonly ORGANIZATION_SEMANTIC_ROUTE = 'organization';\n\n  constructor(\n    protected contentPageMetaResolver: ContentPageMetaResolver,\n    protected translation: TranslationService,\n    protected semanticPath: SemanticPathService,\n    protected routingService: RoutingService\n  ) {\n    super();\n  }\n\n  resolveTitle(): Observable<string | undefined> {\n    return this.contentPageMetaResolver.resolveTitle();\n  }\n\n  resolveDescription(): Observable<string | undefined> {\n    return this.contentPageMetaResolver.resolveDescription();\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return this.contentPageMetaResolver.resolveRobots();\n  }\n\n  /**\n   * Returns list of breadcrumbs for:\n   * - the home page\n   * - the organization home page\n   * - the organization's child pages (i.e. cost center list)\n   * - sub-routes of the organization's child pages (i.e. cost center details, edit cost center, ...)\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.breadcrumbs$;\n  }\n\n  /**\n   * Breadcrumb of the Organization page.\n   * It's empty when the current page is the Organization page.\n   */\n  protected organizationPageBreadcrumb$: Observable<BreadcrumbMeta[]> = defer(\n    () => this.routingService.getRouterState()\n  ).pipe(\n    map((routerState) => routerState?.state?.semanticRoute),\n    distinctUntilChanged(),\n    switchMap((semanticRoute) =>\n      semanticRoute === this.ORGANIZATION_SEMANTIC_ROUTE\n        ? of([])\n        : this.translation.translate(this.ORGANIZATION_TRANSLATION_KEY).pipe(\n            map((label) => [\n              {\n                label,\n                link: this.semanticPath.get(this.ORGANIZATION_SEMANTIC_ROUTE),\n              },\n            ])\n          )\n    )\n  );\n\n  /**\n   * Breadcrumbs returned in the method #resolveBreadcrumbs.\n   */\n  protected breadcrumbs$: Observable<BreadcrumbMeta[]> = combineLatest([\n    this.organizationPageBreadcrumb$,\n    defer(() => this.contentPageMetaResolver.resolveBreadcrumbs()),\n  ]).pipe(\n    map(([organizationPageBreadcrumb, breadcrumbs = []]) => {\n      const [home, ...restBreadcrumbs] = breadcrumbs;\n      return [home, ...organizationPageBreadcrumb, ...restBreadcrumbs];\n    }),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from '@spartacus/core';\nimport { OrganizationPageMetaResolver } from './organization-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: OrganizationPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class OrganizationPageMetaModule {}\n","import {\n  Address,\n  B2BApprovalProcess,\n  B2BUnit,\n  B2BUser,\n  CostCenter,\n  ListModel,\n  OrderApprovalPermissionType,\n  StateUtils,\n} from '@spartacus/core';\nimport { Budget } from '../model/budget.model';\nimport { Permission } from '../model/permission.model';\nimport { B2BUnitNode } from '../model/unit-node.model';\nimport { UserGroup } from '../model/user-group.model';\n\nexport const ORGANIZATION_FEATURE = 'organization';\n\nexport const BUDGET_FEATURE = 'budget';\nexport const BUDGET_ENTITIES = 'budget-entities';\nexport const BUDGET_LIST = 'budget-list';\n\nexport const COST_CENTER_FEATURE = 'costCenter';\nexport const COST_CENTER_ENTITIES = 'costCenter-entities';\nexport const COST_CENTER_LIST = 'costCenter-list';\nexport const COST_CENTER_ASSIGNED_BUDGETS = 'costCenter-assigned-budgets';\n\nexport const PERMISSION_FEATURE = 'permission';\nexport const PERMISSION_ENTITIES = 'permission-entities';\nexport const PERMISSION_LIST = 'permission-list';\n\nexport const PERMISSION_TYPES = 'permission-types';\nexport const PERMISSION_TYPES_LIST = 'permission-types-list';\n\nexport const ORG_UNIT_FEATURE = 'orgUnit';\nexport const ORG_UNIT_NODE_ENTITIES = 'orgUnitNode-entities';\nexport const ORG_UNIT_NODE_LIST = 'orgUnitNode-list';\nexport const ORG_UNIT_ENTITIES = 'orgUnit-entities';\nexport const ORG_UNIT_TREE_ENTITY = 'orgUnit-tree';\nexport const ORG_UNIT_APPROVAL_PROCESSES_ENTITIES =\n  'orgUnit-approval-processes';\nexport const ORG_UNIT_ASSIGNED_USERS = 'orgUnit-assigned-users';\n\nexport const ORG_UNIT_TREE = 'tree';\nexport const ORG_UNIT_APPROVAL_PROCESSES = 'approvalProcesses';\nexport const ORG_UNIT_NODES = 'availableOrgUnitNodes';\n\nexport const B2B_USER_FEATURE = 'b2bUser';\nexport const B2B_USER_ENTITIES = 'b2bUser-entities';\nexport const USER_LIST = 'b2bUser-list';\nexport const B2B_USER_APPROVERS = 'b2bUser-approvers';\nexport const B2B_USER_PERMISSIONS = 'b2bUser-permissions';\nexport const B2B_USER_USER_GROUPS = 'b2bUser-user-groups';\n\nexport const USER_GROUP_FEATURE = 'userGroup';\nexport const USER_GROUP_ENTITIES = 'userGroup-entities';\nexport const USER_GROUP_LIST = 'userGroup-list';\nexport const USER_GROUP_PERMISSIONS =\n  'userGroup-available-order-approval-permissions';\nexport const USER_GROUP_AVAILABLE_CUSTOMERS =\n  'userGroup-available-org-customers';\nexport const ADDRESS_ENTITIES = 'addresses-entities';\nexport const ADDRESS_LIST = 'addresses-list';\n\nexport interface Management<Type> extends StateUtils.EntityListState<Type> {}\n\nexport interface BudgetManagement extends Management<Budget> {}\n\nexport interface OrgUnits {\n  availableOrgUnitNodes: StateUtils.EntityLoaderState<B2BUnitNode[]>;\n  entities: StateUtils.EntityLoaderState<B2BUnit>;\n  tree: StateUtils.EntityLoaderState<B2BUnitNode>;\n  approvalProcesses: StateUtils.EntityLoaderState<B2BApprovalProcess[]>;\n  users: StateUtils.EntityLoaderState<ListModel>;\n  addressList: StateUtils.EntityLoaderState<ListModel>;\n  addressEntities: StateUtils.EntityLoaderState<Address>;\n}\n\nexport interface UserGroupManagement extends Management<UserGroup> {\n  permissions: StateUtils.EntityLoaderState<ListModel>;\n  customers: StateUtils.EntityLoaderState<ListModel>;\n}\n\nexport interface PermissionManagement extends Management<Permission> {\n  permissionTypes: StateUtils.EntityLoaderState<OrderApprovalPermissionType[]>;\n}\n\nexport interface CostCenterManagement extends Management<CostCenter> {\n  budgets: StateUtils.EntityLoaderState<ListModel>;\n}\n\nexport interface B2BUserManagement extends Management<B2BUser> {\n  approvers: StateUtils.EntityLoaderState<ListModel>;\n  permissions: StateUtils.EntityLoaderState<ListModel>;\n  userGroups: StateUtils.EntityLoaderState<ListModel>;\n}\n\nexport interface StateWithOrganization {\n  [ORGANIZATION_FEATURE]: OrganizationState;\n}\n\nexport interface OrganizationState {\n  [BUDGET_FEATURE]: BudgetManagement;\n  [ORG_UNIT_FEATURE]: OrgUnits;\n  [USER_GROUP_FEATURE]: UserGroupManagement;\n  [PERMISSION_FEATURE]: PermissionManagement;\n  [COST_CENTER_FEATURE]: CostCenterManagement;\n  [B2B_USER_FEATURE]: B2BUserManagement;\n}\n","import { ListModel, SearchConfig, StateUtils } from '@spartacus/core';\nimport { Budget } from '../../model/budget.model';\nimport { BUDGET_ENTITIES, BUDGET_LIST } from '../organization-state';\n\nexport const LOAD_BUDGET = '[Budget] Load Budget Data';\nexport const LOAD_BUDGET_FAIL = '[Budget] Load Budget Data Fail';\nexport const LOAD_BUDGET_SUCCESS = '[Budget] Load Budget Data Success';\n\nexport const LOAD_BUDGETS = '[Budget] Load Budgets';\nexport const LOAD_BUDGETS_FAIL = '[Budget] Load Budgets Fail';\nexport const LOAD_BUDGETS_SUCCESS = '[Budget] Load Budgets Success';\n\nexport const CREATE_BUDGET = '[Budget] Create Budget';\nexport const CREATE_BUDGET_FAIL = '[Budget] Create Budget Fail';\nexport const CREATE_BUDGET_SUCCESS = '[Budget] Create Budget Success';\n\nexport const UPDATE_BUDGET = '[Budget] Update Budget';\nexport const UPDATE_BUDGET_FAIL = '[Budget] Update Budget Fail';\nexport const UPDATE_BUDGET_SUCCESS = '[Budget] Update Budget Success';\n\nexport class LoadBudget extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_BUDGET;\n  constructor(public payload: { userId: string; budgetCode: string }) {\n    super(BUDGET_ENTITIES, payload.budgetCode);\n  }\n}\n\nexport class LoadBudgetFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_BUDGET_FAIL;\n  constructor(public payload: { budgetCode: string; error: any }) {\n    super(BUDGET_ENTITIES, payload.budgetCode, payload.error);\n  }\n}\n\nexport class LoadBudgetSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_BUDGET_SUCCESS;\n  constructor(public payload: Budget | Budget[]) {\n    super(\n      BUDGET_ENTITIES,\n      Array.isArray(payload)\n        ? payload.map((budget) => budget?.code)\n        : payload?.code\n    );\n  }\n}\n\nexport class LoadBudgets extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_BUDGETS;\n  constructor(\n    public payload: {\n      userId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(BUDGET_LIST, StateUtils.serializeSearchConfig(payload.params));\n  }\n}\n\nexport class LoadBudgetsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_BUDGETS_FAIL;\n  constructor(public payload: { params: SearchConfig; error: any }) {\n    super(\n      BUDGET_LIST,\n      StateUtils.serializeSearchConfig(payload.params),\n      payload.error\n    );\n  }\n}\n\nexport class LoadBudgetsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_BUDGETS_SUCCESS;\n  constructor(\n    public payload: {\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(BUDGET_LIST, StateUtils.serializeSearchConfig(payload.params));\n  }\n}\n\nexport class CreateBudget extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_BUDGET;\n  constructor(public payload: { userId: string; budget: Budget }) {\n    super(BUDGET_ENTITIES, payload.budget.code);\n  }\n}\n\nexport class CreateBudgetFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_BUDGET_FAIL;\n  constructor(public payload: { budgetCode: string; error: any }) {\n    super(BUDGET_ENTITIES, payload.budgetCode, payload.error);\n  }\n}\n\nexport class CreateBudgetSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CREATE_BUDGET_SUCCESS;\n  constructor(public payload: Budget) {\n    super(BUDGET_ENTITIES, payload.code, payload);\n  }\n}\n\nexport class UpdateBudget extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_BUDGET;\n  constructor(\n    public payload: { userId: string; budgetCode: string; budget: Budget }\n  ) {\n    super(BUDGET_ENTITIES, payload.budget.code);\n  }\n}\n\nexport class UpdateBudgetFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_BUDGET_FAIL;\n  constructor(public payload: { budgetCode: string; error: any }) {\n    super(BUDGET_ENTITIES, payload.budgetCode, payload.error);\n  }\n}\n\nexport class UpdateBudgetSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_BUDGET_SUCCESS;\n  constructor(public payload: Budget) {\n    super(BUDGET_ENTITIES, payload.code, payload);\n  }\n}\n\nexport type BudgetAction =\n  | LoadBudget\n  | LoadBudgetFail\n  | LoadBudgetSuccess\n  | LoadBudgets\n  | LoadBudgetsFail\n  | LoadBudgetsSuccess\n  | CreateBudget\n  | CreateBudgetFail\n  | CreateBudgetSuccess\n  | UpdateBudget\n  | UpdateBudgetFail\n  | UpdateBudgetSuccess;\n","import {\n  Address,\n  B2BApprovalProcess,\n  B2BUnit,\n  ListModel,\n  SearchConfig,\n  StateUtils,\n} from '@spartacus/core';\nimport { B2BUnitNode } from '../../model/unit-node.model';\nimport {\n  ADDRESS_ENTITIES,\n  ADDRESS_LIST,\n  B2B_USER_ENTITIES,\n  ORG_UNIT_APPROVAL_PROCESSES,\n  ORG_UNIT_APPROVAL_PROCESSES_ENTITIES,\n  ORG_UNIT_ASSIGNED_USERS,\n  ORG_UNIT_ENTITIES,\n  ORG_UNIT_NODES,\n  ORG_UNIT_NODE_LIST,\n  ORG_UNIT_TREE,\n  ORG_UNIT_TREE_ENTITY,\n} from '../organization-state';\n\nexport const LOAD_ORG_UNIT = '[B2BUnit] Load B2BUnit Data';\nexport const LOAD_ORG_UNIT_FAIL = '[B2BUnit] Load B2BUnit Data Fail';\nexport const LOAD_ORG_UNIT_SUCCESS = '[B2BUnit] Load B2BUnit Data Success';\n\nexport const LOAD_UNIT_NODE = '[B2BUnitNode] Load B2BUnitNode Data';\nexport const LOAD_UNIT_NODE_FAIL = '[B2BUnitNode] Load B2BUnitNode Data Fail';\nexport const LOAD_UNIT_NODE_SUCCESS =\n  '[B2BUnitNode] Load B2BUnitNode Data Success';\n\nexport const LOAD_UNIT_NODES = '[B2BUnitNode] Load B2BUnitNodes';\nexport const LOAD_UNIT_NODES_FAIL = '[B2BUnitNode] Load B2BUnitNodes Fail';\nexport const LOAD_UNIT_NODES_SUCCESS =\n  '[B2BUnitNode] Load B2BUnitNodes Success';\n\nexport const CREATE_ORG_UNIT = '[B2BUnit] Create B2BUnitNode';\nexport const CREATE_ORG_UNIT_FAIL = '[B2BUnit] Create B2BUnitNode Fail';\nexport const CREATE_ORG_UNIT_SUCCESS = '[B2BUnit] Create B2BUnitNode Success';\n\nexport const UPDATE_ORG_UNIT = '[B2BUnit] Update B2BUnitNode';\nexport const UPDATE_ORG_UNIT_FAIL = '[B2BUnit] Update B2BUnitNode Fail';\nexport const UPDATE_ORG_UNIT_SUCCESS = '[B2BUnit] Update B2BUnitNode Success';\n\nexport const LOAD_UNIT_TREE = '[B2BUnitNode] Load Tree';\nexport const LOAD_UNIT_TREE_FAIL = '[B2BUnitNode] Load Tree Fail';\nexport const LOAD_UNIT_TREE_SUCCESS = '[B2BUnitNode] Load Tree Success';\n\nexport const LOAD_APPROVAL_PROCESSES =\n  '[B2BApprovalProcess] Load Approval Processes';\nexport const LOAD_APPROVAL_PROCESSES_FAIL =\n  '[B2BApprovalProcess] Load Approval Processes Fail';\nexport const LOAD_APPROVAL_PROCESSES_SUCCESS =\n  '[B2BApprovalProcess] Load Approval Processes Success';\n\nexport const LOAD_ASSIGNED_USERS = '[B2BUnit] Load Users';\nexport const LOAD_ASSIGNED_USERS_SUCCESS = '[B2BUnit] Load Users success';\nexport const LOAD_ASSIGNED_USERS_FAIL = '[B2BUnit] Load Users fail';\n\nexport const ASSIGN_ROLE = '[B2BUnit] Assign Role';\nexport const ASSIGN_ROLE_SUCCESS = '[B2BUnit] Assign Role success';\nexport const ASSIGN_ROLE_FAIL = '[B2BUnit] Assign Role fail';\n\nexport const UNASSIGN_ROLE = '[B2BUnit] Unassign Role';\nexport const UNASSIGN_ROLE_SUCCESS = '[B2BUnit] Unassign Role success';\nexport const UNASSIGN_ROLE_FAIL = '[B2BUnit] Unassign Role fail';\n\nexport const ASSIGN_APPROVER = '[B2BUnit] Assign Approver';\nexport const ASSIGN_APPROVER_SUCCESS = '[B2BUnit] Assign Approver success';\nexport const ASSIGN_APPROVER_FAIL = '[B2BUnit] Assign Approver fail';\n\nexport const UNASSIGN_APPROVER = '[B2BUnit] Unassign Approver';\nexport const UNASSIGN_APPROVER_SUCCESS = '[B2BUnit] Unassign Approver success';\nexport const UNASSIGN_APPROVER_FAIL = '[B2BUnit] Unassign Approver fail';\n\nexport const CREATE_ADDRESS = '[B2BUnit] Create address';\nexport const CREATE_ADDRESS_SUCCESS = '[B2BUnit] Create address success';\nexport const CREATE_ADDRESS_FAIL = '[B2BUnit] Create address fail';\n\nexport const UPDATE_ADDRESS = '[B2BUnit] Update address';\nexport const UPDATE_ADDRESS_SUCCESS = '[B2BUnit] Update address success';\nexport const UPDATE_ADDRESS_FAIL = '[B2BUnit] Update address fail';\n\nexport const DELETE_ADDRESS = '[B2BUnit] Delete address';\nexport const DELETE_ADDRESS_SUCCESS = '[B2BUnit] Delete address success';\nexport const DELETE_ADDRESS_FAIL = '[B2BUnit] Delete address fail';\n\nexport const LOAD_ADDRESS_SUCCESS = '[B2BUnit] Load address success';\n\nexport const LOAD_ADDRESSES = '[B2BUnit] Load addresses';\nexport const LOAD_ADDRESSES_SUCCESS = '[B2BUnit] Load addresses success';\nexport const LOAD_ADDRESSES_FAIL = '[B2BUnit] Load addresses fail';\n\nexport const CLEAR_ASSIGNED_USERS = '[B2BUnit] Clear Assigned Users';\n\nexport class LoadOrgUnit extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_ORG_UNIT;\n  constructor(public payload: { userId: string; orgUnitId: string }) {\n    super(ORG_UNIT_ENTITIES, payload.orgUnitId);\n  }\n}\n\nexport class LoadOrgUnitFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_ORG_UNIT_FAIL;\n  constructor(public payload: { orgUnitId: string; error: any }) {\n    super(ORG_UNIT_ENTITIES, payload.orgUnitId, payload.error);\n  }\n}\n\nexport class LoadOrgUnitSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_ORG_UNIT_SUCCESS;\n\n  constructor(public payload: B2BUnit | B2BUnit[]) {\n    super(\n      ORG_UNIT_ENTITIES,\n      Array.isArray(payload)\n        ? payload.map((orgUnit) => orgUnit?.uid)\n        : payload?.uid\n    );\n  }\n}\n\nexport class LoadOrgUnitNodes extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_UNIT_NODES;\n  constructor(\n    public payload: {\n      userId: string;\n    }\n  ) {\n    super(ORG_UNIT_NODE_LIST, ORG_UNIT_NODES);\n  }\n}\n\nexport class LoadOrgUnitNodesFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_UNIT_NODES_FAIL;\n  constructor(public payload: any) {\n    super(ORG_UNIT_NODE_LIST, ORG_UNIT_NODES, payload.error);\n  }\n}\n\nexport class LoadOrgUnitNodesSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_UNIT_NODES_SUCCESS;\n  constructor(public payload: B2BUnitNode[]) {\n    super(ORG_UNIT_NODE_LIST, ORG_UNIT_NODES);\n  }\n}\n\nexport class CreateUnit extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_ORG_UNIT;\n  constructor(public payload: { userId: string; unit: B2BUnit }) {\n    super(ORG_UNIT_ENTITIES, payload.unit.uid);\n  }\n}\n\nexport class CreateUnitFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_ORG_UNIT_FAIL;\n  constructor(public payload: { unitCode: string; error: any }) {\n    super(ORG_UNIT_ENTITIES, payload.unitCode, payload.error);\n  }\n}\n\nexport class CreateUnitSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CREATE_ORG_UNIT_SUCCESS;\n  constructor(public payload: B2BUnit) {\n    super(ORG_UNIT_ENTITIES, payload.uid, payload);\n  }\n}\n\nexport class UpdateUnit extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_ORG_UNIT;\n  constructor(\n    public payload: { userId: string; unitCode: string; unit: B2BUnit }\n  ) {\n    super(ORG_UNIT_ENTITIES, payload.unit.uid);\n  }\n}\n\nexport class UpdateUnitFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_ORG_UNIT_FAIL;\n  constructor(public payload: { unitCode: string; error: any }) {\n    super(ORG_UNIT_ENTITIES, payload.unitCode, payload.error);\n  }\n}\n\nexport class UpdateUnitSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_ORG_UNIT_SUCCESS;\n  constructor(public payload: B2BUnit) {\n    super(ORG_UNIT_ENTITIES, payload.uid, payload);\n  }\n}\n\nexport class LoadTree extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_UNIT_TREE;\n  constructor(public payload: { userId: string }) {\n    super(ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE);\n  }\n}\n\nexport class LoadTreeFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_UNIT_TREE_FAIL;\n  constructor(public payload: { error: any }) {\n    super(ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE, payload.error);\n  }\n}\n\nexport class LoadTreeSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_UNIT_TREE_SUCCESS;\n\n  constructor(public payload: B2BUnitNode) {\n    super(ORG_UNIT_TREE_ENTITY, ORG_UNIT_TREE);\n  }\n}\n\nexport class LoadApprovalProcesses extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_APPROVAL_PROCESSES;\n  constructor(public payload: { userId: string }) {\n    super(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES);\n  }\n}\n\nexport class LoadApprovalProcessesFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_APPROVAL_PROCESSES_FAIL;\n  constructor(public payload: { error: any }) {\n    super(\n      ORG_UNIT_APPROVAL_PROCESSES_ENTITIES,\n      ORG_UNIT_APPROVAL_PROCESSES,\n      payload.error\n    );\n  }\n}\n\nexport class LoadApprovalProcessesSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_APPROVAL_PROCESSES_SUCCESS;\n\n  constructor(public payload: B2BApprovalProcess[]) {\n    super(ORG_UNIT_APPROVAL_PROCESSES_ENTITIES, ORG_UNIT_APPROVAL_PROCESSES);\n  }\n}\n\nexport class LoadAssignedUsers extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_ASSIGNED_USERS;\n  constructor(\n    public payload: {\n      userId: string;\n      orgUnitId: string;\n      roleId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      ORG_UNIT_ASSIGNED_USERS,\n      StateUtils.serializeSearchConfig(\n        payload.params,\n        `${payload.orgUnitId},${payload.roleId}`\n      )\n    );\n  }\n}\n\nexport class ClearAssignedUsers extends StateUtils.EntityRemoveAction {\n  readonly type = CLEAR_ASSIGNED_USERS;\n  constructor(\n    public payload: {\n      orgUnitId: string;\n      roleId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      ORG_UNIT_ASSIGNED_USERS,\n      StateUtils.serializeSearchConfig(\n        payload.params,\n        `${payload.orgUnitId},${payload.roleId}`\n      )\n    );\n  }\n}\n\nexport class LoadAssignedUsersFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_ASSIGNED_USERS_FAIL;\n  constructor(\n    public payload: {\n      orgUnitId: string;\n      roleId: string;\n      params: SearchConfig;\n      error: any;\n    }\n  ) {\n    super(\n      ORG_UNIT_ASSIGNED_USERS,\n      StateUtils.serializeSearchConfig(\n        payload.params,\n        `${payload.orgUnitId},${payload.roleId}`\n      ),\n      payload.error\n    );\n  }\n}\n\nexport class LoadAssignedUsersSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_ASSIGNED_USERS_SUCCESS;\n  constructor(\n    public payload: {\n      orgUnitId: string;\n      roleId: string;\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      ORG_UNIT_ASSIGNED_USERS,\n      StateUtils.serializeSearchConfig(\n        payload.params,\n        `${payload.orgUnitId},${payload.roleId}`\n      )\n    );\n  }\n}\n\nexport class AssignRole extends StateUtils.EntityLoadAction {\n  readonly type = ASSIGN_ROLE;\n  constructor(\n    public payload: {\n      userId: string;\n      orgCustomerId: string;\n      roleId: string;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId);\n  }\n}\n\nexport class AssignRoleFail extends StateUtils.EntityFailAction {\n  readonly type = ASSIGN_ROLE_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      error: any;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n  }\n}\n\nexport class AssignRoleSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = ASSIGN_ROLE_SUCCESS;\n  constructor(\n    public payload: { uid: string; roleId: string; selected: boolean }\n  ) {\n    super(B2B_USER_ENTITIES, payload.uid, payload);\n  }\n}\n\nexport class UnassignRole extends StateUtils.EntityLoadAction {\n  readonly type = UNASSIGN_ROLE;\n  constructor(\n    public payload: {\n      userId: string;\n      orgCustomerId: string;\n      roleId: string;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId);\n  }\n}\n\nexport class UnassignRoleFail extends StateUtils.EntityFailAction {\n  readonly type = UNASSIGN_ROLE_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      error: any;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n  }\n}\n\nexport class UnassignRoleSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UNASSIGN_ROLE_SUCCESS;\n  constructor(\n    public payload: { uid: string; roleId: string; selected: boolean }\n  ) {\n    super(B2B_USER_ENTITIES, payload.uid, payload);\n  }\n}\n\nexport class AssignApprover extends StateUtils.EntityLoadAction {\n  readonly type = ASSIGN_APPROVER;\n  constructor(\n    public payload: {\n      userId: string;\n      orgUnitId: string;\n      orgCustomerId: string;\n      roleId: string;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId);\n  }\n}\n\nexport class AssignApproverFail extends StateUtils.EntityFailAction {\n  readonly type = ASSIGN_APPROVER_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      error: any;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n  }\n}\n\nexport class AssignApproverSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = ASSIGN_APPROVER_SUCCESS;\n  constructor(\n    public payload: { uid: string; roleId: string; selected: boolean }\n  ) {\n    super(B2B_USER_ENTITIES, payload.uid, payload);\n  }\n}\n\nexport class UnassignApprover extends StateUtils.EntityLoadAction {\n  readonly type = UNASSIGN_APPROVER;\n  constructor(\n    public payload: {\n      userId: string;\n      orgUnitId: string;\n      orgCustomerId: string;\n      roleId: string;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId);\n  }\n}\n\nexport class UnassignApproverFail extends StateUtils.EntityFailAction {\n  readonly type = UNASSIGN_APPROVER_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      error: any;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n  }\n}\n\nexport class UnassignApproverSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UNASSIGN_APPROVER_SUCCESS;\n  constructor(\n    public payload: { uid: string; roleId: string; selected: boolean }\n  ) {\n    super(B2B_USER_ENTITIES, payload.uid, payload);\n  }\n}\n\nexport class CreateAddress extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_ADDRESS;\n  constructor(\n    public payload: { userId: string; orgUnitId: string; address: Address }\n  ) {\n    super(ADDRESS_ENTITIES, payload.address.id);\n  }\n}\n\nexport class CreateAddressFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_ADDRESS_FAIL;\n  constructor(public payload: { addressId: string; error: any }) {\n    super(ADDRESS_ENTITIES, payload.addressId, payload.error);\n  }\n}\n\nexport class CreateAddressSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CREATE_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(ADDRESS_ENTITIES, payload.id, payload);\n  }\n}\n\nexport class UpdateAddress extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_ADDRESS;\n  constructor(\n    public payload: {\n      userId: string;\n      orgUnitId: string;\n      addressId: string;\n      address: Address;\n    }\n  ) {\n    super(ADDRESS_ENTITIES, payload.address.id);\n  }\n}\n\nexport class UpdateAddressFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_ADDRESS_FAIL;\n  constructor(public payload: { addressId: string; error: any }) {\n    super(ADDRESS_ENTITIES, payload.addressId, payload.error);\n  }\n}\n\nexport class UpdateAddressSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(ADDRESS_ENTITIES, payload.id, payload);\n  }\n}\n\nexport class DeleteAddress extends StateUtils.EntityLoadAction {\n  readonly type = DELETE_ADDRESS;\n  constructor(\n    public payload: {\n      userId: string;\n      orgUnitId: string;\n      addressId: string;\n    }\n  ) {\n    super(ADDRESS_ENTITIES, payload.addressId);\n  }\n}\n\nexport class DeleteAddressFail extends StateUtils.EntityFailAction {\n  readonly type = DELETE_ADDRESS_FAIL;\n  constructor(public payload: { addressId: string; error: any }) {\n    super(ADDRESS_ENTITIES, payload.addressId, payload.error);\n  }\n}\n\nexport class DeleteAddressSuccess extends StateUtils.EntityRemoveAction {\n  readonly type = DELETE_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(ADDRESS_ENTITIES, payload.id);\n  }\n}\n\nexport class LoadAddressSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_ADDRESS_SUCCESS;\n  constructor(public payload: Address | Address[]) {\n    super(\n      ADDRESS_ENTITIES,\n      Array.isArray(payload)\n        ? payload.map((address) => address?.id)\n        : payload?.id\n    );\n  }\n}\n\nexport class LoadAddresses extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_ADDRESSES;\n  constructor(public payload: { userId: string; orgUnitId: string }) {\n    super(ADDRESS_LIST, payload.orgUnitId);\n  }\n}\n\nexport class LoadAddressesFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_ADDRESSES_FAIL;\n  constructor(public payload: { orgUnitId: string; error: any }) {\n    super(ADDRESS_LIST, payload.orgUnitId, payload.error);\n  }\n}\n\nexport class LoadAddressesSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_ADDRESSES_SUCCESS;\n  constructor(\n    public payload: {\n      page: ListModel;\n      orgUnitId: string;\n    }\n  ) {\n    super(ADDRESS_LIST, payload.orgUnitId);\n  }\n}\n\nexport type OrgUnitAction =\n  | LoadOrgUnitNodes\n  | LoadOrgUnitNodesFail\n  | LoadOrgUnitNodesSuccess\n  | LoadOrgUnit\n  | LoadOrgUnitFail\n  | LoadOrgUnitSuccess\n  | CreateUnit\n  | CreateUnitFail\n  | CreateUnitSuccess\n  | UpdateUnit\n  | UpdateUnitFail\n  | UpdateUnitSuccess\n  | LoadTree\n  | LoadTreeSuccess\n  | LoadTreeFail\n  | LoadApprovalProcesses\n  | LoadApprovalProcessesSuccess\n  | LoadApprovalProcessesFail\n  | AssignRole\n  | AssignRoleSuccess\n  | AssignRoleFail\n  | UnassignRole\n  | UnassignRoleSuccess\n  | UnassignRoleFail\n  | AssignApprover\n  | AssignApproverSuccess\n  | AssignApproverFail\n  | UnassignApprover\n  | UnassignApproverSuccess\n  | UnassignApproverFail\n  | CreateAddress\n  | CreateAddressSuccess\n  | CreateAddressFail\n  | UpdateAddress\n  | UpdateAddressSuccess\n  | UpdateAddressFail\n  | DeleteAddress\n  | DeleteAddressSuccess\n  | DeleteAddressFail\n  | LoadAddresses\n  | LoadAddressesFail\n  | LoadAddressesSuccess\n  | LoadAddressSuccess\n  | ClearAssignedUsers;\n","import { ListModel, SearchConfig, StateUtils } from '@spartacus/core';\nimport { UserGroup } from '../../model/user-group.model';\nimport {\n  B2B_USER_ENTITIES,\n  PERMISSION_ENTITIES,\n  USER_GROUP_AVAILABLE_CUSTOMERS,\n  USER_GROUP_ENTITIES,\n  USER_GROUP_LIST,\n  USER_GROUP_PERMISSIONS,\n} from '../organization-state';\n\nexport const LOAD_USER_GROUP = '[UserGroup] Load UserGroup Data';\nexport const LOAD_USER_GROUP_FAIL = '[UserGroup] Load UserGroup Data Fail';\nexport const LOAD_USER_GROUP_SUCCESS =\n  '[UserGroup] Load UserGroup Data Success';\n\nexport const LOAD_USER_GROUPS = '[UserGroup] Load UserGroups';\nexport const LOAD_USER_GROUPS_FAIL = '[UserGroup] Load UserGroups Fail';\nexport const LOAD_USER_GROUPS_SUCCESS = '[UserGroup] Load UserGroups Success';\n\nexport const LOAD_USER_GROUP_PERMISSIONS = '[UserGroup] Load Permissions Data';\nexport const LOAD_USER_GROUP_PERMISSIONS_FAIL =\n  '[UserGroup] Load Permissions Data Fail';\nexport const LOAD_USER_GROUP_PERMISSIONS_SUCCESS =\n  '[UserGroup] Load Permissions Data Success';\n\nexport const LOAD_USER_GROUP_AVAILABLE_CUSTOMERS =\n  '[UserGroup] Load Customers Data';\nexport const LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_FAIL =\n  '[UserGroup] Load Customers Data Fail';\nexport const LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS =\n  '[UserGroup] Load Customers Data Success';\n\nexport const CREATE_USER_GROUP = '[UserGroup] Create UserGroup';\nexport const CREATE_USER_GROUP_FAIL = '[UserGroup] Create UserGroup Fail';\nexport const CREATE_USER_GROUP_SUCCESS = '[UserGroup] Create UserGroup Success';\n\nexport const USER_GROUP_ASSIGN_MEMBER = '[UserGroup] Assign Member';\nexport const USER_GROUP_ASSIGN_MEMBER_FAIL = '[UserGroup] Assign Member Fail';\nexport const USER_GROUP_ASSIGN_MEMBER_SUCCESS =\n  '[UserGroup] Assign Member Success';\n\nexport const USER_GROUP_ASSIGN_PERMISSION = '[UserGroup] Assign Permissions';\nexport const USER_GROUP_ASSIGN_PERMISSION_FAIL =\n  '[UserGroup] Assign Permissions Fail';\nexport const USER_GROUP_ASSIGN_PERMISSION_SUCCESS =\n  '[UserGroup] Assign Permissions Success';\n\nexport const UPDATE_USER_GROUP = '[UserGroup] Update UserGroup';\nexport const UPDATE_USER_GROUP_FAIL = '[UserGroup] Update UserGroup Fail';\nexport const UPDATE_USER_GROUP_SUCCESS = '[UserGroup] Update UserGroup Success';\n\nexport const DELETE_USER_GROUP = '[UserGroup] Delete UserGroup';\nexport const DELETE_USER_GROUP_FAIL = '[UserGroup] Delete UserGroup Fail';\nexport const DELETE_USER_GROUP_SUCCESS = '[UserGroup] Delete UserGroup Success';\n\nexport const USER_GROUP_UNASSIGN_ALL_MEMBERS = '[UserGroup] Unassign Members';\nexport const USER_GROUP_UNASSIGN_ALL_MEMBERS_FAIL =\n  '[UserGroup] Unassign Members Fail';\nexport const USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS =\n  '[UserGroup] Unassign Members Success';\n\nexport const USER_GROUP_UNASSIGN_MEMBER = '[UserGroup] Unassign Member';\nexport const USER_GROUP_UNASSIGN_MEMBER_FAIL =\n  '[UserGroup] Unassign Member Fail';\nexport const USER_GROUP_UNASSIGN_MEMBER_SUCCESS =\n  '[UserGroup] Unassign Member Success';\n\nexport const USER_GROUP_UNASSIGN_PERMISSION = '[UserGroup] Unassign Permission';\nexport const USER_GROUP_UNASSIGN_PERMISSION_FAIL =\n  '[UserGroup] Unassign Permission Fail';\nexport const USER_GROUP_UNASSIGN_PERMISSION_SUCCESS =\n  '[UserGroup] Unassign Permission Success';\n\nexport class LoadUserGroup extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_USER_GROUP;\n  constructor(public payload: { userId: string; userGroupId: string }) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId);\n  }\n}\n\nexport class LoadUserGroupFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_USER_GROUP_FAIL;\n  constructor(public payload: { userGroupId: string; error: any }) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n  }\n}\n\nexport class LoadUserGroupSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_USER_GROUP_SUCCESS;\n  constructor(public payload: UserGroup | UserGroup[]) {\n    super(\n      USER_GROUP_ENTITIES,\n      Array.isArray(payload)\n        ? payload.map((userGroup) => userGroup?.uid)\n        : payload?.uid\n    );\n  }\n}\n\nexport class LoadUserGroups extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_USER_GROUPS;\n  constructor(\n    public payload: {\n      userId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(USER_GROUP_LIST, StateUtils.serializeSearchConfig(payload.params));\n  }\n}\n\nexport class LoadUserGroupsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_USER_GROUPS_FAIL;\n  constructor(public payload: { params: SearchConfig; error: any }) {\n    super(\n      USER_GROUP_LIST,\n      StateUtils.serializeSearchConfig(payload.params),\n      payload.error\n    );\n  }\n}\n\nexport class LoadUserGroupsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_USER_GROUPS_SUCCESS;\n  constructor(\n    public payload: {\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(USER_GROUP_LIST, StateUtils.serializeSearchConfig(payload.params));\n  }\n}\n\nexport class LoadPermissions extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_USER_GROUP_PERMISSIONS;\n  constructor(\n    public payload: {\n      userId: string;\n      userGroupId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      USER_GROUP_PERMISSIONS,\n      StateUtils.serializeSearchConfig(payload.params, payload.userGroupId)\n    );\n  }\n}\n\nexport class LoadPermissionsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_USER_GROUP_PERMISSIONS_FAIL;\n  constructor(\n    public payload: {\n      userGroupId: string;\n      params: SearchConfig;\n      error: any;\n    }\n  ) {\n    super(\n      USER_GROUP_PERMISSIONS,\n      StateUtils.serializeSearchConfig(payload.params, payload.userGroupId),\n      payload.error\n    );\n  }\n}\n\nexport class LoadPermissionsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_USER_GROUP_PERMISSIONS_SUCCESS;\n  constructor(\n    public payload: {\n      userGroupId: string;\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      USER_GROUP_PERMISSIONS,\n      StateUtils.serializeSearchConfig(payload.params, payload.userGroupId)\n    );\n  }\n}\n\nexport class LoadAvailableOrgCustomers extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_USER_GROUP_AVAILABLE_CUSTOMERS;\n  constructor(\n    public payload: {\n      userId: string;\n      userGroupId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      USER_GROUP_AVAILABLE_CUSTOMERS,\n      StateUtils.serializeSearchConfig(payload.params, payload.userGroupId)\n    );\n  }\n}\n\nexport class LoadAvailableOrgCustomersFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_FAIL;\n  constructor(\n    public payload: {\n      userGroupId: string;\n      params: SearchConfig;\n      error: any;\n    }\n  ) {\n    super(\n      USER_GROUP_AVAILABLE_CUSTOMERS,\n      StateUtils.serializeSearchConfig(payload.params, payload.userGroupId),\n      payload.error\n    );\n  }\n}\n\nexport class LoadAvailableOrgCustomersSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS;\n  constructor(\n    public payload: {\n      userGroupId: string;\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      USER_GROUP_AVAILABLE_CUSTOMERS,\n      StateUtils.serializeSearchConfig(payload.params, payload.userGroupId)\n    );\n  }\n}\n\nexport class CreateUserGroup extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_USER_GROUP;\n  constructor(public payload: { userId: string; userGroup: UserGroup }) {\n    super(USER_GROUP_ENTITIES, payload.userGroup.uid);\n  }\n}\n\nexport class CreateUserGroupFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_USER_GROUP_FAIL;\n  constructor(public payload: { userGroupId: string; error: any }) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n  }\n}\n\nexport class CreateUserGroupSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CREATE_USER_GROUP_SUCCESS;\n  constructor(public payload: UserGroup) {\n    super(USER_GROUP_ENTITIES, payload.uid, payload);\n  }\n}\n\nexport class AssignMember extends StateUtils.EntityLoadAction {\n  readonly type = USER_GROUP_ASSIGN_MEMBER;\n  constructor(\n    public payload: {\n      userId: string;\n      userGroupId: string;\n      customerId: string;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.customerId);\n  }\n}\n\nexport class AssignMemberFail extends StateUtils.EntityFailAction {\n  readonly type = USER_GROUP_ASSIGN_MEMBER_FAIL;\n  constructor(\n    public payload: {\n      userGroupId: string;\n      customerId: string;\n      error: any;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.customerId, payload.error);\n  }\n}\n\nexport class AssignMemberSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = USER_GROUP_ASSIGN_MEMBER_SUCCESS;\n  constructor(public payload: { customerId: string; selected: boolean }) {\n    super(B2B_USER_ENTITIES, payload.customerId, payload);\n  }\n}\n\nexport class AssignPermission extends StateUtils.EntityLoadAction {\n  readonly type = USER_GROUP_ASSIGN_PERMISSION;\n  constructor(\n    public payload: {\n      userId: string;\n      userGroupId: string;\n      permissionUid: string;\n    }\n  ) {\n    super(PERMISSION_ENTITIES, payload.permissionUid);\n  }\n}\n\nexport class AssignPermissionFail extends StateUtils.EntityFailAction {\n  readonly type = USER_GROUP_ASSIGN_PERMISSION_FAIL;\n  constructor(\n    public payload: {\n      userGroupId: string;\n      permissionUid: string;\n      error: any;\n    }\n  ) {\n    super(PERMISSION_ENTITIES, payload.permissionUid, payload.error);\n  }\n}\n\nexport class AssignPermissionSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = USER_GROUP_ASSIGN_PERMISSION_SUCCESS;\n  constructor(public payload: { permissionUid: string; selected: boolean }) {\n    super(PERMISSION_ENTITIES, payload.permissionUid, payload);\n  }\n}\n\nexport class UpdateUserGroup extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_USER_GROUP;\n  constructor(\n    public payload: {\n      userId: string;\n      userGroupId: string;\n      userGroup: UserGroup;\n    }\n  ) {\n    super(USER_GROUP_ENTITIES, payload.userGroup.uid);\n  }\n}\n\nexport class UpdateUserGroupFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_USER_GROUP_FAIL;\n  constructor(public payload: { userGroupId: string; error: any }) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n  }\n}\n\nexport class UpdateUserGroupSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_USER_GROUP_SUCCESS;\n  constructor(public payload: UserGroup) {\n    super(USER_GROUP_ENTITIES, payload.uid, payload);\n  }\n}\n\nexport class DeleteUserGroup extends StateUtils.EntityLoadAction {\n  readonly type = DELETE_USER_GROUP;\n  constructor(\n    public payload: {\n      userId: string;\n      userGroupId: string;\n    }\n  ) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId);\n  }\n}\n\nexport class DeleteUserGroupFail extends StateUtils.EntityFailAction {\n  readonly type = DELETE_USER_GROUP_FAIL;\n  constructor(public payload: { userGroupId: string; error: any }) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n  }\n}\n\nexport class DeleteUserGroupSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = DELETE_USER_GROUP_SUCCESS;\n  constructor(public payload: UserGroup) {\n    super(USER_GROUP_ENTITIES, payload.uid, payload);\n  }\n}\n\nexport class UnassignMember extends StateUtils.EntityLoadAction {\n  readonly type = USER_GROUP_UNASSIGN_MEMBER;\n  constructor(\n    public payload: {\n      userId: string;\n      userGroupId: string;\n      customerId: string;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.customerId);\n  }\n}\n\nexport class UnassignMemberFail extends StateUtils.EntityFailAction {\n  readonly type = USER_GROUP_UNASSIGN_MEMBER_FAIL;\n  constructor(\n    public payload: {\n      userGroupId: string;\n      customerId: string;\n      error: any;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.customerId, payload.error);\n  }\n}\n\nexport class UnassignMemberSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = USER_GROUP_UNASSIGN_MEMBER_SUCCESS;\n  constructor(public payload: { customerId: string; selected: boolean }) {\n    super(B2B_USER_ENTITIES, payload.customerId, payload);\n  }\n}\n\nexport class UnassignAllMembers extends StateUtils.EntityLoadAction {\n  readonly type = USER_GROUP_UNASSIGN_ALL_MEMBERS;\n  constructor(\n    public payload: {\n      userId: string;\n      userGroupId: string;\n    }\n  ) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId);\n  }\n}\n\nexport class UnassignAllMembersFail extends StateUtils.EntityFailAction {\n  readonly type = USER_GROUP_UNASSIGN_ALL_MEMBERS_FAIL;\n  constructor(public payload: { userGroupId: string; error: any }) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n  }\n}\n\nexport class UnassignAllMembersSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS;\n  constructor(public payload: UserGroup) {\n    super(USER_GROUP_ENTITIES, payload.uid, payload);\n  }\n}\n\nexport class UnassignPermission extends StateUtils.EntityLoadAction {\n  readonly type = USER_GROUP_UNASSIGN_PERMISSION;\n  constructor(\n    public payload: {\n      userId: string;\n      userGroupId: string;\n      permissionUid: string;\n    }\n  ) {\n    super(PERMISSION_ENTITIES, payload.permissionUid);\n  }\n}\n\nexport class UnassignPermissionFail extends StateUtils.EntityFailAction {\n  readonly type = USER_GROUP_UNASSIGN_PERMISSION_FAIL;\n  constructor(\n    public payload: {\n      userGroupId: string;\n      permissionUid: string;\n      error: any;\n    }\n  ) {\n    super(PERMISSION_ENTITIES, payload.permissionUid, payload.error);\n  }\n}\n\nexport class UnassignPermissionSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = USER_GROUP_UNASSIGN_PERMISSION_SUCCESS;\n  constructor(public payload: { permissionUid: string; selected: boolean }) {\n    super(PERMISSION_ENTITIES, payload.permissionUid, payload);\n  }\n}\n\nexport type UserGroupAction =\n  | LoadUserGroup\n  | LoadUserGroupFail\n  | LoadUserGroupSuccess\n  | LoadUserGroups\n  | LoadUserGroupsFail\n  | LoadUserGroupsSuccess\n  | LoadPermissions\n  | LoadPermissionsFail\n  | LoadPermissionsSuccess\n  | LoadAvailableOrgCustomers\n  | LoadAvailableOrgCustomersFail\n  | LoadAvailableOrgCustomersSuccess\n  | CreateUserGroup\n  | CreateUserGroupFail\n  | CreateUserGroupSuccess\n  | AssignMember\n  | AssignMemberFail\n  | AssignMemberSuccess\n  | AssignPermission\n  | AssignPermissionFail\n  | AssignPermissionSuccess\n  | UpdateUserGroup\n  | UpdateUserGroupFail\n  | UpdateUserGroupSuccess\n  | DeleteUserGroup\n  | DeleteUserGroupFail\n  | DeleteUserGroupSuccess\n  | UnassignMember\n  | UnassignMemberFail\n  | UnassignMemberSuccess\n  | UnassignAllMembers\n  | UnassignAllMembersFail\n  | UnassignAllMembersSuccess\n  | UnassignPermission\n  | UnassignPermissionFail\n  | UnassignPermissionSuccess;\n","import {\n  ListModel,\n  SearchConfig,\n  StateUtils,\n  OrderApprovalPermissionType,\n} from '@spartacus/core';\nimport { Permission } from '../../model/permission.model';\nimport {\n  PERMISSION_ENTITIES,\n  PERMISSION_LIST,\n  PERMISSION_TYPES,\n  PERMISSION_TYPES_LIST,\n} from '../organization-state';\n\nexport const LOAD_PERMISSION = '[Permission] Load Permission Data';\nexport const LOAD_PERMISSION_FAIL = '[Permission] Load Permission Data Fail';\nexport const LOAD_PERMISSION_SUCCESS =\n  '[Permission] Load Permission Data Success';\n\nexport const LOAD_PERMISSIONS = '[Permission] Load Permissions';\nexport const LOAD_PERMISSIONS_FAIL = '[Permission] Load Permissions Fail';\nexport const LOAD_PERMISSIONS_SUCCESS = '[Permission] Load Permissions Success';\n\nexport const CREATE_PERMISSION = '[Permission] Create Permission';\nexport const CREATE_PERMISSION_FAIL = '[Permission] Create Permission Fail';\nexport const CREATE_PERMISSION_SUCCESS =\n  '[Permission] Create Permission Success';\n\nexport const UPDATE_PERMISSION = '[Permission] Update Permission';\nexport const UPDATE_PERMISSION_FAIL = '[Permission] Update Permission Fail';\nexport const UPDATE_PERMISSION_SUCCESS =\n  '[Permission] Update Permission Success';\n\nexport const LOAD_PERMISSION_TYPES = '[Permission Types] Load Permission Types';\nexport const LOAD_PERMISSION_TYPES_FAIL =\n  '[Permission Types] Load Permission Types Fail';\nexport const LOAD_PERMISSION_TYPES_SUCCESS =\n  '[Permission Types] Load Permission Types Success';\n\nexport class LoadPermission extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_PERMISSION;\n  constructor(public payload: { userId: string; permissionCode: string }) {\n    super(PERMISSION_ENTITIES, payload.permissionCode);\n  }\n}\n\nexport class LoadPermissionFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_PERMISSION_FAIL;\n  constructor(public payload: { permissionCode: string; error: any }) {\n    super(PERMISSION_ENTITIES, payload.permissionCode, payload.error);\n  }\n}\n\nexport class LoadPermissionSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_PERMISSION_SUCCESS;\n  constructor(public payload: Permission | Permission[]) {\n    super(\n      PERMISSION_ENTITIES,\n      Array.isArray(payload)\n        ? payload.map((permission) => permission?.code)\n        : payload?.code\n    );\n  }\n}\n\nexport class LoadPermissions extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_PERMISSIONS;\n  constructor(\n    public payload: {\n      userId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(PERMISSION_LIST, StateUtils.serializeSearchConfig(payload.params));\n  }\n}\n\nexport class LoadPermissionsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_PERMISSIONS_FAIL;\n  constructor(public payload: { params: SearchConfig; error: any }) {\n    super(\n      PERMISSION_LIST,\n      StateUtils.serializeSearchConfig(payload.params),\n      payload.error\n    );\n  }\n}\n\nexport class LoadPermissionsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_PERMISSIONS_SUCCESS;\n  constructor(\n    public payload: {\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(PERMISSION_LIST, StateUtils.serializeSearchConfig(payload.params));\n  }\n}\n\nexport class CreatePermission extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_PERMISSION;\n  constructor(public payload: { userId: string; permission: Permission }) {\n    super(PERMISSION_ENTITIES, payload.permission.code);\n  }\n}\n\nexport class CreatePermissionFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_PERMISSION_FAIL;\n  constructor(public payload: { permissionCode: string; error: any }) {\n    super(PERMISSION_ENTITIES, payload.permissionCode, payload.error);\n  }\n}\n\nexport class CreatePermissionSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CREATE_PERMISSION_SUCCESS;\n  constructor(public payload: Permission) {\n    super(PERMISSION_ENTITIES, payload.code, payload);\n  }\n}\n\nexport class UpdatePermission extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_PERMISSION;\n  constructor(\n    public payload: {\n      userId: string;\n      permissionCode: string;\n      permission: Permission;\n    }\n  ) {\n    super(PERMISSION_ENTITIES, payload.permission.code);\n  }\n}\n\nexport class UpdatePermissionFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_PERMISSION_FAIL;\n  constructor(public payload: { permissionCode: string; error: any }) {\n    super(PERMISSION_ENTITIES, payload.permissionCode, payload.error);\n  }\n}\n\nexport class UpdatePermissionSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_PERMISSION_SUCCESS;\n  constructor(public payload: Permission) {\n    super(PERMISSION_ENTITIES, payload.code, payload);\n  }\n}\n\nexport class LoadPermissionTypes extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_PERMISSION_TYPES;\n  constructor() {\n    super(PERMISSION_TYPES_LIST, PERMISSION_TYPES);\n  }\n}\n\nexport class LoadPermissionTypesFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_PERMISSION_TYPES_FAIL;\n  constructor(public payload: any) {\n    super(PERMISSION_TYPES_LIST, PERMISSION_TYPES, payload.error);\n  }\n}\n\nexport class LoadPermissionTypesSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_PERMISSION_TYPES_SUCCESS;\n  constructor(public payload: OrderApprovalPermissionType[]) {\n    super(PERMISSION_TYPES_LIST, PERMISSION_TYPES);\n  }\n}\n\nexport type PermissionAction =\n  | LoadPermission\n  | LoadPermissionFail\n  | LoadPermissionSuccess\n  | LoadPermissions\n  | LoadPermissionsFail\n  | LoadPermissionsSuccess\n  | CreatePermission\n  | CreatePermissionFail\n  | CreatePermissionSuccess\n  | UpdatePermission\n  | UpdatePermissionFail\n  | UpdatePermissionSuccess\n  | LoadPermissionTypes\n  | LoadPermissionTypesFail\n  | LoadPermissionTypesSuccess;\n","import {\n  CostCenter,\n  ListModel,\n  SearchConfig,\n  StateUtils,\n} from '@spartacus/core';\nimport {\n  BUDGET_ENTITIES,\n  COST_CENTER_ASSIGNED_BUDGETS,\n  COST_CENTER_ENTITIES,\n  COST_CENTER_LIST,\n} from '../organization-state';\n\nexport const LOAD_COST_CENTER = '[CostCenter] Load CostCenter Data';\nexport const LOAD_COST_CENTER_FAIL = '[CostCenter] Load CostCenter Data Fail';\nexport const LOAD_COST_CENTER_SUCCESS =\n  '[CostCenter] Load CostCenter Data Success';\n\nexport const LOAD_COST_CENTERS = '[CostCenter] Load CostCenters';\nexport const LOAD_COST_CENTERS_FAIL = '[CostCenter] Load CostCenters Fail';\nexport const LOAD_COST_CENTERS_SUCCESS =\n  '[CostCenter] Load CostCenters Success';\n\nexport const CREATE_COST_CENTER = '[CostCenter] Create CostCenter';\nexport const CREATE_COST_CENTER_FAIL = '[CostCenter] Create CostCenter Fail';\nexport const CREATE_COST_CENTER_SUCCESS =\n  '[CostCenter] Create CostCenter Success';\n\nexport const UPDATE_COST_CENTER = '[CostCenter] Update CostCenter';\nexport const UPDATE_COST_CENTER_FAIL = '[CostCenter] Update CostCenter Fail';\nexport const UPDATE_COST_CENTER_SUCCESS =\n  '[CostCenter] Update CostCenter Success';\n\nexport const LOAD_ASSIGNED_BUDGETS = '[CostCenter] Load Budgets';\nexport const LOAD_ASSIGNED_BUDGETS_SUCCESS =\n  '[CostCenter] Load Budgets success';\nexport const LOAD_ASSIGNED_BUDGETS_FAIL = '[CostCenter] Load Budgets fail';\n\nexport const ASSIGN_BUDGET = '[CostCenter] Assign Budget';\nexport const ASSIGN_BUDGET_SUCCESS = '[CostCenter] Assign Budget success';\nexport const ASSIGN_BUDGET_FAIL = '[CostCenter] Assign Budget fail';\n\nexport const UNASSIGN_BUDGET = '[CostCenter] Unassign Budget';\nexport const UNASSIGN_BUDGET_SUCCESS = '[CostCenter] Unassign Budget success';\nexport const UNASSIGN_BUDGET_FAIL = '[CostCenter] Unassign Budget fail';\n\nexport class LoadCostCenter extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_COST_CENTER;\n  constructor(public payload: { userId: string; costCenterCode: string }) {\n    super(COST_CENTER_ENTITIES, payload.costCenterCode);\n  }\n}\n\nexport class LoadCostCenterFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_COST_CENTER_FAIL;\n  constructor(public payload: { costCenterCode: string; error: any }) {\n    super(COST_CENTER_ENTITIES, payload.costCenterCode, payload.error);\n  }\n}\n\nexport class LoadCostCenterSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_COST_CENTER_SUCCESS;\n  constructor(public payload: CostCenter | CostCenter[]) {\n    super(\n      COST_CENTER_ENTITIES,\n      Array.isArray(payload)\n        ? payload.map((costCenter) => costCenter?.code)\n        : payload?.code\n    );\n  }\n}\n\nexport class LoadCostCenters extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_COST_CENTERS;\n  constructor(\n    public payload: {\n      userId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(COST_CENTER_LIST, StateUtils.serializeSearchConfig(payload.params));\n  }\n}\n\nexport class LoadCostCentersFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_COST_CENTERS_FAIL;\n  constructor(public payload: { params: SearchConfig; error: any }) {\n    super(\n      COST_CENTER_LIST,\n      StateUtils.serializeSearchConfig(payload.params),\n      payload.error\n    );\n  }\n}\n\nexport class LoadCostCentersSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_COST_CENTERS_SUCCESS;\n  constructor(\n    public payload: {\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(COST_CENTER_LIST, StateUtils.serializeSearchConfig(payload.params));\n  }\n}\n\nexport class CreateCostCenter extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_COST_CENTER;\n  constructor(public payload: { userId: string; costCenter: CostCenter }) {\n    super(COST_CENTER_ENTITIES, payload.costCenter.code);\n  }\n}\n\nexport class CreateCostCenterFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_COST_CENTER_FAIL;\n  constructor(public payload: { costCenterCode: string; error: any }) {\n    super(COST_CENTER_ENTITIES, payload.costCenterCode, payload.error);\n  }\n}\n\nexport class CreateCostCenterSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CREATE_COST_CENTER_SUCCESS;\n  constructor(public payload: CostCenter) {\n    super(COST_CENTER_ENTITIES, payload.code, payload);\n  }\n}\n\nexport class UpdateCostCenter extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_COST_CENTER;\n  constructor(\n    public payload: {\n      userId: string;\n      costCenterCode: string;\n      costCenter: CostCenter;\n    }\n  ) {\n    super(COST_CENTER_ENTITIES, payload.costCenter.code);\n  }\n}\n\nexport class UpdateCostCenterFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_COST_CENTER_FAIL;\n  constructor(public payload: { costCenterCode: string; error: any }) {\n    super(COST_CENTER_ENTITIES, payload.costCenterCode, payload.error);\n  }\n}\n\nexport class UpdateCostCenterSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_COST_CENTER_SUCCESS;\n  constructor(public payload: CostCenter) {\n    super(COST_CENTER_ENTITIES, payload.code, payload);\n  }\n}\n\nexport class LoadAssignedBudgets extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_ASSIGNED_BUDGETS;\n  constructor(\n    public payload: {\n      userId: string;\n      costCenterCode: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      COST_CENTER_ASSIGNED_BUDGETS,\n      StateUtils.serializeSearchConfig(payload.params, payload.costCenterCode)\n    );\n  }\n}\n\nexport class LoadAssignedBudgetsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_ASSIGNED_BUDGETS_FAIL;\n  constructor(\n    public payload: {\n      costCenterCode: string;\n      params: SearchConfig;\n      error: any;\n    }\n  ) {\n    super(\n      COST_CENTER_ASSIGNED_BUDGETS,\n      StateUtils.serializeSearchConfig(payload.params, payload.costCenterCode),\n      payload.error\n    );\n  }\n}\n\nexport class LoadAssignedBudgetsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_ASSIGNED_BUDGETS_SUCCESS;\n  constructor(\n    public payload: {\n      costCenterCode: string;\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      COST_CENTER_ASSIGNED_BUDGETS,\n      StateUtils.serializeSearchConfig(payload.params, payload.costCenterCode)\n    );\n  }\n}\n\nexport class AssignBudget extends StateUtils.EntityLoadAction {\n  readonly type = ASSIGN_BUDGET;\n  constructor(\n    public payload: {\n      userId: string;\n      costCenterCode: string;\n      budgetCode: string;\n    }\n  ) {\n    super(BUDGET_ENTITIES, payload.budgetCode);\n  }\n}\n\nexport class AssignBudgetFail extends StateUtils.EntityFailAction {\n  readonly type = ASSIGN_BUDGET_FAIL;\n  constructor(public payload: { budgetCode: string; error: any }) {\n    super(BUDGET_ENTITIES, payload.budgetCode, payload.error);\n  }\n}\n\nexport class AssignBudgetSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = ASSIGN_BUDGET_SUCCESS;\n  constructor(public payload: { code: string; selected: boolean }) {\n    super(BUDGET_ENTITIES, payload.code, payload);\n  }\n}\n\nexport class UnassignBudget extends StateUtils.EntityLoadAction {\n  readonly type = UNASSIGN_BUDGET;\n  constructor(\n    public payload: {\n      userId: string;\n      costCenterCode: string;\n      budgetCode: string;\n    }\n  ) {\n    super(BUDGET_ENTITIES, payload.budgetCode);\n  }\n}\n\nexport class UnassignBudgetFail extends StateUtils.EntityFailAction {\n  readonly type = UNASSIGN_BUDGET_FAIL;\n  constructor(public payload: { budgetCode: string; error: any }) {\n    super(BUDGET_ENTITIES, payload.budgetCode, payload.error);\n  }\n}\n\nexport class UnassignBudgetSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UNASSIGN_BUDGET_SUCCESS;\n  constructor(public payload: { code: string; selected: boolean }) {\n    super(BUDGET_ENTITIES, payload.code, payload);\n  }\n}\n\nexport type CostCenterAction =\n  | LoadCostCenter\n  | LoadCostCenterFail\n  | LoadCostCenterSuccess\n  | LoadCostCenters\n  | LoadCostCentersFail\n  | LoadCostCentersSuccess\n  | CreateCostCenter\n  | CreateCostCenterFail\n  | CreateCostCenterSuccess\n  | UpdateCostCenter\n  | UpdateCostCenterFail\n  | UpdateCostCenterSuccess\n  | LoadAssignedBudgets\n  | LoadAssignedBudgetsSuccess\n  | LoadAssignedBudgetsFail\n  | AssignBudget\n  | AssignBudgetFail\n  | AssignBudgetSuccess\n  | UnassignBudget\n  | UnassignBudgetFail\n  | UnassignBudgetSuccess;\n","import { B2BUser, ListModel, SearchConfig, StateUtils } from '@spartacus/core';\nimport {\n  B2B_USER_APPROVERS,\n  B2B_USER_ENTITIES,\n  B2B_USER_PERMISSIONS,\n  B2B_USER_USER_GROUPS,\n  PERMISSION_ENTITIES,\n  USER_GROUP_ENTITIES,\n  USER_LIST,\n} from '../organization-state';\n\nexport const LOAD_B2B_USER = '[B2BUser] Load B2BUser Data';\nexport const LOAD_B2B_USER_FAIL = '[B2BUser] Load B2BUser Data Fail';\nexport const LOAD_B2B_USER_SUCCESS = '[B2BUser] Load B2BUser Data Success';\n\nexport const CREATE_B2B_USER = '[B2BUser] Create B2BUser Data';\nexport const CREATE_B2B_USER_FAIL = '[B2BUser] Create B2BUser Data Fail';\nexport const CREATE_B2B_USER_SUCCESS = '[B2BUser] Create B2BUser Data Success';\n\nexport const UPDATE_B2B_USER = '[B2BUser] Update B2BUser Data';\nexport const UPDATE_B2B_USER_FAIL = '[B2BUser] Update B2BUser Data Fail';\nexport const UPDATE_B2B_USER_SUCCESS = '[B2BUser] Update B2BUser Data Success';\n\nexport const LOAD_B2B_USERS = '[B2BUser] Load B2BUsers';\nexport const LOAD_B2B_USERS_FAIL = '[B2BUser] Load B2BUsers Fail';\nexport const LOAD_B2B_USERS_SUCCESS = '[B2BUser] Load B2BUsers Success';\n\nexport const LOAD_B2B_USER_APPROVERS = '[B2BUser] Load B2BUser Approvers';\nexport const LOAD_B2B_USER_APPROVERS_FAIL =\n  '[B2BUser] Load B2BUser Approvers Fail';\nexport const LOAD_B2B_USER_APPROVERS_SUCCESS =\n  '[B2BUser] Load B2BUser Approvers Success';\n\nexport const ASSIGN_B2B_USER_APPROVER = '[B2BUser] Assign B2BUser Approver';\nexport const ASSIGN_B2B_USER_APPROVER_FAIL =\n  '[B2BUser] Assign B2BUser Approver Fail';\nexport const ASSIGN_B2B_USER_APPROVER_SUCCESS =\n  '[B2BUser] Assign B2BUser Approver Success';\n\nexport const UNASSIGN_B2B_USER_APPROVER = '[B2BUser] Unassign B2BUser Approver';\nexport const UNASSIGN_B2B_USER_APPROVER_FAIL =\n  '[B2BUser] Unassign B2BUser Approver Fail';\nexport const UNASSIGN_B2B_USER_APPROVER_SUCCESS =\n  '[B2BUser] Unassign B2BUser Approver Success';\n\nexport const LOAD_B2B_USER_PERMISSIONS = '[B2BUser] Load B2BUser Permissions';\nexport const LOAD_B2B_USER_PERMISSIONS_FAIL =\n  '[B2BUser] Load B2BUser Permissions Fail';\nexport const LOAD_B2B_USER_PERMISSIONS_SUCCESS =\n  '[B2BUser] Load B2BUser Permissions Success';\n\nexport const ASSIGN_B2B_USER_PERMISSION = '[B2BUser] Assign B2BUser Permission';\nexport const ASSIGN_B2B_USER_PERMISSION_FAIL =\n  '[B2BUser] Assign B2BUser Permission Fail';\nexport const ASSIGN_B2B_USER_PERMISSION_SUCCESS =\n  '[B2BUser] Assign B2BUser Permission Success';\n\nexport const UNASSIGN_B2B_USER_PERMISSION =\n  '[B2BUser] Unassign B2BUser Permission';\nexport const UNASSIGN_B2B_USER_PERMISSION_FAIL =\n  '[B2BUser] Unassign B2BUser Permission Fail';\nexport const UNASSIGN_B2B_USER_PERMISSION_SUCCESS =\n  '[B2BUser] Unassign B2BUser Permission Success';\n\nexport const LOAD_B2B_USER_USER_GROUPS = '[B2BUser] Load B2BUser User Groups';\nexport const LOAD_B2B_USER_USER_GROUPS_FAIL =\n  '[B2BUser] Load B2BUser User Groups Fail';\nexport const LOAD_B2B_USER_USER_GROUPS_SUCCESS =\n  '[B2BUser] Load B2BUser User Groups Success';\n\nexport const ASSIGN_B2B_USER_USER_GROUP = '[B2BUser] Assign B2BUser User Group';\nexport const ASSIGN_B2B_USER_USER_GROUP_FAIL =\n  '[B2BUser] Assign B2BUser User Group Fail';\nexport const ASSIGN_B2B_USER_USER_GROUP_SUCCESS =\n  '[B2BUser] Assign B2BUser User Group Success';\n\nexport const UNASSIGN_B2B_USER_USER_GROUP =\n  '[B2BUser] Unassign B2BUser User Group';\nexport const UNASSIGN_B2B_USER_USER_GROUP_FAIL =\n  '[B2BUser] Unassign B2BUser User Group Fail';\nexport const UNASSIGN_B2B_USER_USER_GROUP_SUCCESS =\n  '[B2BUser] Unassign B2BUser User Group Success';\n\nexport class LoadB2BUser extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_B2B_USER;\n  constructor(public payload: { userId: string; orgCustomerId: string }) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId);\n  }\n}\n\nexport class LoadB2BUserFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_B2B_USER_FAIL;\n  constructor(public payload: { orgCustomerId: string; error: any }) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n  }\n}\n\nexport class LoadB2BUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_B2B_USER_SUCCESS;\n  constructor(public payload: B2BUser | B2BUser[]) {\n    super(\n      B2B_USER_ENTITIES,\n      Array.isArray(payload)\n        ? payload.map((orgUnitCustomer) => orgUnitCustomer?.customerId)\n        : payload?.customerId\n    );\n  }\n}\n\nexport class CreateB2BUser extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_B2B_USER;\n  constructor(public payload: { userId: string; orgCustomer: B2BUser }) {\n    super(B2B_USER_ENTITIES, payload.orgCustomer.customerId);\n  }\n}\n\nexport class CreateB2BUserFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_B2B_USER_FAIL;\n  constructor(public payload: { orgCustomerId: string; error: any }) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n  }\n}\n\nexport class CreateB2BUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CREATE_B2B_USER_SUCCESS;\n  constructor(public payload: B2BUser) {\n    super(B2B_USER_ENTITIES, payload.customerId, payload);\n  }\n}\n\nexport class UpdateB2BUser extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_B2B_USER;\n  constructor(\n    public payload: {\n      userId: string;\n      orgCustomerId: string;\n      orgCustomer: B2BUser;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.orgCustomer.customerId);\n  }\n}\n\nexport class UpdateB2BUserFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_B2B_USER_FAIL;\n  constructor(public payload: { orgCustomerId: string; error: any }) {\n    super(B2B_USER_ENTITIES, payload.orgCustomerId, payload.error);\n  }\n}\n\nexport class UpdateB2BUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_B2B_USER_SUCCESS;\n  constructor(public payload: B2BUser) {\n    super(B2B_USER_ENTITIES, payload.customerId, payload);\n  }\n}\n\nexport class LoadB2BUsers extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_B2B_USERS;\n  constructor(\n    public payload: {\n      userId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(USER_LIST, StateUtils.serializeSearchConfig(payload.params));\n  }\n}\n\nexport class LoadB2BUsersFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_B2B_USERS_FAIL;\n  constructor(public payload: { params: SearchConfig; error: any }) {\n    super(\n      USER_LIST,\n      StateUtils.serializeSearchConfig(payload.params),\n      payload.error\n    );\n  }\n}\n\nexport class LoadB2BUsersSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_B2B_USERS_SUCCESS;\n  constructor(\n    public payload: {\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(USER_LIST, StateUtils.serializeSearchConfig(payload.params));\n  }\n}\n\nexport class LoadB2BUserApprovers extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_B2B_USER_APPROVERS;\n  constructor(\n    public payload: {\n      userId: string;\n      orgCustomerId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      B2B_USER_APPROVERS,\n      StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId)\n    );\n  }\n}\n\nexport class LoadB2BUserApproversFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_B2B_USER_APPROVERS_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      params: SearchConfig;\n      error: any;\n    }\n  ) {\n    super(\n      B2B_USER_APPROVERS,\n      StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId),\n      payload.error\n    );\n  }\n}\n\nexport class LoadB2BUserApproversSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_B2B_USER_APPROVERS_SUCCESS;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      B2B_USER_APPROVERS,\n      StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId)\n    );\n  }\n}\n\nexport class AssignB2BUserApprover extends StateUtils.EntityLoadAction {\n  readonly type = ASSIGN_B2B_USER_APPROVER;\n  constructor(\n    public payload: {\n      userId: string;\n      orgCustomerId: string;\n      approverId: string;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.approverId);\n  }\n}\n\nexport class AssignB2BUserApproverFail extends StateUtils.EntityFailAction {\n  readonly type = ASSIGN_B2B_USER_APPROVER_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      approverId: string;\n      error: any;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.approverId);\n  }\n}\n\nexport class AssignB2BUserApproverSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = ASSIGN_B2B_USER_APPROVER_SUCCESS;\n  constructor(\n    public payload: {\n      approverId: string;\n      selected: boolean;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.approverId, payload);\n  }\n}\n\nexport class UnassignB2BUserApprover extends StateUtils.EntityLoadAction {\n  readonly type = UNASSIGN_B2B_USER_APPROVER;\n  constructor(\n    public payload: {\n      userId: string;\n      orgCustomerId: string;\n      approverId: string;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.approverId);\n  }\n}\n\nexport class UnassignB2BUserApproverFail extends StateUtils.EntityFailAction {\n  readonly type = UNASSIGN_B2B_USER_APPROVER_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      approverId: string;\n      error: any;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.approverId);\n  }\n}\n\nexport class UnassignB2BUserApproverSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UNASSIGN_B2B_USER_APPROVER_SUCCESS;\n  constructor(\n    public payload: {\n      approverId: string;\n      selected: boolean;\n    }\n  ) {\n    super(B2B_USER_ENTITIES, payload.approverId, payload);\n  }\n}\n\nexport class LoadB2BUserPermissions extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_B2B_USER_PERMISSIONS;\n  constructor(\n    public payload: {\n      userId: string;\n      orgCustomerId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      B2B_USER_PERMISSIONS,\n      StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId)\n    );\n  }\n}\n\nexport class LoadB2BUserPermissionsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_B2B_USER_PERMISSIONS_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      params: SearchConfig;\n      error: any;\n    }\n  ) {\n    super(B2B_USER_PERMISSIONS, payload.orgCustomerId, payload.error);\n  }\n}\n\nexport class LoadB2BUserPermissionsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_B2B_USER_PERMISSIONS_SUCCESS;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      B2B_USER_PERMISSIONS,\n      StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId)\n    );\n  }\n}\n\nexport class AssignB2BUserPermission extends StateUtils.EntityLoadAction {\n  readonly type = ASSIGN_B2B_USER_PERMISSION;\n  constructor(\n    public payload: {\n      userId: string;\n      orgCustomerId: string;\n      permissionId: string;\n    }\n  ) {\n    super(PERMISSION_ENTITIES, payload.permissionId);\n  }\n}\n\nexport class AssignB2BUserPermissionFail extends StateUtils.EntityFailAction {\n  readonly type = ASSIGN_B2B_USER_PERMISSION_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      permissionId: string;\n      error: any;\n    }\n  ) {\n    super(PERMISSION_ENTITIES, payload.permissionId, payload.error);\n  }\n}\n\nexport class AssignB2BUserPermissionSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = ASSIGN_B2B_USER_PERMISSION_SUCCESS;\n  constructor(\n    public payload: {\n      permissionId: string;\n      selected: boolean;\n    }\n  ) {\n    super(PERMISSION_ENTITIES, payload.permissionId, payload);\n  }\n}\n\nexport class UnassignB2BUserPermission extends StateUtils.EntityLoadAction {\n  readonly type = UNASSIGN_B2B_USER_PERMISSION;\n  constructor(\n    public payload: {\n      userId: string;\n      orgCustomerId: string;\n      permissionId: string;\n    }\n  ) {\n    super(PERMISSION_ENTITIES, payload.permissionId);\n  }\n}\n\nexport class UnassignB2BUserPermissionFail extends StateUtils.EntityFailAction {\n  readonly type = UNASSIGN_B2B_USER_PERMISSION_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      permissionId: string;\n      error: any;\n    }\n  ) {\n    super(PERMISSION_ENTITIES, payload.permissionId, payload.error);\n  }\n}\n\nexport class UnassignB2BUserPermissionSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UNASSIGN_B2B_USER_PERMISSION_SUCCESS;\n  constructor(\n    public payload: {\n      permissionId: string;\n      selected: boolean;\n    }\n  ) {\n    super(PERMISSION_ENTITIES, payload.permissionId, payload);\n  }\n}\n\nexport class LoadB2BUserUserGroups extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_B2B_USER_USER_GROUPS;\n  constructor(\n    public payload: {\n      userId: string;\n      orgCustomerId: string;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      B2B_USER_USER_GROUPS,\n      StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId)\n    );\n  }\n}\n\nexport class LoadB2BUserUserGroupsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_B2B_USER_USER_GROUPS_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      params: SearchConfig;\n      error: any;\n    }\n  ) {\n    super(\n      B2B_USER_USER_GROUPS,\n      StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId),\n      payload.error\n    );\n  }\n}\n\nexport class LoadB2BUserUserGroupsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_B2B_USER_USER_GROUPS_SUCCESS;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      page: ListModel;\n      params: SearchConfig;\n    }\n  ) {\n    super(\n      B2B_USER_USER_GROUPS,\n      StateUtils.serializeSearchConfig(payload.params, payload.orgCustomerId)\n    );\n  }\n}\n\nexport class AssignB2BUserUserGroup extends StateUtils.EntityLoadAction {\n  readonly type = ASSIGN_B2B_USER_USER_GROUP;\n  constructor(\n    public payload: {\n      userId: string;\n      orgCustomerId: string;\n      userGroupId: string;\n    }\n  ) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId);\n  }\n}\n\nexport class AssignB2BUserUserGroupFail extends StateUtils.EntityFailAction {\n  readonly type = ASSIGN_B2B_USER_USER_GROUP_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      userGroupId: string;\n      error: any;\n    }\n  ) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n  }\n}\n\nexport class AssignB2BUserUserGroupSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = ASSIGN_B2B_USER_USER_GROUP_SUCCESS;\n  constructor(\n    public payload: {\n      uid: string;\n      selected: boolean;\n    }\n  ) {\n    super(USER_GROUP_ENTITIES, payload.uid, payload);\n  }\n}\n\nexport class UnassignB2BUserUserGroup extends StateUtils.EntityLoadAction {\n  readonly type = UNASSIGN_B2B_USER_USER_GROUP;\n  constructor(\n    public payload: {\n      userId: string;\n      orgCustomerId: string;\n      userGroupId: string;\n    }\n  ) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId);\n  }\n}\n\nexport class UnassignB2BUserUserGroupFail extends StateUtils.EntityFailAction {\n  readonly type = UNASSIGN_B2B_USER_USER_GROUP_FAIL;\n  constructor(\n    public payload: {\n      orgCustomerId: string;\n      userGroupId: string;\n      error: any;\n    }\n  ) {\n    super(USER_GROUP_ENTITIES, payload.userGroupId, payload.error);\n  }\n}\n\nexport class UnassignB2BUserUserGroupSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UNASSIGN_B2B_USER_USER_GROUP_SUCCESS;\n  constructor(\n    public payload: {\n      uid: string;\n      selected: boolean;\n    }\n  ) {\n    super(USER_GROUP_ENTITIES, payload.uid, payload);\n  }\n}\n\nexport type B2BUserAction =\n  | LoadB2BUser\n  | LoadB2BUserFail\n  | LoadB2BUserSuccess\n  | CreateB2BUser\n  | CreateB2BUserFail\n  | CreateB2BUserSuccess\n  | UpdateB2BUser\n  | UpdateB2BUserFail\n  | UpdateB2BUserSuccess\n  | LoadB2BUsers\n  | LoadB2BUsersFail\n  | LoadB2BUsersSuccess\n  | LoadB2BUserApprovers\n  | LoadB2BUserApproversFail\n  | LoadB2BUserApproversSuccess\n  | AssignB2BUserApprover\n  | AssignB2BUserApproverFail\n  | AssignB2BUserApproverSuccess\n  | UnassignB2BUserApprover\n  | UnassignB2BUserApproverFail\n  | UnassignB2BUserApproverSuccess\n  | LoadB2BUserPermissions\n  | LoadB2BUserPermissionsFail\n  | LoadB2BUserPermissionsSuccess\n  | AssignB2BUserPermission\n  | AssignB2BUserPermissionFail\n  | AssignB2BUserPermissionSuccess\n  | UnassignB2BUserPermission\n  | UnassignB2BUserPermissionFail\n  | UnassignB2BUserPermissionSuccess\n  | LoadB2BUserUserGroups\n  | LoadB2BUserUserGroupsFail\n  | LoadB2BUserUserGroupsSuccess\n  | AssignB2BUserUserGroup\n  | AssignB2BUserUserGroupFail\n  | AssignB2BUserUserGroupSuccess\n  | UnassignB2BUserUserGroup\n  | UnassignB2BUserUserGroupFail\n  | UnassignB2BUserUserGroupSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const CLEAR_ORGANIZATION_DATA = '[Organization] Clear Data';\n\nexport class OrganizationClearData implements Action {\n  readonly type = CLEAR_ORGANIZATION_DATA;\n}\n\nexport type OrganizationAction = OrganizationClearData;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport { EntitiesModel, normalizeHttpError, StateUtils } from '@spartacus/core';\nimport { Budget } from '../../model/budget.model';\nimport { BudgetActions, OrganizationActions } from '../actions/index';\nimport { BudgetConnector } from '../../connectors/budget/budget.connector';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Injectable()\nexport class BudgetEffects {\n  @Effect()\n  loadBudget$: Observable<\n    BudgetActions.LoadBudgetSuccess | BudgetActions.LoadBudgetFail\n  > = this.actions$.pipe(\n    ofType(BudgetActions.LOAD_BUDGET),\n    map((action: BudgetActions.LoadBudget) => action.payload),\n    switchMap(({ userId, budgetCode }) => {\n      return this.budgetConnector.get(userId, budgetCode).pipe(\n        map((budget: Budget) => {\n          return new BudgetActions.LoadBudgetSuccess([budget]);\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new BudgetActions.LoadBudgetFail({\n              budgetCode,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  loadBudgets$: Observable<\n    | BudgetActions.LoadBudgetsSuccess\n    | BudgetActions.LoadBudgetSuccess\n    | BudgetActions.LoadBudgetsFail\n  > = this.actions$.pipe(\n    ofType(BudgetActions.LOAD_BUDGETS),\n    map((action: BudgetActions.LoadBudgets) => action.payload),\n    switchMap((payload) =>\n      this.budgetConnector.getList(payload.userId, payload.params).pipe(\n        switchMap((budgets: EntitiesModel<Budget>) => {\n          const { values, page } = StateUtils.normalizeListPage(\n            budgets,\n            'code'\n          );\n          return [\n            new BudgetActions.LoadBudgetSuccess(values),\n            new BudgetActions.LoadBudgetsSuccess({\n              page,\n              params: payload.params,\n            }),\n          ];\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new BudgetActions.LoadBudgetsFail({\n              params: payload.params,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  createBudget$: Observable<\n    | BudgetActions.CreateBudgetSuccess\n    | BudgetActions.CreateBudgetFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(BudgetActions.CREATE_BUDGET),\n    map((action: BudgetActions.CreateBudget) => action.payload),\n    switchMap((payload) =>\n      this.budgetConnector.create(payload.userId, payload.budget).pipe(\n        switchMap((data) => [\n          new BudgetActions.CreateBudgetSuccess(data),\n          new OrganizationActions.OrganizationClearData(),\n        ]),\n        catchError((error: HttpErrorResponse) =>\n          from([\n            new BudgetActions.CreateBudgetFail({\n              budgetCode: payload.budget.code,\n              error: normalizeHttpError(error),\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ])\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updateBudget$: Observable<\n    | BudgetActions.UpdateBudgetSuccess\n    | BudgetActions.UpdateBudgetFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(BudgetActions.UPDATE_BUDGET),\n    map((action: BudgetActions.UpdateBudget) => action.payload),\n    switchMap((payload) =>\n      this.budgetConnector\n        .update(payload.userId, payload.budgetCode, payload.budget)\n        .pipe(\n          switchMap((data) => [\n            new BudgetActions.UpdateBudgetSuccess(data),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new BudgetActions.UpdateBudgetFail({\n                budgetCode: payload.budget.code,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private budgetConnector: BudgetConnector\n  ) {}\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport {\n  B2BApprovalProcess,\n  B2BUnit,\n  B2BUser,\n  EntitiesModel,\n  normalizeHttpError,\n  StateUtils,\n} from '@spartacus/core';\nimport { from, Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { OrgUnitConnector } from '../../connectors/org-unit/org-unit.connector';\nimport { B2BUnitNode } from '../../model/unit-node.model';\nimport {\n  B2BUserActions,\n  OrganizationActions,\n  OrgUnitActions,\n} from '../actions/index';\n\n@Injectable()\nexport class OrgUnitEffects {\n  @Effect()\n  loadOrgUnit$: Observable<\n    | OrgUnitActions.LoadOrgUnitSuccess\n    | OrgUnitActions.LoadAddressSuccess\n    | OrgUnitActions.LoadAddressesSuccess\n    | OrgUnitActions.LoadOrgUnitFail\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.LOAD_ORG_UNIT),\n    map((action: OrgUnitActions.LoadOrgUnit) => action.payload),\n    switchMap(({ userId, orgUnitId }) => {\n      return this.orgUnitConnector.get(userId, orgUnitId).pipe(\n        switchMap((orgUnit: B2BUnit) => {\n          const { values, page } = StateUtils.normalizeListPage(\n            { values: orgUnit.addresses },\n            'id'\n          );\n          return [\n            new OrgUnitActions.LoadOrgUnitSuccess([orgUnit]),\n            new OrgUnitActions.LoadAddressSuccess(values),\n            new OrgUnitActions.LoadAddressesSuccess({ page, orgUnitId }),\n          ];\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new OrgUnitActions.LoadOrgUnitFail({\n              orgUnitId,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  loadAvailableOrgUnits$: Observable<\n    OrgUnitActions.LoadOrgUnitNodesSuccess | OrgUnitActions.LoadOrgUnitNodesFail\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.LOAD_UNIT_NODES),\n    map((action: OrgUnitActions.LoadOrgUnitNodes) => action.payload),\n    switchMap((payload) =>\n      this.orgUnitConnector.getList(payload.userId).pipe(\n        map(\n          (orgUnitsList: B2BUnitNode[]) =>\n            new OrgUnitActions.LoadOrgUnitNodesSuccess(orgUnitsList)\n        ),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new OrgUnitActions.LoadOrgUnitNodesFail({\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  createUnit$: Observable<\n    | OrgUnitActions.CreateUnitFail\n    | OrgUnitActions.CreateUnitSuccess\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.CREATE_ORG_UNIT),\n    map((action: OrgUnitActions.CreateUnit) => action.payload),\n    switchMap((payload) =>\n      this.orgUnitConnector.create(payload.userId, payload.unit).pipe(\n        switchMap((data) => [\n          new OrgUnitActions.CreateUnitSuccess(data),\n          new OrganizationActions.OrganizationClearData(),\n        ]),\n        catchError((error: HttpErrorResponse) =>\n          from([\n            new OrgUnitActions.CreateUnitFail({\n              unitCode: payload.unit.uid,\n              error: normalizeHttpError(error),\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ])\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updateUnit$: Observable<\n    | OrgUnitActions.UpdateUnitSuccess\n    | OrgUnitActions.UpdateUnitFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.UPDATE_ORG_UNIT),\n    map((action: OrgUnitActions.UpdateUnit) => action.payload),\n    switchMap((payload) =>\n      this.orgUnitConnector\n        .update(payload.userId, payload.unitCode, payload.unit)\n        .pipe(\n          switchMap((_data) => [\n            // Workaround for empty response\n            new OrgUnitActions.UpdateUnitSuccess(payload.unit),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new OrgUnitActions.UpdateUnitFail({\n                unitCode: payload.unit.uid,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  loadTree$: Observable<\n    OrgUnitActions.LoadTreeSuccess | OrgUnitActions.LoadTreeFail\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.LOAD_UNIT_TREE),\n    map((action: OrgUnitActions.LoadOrgUnit) => action.payload),\n    switchMap(({ userId }) => {\n      return this.orgUnitConnector.getTree(userId).pipe(\n        map(\n          (orgUnit: B2BUnitNode) => new OrgUnitActions.LoadTreeSuccess(orgUnit)\n        ),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new OrgUnitActions.LoadTreeFail({\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  loadApprovalProcesses$: Observable<\n    | OrgUnitActions.LoadApprovalProcessesSuccess\n    | OrgUnitActions.LoadApprovalProcessesFail\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.LOAD_APPROVAL_PROCESSES),\n    map((action: OrgUnitActions.LoadOrgUnit) => action.payload),\n    switchMap(({ userId }) => {\n      return this.orgUnitConnector.getApprovalProcesses(userId).pipe(\n        map(\n          (approvalProcesses: B2BApprovalProcess[]) =>\n            new OrgUnitActions.LoadApprovalProcessesSuccess(approvalProcesses)\n        ),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new OrgUnitActions.LoadApprovalProcessesFail({\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  loadUsers$: Observable<\n    | OrgUnitActions.LoadAssignedUsersSuccess\n    | OrgUnitActions.LoadAssignedUsersFail\n    | B2BUserActions.LoadB2BUserSuccess\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.LOAD_ASSIGNED_USERS),\n    map((action: OrgUnitActions.LoadAssignedUsers) => action.payload),\n    groupBy(({ orgUnitId, roleId, params }) =>\n      StateUtils.serializeParams([orgUnitId, roleId], params)\n    ),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap(({ userId, orgUnitId, roleId, params }) => {\n          return this.orgUnitConnector\n            .getUsers(userId, orgUnitId, roleId, params)\n            .pipe(\n              switchMap((users: EntitiesModel<B2BUser>) => {\n                const { values, page } = StateUtils.normalizeListPage(\n                  users,\n                  'customerId'\n                );\n                return [\n                  new B2BUserActions.LoadB2BUserSuccess(values),\n                  new OrgUnitActions.LoadAssignedUsersSuccess({\n                    orgUnitId,\n                    roleId,\n                    page,\n                    params,\n                  }),\n                ];\n              }),\n              catchError((error: HttpErrorResponse) =>\n                of(\n                  new OrgUnitActions.LoadAssignedUsersFail({\n                    orgUnitId,\n                    roleId,\n                    params,\n                    error: normalizeHttpError(error),\n                  })\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  assignRoleToUser: Observable<\n    OrgUnitActions.AssignRoleSuccess | OrgUnitActions.AssignRoleFail\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.ASSIGN_ROLE),\n    map((action: OrgUnitActions.AssignRole) => action.payload),\n    switchMap(({ userId, orgCustomerId, roleId }) =>\n      this.orgUnitConnector.assignRole(userId, orgCustomerId, roleId).pipe(\n        map(\n          () =>\n            new OrgUnitActions.AssignRoleSuccess({\n              uid: orgCustomerId,\n              roleId,\n              selected: true,\n            })\n        ),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new OrgUnitActions.AssignRoleFail({\n              orgCustomerId,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  unassignRoleToUser$: Observable<\n    OrgUnitActions.UnassignRoleSuccess | OrgUnitActions.UnassignRoleFail\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.UNASSIGN_ROLE),\n    map((action: OrgUnitActions.UnassignRole) => action.payload),\n    switchMap(({ userId, orgCustomerId, roleId }) =>\n      this.orgUnitConnector.unassignRole(userId, orgCustomerId, roleId).pipe(\n        map(\n          () =>\n            new OrgUnitActions.UnassignRoleSuccess({\n              uid: orgCustomerId,\n              roleId,\n              selected: false,\n            })\n        ),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new OrgUnitActions.UnassignRoleFail({\n              orgCustomerId,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  assignApprover: Observable<\n    | OrgUnitActions.AssignApproverSuccess\n    | OrgUnitActions.AssignApproverFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.ASSIGN_APPROVER),\n    map((action: OrgUnitActions.AssignApprover) => action.payload),\n    mergeMap(({ userId, orgUnitId, orgCustomerId, roleId }) =>\n      this.orgUnitConnector\n        .assignApprover(userId, orgUnitId, orgCustomerId, roleId)\n        .pipe(\n          switchMap(() => [\n            new OrgUnitActions.AssignApproverSuccess({\n              uid: orgCustomerId,\n              roleId,\n              selected: true,\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new OrgUnitActions.AssignApproverFail({\n                orgCustomerId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  unassignApprover: Observable<\n    | OrgUnitActions.UnassignApproverSuccess\n    | OrgUnitActions.UnassignApproverFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.UNASSIGN_APPROVER),\n    map((action: OrgUnitActions.UnassignApprover) => action.payload),\n    mergeMap(({ userId, orgUnitId, orgCustomerId, roleId }) =>\n      this.orgUnitConnector\n        .unassignApprover(userId, orgUnitId, orgCustomerId, roleId)\n        .pipe(\n          switchMap(() => [\n            new OrgUnitActions.UnassignApproverSuccess({\n              uid: orgCustomerId,\n              roleId,\n              selected: false,\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new OrgUnitActions.UnassignApproverFail({\n                orgCustomerId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  createAddress$: Observable<\n    | OrgUnitActions.CreateAddressSuccess\n    | OrgUnitActions.CreateAddressFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.CREATE_ADDRESS),\n    map((action: OrgUnitActions.CreateAddress) => action.payload),\n    switchMap((payload) =>\n      this.orgUnitConnector\n        .createAddress(payload.userId, payload.orgUnitId, payload.address)\n        .pipe(\n          switchMap((data) => [\n            new OrgUnitActions.CreateAddressSuccess(data),\n            new OrgUnitActions.CreateAddressSuccess({ id: null }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new OrgUnitActions.CreateAddressFail({\n                addressId: payload.address.id,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  updateAddress$: Observable<\n    | OrgUnitActions.UpdateAddressSuccess\n    | OrgUnitActions.UpdateAddressFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.UPDATE_ADDRESS),\n    map((action: OrgUnitActions.UpdateAddress) => action.payload),\n    switchMap(({ userId, orgUnitId, addressId, address }) =>\n      this.orgUnitConnector\n        .updateAddress(userId, orgUnitId, addressId, address)\n        .pipe(\n          switchMap(() => [\n            // commented out due to no response from backend on PATCH request\n            // new OrgUnitActions.UpdateAddressSuccess(data),\n            new OrgUnitActions.UpdateAddressSuccess(address),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new OrgUnitActions.UpdateAddressFail({\n                addressId: address.id,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  deleteAddress$: Observable<\n    | OrgUnitActions.DeleteAddressSuccess\n    | OrgUnitActions.DeleteAddressFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(OrgUnitActions.DELETE_ADDRESS),\n    map((action: OrgUnitActions.DeleteAddress) => action.payload),\n    switchMap((payload) =>\n      this.orgUnitConnector\n        .deleteAddress(payload.userId, payload.orgUnitId, payload.addressId)\n        .pipe(\n          switchMap(() => [\n            new OrgUnitActions.DeleteAddressSuccess({ id: payload.addressId }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new OrgUnitActions.DeleteAddressFail({\n                addressId: payload.addressId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  // @Effect()\n  // loadAddress$: Observable<\n  //   | OrgUnitActions.LoadAddressSuccess\n  //   | OrgUnitActions.LoadAddressesSuccess\n  //   | OrgUnitActions.LoadAddressesFail\n  // > = this.actions$.pipe(\n  //   ofType(OrgUnitActions.LOAD_ADDRESSES),\n  //   map((action: OrgUnitActions.LoadAddresses) => action.payload),\n  //   switchMap(({ userId, orgUnitId }) => {\n  //     return this.orgUnitConnector.getAddresses(userId, orgUnitId).pipe(\n  //       switchMap((addresses: EntitiesModel<B2BAddress>) => {\n  //         const { values, page } = StateUtils.normalizeListPage(addresses, 'id');\n  //         return [\n  //           new OrgUnitActions.LoadAddressSuccess(values),\n  //           new OrgUnitActions.LoadAddressesSuccess({ page, orgUnitId }),\n  //         ];\n  //       }),\n  //       catchError(error =>\n  //         of(\n  //           new OrgUnitActions.LoadAddressesFail({\n  //             orgUnitId,\n  //             error: normalizeHttpError(error),\n  //           })\n  //         )\n  //       )\n  //     );\n  //   })\n  // );\n\n  constructor(\n    private actions$: Actions,\n    private orgUnitConnector: OrgUnitConnector\n  ) {}\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport {\n  EntitiesModel,\n  normalizeHttpError,\n  OrderApprovalPermissionType,\n  StateUtils,\n} from '@spartacus/core';\nimport { from, Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { PermissionConnector } from '../../connectors/permission/permission.connector';\nimport { Permission } from '../../model/permission.model';\nimport { OrganizationActions, PermissionActions } from '../actions';\n\n@Injectable()\nexport class PermissionEffects {\n  @Effect()\n  loadPermission$: Observable<\n    | PermissionActions.LoadPermissionSuccess\n    | PermissionActions.LoadPermissionFail\n  > = this.actions$.pipe(\n    ofType(PermissionActions.LOAD_PERMISSION),\n    map((action: PermissionActions.LoadPermission) => action.payload),\n    switchMap(({ userId, permissionCode }) => {\n      return this.permissionConnector.get(userId, permissionCode).pipe(\n        map((permission: Permission) => {\n          return new PermissionActions.LoadPermissionSuccess([permission]);\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new PermissionActions.LoadPermissionFail({\n              permissionCode,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  loadPermissions$: Observable<\n    | PermissionActions.LoadPermissionsSuccess\n    | PermissionActions.LoadPermissionSuccess\n    | PermissionActions.LoadPermissionsFail\n  > = this.actions$.pipe(\n    ofType(PermissionActions.LOAD_PERMISSIONS),\n    map((action: PermissionActions.LoadPermissions) => action.payload),\n    switchMap((payload) =>\n      this.permissionConnector.getList(payload.userId, payload.params).pipe(\n        switchMap((permissions: EntitiesModel<Permission>) => {\n          const { values, page } = StateUtils.normalizeListPage(\n            permissions,\n            'code'\n          );\n          return [\n            new PermissionActions.LoadPermissionSuccess(values),\n            new PermissionActions.LoadPermissionsSuccess({\n              page,\n              params: payload.params,\n            }),\n          ];\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new PermissionActions.LoadPermissionsFail({\n              params: payload.params,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  createPermission$: Observable<\n    | PermissionActions.CreatePermissionSuccess\n    | PermissionActions.CreatePermissionFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(PermissionActions.CREATE_PERMISSION),\n    map((action: PermissionActions.CreatePermission) => action.payload),\n    switchMap((payload) =>\n      this.permissionConnector.create(payload.userId, payload.permission).pipe(\n        switchMap((data) => [\n          new PermissionActions.CreatePermissionSuccess(data),\n          new OrganizationActions.OrganizationClearData(),\n        ]),\n        catchError((error: HttpErrorResponse) =>\n          from([\n            new PermissionActions.CreatePermissionFail({\n              permissionCode: payload.permission.code,\n              error: normalizeHttpError(error),\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ])\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePermission$: Observable<\n    | PermissionActions.UpdatePermissionSuccess\n    | PermissionActions.UpdatePermissionFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(PermissionActions.UPDATE_PERMISSION),\n    map((action: PermissionActions.UpdatePermission) => action.payload),\n    switchMap((payload) =>\n      this.permissionConnector\n        .update(payload.userId, payload.permissionCode, payload.permission)\n        .pipe(\n          switchMap((data) => [\n            new PermissionActions.UpdatePermissionSuccess(data),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new PermissionActions.UpdatePermissionFail({\n                permissionCode: payload.permission.code,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  loadPermissionTypes$: Observable<\n    | PermissionActions.LoadPermissionTypesSuccess\n    | PermissionActions.LoadPermissionTypesFail\n  > = this.actions$.pipe(\n    ofType(PermissionActions.LOAD_PERMISSION_TYPES),\n    switchMap(() =>\n      this.permissionConnector.getTypes().pipe(\n        map(\n          (permissionTypeList: OrderApprovalPermissionType[]) =>\n            new PermissionActions.LoadPermissionTypesSuccess(permissionTypeList)\n        ),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new PermissionActions.LoadPermissionTypesFail({\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private permissionConnector: PermissionConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport { catchError, map, switchMap, groupBy, mergeMap } from 'rxjs/operators';\nimport {\n  EntitiesModel,\n  CostCenter,\n  normalizeHttpError,\n  StateUtils,\n} from '@spartacus/core';\nimport {\n  CostCenterActions,\n  BudgetActions,\n  OrganizationActions,\n} from '../actions/index';\nimport { Budget } from '../../model/budget.model';\nimport { CostCenterConnector } from '../../connectors/cost-center/cost-center.connector';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Injectable()\nexport class CostCenterEffects {\n  @Effect()\n  loadCostCenter$: Observable<\n    | CostCenterActions.LoadCostCenterSuccess\n    | CostCenterActions.LoadCostCenterFail\n  > = this.actions$.pipe(\n    ofType(CostCenterActions.LOAD_COST_CENTER),\n    map((action: CostCenterActions.LoadCostCenter) => action.payload),\n    switchMap(({ userId, costCenterCode }) => {\n      return this.costCenterConnector.get(userId, costCenterCode).pipe(\n        map((costCenter: CostCenter) => {\n          return new CostCenterActions.LoadCostCenterSuccess([costCenter]);\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new CostCenterActions.LoadCostCenterFail({\n              costCenterCode,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  loadCostCenters$: Observable<\n    | CostCenterActions.LoadCostCentersSuccess\n    | CostCenterActions.LoadCostCenterSuccess\n    | CostCenterActions.LoadCostCentersFail\n  > = this.actions$.pipe(\n    ofType(CostCenterActions.LOAD_COST_CENTERS),\n    map((action: CostCenterActions.LoadCostCenters) => action.payload),\n    switchMap((payload) =>\n      this.costCenterConnector.getList(payload.userId, payload.params).pipe(\n        switchMap((costCenters: EntitiesModel<CostCenter>) => {\n          const { values, page } = StateUtils.normalizeListPage(\n            costCenters,\n            'code'\n          );\n          return [\n            new CostCenterActions.LoadCostCenterSuccess(values),\n            new CostCenterActions.LoadCostCentersSuccess({\n              page,\n              params: payload.params,\n            }),\n          ];\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new CostCenterActions.LoadCostCentersFail({\n              params: payload.params,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  createCostCenter$: Observable<\n    | CostCenterActions.CreateCostCenterSuccess\n    | CostCenterActions.CreateCostCenterFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(CostCenterActions.CREATE_COST_CENTER),\n    map((action: CostCenterActions.CreateCostCenter) => action.payload),\n    switchMap((payload) =>\n      this.costCenterConnector.create(payload.userId, payload.costCenter).pipe(\n        switchMap((data) => [\n          new CostCenterActions.CreateCostCenterSuccess(data),\n          new OrganizationActions.OrganizationClearData(),\n        ]),\n        catchError((error: HttpErrorResponse) =>\n          from([\n            new CostCenterActions.CreateCostCenterFail({\n              costCenterCode: payload.costCenter.code,\n              error: normalizeHttpError(error),\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ])\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updateCostCenter$: Observable<\n    | CostCenterActions.UpdateCostCenterSuccess\n    | CostCenterActions.UpdateCostCenterFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(CostCenterActions.UPDATE_COST_CENTER),\n    map((action: CostCenterActions.UpdateCostCenter) => action.payload),\n    switchMap((payload) =>\n      this.costCenterConnector\n        .update(payload.userId, payload.costCenterCode, payload.costCenter)\n        .pipe(\n          switchMap((data) => [\n            new CostCenterActions.UpdateCostCenterSuccess(data),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new CostCenterActions.UpdateCostCenterFail({\n                costCenterCode: payload.costCenter.code,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  loadAssignedBudgets$: Observable<\n    | CostCenterActions.LoadAssignedBudgetsSuccess\n    | BudgetActions.LoadBudgetSuccess\n    | CostCenterActions.LoadAssignedBudgetsFail\n  > = this.actions$.pipe(\n    ofType(CostCenterActions.LOAD_ASSIGNED_BUDGETS),\n    map((action: CostCenterActions.LoadAssignedBudgets) => action.payload),\n    groupBy(({ costCenterCode, params }) =>\n      StateUtils.serializeParams(costCenterCode, params)\n    ),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap(({ userId, costCenterCode, params }) =>\n          this.costCenterConnector\n            .getBudgets(userId, costCenterCode, params)\n            .pipe(\n              switchMap((budgets: EntitiesModel<Budget>) => {\n                const { values, page } = StateUtils.normalizeListPage(\n                  budgets,\n                  'code'\n                );\n                return [\n                  new BudgetActions.LoadBudgetSuccess(values),\n                  new CostCenterActions.LoadAssignedBudgetsSuccess({\n                    costCenterCode,\n                    page,\n                    params,\n                  }),\n                ];\n              }),\n              catchError((error: HttpErrorResponse) =>\n                of(\n                  new CostCenterActions.LoadAssignedBudgetsFail({\n                    costCenterCode,\n                    params,\n                    error: normalizeHttpError(error),\n                  })\n                )\n              )\n            )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  assignBudgetToCostCenter$: Observable<\n    | CostCenterActions.AssignBudgetSuccess\n    | CostCenterActions.AssignBudgetFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(CostCenterActions.ASSIGN_BUDGET),\n    map((action: CostCenterActions.AssignBudget) => action.payload),\n    mergeMap(({ userId, costCenterCode, budgetCode }) =>\n      this.costCenterConnector\n        .assignBudget(userId, costCenterCode, budgetCode)\n        .pipe(\n          switchMap(() => [\n            new CostCenterActions.AssignBudgetSuccess({\n              code: budgetCode,\n              selected: true,\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new CostCenterActions.AssignBudgetFail({\n                budgetCode,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  unassignBudgetToCostCenter$: Observable<\n    | CostCenterActions.UnassignBudgetSuccess\n    | CostCenterActions.UnassignBudgetFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(CostCenterActions.UNASSIGN_BUDGET),\n    map((action: CostCenterActions.UnassignBudget) => action.payload),\n    mergeMap(({ userId, costCenterCode, budgetCode }) =>\n      this.costCenterConnector\n        .unassignBudget(userId, costCenterCode, budgetCode)\n        .pipe(\n          switchMap(() => [\n            new CostCenterActions.UnassignBudgetSuccess({\n              code: budgetCode,\n              selected: false,\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new CostCenterActions.UnassignBudgetFail({\n                budgetCode,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private costCenterConnector: CostCenterConnector\n  ) {}\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport {\n  AuthActions,\n  B2BUser,\n  B2BUserRole,\n  EntitiesModel,\n  normalizeHttpError,\n  RoutingService,\n  StateUtils,\n  User,\n  UserIdService,\n  UserService,\n} from '@spartacus/core';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { B2BUserConnector } from '../../connectors/b2b-user/b2b-user.connector';\nimport { Permission } from '../../model/permission.model';\nimport { UserGroup } from '../../model/user-group.model';\nimport {\n  B2BUserActions,\n  OrganizationActions,\n  OrgUnitActions,\n  PermissionActions,\n  UserGroupActions,\n} from '../actions/index';\n\n@Injectable()\nexport class B2BUserEffects {\n  @Effect()\n  loadB2BUser$: Observable<\n    B2BUserActions.LoadB2BUserSuccess | B2BUserActions.LoadB2BUserFail\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.LOAD_B2B_USER),\n    map((action: B2BUserActions.LoadB2BUser) => action.payload),\n    switchMap(({ userId, orgCustomerId }) => {\n      return this.b2bUserConnector.get(userId, orgCustomerId).pipe(\n        map((b2bUser: B2BUser) => {\n          return new B2BUserActions.LoadB2BUserSuccess([b2bUser]);\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new B2BUserActions.LoadB2BUserFail({\n              orgCustomerId,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  createB2BUser$: Observable<\n    | B2BUserActions.CreateB2BUserSuccess\n    | B2BUserActions.CreateB2BUserFail\n    | OrgUnitActions.AssignApprover\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.CREATE_B2B_USER),\n    map((action: B2BUserActions.CreateB2BUser) => action.payload),\n    switchMap(({ userId, orgCustomer }) =>\n      this.b2bUserConnector.create(userId, orgCustomer).pipe(\n        switchMap((data) => {\n          const isAssignedToApprovers = orgCustomer.isAssignedToApprovers;\n          // TODO Workaround for not known customerId while user creation (redireciton)\n          return this.routingService.getRouterState().pipe(\n            take(1),\n            tap((route) => this.redirectToDetails(route, data)),\n            switchMap(() => {\n              const successActions = [\n                new B2BUserActions.CreateB2BUserSuccess(data),\n                new B2BUserActions.CreateB2BUserSuccess({ customerId: null }),\n                new OrganizationActions.OrganizationClearData(),\n              ] as any[];\n              if (isAssignedToApprovers) {\n                successActions.splice(\n                  1,\n                  0,\n                  new OrgUnitActions.AssignApprover({\n                    userId,\n                    orgUnitId: orgCustomer.orgUnit.uid,\n                    orgCustomerId: data.customerId,\n                    roleId: B2BUserRole.APPROVER,\n                  })\n                );\n              }\n              return successActions;\n            })\n          );\n        }),\n        catchError((error: HttpErrorResponse) =>\n          from([\n            new B2BUserActions.CreateB2BUserFail({\n              orgCustomerId: orgCustomer.customerId,\n              error: normalizeHttpError(error),\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ])\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updateB2BUser$: Observable<\n    | B2BUserActions.UpdateB2BUserSuccess\n    | B2BUserActions.UpdateB2BUserFail\n    | OrgUnitActions.AssignApprover\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.UPDATE_B2B_USER),\n    map((action: B2BUserActions.UpdateB2BUser) => action.payload),\n    switchMap(({ userId, orgCustomerId, orgCustomer }) => {\n      const isAssignedToApprovers = orgCustomer.isAssignedToApprovers;\n      return this.b2bUserConnector\n        .update(userId, orgCustomerId, orgCustomer)\n        .pipe(\n          switchMap((_data) => {\n            const successActions = [\n              // TODO: change for 'payload: data' when backend API start to return user data on PATCH\n              new B2BUserActions.UpdateB2BUserSuccess(orgCustomer),\n            ] as any[];\n            if (isAssignedToApprovers) {\n              successActions.push(\n                new OrgUnitActions.AssignApprover({\n                  userId,\n                  orgUnitId: orgCustomer.orgUnit.uid,\n                  orgCustomerId,\n                  roleId: B2BUserRole.APPROVER,\n                })\n              );\n            }\n            return successActions;\n          }),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new B2BUserActions.UpdateB2BUserFail({\n                orgCustomerId: orgCustomer.customerId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        );\n    })\n  );\n\n  @Effect()\n  checkSelfEmailUpdate$: Observable<\n    | AuthActions.Logout\n    | B2BUserActions.LoadB2BUser\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.UPDATE_B2B_USER_SUCCESS),\n    map((action: B2BUserActions.UpdateB2BUserSuccess) => action.payload),\n    withLatestFrom(this.userService.get(), this.userIdService.getUserId()),\n    switchMap(([payload, currentUser]: [B2BUser, User, string]) => {\n      const currentUserEmailMatch =\n        payload.customerId === currentUser.customerId &&\n        payload.email !== currentUser.displayUid;\n\n      if (currentUserEmailMatch) {\n        this.routingService.go({ cxRoute: 'login' });\n      }\n      return currentUserEmailMatch\n        ? [new AuthActions.Logout()]\n        : [new OrganizationActions.OrganizationClearData()];\n    })\n  );\n\n  @Effect()\n  loadB2BUsers$: Observable<\n    | B2BUserActions.LoadB2BUsersSuccess\n    | B2BUserActions.LoadB2BUserSuccess\n    | B2BUserActions.LoadB2BUsersFail\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.LOAD_B2B_USERS),\n    map((action: B2BUserActions.LoadB2BUsers) => action.payload),\n    switchMap((payload) =>\n      this.b2bUserConnector.getList(payload.userId, payload.params).pipe(\n        switchMap((b2bUsers: EntitiesModel<B2BUser>) => {\n          const { values, page } = StateUtils.normalizeListPage(\n            b2bUsers,\n            'customerId'\n          );\n          return [\n            new B2BUserActions.LoadB2BUserSuccess(values),\n            new B2BUserActions.LoadB2BUsersSuccess({\n              page,\n              params: payload.params,\n            }),\n          ];\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new B2BUserActions.LoadB2BUsersFail({\n              params: payload.params,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  loadB2BUserApprovers$: Observable<\n    | B2BUserActions.LoadB2BUserApproversSuccess\n    | B2BUserActions.LoadB2BUserApproversFail\n    | B2BUserActions.LoadB2BUserSuccess\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.LOAD_B2B_USER_APPROVERS),\n    map((action: B2BUserActions.LoadB2BUserApprovers) => action.payload),\n    groupBy(({ orgCustomerId, params }) =>\n      StateUtils.serializeParams(orgCustomerId, params)\n    ),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((payload) =>\n          this.b2bUserConnector\n            .getApprovers(payload.userId, payload.orgCustomerId, payload.params)\n            .pipe(\n              switchMap((approvers: EntitiesModel<B2BUser>) => {\n                const { values, page } = StateUtils.normalizeListPage(\n                  approvers,\n                  'customerId'\n                );\n                return [\n                  new B2BUserActions.LoadB2BUserSuccess(values),\n                  new B2BUserActions.LoadB2BUserApproversSuccess({\n                    orgCustomerId: payload.orgCustomerId,\n                    page,\n                    params: payload.params,\n                  }),\n                ];\n              }),\n              catchError((error: HttpErrorResponse) =>\n                of(\n                  new B2BUserActions.LoadB2BUserApproversFail({\n                    orgCustomerId: payload.orgCustomerId,\n                    params: payload.params,\n                    error: normalizeHttpError(error),\n                  })\n                )\n              )\n            )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  loadB2BUserPermissions$: Observable<\n    | B2BUserActions.LoadB2BUserPermissionsSuccess\n    | B2BUserActions.LoadB2BUserPermissionsFail\n    | PermissionActions.LoadPermissionSuccess\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.LOAD_B2B_USER_PERMISSIONS),\n    map((action: B2BUserActions.LoadB2BUserPermissions) => action.payload),\n    groupBy(({ orgCustomerId, params }) =>\n      StateUtils.serializeParams(orgCustomerId, params)\n    ),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((payload) =>\n          this.b2bUserConnector\n            .getPermissions(\n              payload.userId,\n              payload.orgCustomerId,\n              payload.params\n            )\n            .pipe(\n              switchMap((permissions: EntitiesModel<Permission>) => {\n                const { values, page } = StateUtils.normalizeListPage(\n                  permissions,\n                  'code'\n                );\n                return [\n                  new PermissionActions.LoadPermissionSuccess(values),\n                  new B2BUserActions.LoadB2BUserPermissionsSuccess({\n                    orgCustomerId: payload.orgCustomerId,\n                    page,\n                    params: payload.params,\n                  }),\n                ];\n              }),\n              catchError((error: HttpErrorResponse) =>\n                of(\n                  new B2BUserActions.LoadB2BUserPermissionsFail({\n                    orgCustomerId: payload.orgCustomerId,\n                    params: payload.params,\n                    error: normalizeHttpError(error),\n                  })\n                )\n              )\n            )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  loadB2BUserUserGroups$: Observable<\n    | B2BUserActions.LoadB2BUserUserGroupsSuccess\n    | B2BUserActions.LoadB2BUserUserGroupsFail\n    | UserGroupActions.LoadUserGroupSuccess\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.LOAD_B2B_USER_USER_GROUPS),\n    map((action: B2BUserActions.LoadB2BUserUserGroups) => action.payload),\n    groupBy(({ orgCustomerId, params }) =>\n      StateUtils.serializeParams(orgCustomerId, params)\n    ),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((payload) =>\n          this.b2bUserConnector\n            .getUserGroups(\n              payload.userId,\n              payload.orgCustomerId,\n              payload.params\n            )\n            .pipe(\n              switchMap((userGroups: EntitiesModel<UserGroup>) => {\n                const { values, page } = StateUtils.normalizeListPage(\n                  userGroups,\n                  'uid'\n                );\n                return [\n                  new UserGroupActions.LoadUserGroupSuccess(values),\n                  new B2BUserActions.LoadB2BUserUserGroupsSuccess({\n                    orgCustomerId: payload.orgCustomerId,\n                    page,\n                    params: payload.params,\n                  }),\n                ];\n              }),\n              catchError((error: HttpErrorResponse) =>\n                of(\n                  new B2BUserActions.LoadB2BUserUserGroupsFail({\n                    orgCustomerId: payload.orgCustomerId,\n                    params: payload.params,\n                    error: normalizeHttpError(error),\n                  })\n                )\n              )\n            )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  assignApproverToB2BUser$: Observable<\n    | B2BUserActions.AssignB2BUserApproverSuccess\n    | B2BUserActions.AssignB2BUserApproverFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.ASSIGN_B2B_USER_APPROVER),\n    map((action: B2BUserActions.AssignB2BUserApprover) => action.payload),\n    mergeMap((payload) =>\n      this.b2bUserConnector\n        .assignApprover(\n          payload.userId,\n          payload.orgCustomerId,\n          payload.approverId\n        )\n        .pipe(\n          switchMap((data) => [\n            new B2BUserActions.AssignB2BUserApproverSuccess({\n              // Occ returned email, but we use customerId in store\n              approverId: payload.approverId,\n              selected: data.selected,\n            }),\n            // Clearing data in this case causes unexpected behavior (#10468)\n            // new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new B2BUserActions.AssignB2BUserApproverFail({\n                orgCustomerId: payload.orgCustomerId,\n                approverId: payload.approverId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  unassignApproverFromB2BUser$: Observable<\n    | B2BUserActions.UnassignB2BUserApproverSuccess\n    | B2BUserActions.UnassignB2BUserApproverFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.UNASSIGN_B2B_USER_APPROVER),\n    map((action: B2BUserActions.UnassignB2BUserApprover) => action.payload),\n    mergeMap((payload) =>\n      this.b2bUserConnector\n        .unassignApprover(\n          payload.userId,\n          payload.orgCustomerId,\n          payload.approverId\n        )\n        .pipe(\n          switchMap((data) => [\n            new B2BUserActions.UnassignB2BUserApproverSuccess({\n              // Occ returned email, but we use customerId in store\n              approverId: payload.approverId,\n              selected: data.selected,\n            }),\n            // Clearing data in this case causes unexpected behavior (#10468)\n            // new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new B2BUserActions.UnassignB2BUserApproverFail({\n                orgCustomerId: payload.orgCustomerId,\n                approverId: payload.approverId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  assignPermissionToB2BUser$: Observable<\n    | B2BUserActions.AssignB2BUserPermissionSuccess\n    | B2BUserActions.AssignB2BUserPermissionFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.ASSIGN_B2B_USER_PERMISSION),\n    map((action: B2BUserActions.AssignB2BUserPermission) => action.payload),\n    mergeMap((payload) =>\n      this.b2bUserConnector\n        .assignPermission(\n          payload.userId,\n          payload.orgCustomerId,\n          payload.permissionId\n        )\n        .pipe(\n          switchMap((data) => [\n            new B2BUserActions.AssignB2BUserPermissionSuccess({\n              permissionId: data.id,\n              selected: data.selected,\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new B2BUserActions.AssignB2BUserPermissionFail({\n                orgCustomerId: payload.orgCustomerId,\n                permissionId: payload.permissionId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  unassignPermissionFromB2BUser$: Observable<\n    | B2BUserActions.UnassignB2BUserPermissionSuccess\n    | B2BUserActions.UnassignB2BUserPermissionFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.UNASSIGN_B2B_USER_PERMISSION),\n    map((action: B2BUserActions.UnassignB2BUserPermission) => action.payload),\n    mergeMap((payload) =>\n      this.b2bUserConnector\n        .unassignPermission(\n          payload.userId,\n          payload.orgCustomerId,\n          payload.permissionId\n        )\n        .pipe(\n          switchMap((data) => [\n            new B2BUserActions.UnassignB2BUserPermissionSuccess({\n              permissionId: data.id,\n              selected: data.selected,\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new B2BUserActions.UnassignB2BUserPermissionFail({\n                orgCustomerId: payload.orgCustomerId,\n                permissionId: payload.permissionId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  assignUserGroupToB2BUser$: Observable<\n    | B2BUserActions.AssignB2BUserUserGroupSuccess\n    | B2BUserActions.AssignB2BUserUserGroupFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.ASSIGN_B2B_USER_USER_GROUP),\n    map((action: B2BUserActions.AssignB2BUserUserGroup) => action.payload),\n    mergeMap((payload) =>\n      this.b2bUserConnector\n        .assignUserGroup(\n          payload.userId,\n          payload.orgCustomerId,\n          payload.userGroupId\n        )\n        .pipe(\n          switchMap((data) => [\n            new B2BUserActions.AssignB2BUserUserGroupSuccess({\n              uid: data.id,\n              selected: data.selected,\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new B2BUserActions.AssignB2BUserUserGroupFail({\n                orgCustomerId: payload.orgCustomerId,\n                userGroupId: payload.userGroupId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  unassignUserGroupFromB2BUser$: Observable<\n    | B2BUserActions.UnassignB2BUserUserGroupSuccess\n    | B2BUserActions.UnassignB2BUserUserGroupFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(B2BUserActions.UNASSIGN_B2B_USER_USER_GROUP),\n    map((action: B2BUserActions.UnassignB2BUserUserGroup) => action.payload),\n    mergeMap((payload) =>\n      this.b2bUserConnector\n        .unassignUserGroup(\n          payload.userId,\n          payload.orgCustomerId,\n          payload.userGroupId\n        )\n        .pipe(\n          switchMap(\n            // TODO: Workaround because occ doesn't respond here\n            // (data) =>\n            //   new B2BUserActions.DeleteB2BUserUserGroupSuccess({\n            //     uid: data.id,\n            //     selected: data.selected,\n            //   })\n            () => [\n              new B2BUserActions.UnassignB2BUserUserGroupSuccess({\n                uid: payload.userGroupId,\n                selected: false,\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ]\n          ),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new B2BUserActions.UnassignB2BUserUserGroupFail({\n                orgCustomerId: payload.orgCustomerId,\n                userGroupId: payload.userGroupId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private b2bUserConnector: B2BUserConnector,\n    private routingService: RoutingService,\n    private userService: UserService,\n    private userIdService: UserIdService\n  ) {}\n\n  protected redirectToDetails(route, data) {\n    if ((route as any)?.state?.context?.id !== '/organization/units') {\n      this.routingService.go({\n        cxRoute: 'orgUserDetails',\n        params: data,\n      });\n    }\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport {\n  B2BUser,\n  EntitiesModel,\n  normalizeHttpError,\n  StateUtils,\n} from '@spartacus/core';\nimport { from, Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { UserGroupConnector } from '../../connectors/user-group/user-group.connector';\nimport { Permission } from '../../model/permission.model';\nimport { UserGroup } from '../../model/user-group.model';\nimport {\n  B2BUserActions,\n  OrganizationActions,\n  PermissionActions,\n  UserGroupActions,\n} from '../actions/index';\n\n@Injectable()\nexport class UserGroupEffects {\n  @Effect()\n  loadUserGroup$: Observable<\n    UserGroupActions.LoadUserGroupSuccess | UserGroupActions.LoadUserGroupFail\n  > = this.actions$.pipe(\n    ofType(UserGroupActions.LOAD_USER_GROUP),\n    map((action: UserGroupActions.LoadUserGroup) => action.payload),\n    switchMap(({ userId, userGroupId }) => {\n      return this.userGroupConnector.get(userId, userGroupId).pipe(\n        map((userGroup: UserGroup) => {\n          return new UserGroupActions.LoadUserGroupSuccess([userGroup]);\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new UserGroupActions.LoadUserGroupFail({\n              userGroupId,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  loadUserGroups$: Observable<\n    | UserGroupActions.LoadUserGroupsSuccess\n    | UserGroupActions.LoadUserGroupSuccess\n    | UserGroupActions.LoadUserGroupsFail\n  > = this.actions$.pipe(\n    ofType(UserGroupActions.LOAD_USER_GROUPS),\n    map((action: UserGroupActions.LoadUserGroups) => action.payload),\n    switchMap((payload) =>\n      this.userGroupConnector.getList(payload.userId, payload.params).pipe(\n        switchMap((userGroups: EntitiesModel<UserGroup>) => {\n          const { values, page } = StateUtils.normalizeListPage(\n            userGroups,\n            'uid'\n          );\n          return [\n            new UserGroupActions.LoadUserGroupSuccess(values),\n            new UserGroupActions.LoadUserGroupsSuccess({\n              page,\n              params: payload.params,\n            }),\n          ];\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new UserGroupActions.LoadUserGroupsFail({\n              params: payload.params,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  loadAvailableOrderApprovalPermissions$: Observable<\n    | UserGroupActions.LoadPermissionsSuccess\n    | PermissionActions.LoadPermissionSuccess\n    | UserGroupActions.LoadPermissionsFail\n  > = this.actions$.pipe(\n    ofType(UserGroupActions.LOAD_USER_GROUP_PERMISSIONS),\n    map((action: UserGroupActions.LoadPermissions) => action.payload),\n    groupBy(({ userGroupId, params }) =>\n      StateUtils.serializeParams(userGroupId, params)\n    ),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((payload) =>\n          this.userGroupConnector\n            .getAvailableOrderApprovalPermissions(\n              payload.userId,\n              payload.userGroupId,\n              payload.params\n            )\n            .pipe(\n              switchMap((permissions: EntitiesModel<Permission>) => {\n                const { values, page } = StateUtils.normalizeListPage(\n                  permissions,\n                  'code'\n                );\n                return [\n                  new PermissionActions.LoadPermissionSuccess(values),\n                  new UserGroupActions.LoadPermissionsSuccess({\n                    userGroupId: payload.userGroupId,\n                    page,\n                    params: payload.params,\n                  }),\n                ];\n              }),\n              catchError((error: HttpErrorResponse) =>\n                of(\n                  new UserGroupActions.LoadPermissionsFail({\n                    userGroupId: payload.userGroupId,\n                    params: payload.params,\n                    error: normalizeHttpError(error),\n                  })\n                )\n              )\n            )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  loadAvailableOrgCustomers$: Observable<\n    | UserGroupActions.LoadAvailableOrgCustomersSuccess\n    | B2BUserActions.LoadB2BUserSuccess\n    | UserGroupActions.LoadAvailableOrgCustomersFail\n  > = this.actions$.pipe(\n    ofType(UserGroupActions.LOAD_USER_GROUP_AVAILABLE_CUSTOMERS),\n    map((action: UserGroupActions.LoadAvailableOrgCustomers) => action.payload),\n    groupBy(({ userGroupId, params }) =>\n      StateUtils.serializeParams(userGroupId, params)\n    ),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((payload) =>\n          this.userGroupConnector\n            .getAvailableOrgCustomers(\n              payload.userId,\n              payload.userGroupId,\n              payload.params\n            )\n            .pipe(\n              switchMap((customers: EntitiesModel<B2BUser>) => {\n                const { values, page } = StateUtils.normalizeListPage(\n                  customers,\n                  'customerId'\n                );\n                return [\n                  new B2BUserActions.LoadB2BUserSuccess(values),\n                  new UserGroupActions.LoadAvailableOrgCustomersSuccess({\n                    userGroupId: payload.userGroupId,\n                    page,\n                    params: payload.params,\n                  }),\n                ];\n              }),\n              catchError((error: HttpErrorResponse) =>\n                of(\n                  new UserGroupActions.LoadAvailableOrgCustomersFail({\n                    userGroupId: payload.userGroupId,\n                    params: payload.params,\n                    error: normalizeHttpError(error),\n                  })\n                )\n              )\n            )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  createUserGroup$: Observable<\n    | UserGroupActions.CreateUserGroupSuccess\n    | UserGroupActions.CreateUserGroupFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(UserGroupActions.CREATE_USER_GROUP),\n    map((action: UserGroupActions.CreateUserGroup) => action.payload),\n    switchMap((payload) =>\n      this.userGroupConnector.create(payload.userId, payload.userGroup).pipe(\n        switchMap((data) => [\n          new UserGroupActions.CreateUserGroupSuccess(data),\n          new OrganizationActions.OrganizationClearData(),\n        ]),\n        catchError((error: HttpErrorResponse) =>\n          from([\n            new UserGroupActions.CreateUserGroupFail({\n              userGroupId: payload.userGroup.uid,\n              error: normalizeHttpError(error),\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ])\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updateUserGroup$: Observable<\n    | UserGroupActions.UpdateUserGroupSuccess\n    | UserGroupActions.UpdateUserGroupFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(UserGroupActions.UPDATE_USER_GROUP),\n    map((action: UserGroupActions.UpdateUserGroup) => action.payload),\n    switchMap((payload) =>\n      this.userGroupConnector\n        .update(payload.userId, payload.userGroupId, payload.userGroup)\n        .pipe(\n          switchMap(() => [\n            // TODO: Workaround for empty PATCH response:\n            new UserGroupActions.UpdateUserGroupSuccess(payload.userGroup),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new UserGroupActions.UpdateUserGroupFail({\n                userGroupId: payload.userGroup.uid,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  deleteUserGroup$: Observable<\n    | UserGroupActions.DeleteUserGroupSuccess\n    | UserGroupActions.DeleteUserGroupFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(UserGroupActions.DELETE_USER_GROUP),\n    map((action: UserGroupActions.DeleteUserGroup) => action.payload),\n    switchMap((payload) =>\n      this.userGroupConnector.delete(payload.userId, payload.userGroupId).pipe(\n        switchMap((data) => [\n          new UserGroupActions.DeleteUserGroupSuccess(data),\n          new OrganizationActions.OrganizationClearData(),\n        ]),\n        catchError((error: HttpErrorResponse) =>\n          from([\n            new UserGroupActions.DeleteUserGroupFail({\n              userGroupId: payload.userGroupId,\n              error: normalizeHttpError(error),\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ])\n        )\n      )\n    )\n  );\n\n  @Effect()\n  assignPermissionToUserGroup$: Observable<\n    | UserGroupActions.AssignPermissionSuccess\n    | UserGroupActions.AssignPermissionFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(UserGroupActions.USER_GROUP_ASSIGN_PERMISSION),\n    map((action: UserGroupActions.AssignPermission) => action.payload),\n    mergeMap((payload) =>\n      this.userGroupConnector\n        .assignOrderApprovalPermission(\n          payload.userId,\n          payload.userGroupId,\n          payload.permissionUid\n        )\n        .pipe(\n          switchMap((data) => [\n            new UserGroupActions.AssignPermissionSuccess({\n              permissionUid: data.id,\n              selected: data.selected,\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new UserGroupActions.AssignPermissionFail({\n                userGroupId: payload.userGroupId,\n                permissionUid: payload.permissionUid,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  assignMemberUnitUserGroup$: Observable<\n    | UserGroupActions.AssignMemberSuccess\n    | UserGroupActions.AssignMemberFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(UserGroupActions.USER_GROUP_ASSIGN_MEMBER),\n    map((action: UserGroupActions.AssignMember) => action.payload),\n    mergeMap((payload) =>\n      this.userGroupConnector\n        .assignMember(payload.userId, payload.userGroupId, payload.customerId)\n        .pipe(\n          switchMap(() => [\n            new UserGroupActions.AssignMemberSuccess({\n              customerId: payload.customerId,\n              selected: true,\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new UserGroupActions.AssignMemberFail({\n                userGroupId: payload.userGroupId,\n                customerId: payload.customerId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  unassignMemberFromUserGroup$: Observable<\n    | UserGroupActions.UnassignMemberSuccess\n    | UserGroupActions.UnassignMemberFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(UserGroupActions.USER_GROUP_UNASSIGN_MEMBER),\n    map((action: UserGroupActions.UnassignMember) => action.payload),\n    mergeMap((payload) =>\n      this.userGroupConnector\n        .unassignMember(payload.userId, payload.userGroupId, payload.customerId)\n        .pipe(\n          switchMap(() => [\n            new UserGroupActions.UnassignMemberSuccess({\n              customerId: payload.customerId,\n              selected: false,\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new UserGroupActions.UnassignMemberFail({\n                userGroupId: payload.userGroupId,\n                customerId: payload.customerId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  unassignPermissionFromUserGroup$: Observable<\n    | UserGroupActions.UnassignPermissionSuccess\n    | UserGroupActions.UnassignPermissionFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(UserGroupActions.USER_GROUP_UNASSIGN_PERMISSION),\n    map((action: UserGroupActions.UnassignPermission) => action.payload),\n    mergeMap((payload) =>\n      this.userGroupConnector\n        .unassignOrderApprovalPermission(\n          payload.userId,\n          payload.userGroupId,\n          payload.permissionUid\n        )\n        .pipe(\n          switchMap((data) => [\n            new UserGroupActions.UnassignPermissionSuccess({\n              permissionUid: data.id,\n              selected: data.selected,\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new UserGroupActions.UnassignPermissionFail({\n                userGroupId: payload.userGroupId,\n                permissionUid: payload.permissionUid,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  @Effect()\n  unassignAllMembersFromUserGroup$: Observable<\n    | UserGroupActions.UnassignAllMembersSuccess\n    | UserGroupActions.UnassignAllMembersFail\n    | OrganizationActions.OrganizationClearData\n  > = this.actions$.pipe(\n    ofType(UserGroupActions.USER_GROUP_UNASSIGN_ALL_MEMBERS),\n    map((action: UserGroupActions.UnassignAllMembers) => action.payload),\n    switchMap((payload) =>\n      this.userGroupConnector\n        .unassignAllMembers(payload.userId, payload.userGroupId)\n        .pipe(\n          switchMap(() => [\n            new UserGroupActions.UnassignAllMembersSuccess({\n              selected: false,\n            }),\n            new OrganizationActions.OrganizationClearData(),\n          ]),\n          catchError((error: HttpErrorResponse) =>\n            from([\n              new UserGroupActions.UnassignAllMembersFail({\n                userGroupId: payload.userGroupId,\n                error: normalizeHttpError(error),\n              }),\n              new OrganizationActions.OrganizationClearData(),\n            ])\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userGroupConnector: UserGroupConnector\n  ) {}\n}\n","import { BudgetEffects } from './budget.effect';\nimport { OrgUnitEffects } from './org-unit.effect';\nimport { PermissionEffects } from './permission.effect';\nimport { CostCenterEffects } from './cost-center.effect';\nimport { B2BUserEffects } from './b2b-user.effect';\nimport { UserGroupEffects } from './user-group.effect';\n\nexport const effects: any[] = [\n  BudgetEffects,\n  OrgUnitEffects,\n  UserGroupEffects,\n  PermissionEffects,\n  CostCenterEffects,\n  B2BUserEffects,\n];\n\nexport * from './budget.effect';\nexport * from './org-unit.effect';\nexport * from './user-group.effect';\nexport * from './permission.effect';\nexport * from './cost-center.effect';\nexport * from './b2b-user.effect';\n","import {\n  B2BUserActions,\n  OrgUnitActions,\n  UserGroupActions,\n} from '../actions/index';\nimport { B2BUser, StateUtils } from '@spartacus/core';\n\nexport const b2bUserInitialState = undefined;\nexport const b2bUsersInitialState = undefined;\n\nexport function b2bUserEntitiesReducer(\n  state: B2BUser = b2bUserInitialState,\n  action: StateUtils.LoaderAction\n): B2BUser {\n  switch (action.type) {\n    case B2BUserActions.LOAD_B2B_USER_SUCCESS:\n    case B2BUserActions.CREATE_B2B_USER_SUCCESS:\n    case B2BUserActions.UPDATE_B2B_USER_SUCCESS:\n      return action.payload;\n    case OrgUnitActions.ASSIGN_ROLE_SUCCESS:\n    case OrgUnitActions.ASSIGN_APPROVER_SUCCESS:\n      return {\n        ...state,\n        selected: action.payload?.selected,\n        roles: [...(state?.roles || []), action.payload?.roleId],\n      };\n    case OrgUnitActions.UNASSIGN_ROLE_SUCCESS:\n    case OrgUnitActions.UNASSIGN_APPROVER_SUCCESS:\n      return {\n        ...state,\n        selected: action.payload?.selected,\n        roles: [...(state?.roles || [])].filter(\n          (role) => role !== action.payload?.roleId\n        ),\n      };\n    case B2BUserActions.ASSIGN_B2B_USER_APPROVER_SUCCESS:\n    case B2BUserActions.UNASSIGN_B2B_USER_APPROVER_SUCCESS:\n    case UserGroupActions.USER_GROUP_ASSIGN_MEMBER_SUCCESS:\n    case UserGroupActions.USER_GROUP_UNASSIGN_MEMBER_SUCCESS:\n    case UserGroupActions.USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS:\n      return {\n        ...state,\n        ...action.payload,\n      };\n  }\n  return state;\n}\n\nexport function userListReducer(\n  state = b2bUsersInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case B2BUserActions.LOAD_B2B_USERS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n\nexport function b2bUserApproverListReducer(\n  state = b2bUsersInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case B2BUserActions.LOAD_B2B_USER_APPROVERS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n\nexport function b2bUserPermissionListReducer(\n  state = b2bUsersInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case B2BUserActions.LOAD_B2B_USER_PERMISSIONS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n\nexport function b2bUserUserGroupListReducer(\n  state = b2bUsersInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case B2BUserActions.LOAD_B2B_USER_USER_GROUPS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n","import { StateUtils } from '@spartacus/core';\nimport { CostCenterActions, BudgetActions } from '../actions/index';\nimport { Budget } from '../../model/budget.model';\n\nexport const budgetInitialState = undefined;\nexport const budgetsInitialState = undefined;\n\nexport function budgetsEntitiesReducer(\n  state: Budget = budgetInitialState,\n  action: StateUtils.LoaderAction\n): Budget {\n  switch (action.type) {\n    case BudgetActions.LOAD_BUDGET_SUCCESS:\n    case BudgetActions.CREATE_BUDGET_SUCCESS:\n    case BudgetActions.UPDATE_BUDGET_SUCCESS:\n      return action.payload;\n    case CostCenterActions.UNASSIGN_BUDGET_SUCCESS:\n    case CostCenterActions.ASSIGN_BUDGET_SUCCESS:\n      return {\n        ...state,\n        ...action.payload,\n      };\n  }\n  return state;\n}\n\nexport function budgetsListReducer(\n  state = budgetsInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case BudgetActions.LOAD_BUDGETS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n","import { CostCenter, StateUtils } from '@spartacus/core';\nimport { CostCenterActions } from '../actions/index';\n\nexport const costCenterInitialState = undefined;\nexport const costCentersInitialState = undefined;\n\nexport function costCentersEntitiesReducer(\n  state: CostCenter = costCenterInitialState,\n  action: StateUtils.LoaderAction\n): CostCenter {\n  switch (action.type) {\n    case CostCenterActions.LOAD_COST_CENTER_SUCCESS:\n    case CostCenterActions.CREATE_COST_CENTER_SUCCESS:\n    case CostCenterActions.UPDATE_COST_CENTER_SUCCESS:\n      return action.payload;\n  }\n  return state;\n}\n\nexport function costCentersListReducer(\n  state = costCentersInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case CostCenterActions.LOAD_COST_CENTERS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n\nexport function costCenterAssignedBudgetsListReducer(\n  state = costCentersInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case CostCenterActions.LOAD_ASSIGNED_BUDGETS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n","import { StateUtils } from '@spartacus/core';\nimport { B2BUnitNode } from '../../model/unit-node.model';\nimport { OrgUnitActions } from '../actions/index';\n\nexport const orgUnitInitialState = undefined;\nexport const orgUnitsInitialState = undefined;\n\nexport function orgUnitEntitiesReducer(\n  state: B2BUnitNode = orgUnitInitialState,\n  action: StateUtils.LoaderAction\n): B2BUnitNode {\n  switch (action.type) {\n    case OrgUnitActions.LOAD_ORG_UNIT_SUCCESS:\n    case OrgUnitActions.CREATE_ORG_UNIT_SUCCESS:\n      return action.payload;\n    case OrgUnitActions.UPDATE_ORG_UNIT_SUCCESS:\n      return {\n        ...state,\n        ...action.payload,\n      };\n  }\n  return state;\n}\n\nexport function orgUnitListReducer(\n  state = orgUnitsInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n  }\n  return state;\n}\n\nexport function orgUnitUserListReducer(\n  state = orgUnitsInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case OrgUnitActions.LOAD_ASSIGNED_USERS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n\nexport function orgUnitAddressListReducer(\n  state = orgUnitsInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case OrgUnitActions.LOAD_ADDRESSES_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n","import { StateUtils } from '@spartacus/core';\nimport { Permission } from '../../model/permission.model';\nimport {\n  B2BUserActions,\n  PermissionActions,\n  UserGroupActions,\n} from '../actions/index';\n\nexport const permissionInitialState = undefined;\nexport const permissionsInitialState = undefined;\n\nexport function permissionsEntitiesReducer(\n  state: Permission = permissionInitialState,\n  action: StateUtils.LoaderAction\n): Permission {\n  switch (action.type) {\n    case PermissionActions.LOAD_PERMISSION_SUCCESS:\n    case PermissionActions.CREATE_PERMISSION_SUCCESS:\n    case PermissionActions.UPDATE_PERMISSION_SUCCESS:\n      return action.payload;\n    case UserGroupActions.USER_GROUP_ASSIGN_PERMISSION_SUCCESS:\n    case UserGroupActions.USER_GROUP_UNASSIGN_PERMISSION_SUCCESS:\n    case B2BUserActions.ASSIGN_B2B_USER_PERMISSION_SUCCESS:\n    case B2BUserActions.UNASSIGN_B2B_USER_PERMISSION_SUCCESS:\n      return {\n        ...state,\n        ...action.payload,\n      };\n  }\n  return state;\n}\n\nexport function permissionsListReducer(\n  state = permissionsInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case PermissionActions.LOAD_PERMISSIONS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n","import * as UserGroupActions from '../actions/user-group.action';\nimport { StateUtils } from '@spartacus/core';\nimport { B2BUserActions } from '../actions/index';\nimport { UserGroup } from '../../model/user-group.model';\n\nexport const userGroupInitialState = undefined;\nexport const userGroupsInitialState = undefined;\n\nexport function userGroupEntitiesReducer(\n  state: UserGroup = userGroupInitialState,\n  action: StateUtils.LoaderAction\n): UserGroup {\n  switch (action.type) {\n    case UserGroupActions.LOAD_USER_GROUP_SUCCESS:\n    case UserGroupActions.CREATE_USER_GROUP_SUCCESS:\n    case UserGroupActions.UPDATE_USER_GROUP_SUCCESS:\n      return action.payload;\n    case B2BUserActions.ASSIGN_B2B_USER_USER_GROUP_SUCCESS:\n    case B2BUserActions.UNASSIGN_B2B_USER_USER_GROUP_SUCCESS:\n      return {\n        ...state,\n        ...action.payload,\n      };\n  }\n  return state;\n}\n\nexport function userGroupsListReducer(\n  state = userGroupsInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case UserGroupActions.LOAD_USER_GROUPS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n\nexport function userGroupAvailableOrderApprovalPermissionsListReducer(\n  state = userGroupsInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case UserGroupActions.LOAD_USER_GROUP_PERMISSIONS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n\nexport function userGroupAvailablOrgCustomersListReducer(\n  state = userGroupsInitialState,\n  action: StateUtils.LoaderAction\n): any {\n  switch (action.type) {\n    case UserGroupActions.LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS:\n      return action.payload.page;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport {\n  Address,\n  AuthActions,\n  B2BApprovalProcess,\n  B2BUnit,\n  B2BUser,\n  CostCenter,\n  ListModel,\n  OrderApprovalPermissionType,\n  SiteContextActions,\n  StateUtils,\n} from '@spartacus/core';\nimport { Budget } from '../../model/budget.model';\nimport { Permission } from '../../model/permission.model';\nimport { B2BUnitNode } from '../../model/unit-node.model';\nimport { UserGroup } from '../../model/user-group.model';\nimport { OrganizationActions } from '../actions';\nimport {\n  ADDRESS_ENTITIES,\n  ADDRESS_LIST,\n  B2B_USER_APPROVERS,\n  B2B_USER_ENTITIES,\n  B2B_USER_FEATURE,\n  B2B_USER_PERMISSIONS,\n  B2B_USER_USER_GROUPS,\n  BUDGET_ENTITIES,\n  BUDGET_FEATURE,\n  BUDGET_LIST,\n  COST_CENTER_ASSIGNED_BUDGETS,\n  COST_CENTER_ENTITIES,\n  COST_CENTER_FEATURE,\n  COST_CENTER_LIST,\n  OrganizationState,\n  ORG_UNIT_APPROVAL_PROCESSES_ENTITIES,\n  ORG_UNIT_ASSIGNED_USERS,\n  ORG_UNIT_ENTITIES,\n  ORG_UNIT_FEATURE,\n  ORG_UNIT_NODE_LIST,\n  ORG_UNIT_TREE_ENTITY,\n  PERMISSION_ENTITIES,\n  PERMISSION_FEATURE,\n  PERMISSION_LIST,\n  PERMISSION_TYPES_LIST,\n  USER_GROUP_AVAILABLE_CUSTOMERS,\n  USER_GROUP_ENTITIES,\n  USER_GROUP_FEATURE,\n  USER_GROUP_LIST,\n  USER_GROUP_PERMISSIONS,\n  USER_LIST,\n} from '../organization-state';\nimport {\n  b2bUserApproverListReducer,\n  b2bUserEntitiesReducer,\n  b2bUserPermissionListReducer,\n  b2bUserUserGroupListReducer,\n  userListReducer,\n} from './b2b-user.reducer';\nimport { budgetsEntitiesReducer, budgetsListReducer } from './budget.reducer';\nimport {\n  costCenterAssignedBudgetsListReducer,\n  costCentersEntitiesReducer,\n  costCentersListReducer,\n} from './cost-center.reducer';\nimport {\n  orgUnitAddressListReducer,\n  orgUnitEntitiesReducer,\n  orgUnitUserListReducer,\n} from './org-unit.reducer';\nimport {\n  permissionsEntitiesReducer,\n  permissionsListReducer,\n} from './permission.reducer';\nimport {\n  userGroupAvailableOrderApprovalPermissionsListReducer,\n  userGroupAvailablOrgCustomersListReducer,\n  userGroupEntitiesReducer,\n  userGroupsListReducer,\n} from './user-group.reducer';\n\nexport function getReducers(): ActionReducerMap<OrganizationState> {\n  return {\n    [BUDGET_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer<Budget>(\n        BUDGET_ENTITIES,\n        budgetsEntitiesReducer\n      ),\n      list: StateUtils.entityLoaderReducer<ListModel>(\n        BUDGET_LIST,\n        budgetsListReducer\n      ),\n    }),\n    [PERMISSION_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer<Permission>(\n        PERMISSION_ENTITIES,\n        permissionsEntitiesReducer\n      ),\n      list: StateUtils.entityLoaderReducer<ListModel>(\n        PERMISSION_LIST,\n        permissionsListReducer\n      ),\n      permissionTypes: StateUtils.entityLoaderReducer<\n        OrderApprovalPermissionType[]\n      >(PERMISSION_TYPES_LIST),\n    }),\n    [ORG_UNIT_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer<B2BUnit>(\n        ORG_UNIT_ENTITIES,\n        orgUnitEntitiesReducer\n      ),\n      availableOrgUnitNodes:\n        StateUtils.entityLoaderReducer<B2BUnitNode[]>(ORG_UNIT_NODE_LIST),\n      tree: StateUtils.entityLoaderReducer<B2BUnitNode>(ORG_UNIT_TREE_ENTITY),\n      approvalProcesses: StateUtils.entityLoaderReducer<B2BApprovalProcess[]>(\n        ORG_UNIT_APPROVAL_PROCESSES_ENTITIES\n      ),\n      users: StateUtils.entityLoaderReducer<ListModel>(\n        ORG_UNIT_ASSIGNED_USERS,\n        orgUnitUserListReducer\n      ),\n      addressList: StateUtils.entityLoaderReducer<ListModel>(\n        ADDRESS_LIST,\n        orgUnitAddressListReducer\n      ),\n      addressEntities:\n        StateUtils.entityLoaderReducer<Address>(ADDRESS_ENTITIES),\n    }),\n    [USER_GROUP_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer<UserGroup>(\n        USER_GROUP_ENTITIES,\n        userGroupEntitiesReducer\n      ),\n      list: StateUtils.entityLoaderReducer<ListModel>(\n        USER_GROUP_LIST,\n        userGroupsListReducer\n      ),\n      permissions: StateUtils.entityLoaderReducer<ListModel>(\n        USER_GROUP_PERMISSIONS,\n        userGroupAvailableOrderApprovalPermissionsListReducer\n      ),\n      customers: StateUtils.entityLoaderReducer<ListModel>(\n        USER_GROUP_AVAILABLE_CUSTOMERS,\n        userGroupAvailablOrgCustomersListReducer\n      ),\n    }),\n    [COST_CENTER_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer<CostCenter>(\n        COST_CENTER_ENTITIES,\n        costCentersEntitiesReducer\n      ),\n      list: StateUtils.entityLoaderReducer<ListModel>(\n        COST_CENTER_LIST,\n        costCentersListReducer\n      ),\n      budgets: StateUtils.entityLoaderReducer<ListModel>(\n        COST_CENTER_ASSIGNED_BUDGETS,\n        costCenterAssignedBudgetsListReducer\n      ),\n    }),\n    [B2B_USER_FEATURE]: combineReducers({\n      entities: StateUtils.entityLoaderReducer<B2BUser>(\n        B2B_USER_ENTITIES,\n        b2bUserEntitiesReducer\n      ),\n      list: StateUtils.entityLoaderReducer<ListModel>(\n        USER_LIST,\n        userListReducer\n      ),\n      approvers: StateUtils.entityLoaderReducer<ListModel>(\n        B2B_USER_APPROVERS,\n        b2bUserApproverListReducer\n      ),\n      permissions: StateUtils.entityLoaderReducer<ListModel>(\n        B2B_USER_PERMISSIONS,\n        b2bUserPermissionListReducer\n      ),\n      userGroups: StateUtils.entityLoaderReducer<ListModel>(\n        B2B_USER_USER_GROUPS,\n        b2bUserUserGroupListReducer\n      ),\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<OrganizationState>> =\n  new InjectionToken<ActionReducerMap<OrganizationState>>(\n    'OrganizationReducers'\n  );\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearOrganizationState(\n  reducer: ActionReducer<OrganizationState, Action>\n): ActionReducer<OrganizationState, Action> {\n  return function (state, action) {\n    if (action.type === OrganizationActions.CLEAR_ORGANIZATION_DATA) {\n      state = undefined;\n    }\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    if (action.type === SiteContextActions.LANGUAGE_CHANGE) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearOrganizationState];\n","import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { effects } from './effects/index';\nimport { ORGANIZATION_FEATURE } from './organization-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ORGANIZATION_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class OrganizationStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { B2BUserConnector } from './connectors/b2b-user/b2b-user.connector';\nimport { BudgetConnector } from './connectors/budget/budget.connector';\nimport { CostCenterConnector } from './connectors/cost-center/cost-center.connector';\nimport { OrgUnitConnector } from './connectors/org-unit/org-unit.connector';\nimport { PermissionConnector } from './connectors/permission/permission.connector';\nimport { UserGroupConnector } from './connectors/user-group/user-group.connector';\nimport { OrganizationPageMetaModule } from './services/organization-page-meta.module';\nimport { OrganizationStoreModule } from './store/organization-store.module';\n\n@NgModule({\n  imports: [OrganizationPageMetaModule, OrganizationStoreModule],\n})\nexport class AdministrationCoreModule {\n  static forRoot(): ModuleWithProviders<AdministrationCoreModule> {\n    return {\n      ngModule: AdministrationCoreModule,\n      providers: [\n        BudgetConnector,\n        OrgUnitConnector,\n        UserGroupConnector,\n        PermissionConnector,\n        CostCenterConnector,\n        B2BUserConnector,\n      ],\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter, B2BUser, EntitiesModel } from '@spartacus/core';\n\nexport const B2B_USER_NORMALIZER = new InjectionToken<Converter<any, B2BUser>>(\n  'B2BUserNormalizer'\n);\n\nexport const B2B_USER_SERIALIZER = new InjectionToken<Converter<B2BUser, any>>(\n  'B2BUserSerializer'\n);\n\nexport const B2B_USERS_NORMALIZER = new InjectionToken<\n  Converter<any, EntitiesModel<B2BUser>>\n>('UserListNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Budget } from '../../model/budget.model';\nimport { Converter, EntitiesModel } from '@spartacus/core';\n\nexport const BUDGET_NORMALIZER = new InjectionToken<Converter<any, Budget>>(\n  'BudgetNormalizer'\n);\nexport const BUDGETS_NORMALIZER = new InjectionToken<\n  Converter<any, EntitiesModel<Budget>>\n>('BudgetsListNormalizer');\n\nexport const BUDGET_SERIALIZER = new InjectionToken<Converter<Budget, any>>(\n  'BudgetSerializer'\n);\n","import { InjectionToken } from '@angular/core';\nimport { B2BApprovalProcess, B2BUnit, Converter } from '@spartacus/core';\nimport { B2BUnitNode } from '../../model/unit-node.model';\n\nexport const B2BUNIT_NODE_NORMALIZER = new InjectionToken<\n  Converter<any, B2BUnitNode>\n>('B2BUnitNodeNormalizer');\n\nexport const B2BUNIT_NODE_LIST_NORMALIZER = new InjectionToken<\n  Converter<any, B2BUnitNode[]>\n>('B2BUnitNodeListNormalizer');\n\nexport const B2BUNIT_NORMALIZER = new InjectionToken<Converter<any, B2BUnit>>(\n  'B2BUnitNormalizer'\n);\n\nexport const B2BUNIT_SERIALIZER = new InjectionToken<Converter<B2BUnit, any>>(\n  'B2BUnitSerializer'\n);\n\nexport const B2BUNIT_APPROVAL_PROCESSES_NORMALIZER = new InjectionToken<\n  Converter<any, B2BApprovalProcess[]>\n>('B2BUnitApprovalProcessNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport {\n  Converter,\n  EntitiesModel,\n  OrderApprovalPermissionType,\n} from '@spartacus/core';\nimport { Permission } from '../../model/permission.model';\n\nexport const PERMISSION_NORMALIZER = new InjectionToken<\n  Converter<any, Permission>\n>('PermissionNormalizer');\n\nexport const PERMISSIONS_NORMALIZER = new InjectionToken<\n  Converter<any, EntitiesModel<Permission>>\n>('PermissionsListNormalizer');\n\nexport const PERMISSION_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, OrderApprovalPermissionType>\n>('PermissionTypeNormalizer');\n\nexport const PERMISSION_TYPES_NORMALIZER = new InjectionToken<\n  Converter<any, OrderApprovalPermissionType[]>\n>('PermissionTypesListNormalizer');\n\nexport const PERMISSION_SERIALIZER = new InjectionToken<\n  Converter<Permission, any>\n>('PermissionSerializer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter, EntitiesModel } from '@spartacus/core';\nimport { UserGroup } from '../../model/user-group.model';\n\nexport const USER_GROUP_NORMALIZER = new InjectionToken<\n  Converter<any, UserGroup>\n>('UserGroupNormalizer');\n\nexport const USER_GROUP_SERIALIZER = new InjectionToken<\n  Converter<UserGroup, any>\n>('UserGroupSerializer');\n\nexport const USER_GROUPS_NORMALIZER = new InjectionToken<\n  Converter<any, EntitiesModel<UserGroup>>\n>('UserGroupListNormalizer');\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  B2BUserRole,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminGuard implements CanActivate {\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.userService.get().pipe(\n      filter((user: User) => user && Object.keys(user).length > 0),\n      pluck('roles'),\n      map((roles: string[]) => {\n        const hasRole =\n          Array.isArray(roles) && roles.includes(B2BUserRole.ADMIN);\n\n        if (!hasRole) {\n          // routing as temporary solution until /organization won't\n          // have set up proper permission on backend\n          this.routingService.go({ cxRoute: 'organization' });\n\n          this.globalMessageService.add(\n            { key: 'organization.notification.noSufficientPermissions' },\n            GlobalMessageType.MSG_TYPE_WARNING\n          );\n        }\n\n        return hasRole;\n      })\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  ErrorModel,\n  GlobalMessageType,\n  HttpErrorHandler,\n  HttpResponseStatus,\n  Priority,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrganizationBadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  protected costCenterMask =\n    /ambiguous unique keys \\{code\\=(.*)\\} for model B2BCostCenterModel/;\n  protected unitMask =\n    /ambiguous unique keys \\{uid\\=(.*)\\} for model B2BUnitModel/;\n  protected permissionMask =\n    /Approval Permission with code\\: (.*) already exists\\./;\n  protected unknownMask = /Model saving error\\./;\n\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return super.hasMatch(errorResponse) && this.matchMask(errorResponse);\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.getErrors(response).forEach(({ message }: ErrorModel) => {\n      // Handle cost center conflict\n      this.handleOrganizationConflict(\n        message,\n        this.costCenterMask,\n        'costCenter'\n      );\n      // Handle unit conflict\n      this.handleOrganizationConflict(message, this.unitMask, 'unit');\n      // Handle unit conflict\n      this.handleOrganizationConflict(\n        message,\n        this.permissionMask,\n        'permission'\n      );\n      // Handle unknown conflict\n      this.handleOrganizationConflict(message, this.unknownMask, 'unknown');\n    });\n  }\n\n  protected matchMask(response: HttpErrorResponse): boolean {\n    return this.getErrors(response).some((error) =>\n      [\n        this.costCenterMask,\n        this.unitMask,\n        this.permissionMask,\n        this.unknownMask,\n      ].some((mask) => mask.test(error.message))\n    );\n  }\n\n  protected handleOrganizationConflict(\n    message: string,\n    mask: RegExp,\n    key: string\n  ) {\n    const result = message.match(mask);\n    const params = { code: result?.[1] };\n    if (result) {\n      this.globalMessageService.add(\n        { key: `organization.httpHandlers.conflict.${key}`, params },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) =>\n        error.type === 'ModelSavingError' || error.type === 'DuplicateUidError'\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.NORMAL;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport {\n  ErrorModel,\n  GlobalMessageType,\n  HttpErrorHandler,\n  HttpResponseStatus,\n  Priority,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrganizationConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  protected budgetMask = /Budget with code \\[(.*)\\] already exists/;\n  protected userMask = /User already exists/;\n  protected userGroupMask = /Member Permission with the same id already exists/;\n  protected unitMask = /Organizational unit with uid \\[(.*)\\] already exists/;\n\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return super.hasMatch(errorResponse) && this.matchMask(errorResponse);\n  }\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse) {\n    return this.getErrors(response).forEach(({ message }: ErrorModel) => {\n      // Handle budget conflict\n      this.handleConflict(message, this.budgetMask, 'budget');\n      // Handle user email conflict\n      this.handleConflict(message, this.userMask, 'user', request?.body?.email);\n      // Handle user group conflict\n      this.handleConflict(\n        message,\n        this.userGroupMask,\n        'userGroup',\n        request?.body?.uid\n      );\n      // Handle unit conflict\n      this.handleConflict(message, this.unitMask, 'unit');\n    });\n  }\n\n  protected matchMask(response: HttpErrorResponse): boolean {\n    return this.getErrors(response).some((error) =>\n      [this.budgetMask, this.userMask, this.userGroupMask, this.unitMask].some(\n        (mask) => mask.test(error.message)\n      )\n    );\n  }\n\n  protected handleConflict(\n    message: string,\n    mask: RegExp,\n    key: string,\n    code?: string\n  ) {\n    const result = message.match(mask);\n    const params = { code: result?.[1] ?? code };\n    if (result) {\n      this.globalMessageService.add(\n        { key: `organization.httpHandlers.conflict.${key}`, params },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) => error.type === 'AlreadyExistsError'\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.NORMAL;\n  }\n}\n","export enum LoadStatus {\n  SUCCESS,\n  ERROR,\n}\n\nexport interface OrganizationItemStatus<T> {\n  status: LoadStatus;\n  item: T;\n}\n","import {\n  B2BUnit,\n  Currency,\n  OrderApprovalPermissionType,\n} from '@spartacus/core';\n\nexport enum Period {\n  DAY = 'DAY',\n  WEEK = 'WEEK',\n  MONTH = 'MONTH',\n  QUARTER = 'QUARTER',\n  YEAR = 'YEAR',\n}\n\nexport interface Permission {\n  active?: boolean;\n  code?: string;\n  currency?: Currency;\n  orderApprovalPermissionType?: OrderApprovalPermissionType;\n  orgUnit?: B2BUnit;\n  periodRange?: Period;\n  selected?: boolean;\n  threshold?: number;\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ORGANIZATION_FEATURE,\n  OrganizationState,\n  StateWithOrganization,\n} from '../organization-state';\n\nexport const getOrganizationState: MemoizedSelector<\n  StateWithOrganization,\n  OrganizationState\n> = createFeatureSelector<OrganizationState>(ORGANIZATION_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  EntitiesModel,\n  SearchConfig,\n  StateUtils,\n  OrderApprovalPermissionType,\n} from '@spartacus/core';\nimport { Permission } from '../../model/permission.model';\nimport {\n  OrganizationState,\n  PermissionManagement,\n  PERMISSION_FEATURE,\n  PERMISSION_TYPES,\n  StateWithOrganization,\n} from '../organization-state';\nimport { getOrganizationState } from './feature.selector';\n\nexport const getPermissionManagementState: MemoizedSelector<\n  StateWithOrganization,\n  PermissionManagement\n> = createSelector(\n  getOrganizationState,\n  (state: OrganizationState) => state[PERMISSION_FEATURE]\n);\n\nexport const getPermissionsState: MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.EntityLoaderState<Permission>\n> = createSelector(\n  getPermissionManagementState,\n  (state: PermissionManagement) => state && state.entities\n);\n\nexport const getPermissionState = (\n  permissionId: string\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<Permission>\n> =>\n  createSelector(\n    getPermissionsState,\n    (state: StateUtils.EntityLoaderState<Permission>) =>\n      StateUtils.entityLoaderStateSelector(state, permissionId)\n  );\n\nexport const getPermissionTypesState: MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.EntityLoaderState<OrderApprovalPermissionType[]>\n> = createSelector(\n  getPermissionManagementState,\n  (state: PermissionManagement) => state && state.permissionTypes\n);\n\nexport const getPermission = (\n  permissionCode: string\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<Permission>\n> =>\n  createSelector(\n    getPermissionsState,\n    (state: StateUtils.EntityLoaderState<Permission>) =>\n      StateUtils.entityLoaderStateSelector(state, permissionCode)\n  );\n\nexport const getPermissionValue = (\n  permissionCode: string\n): MemoizedSelector<StateWithOrganization, Permission> => {\n  return createSelector(getPermission(permissionCode), (permissionState) =>\n    StateUtils.loaderValueSelector(permissionState)\n  );\n};\n\nexport const getPermissionList = (\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<Permission>>\n> =>\n  createSelector(getPermissionManagementState, (state: PermissionManagement) =>\n    StateUtils.denormalizeSearch<Permission>(state, params)\n  );\n\nexport const getPermissionTypes = (): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<OrderApprovalPermissionType[]>\n> =>\n  createSelector(\n    getPermissionTypesState,\n    (state: StateUtils.EntityLoaderState<OrderApprovalPermissionType[]>) =>\n      StateUtils.entityLoaderStateSelector(state, PERMISSION_TYPES)\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  B2BUser,\n  EntitiesModel,\n  SearchConfig,\n  StateUtils,\n} from '@spartacus/core';\nimport { Permission } from '../../model/permission.model';\nimport { UserGroup } from '../../model/user-group.model';\nimport {\n  B2BUserManagement,\n  B2B_USER_FEATURE,\n  OrganizationState,\n  StateWithOrganization,\n  USER_GROUP_FEATURE,\n} from '../organization-state';\nimport { getOrganizationState } from './feature.selector';\nimport { getPermissionsState } from './permission.selector';\n\nexport const getB2BUserManagementState: MemoizedSelector<\n  StateWithOrganization,\n  B2BUserManagement\n> = createSelector(\n  getOrganizationState,\n  (state: OrganizationState) => state[B2B_USER_FEATURE]\n);\n\nexport const getB2BUsersState: MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.EntityLoaderState<B2BUser>\n> = createSelector(\n  getB2BUserManagementState,\n  (state: B2BUserManagement) => state && state.entities\n);\n\nexport const getB2BUserState = (\n  orgCustomerId: string\n): MemoizedSelector<StateWithOrganization, StateUtils.LoaderState<B2BUser>> =>\n  createSelector(\n    getB2BUsersState,\n    (state: StateUtils.EntityLoaderState<B2BUser>) =>\n      StateUtils.entityLoaderStateSelector(state, orgCustomerId)\n  );\n\nexport const getB2BUserValue = (\n  orgCustomerId: string\n): MemoizedSelector<StateWithOrganization, B2BUser> => {\n  return createSelector(getB2BUserState(orgCustomerId), (b2BUserState) =>\n    StateUtils.loaderValueSelector(b2BUserState)\n  );\n};\n\nexport const getUserList = (\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<B2BUser>>\n> =>\n  createSelector(getB2BUserManagementState, (state: B2BUserManagement) =>\n    StateUtils.denormalizeSearch<B2BUser>(state, params)\n  );\n\nexport const getB2BUserApprovers = (\n  code: string,\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<B2BUser>>\n> =>\n  createSelector(\n    getB2BUserManagementState,\n    getB2BUsersState,\n    (\n      state: B2BUserManagement,\n      approvers: StateUtils.EntityLoaderState<B2BUser>\n    ) =>\n      StateUtils.denormalizeCustomB2BSearch(\n        state.approvers,\n        approvers,\n        params,\n        code\n      )\n  );\n\nexport const getB2BUserPermissions = (\n  code: string,\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<Permission>>\n> =>\n  createSelector(\n    getB2BUserManagementState,\n    getPermissionsState,\n    (\n      state: B2BUserManagement,\n      permissions: StateUtils.EntityLoaderState<Permission>\n    ) =>\n      StateUtils.denormalizeCustomB2BSearch(\n        state.permissions,\n        permissions,\n        params,\n        code\n      )\n  );\n\n// avoid circular dependency\nconst getUserGroupsState: MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.EntityLoaderState<UserGroup>\n> = createSelector(\n  getOrganizationState,\n  (state: OrganizationState) => state[USER_GROUP_FEATURE].entities\n);\n\nexport const getB2BUserUserGroups = (\n  code: string,\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<UserGroup>>\n> =>\n  createSelector(\n    getB2BUserManagementState,\n    getUserGroupsState,\n    (\n      state: B2BUserManagement,\n      userGroups: StateUtils.EntityLoaderState<UserGroup>\n    ) =>\n      StateUtils.denormalizeCustomB2BSearch(\n        state.userGroups,\n        userGroups,\n        params,\n        code\n      )\n  );\n","import { StateUtils } from '@spartacus/core';\nimport { Observable, queueScheduler } from 'rxjs';\nimport { filter, map, observeOn, pairwise } from 'rxjs/operators';\nimport {\n  LoadStatus,\n  OrganizationItemStatus,\n} from '../model/organization-item-status';\n\nexport function getItemStatus<T>(\n  itemState: Observable<StateUtils.LoaderState<T>>\n): Observable<OrganizationItemStatus<T>> {\n  return itemState.pipe(\n    observeOn(queueScheduler),\n    pairwise(),\n    filter(([previousState]) => previousState.loading),\n    map(([_previousState, currentState]) => ({\n      status: currentState.success\n        ? LoadStatus.SUCCESS\n        : currentState.error\n        ? LoadStatus.ERROR\n        : null,\n      item: currentState.value,\n    }))\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {\n  B2BUser,\n  B2BUserRole,\n  EntitiesModel,\n  SearchConfig,\n  StateUtils,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport { Observable, queueScheduler, using } from 'rxjs';\nimport { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';\nimport { OrganizationItemStatus } from '../model/organization-item-status';\nimport { Permission } from '../model/permission.model';\nimport { UserGroup } from '../model/user-group.model';\nimport { B2BUserActions } from '../store/actions/index';\nimport { StateWithOrganization } from '../store/organization-state';\nimport {\n  getB2BUserApprovers,\n  getB2BUserPermissions,\n  getB2BUserState,\n  getB2BUserUserGroups,\n  getB2BUserValue,\n  getUserList,\n} from '../store/selectors/b2b-user.selector';\nimport { getItemStatus } from '../utils/get-item-status';\n\n@Injectable({ providedIn: 'root' })\nexport class B2BUserService {\n  constructor(\n    protected store: Store<StateWithOrganization | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  load(orgCustomerId: string) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.LoadB2BUser({\n            userId,\n            orgCustomerId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadList(params?: SearchConfig): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.LoadB2BUsers({ userId, params })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  private getB2BUserValue(orgCustomerId: string): Observable<B2BUser> {\n    return this.store\n      .select(getB2BUserValue(orgCustomerId))\n      .pipe(filter(Boolean));\n  }\n\n  get(orgCustomerId: string): Observable<B2BUser> {\n    const loading$ = this.getB2BUserState(orgCustomerId).pipe(\n      auditTime(0),\n      tap((state) => {\n        if (!(state.loading || state.success || state.error)) {\n          this.load(orgCustomerId);\n        }\n      })\n    );\n\n    return using(\n      () => loading$.subscribe(),\n      () => this.getB2BUserValue(orgCustomerId)\n    );\n  }\n\n  getList(params: SearchConfig): Observable<EntitiesModel<B2BUser>> {\n    return this.getUserList(params).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<B2BUser>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadList(params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<B2BUser>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  getErrorState(orgCustomerId): Observable<boolean> {\n    return this.getB2BUserState(orgCustomerId).pipe(\n      map((state) => state.error)\n    );\n  }\n\n  create(orgCustomer: B2BUser): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.CreateB2BUser({\n            userId,\n            orgCustomer,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  update(orgCustomerId: string, orgCustomer: B2BUser): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.UpdateB2BUser({\n            userId,\n            orgCustomerId,\n            orgCustomer,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getLoadingStatus(\n    orgCustomerId: string\n  ): Observable<OrganizationItemStatus<B2BUser>> {\n    return getItemStatus(this.getB2BUserState(orgCustomerId));\n  }\n\n  loadApprovers(orgCustomerId: string, params: SearchConfig): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.LoadB2BUserApprovers({\n            userId,\n            orgCustomerId,\n            params,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getApprovers(\n    orgCustomerId: string,\n    params: SearchConfig\n  ): Observable<EntitiesModel<B2BUser>> {\n    return this.getB2BUserApproverList(orgCustomerId, params).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<B2BUser>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadApprovers(orgCustomerId, params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<B2BUser>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  assignApprover(orgCustomerId: string, approverId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.AssignB2BUserApprover({\n            userId,\n            orgCustomerId,\n            approverId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  unassignApprover(orgCustomerId: string, approverId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.UnassignB2BUserApprover({\n            userId,\n            orgCustomerId,\n            approverId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadPermissions(orgCustomerId: string, params: SearchConfig): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.LoadB2BUserPermissions({\n            userId,\n            orgCustomerId,\n            params,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getPermissions(\n    orgCustomerId: string,\n    params: SearchConfig\n  ): Observable<EntitiesModel<Permission>> {\n    return this.getB2BUserPermissionList(orgCustomerId, params).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<Permission>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadPermissions(orgCustomerId, params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<Permission>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  assignPermission(orgCustomerId: string, permissionId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.AssignB2BUserPermission({\n            userId,\n            orgCustomerId,\n            permissionId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  unassignPermission(orgCustomerId: string, permissionId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.UnassignB2BUserPermission({\n            userId,\n            orgCustomerId,\n            permissionId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadUserGroups(orgCustomerId: string, params: SearchConfig): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.LoadB2BUserUserGroups({\n            userId,\n            orgCustomerId,\n            params,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getUserGroups(\n    orgCustomerId: string,\n    params: SearchConfig\n  ): Observable<EntitiesModel<UserGroup>> {\n    return this.getB2BUserUserGroupList(orgCustomerId, params).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<UserGroup>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadUserGroups(orgCustomerId, params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<UserGroup>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  assignUserGroup(orgCustomerId: string, userGroupId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.AssignB2BUserUserGroup({\n            userId,\n            orgCustomerId,\n            userGroupId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  unassignUserGroup(orgCustomerId: string, userGroupId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new B2BUserActions.UnassignB2BUserUserGroup({\n            userId,\n            orgCustomerId,\n            userGroupId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Get list of all roles for B2BUser sorted by increasing privileges.\n   *\n   * This list is not driven by the backend (lack of API), but reflects roles\n   * from the backend: `b2badmingroup`, `b2bcustomergroup`, `b2bmanagergroup` and `b2bapprovergroup`.\n   *\n   * If you reconfigure those roles in the backend or extend the list, you should change\n   * this implementation accordingly.\n   */\n  getAllRoles(): B2BUserRole[] {\n    return [\n      B2BUserRole.CUSTOMER,\n      B2BUserRole.MANAGER,\n      B2BUserRole.APPROVER,\n      B2BUserRole.ADMIN,\n    ];\n  }\n\n  private getB2BUserApproverList(\n    orgCustomerId: string,\n    params\n  ): Observable<StateUtils.LoaderState<EntitiesModel<B2BUser>>> {\n    return this.store.select(getB2BUserApprovers(orgCustomerId, params));\n  }\n\n  private getB2BUserPermissionList(\n    orgCustomerId: string,\n    params\n  ): Observable<StateUtils.LoaderState<EntitiesModel<Permission>>> {\n    return this.store.select(getB2BUserPermissions(orgCustomerId, params));\n  }\n\n  private getB2BUserUserGroupList(\n    orgCustomerId: string,\n    params\n  ): Observable<StateUtils.LoaderState<EntitiesModel<UserGroup>>> {\n    return this.store.select(getB2BUserUserGroups(orgCustomerId, params));\n  }\n\n  private getB2BUserState(\n    orgCustomerId: string\n  ): Observable<StateUtils.LoaderState<B2BUser>> {\n    return this.store.select(getB2BUserState(orgCustomerId));\n  }\n\n  private getUserList(\n    params\n  ): Observable<StateUtils.LoaderState<EntitiesModel<B2BUser>>> {\n    return this.store.select(getUserList(params));\n  }\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { EntitiesModel, SearchConfig, StateUtils } from '@spartacus/core';\nimport { Budget } from '../../model/budget.model';\nimport {\n  BUDGET_FEATURE,\n  BudgetManagement,\n  OrganizationState,\n  StateWithOrganization,\n} from '../organization-state';\nimport { getOrganizationState } from './feature.selector';\n\nexport const getBudgetManagementState: MemoizedSelector<\n  StateWithOrganization,\n  BudgetManagement\n> = createSelector(\n  getOrganizationState,\n  (state: OrganizationState) => state[BUDGET_FEATURE]\n);\n\nexport const getBudgetsState: MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.EntityLoaderState<Budget>\n> = createSelector(\n  getBudgetManagementState,\n  (state: BudgetManagement) => state && state.entities\n);\n\nexport const getBudget = (\n  budgetCode: string\n): MemoizedSelector<StateWithOrganization, StateUtils.LoaderState<Budget>> =>\n  createSelector(\n    getBudgetsState,\n    (state: StateUtils.EntityLoaderState<Budget>) =>\n      StateUtils.entityLoaderStateSelector(state, budgetCode)\n  );\n\nexport const getBudgetValue = (\n  budgetCode: string\n): MemoizedSelector<StateWithOrganization, Budget> => {\n  return createSelector(getBudget(budgetCode), (budgetState) =>\n    StateUtils.loaderValueSelector(budgetState)\n  );\n};\n\nexport const getBudgetList = (\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<Budget>>\n> =>\n  createSelector(getBudgetManagementState, (state: BudgetManagement) =>\n    StateUtils.denormalizeSearch<Budget>(state, params)\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  Address,\n  B2BApprovalProcess,\n  B2BUnit,\n  B2BUser,\n  EntitiesModel,\n  SearchConfig,\n  StateUtils,\n} from '@spartacus/core';\nimport { B2BUnitNode } from '../../model/unit-node.model';\nimport {\n  OrganizationState,\n  OrgUnits,\n  ORG_UNIT_APPROVAL_PROCESSES,\n  ORG_UNIT_FEATURE,\n  ORG_UNIT_NODES,\n  ORG_UNIT_TREE,\n  StateWithOrganization,\n} from '../organization-state';\nimport { getB2BUsersState } from './b2b-user.selector';\nimport { getOrganizationState } from './feature.selector';\n\nexport const getB2BOrgUnitState: MemoizedSelector<\n  StateWithOrganization,\n  OrgUnits\n> = createSelector(\n  getOrganizationState,\n  (state: OrganizationState) => state[ORG_UNIT_FEATURE]\n);\n\nexport const getOrgUnitsNodeListState: MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.EntityLoaderState<B2BUnitNode[]>\n> = createSelector(\n  getB2BOrgUnitState,\n  (state: OrgUnits) => state && state.availableOrgUnitNodes\n);\n\nexport const getOrgUnitsState: MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.EntityLoaderState<B2BUnitNode>\n> = createSelector(\n  getB2BOrgUnitState,\n  (state: OrgUnits) => state && state.entities\n);\n\nexport const getOrgUnitsTreeState: MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.EntityLoaderState<B2BUnitNode>\n> = createSelector(\n  getB2BOrgUnitState,\n  (state: OrgUnits) => state && state.tree\n);\n\nexport const getAddressesState: MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.EntityLoaderState<Address>\n> = createSelector(\n  getB2BOrgUnitState,\n  (state: OrgUnits) => state && state.addressEntities\n);\n\nexport const getApprovalProcessesState: MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.EntityLoaderState<B2BApprovalProcess[]>\n> = createSelector(\n  getB2BOrgUnitState,\n  (state: OrgUnits) => state && state.approvalProcesses\n);\n\nexport const getOrgUnit = (\n  orgUnitId: string\n): MemoizedSelector<StateWithOrganization, StateUtils.LoaderState<B2BUnit>> =>\n  createSelector(\n    getOrgUnitsState,\n    (state: StateUtils.EntityLoaderState<B2BUnit>) =>\n      StateUtils.entityLoaderStateSelector(state, orgUnitId)\n  );\n\nexport const getOrgUnitValue = (\n  orgUnitId: string\n): MemoizedSelector<StateWithOrganization, B2BUnit> => {\n  return createSelector(getOrgUnit(orgUnitId), (orgUnitState) =>\n    StateUtils.loaderValueSelector(orgUnitState)\n  );\n};\n\nexport const getOrgUnitState = (\n  orgUnitId: string\n): MemoizedSelector<StateWithOrganization, StateUtils.LoaderState<B2BUnit>> =>\n  createSelector(\n    getOrgUnitsState,\n    (state: StateUtils.EntityLoaderState<B2BUnit>) =>\n      StateUtils.entityLoaderStateSelector(state, orgUnitId)\n  );\n\nexport const getOrgUnitList = (): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<B2BUnitNode[]>\n> =>\n  createSelector(\n    getOrgUnitsNodeListState,\n    (state: StateUtils.EntityLoaderState<B2BUnitNode[]>) =>\n      StateUtils.entityLoaderStateSelector(state, ORG_UNIT_NODES)\n  );\n\nexport const getOrgUnitTree = (): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<B2BUnitNode>\n> =>\n  createSelector(\n    getOrgUnitsTreeState,\n    (state: StateUtils.EntityLoaderState<B2BUnitNode>) =>\n      StateUtils.entityLoaderStateSelector(state, ORG_UNIT_TREE)\n  );\n\nexport const getApprovalProcesses = (): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<B2BApprovalProcess[]>\n> =>\n  createSelector(\n    getApprovalProcessesState,\n    (state: StateUtils.EntityLoaderState<B2BApprovalProcess[]>) =>\n      StateUtils.entityLoaderStateSelector(state, ORG_UNIT_APPROVAL_PROCESSES)\n  );\n\nexport const getAssignedUsers = (\n  orgUnitId: string,\n  roleId: string,\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<B2BUser>>\n> =>\n  createSelector(\n    getB2BOrgUnitState,\n    getB2BUsersState,\n    (state: OrgUnits, users: StateUtils.EntityLoaderState<B2BUser>) =>\n      StateUtils.denormalizeCustomB2BSearch(\n        state.users,\n        users,\n        params,\n        `${orgUnitId},${roleId}`\n      )\n  );\n\nexport const getB2BAddresses = (\n  orgUnitId: string,\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<Address>>\n> =>\n  createSelector(getB2BOrgUnitState, (state: OrgUnits) =>\n    StateUtils.denormalizeCustomB2BSearch(\n      state.addressList,\n      state.addressEntities,\n      params,\n      orgUnitId\n    )\n  );\n\nexport const getB2BAddress = (\n  addressId: string\n): MemoizedSelector<StateWithOrganization, StateUtils.LoaderState<Address>> =>\n  createSelector(\n    getAddressesState,\n    (state: StateUtils.EntityLoaderState<Address>) =>\n      StateUtils.entityLoaderStateSelector(state, addressId)\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  B2BUser,\n  EntitiesModel,\n  SearchConfig,\n  StateUtils,\n} from '@spartacus/core';\nimport { Permission } from '../../model/permission.model';\nimport { UserGroup } from '../../model/user-group.model';\nimport {\n  OrganizationState,\n  StateWithOrganization,\n  UserGroupManagement,\n  USER_GROUP_FEATURE,\n} from '../organization-state';\nimport { getB2BUsersState } from './b2b-user.selector';\nimport { getOrganizationState } from './feature.selector';\nimport { getPermissionsState } from './permission.selector';\n\nexport const getUserGroupManagementState: MemoizedSelector<\n  StateWithOrganization,\n  UserGroupManagement\n> = createSelector(\n  getOrganizationState,\n  (state: OrganizationState) => state[USER_GROUP_FEATURE]\n);\n\nexport const getUserGroupsState: MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.EntityLoaderState<UserGroup>\n> = createSelector(\n  getUserGroupManagementState,\n  (state: UserGroupManagement) => state && state.entities\n);\n\nexport const getUserGroup = (\n  userGroupId: string\n): MemoizedSelector<StateWithOrganization, StateUtils.LoaderState<UserGroup>> =>\n  createSelector(\n    getUserGroupsState,\n    (state: StateUtils.EntityLoaderState<UserGroup>) =>\n      StateUtils.entityLoaderStateSelector(state, userGroupId)\n  );\n\nexport const getUserGroupValue = (\n  userGroupId: string\n): MemoizedSelector<StateWithOrganization, UserGroup> => {\n  return createSelector(getUserGroup(userGroupId), (userGroupState) =>\n    StateUtils.loaderValueSelector(userGroupState)\n  );\n};\n\nexport const getUserGroupList = (\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<UserGroup>>\n> =>\n  createSelector(getUserGroupManagementState, (state: UserGroupManagement) =>\n    StateUtils.denormalizeSearch<UserGroup>(state, params)\n  );\n\nexport const getAvailableOrgCustomers = (\n  code: string,\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<B2BUser>>\n> =>\n  createSelector(\n    getUserGroupManagementState,\n    getB2BUsersState,\n    (\n      state: UserGroupManagement,\n      customers: StateUtils.EntityLoaderState<B2BUser>\n    ) =>\n      StateUtils.denormalizeCustomB2BSearch(\n        state.customers,\n        customers,\n        params,\n        code\n      )\n  );\n\nexport const getAvailableOrderApprovalPermissions = (\n  code: string,\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<Permission>>\n> =>\n  createSelector(\n    getUserGroupManagementState,\n    getPermissionsState,\n    (\n      state: UserGroupManagement,\n      permissions: StateUtils.EntityLoaderState<Permission>\n    ) =>\n      StateUtils.denormalizeCustomB2BSearch(\n        state.permissions,\n        permissions,\n        params,\n        code\n      )\n  );\n\nexport const getUserGroupState = (\n  code: string\n): MemoizedSelector<StateWithOrganization, StateUtils.LoaderState<UserGroup>> =>\n  createSelector(\n    getUserGroupsState,\n    (state: StateUtils.EntityLoaderState<UserGroup>) =>\n      StateUtils.entityLoaderStateSelector(state, code)\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  CostCenter,\n  EntitiesModel,\n  SearchConfig,\n  StateUtils,\n} from '@spartacus/core';\nimport { Budget } from '../../model/budget.model';\nimport {\n  CostCenterManagement,\n  COST_CENTER_FEATURE,\n  OrganizationState,\n  StateWithOrganization,\n} from '../organization-state';\nimport { getBudgetsState } from './budget.selector';\nimport { getOrganizationState } from './feature.selector';\n\nexport const getCostCenterManagementState: MemoizedSelector<\n  StateWithOrganization,\n  CostCenterManagement\n> = createSelector(\n  getOrganizationState,\n  (state: OrganizationState) => state[COST_CENTER_FEATURE]\n);\n\nexport const getCostCentersState: MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.EntityLoaderState<CostCenter>\n> = createSelector(\n  getCostCenterManagementState,\n  (state: CostCenterManagement) => state && state.entities\n);\n\nexport const getCostCenter = (\n  costCenterCode: string\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<CostCenter>\n> =>\n  createSelector(\n    getCostCentersState,\n    (state: StateUtils.EntityLoaderState<CostCenter>) =>\n      StateUtils.entityLoaderStateSelector(state, costCenterCode)\n  );\n\nexport const getCostCenterValue = (\n  costCenterCode: string\n): MemoizedSelector<StateWithOrganization, Budget> => {\n  return createSelector(getCostCenter(costCenterCode), (costCenterState) =>\n    StateUtils.loaderValueSelector(costCenterState)\n  );\n};\n\nexport const getCostCenterList = (\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<CostCenter>>\n> =>\n  createSelector(getCostCenterManagementState, (state: CostCenterManagement) =>\n    StateUtils.denormalizeSearch<CostCenter>(state, params)\n  );\n\nexport const getAssignedBudgets = (\n  code: string,\n  params: SearchConfig\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<EntitiesModel<Budget>>\n> =>\n  createSelector(\n    getCostCenterManagementState,\n    getBudgetsState,\n    (\n      state: CostCenterManagement,\n      budgets: StateUtils.EntityLoaderState<Budget>\n    ) =>\n      StateUtils.denormalizeCustomB2BSearch(\n        state.budgets,\n        budgets,\n        params,\n        code\n      )\n  );\n\nexport const getCostCenterState = (\n  code: string\n): MemoizedSelector<\n  StateWithOrganization,\n  StateUtils.LoaderState<CostCenter>\n> =>\n  createSelector(\n    getCostCentersState,\n    (state: StateUtils.EntityLoaderState<CostCenter>) =>\n      StateUtils.entityLoaderStateSelector(state, code)\n  );\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {\n  CostCenter,\n  EntitiesModel,\n  SearchConfig,\n  StateUtils,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport { Observable, queueScheduler, using } from 'rxjs';\nimport { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';\nimport { Budget } from '../model/budget.model';\nimport { OrganizationItemStatus } from '../model/organization-item-status';\nimport { BudgetActions, StateWithOrganization } from '../store/index';\nimport {\n  getBudget,\n  getBudgetList,\n  getBudgetValue,\n} from '../store/selectors/budget.selector';\nimport { getItemStatus } from '../utils/get-item-status';\n\n@Injectable({ providedIn: 'root' })\nexport class BudgetService {\n  constructor(\n    protected store: Store<StateWithOrganization | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  loadBudget(budgetCode: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new BudgetActions.LoadBudget({ userId, budgetCode })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadBudgets(params?: SearchConfig): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(new BudgetActions.LoadBudgets({ userId, params })),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  private getBudgetState(\n    budgetCode: string\n  ): Observable<StateUtils.LoaderState<Budget>> {\n    return this.store.select(getBudget(budgetCode));\n  }\n\n  private getBudgetValue(budgetCode: string): Observable<Budget> {\n    return this.store.select(getBudgetValue(budgetCode)).pipe(filter(Boolean));\n  }\n\n  private getBudgetList(\n    params\n  ): Observable<StateUtils.LoaderState<EntitiesModel<Budget>>> {\n    return this.store.select(getBudgetList(params));\n  }\n\n  get(budgetCode: string): Observable<Budget> {\n    const loading$ = this.getBudgetState(budgetCode).pipe(\n      auditTime(0),\n      tap((state) => {\n        if (!(state.loading || state.success || state.error)) {\n          this.loadBudget(budgetCode);\n        }\n      })\n    );\n\n    return using(\n      () => loading$.subscribe(),\n      () => this.getBudgetValue(budgetCode)\n    );\n  }\n\n  getList(params: SearchConfig): Observable<EntitiesModel<Budget>> {\n    return this.getBudgetList(params).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<Budget>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadBudgets(params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<Budget>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  getCostCenters(budgetCode: string): Observable<EntitiesModel<CostCenter>> {\n    return this.get(budgetCode).pipe(\n      map(\n        (budget) =>\n          ({\n            values: budget.costCenters ?? [],\n          } as EntitiesModel<CostCenter>)\n      )\n    );\n  }\n\n  getErrorState(budgetCode): Observable<boolean> {\n    return this.getBudgetState(budgetCode).pipe(map((state) => state.error));\n  }\n\n  create(budget: Budget): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(new BudgetActions.CreateBudget({ userId, budget })),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  update(budgetCode: string, budget: Budget): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new BudgetActions.UpdateBudget({ userId, budgetCode, budget })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getLoadingStatus(\n    budgetCode: string\n  ): Observable<OrganizationItemStatus<Budget>> {\n    return getItemStatus(this.getBudgetState(budgetCode));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {\n  CostCenter,\n  EntitiesModel,\n  SearchConfig,\n  StateUtils,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport { Observable, queueScheduler, using } from 'rxjs';\nimport { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';\nimport { Budget } from '../model/budget.model';\nimport { OrganizationItemStatus } from '../model/organization-item-status';\nimport { CostCenterActions } from '../store/actions/index';\nimport { StateWithOrganization } from '../store/organization-state';\nimport {\n  getAssignedBudgets,\n  getCostCenter,\n  getCostCenterList,\n  getCostCenterState,\n  getCostCenterValue,\n} from '../store/selectors/cost-center.selector';\nimport { getItemStatus } from '../utils/get-item-status';\n\n@Injectable({ providedIn: 'root' })\nexport class CostCenterService {\n  constructor(\n    protected store: Store<StateWithOrganization | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  load(costCenterCode: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new CostCenterActions.LoadCostCenter({ userId, costCenterCode })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadList(params?: SearchConfig): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new CostCenterActions.LoadCostCenters({ userId, params })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  private getCostCenter(\n    costCenterCode: string\n  ): Observable<StateUtils.LoaderState<CostCenter>> {\n    return this.store.select(getCostCenter(costCenterCode));\n  }\n\n  private getCostCenterValue(costCenterCode: string): Observable<CostCenter> {\n    return this.store\n      .select(getCostCenterValue(costCenterCode))\n      .pipe(filter(Boolean));\n  }\n\n  private getCostCenterList(\n    params\n  ): Observable<StateUtils.LoaderState<EntitiesModel<CostCenter>>> {\n    return this.store.select(getCostCenterList(params));\n  }\n\n  private getBudgetList(\n    costCenterCode,\n    params\n  ): Observable<StateUtils.LoaderState<EntitiesModel<Budget>>> {\n    return this.store.select(getAssignedBudgets(costCenterCode, params));\n  }\n\n  get(costCenterCode: string): Observable<Budget> {\n    const loading$ = this.getCostCenter(costCenterCode).pipe(\n      auditTime(0),\n      tap((state) => {\n        if (!(state.loading || state.success || state.error)) {\n          this.load(costCenterCode);\n        }\n      })\n    );\n\n    return using(\n      () => loading$.subscribe(),\n      () => this.getCostCenterValue(costCenterCode)\n    );\n  }\n\n  getList(params: SearchConfig): Observable<EntitiesModel<CostCenter>> {\n    return this.getCostCenterList(params).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<CostCenter>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadList(params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<CostCenter>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  private getCostCenterState(\n    costCenterCode: string\n  ): Observable<StateUtils.LoaderState<Budget>> {\n    return this.store.select(getCostCenterState(costCenterCode));\n  }\n\n  create(costCenter: CostCenter): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new CostCenterActions.CreateCostCenter({ userId, costCenter })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  update(costCenterCode: string, costCenter: CostCenter): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new CostCenterActions.UpdateCostCenter({\n            userId,\n            costCenterCode,\n            costCenter,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getLoadingStatus(\n    costCenterCode: string\n  ): Observable<OrganizationItemStatus<CostCenter>> {\n    return getItemStatus(this.getCostCenter(costCenterCode));\n  }\n\n  loadBudgets(costCenterCode: string, params: SearchConfig): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new CostCenterActions.LoadAssignedBudgets({\n            userId,\n            costCenterCode,\n            params,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getBudgets(\n    costCenterCode: string,\n    params: SearchConfig\n  ): Observable<EntitiesModel<Budget>> {\n    return this.getBudgetList(costCenterCode, params).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<Budget>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadBudgets(costCenterCode, params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<Budget>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  assignBudget(costCenterCode: string, budgetCode: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new CostCenterActions.AssignBudget({\n            userId,\n            costCenterCode,\n            budgetCode,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  unassignBudget(costCenterCode: string, budgetCode: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new CostCenterActions.UnassignBudget({\n            userId,\n            costCenterCode,\n            budgetCode,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getErrorState(costCenterCode): Observable<boolean> {\n    return this.getCostCenterState(costCenterCode).pipe(\n      map((state) => state.error)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {\n  Address,\n  B2BApprovalProcess,\n  B2BUnit,\n  B2BUser,\n  CostCenter,\n  EntitiesModel,\n  SearchConfig,\n  StateUtils,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport { Observable, queueScheduler, using } from 'rxjs';\nimport { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';\nimport { OrganizationItemStatus } from '../model/organization-item-status';\nimport { B2BUnitNode } from '../model/unit-node.model';\nimport { OrgUnitActions } from '../store/actions/index';\nimport { StateWithOrganization } from '../store/organization-state';\nimport {\n  getApprovalProcesses,\n  getAssignedUsers,\n  getB2BAddress,\n  getB2BAddresses,\n  getOrgUnit,\n  getOrgUnitList,\n  getOrgUnitState,\n  getOrgUnitTree,\n  getOrgUnitValue,\n} from '../store/selectors/org-unit.selector';\nimport { getItemStatus } from '../utils/get-item-status';\n\n@Injectable({ providedIn: 'root' })\nexport class OrgUnitService {\n  constructor(\n    protected store: Store<StateWithOrganization | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  clearAssignedUsersList(\n    orgUnitId: string,\n    roleId: string,\n    params: SearchConfig\n  ): void {\n    this.store.dispatch(\n      new OrgUnitActions.ClearAssignedUsers({ orgUnitId, roleId, params })\n    );\n  }\n\n  load(orgUnitId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new OrgUnitActions.LoadOrgUnit({ userId, orgUnitId })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadList(): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(new OrgUnitActions.LoadOrgUnitNodes({ userId })),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadTree(): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => this.store.dispatch(new OrgUnitActions.LoadTree({ userId })),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadApprovalProcesses(): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new OrgUnitActions.LoadApprovalProcesses({ userId })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadUsers(orgUnitId: string, roleId: string, params: SearchConfig): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new OrgUnitActions.LoadAssignedUsers({\n            userId,\n            orgUnitId,\n            roleId,\n            params,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadAddresses(orgUnitId: string): void {\n    // TODO: replace it after turn on loadAddresses$\n    // this.store.dispatch(\n    //   new OrgUnitActions.LoadAddresses({ userId, orgUnitId })\n    // );\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new OrgUnitActions.LoadOrgUnit({ userId, orgUnitId })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  private getOrgUnit(\n    orgUnitId: string\n  ): Observable<StateUtils.LoaderState<B2BUnit>> {\n    return this.store.select(getOrgUnit(orgUnitId));\n  }\n\n  private getOrgUnitValue(orgUnitId: string): Observable<B2BUnit> {\n    return this.store.select(getOrgUnitValue(orgUnitId)).pipe(filter(Boolean));\n  }\n\n  private getTreeState(): Observable<StateUtils.LoaderState<B2BUnitNode>> {\n    return this.store.select(getOrgUnitTree());\n  }\n\n  private getOrgUnitsList(): Observable<StateUtils.LoaderState<B2BUnitNode[]>> {\n    return this.store.select(getOrgUnitList());\n  }\n\n  private getAddressesState(\n    orgUnitId: string\n  ): Observable<StateUtils.LoaderState<EntitiesModel<Address>>> {\n    return this.store.select(getB2BAddresses(orgUnitId, null));\n  }\n\n  private getAddressState(\n    addressId: string\n  ): Observable<StateUtils.LoaderState<Address>> {\n    return this.store.select(getB2BAddress(addressId));\n  }\n\n  private getAssignedUsers(\n    orgUnitId: string,\n    roleId: string,\n    params: SearchConfig\n  ): Observable<StateUtils.LoaderState<EntitiesModel<B2BUser>>> {\n    return this.store.select(getAssignedUsers(orgUnitId, roleId, params));\n  }\n\n  private getApprovalProcessesList(): Observable<\n    StateUtils.LoaderState<B2BApprovalProcess[]>\n  > {\n    return this.store.select(getApprovalProcesses());\n  }\n\n  get(orgUnitId: string): Observable<B2BUnit> {\n    const loading$ = this.getOrgUnit(orgUnitId).pipe(\n      auditTime(0),\n      tap((state) => {\n        if (!(state.loading || state.success || state.error)) {\n          this.load(orgUnitId);\n        }\n      })\n    );\n\n    return using(\n      () => loading$.subscribe(),\n      () => this.getOrgUnitValue(orgUnitId)\n    );\n  }\n\n  getCostCenters(orgUnitId: string): Observable<EntitiesModel<CostCenter>> {\n    return this.get(orgUnitId).pipe(\n      map((orgUnit) => ({\n        values: orgUnit.costCenters ?? [],\n      }))\n    );\n  }\n\n  protected findUnitChildrenInTree(\n    orginitId,\n    unit: B2BUnitNode\n  ): B2BUnitNode[] {\n    return unit.id === orginitId\n      ? unit.children\n      : unit.children.flatMap((child) =>\n          this.findUnitChildrenInTree(orginitId, child)\n        );\n  }\n\n  getChildUnits(orgUnitId: string): Observable<EntitiesModel<B2BUnitNode>> {\n    return this.getTree().pipe(\n      map((tree) => ({\n        values: this.findUnitChildrenInTree(orgUnitId, tree),\n      }))\n    );\n  }\n\n  getTree(): Observable<B2BUnitNode> {\n    return this.getTreeState().pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<B2BUnitNode>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadTree();\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<B2BUnitNode>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  getApprovalProcesses(): Observable<B2BApprovalProcess[]> {\n    return this.getApprovalProcessesList().pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<B2BApprovalProcess[]>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadApprovalProcesses();\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<B2BApprovalProcess[]>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  getList(): Observable<B2BUnitNode[]> {\n    return this.getOrgUnitsList().pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<B2BUnitNode[]>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadList();\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<B2BUnitNode[]>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  getActiveUnitList(): Observable<B2BUnitNode[]> {\n    return this.getList().pipe(\n      map((units) => units.filter((unit) => unit.active)),\n      map((units) => units.sort(this.sortUnitList))\n    );\n  }\n\n  protected sortUnitList(a: B2BUnitNode, b: B2BUnitNode) {\n    return a.id.toLowerCase() < b.id.toLowerCase()\n      ? -1\n      : a.id.toLowerCase() > b.id.toLowerCase()\n      ? 1\n      : 0;\n  }\n\n  getUsers(\n    orgUnitId: string,\n    roleId: string,\n    params: SearchConfig\n  ): Observable<EntitiesModel<B2BUser>> {\n    return this.getAssignedUsers(orgUnitId, roleId, params).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<B2BUser>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadUsers(orgUnitId, roleId, params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<B2BUser>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  getErrorState(orgCustomerId): Observable<boolean> {\n    return this.getOrgUnitState(orgCustomerId).pipe(\n      map((state) => state.error)\n    );\n  }\n\n  create(unit: B2BUnit): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(new OrgUnitActions.CreateUnit({ userId, unit })),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  update(unitCode: string, unit: B2BUnit): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new OrgUnitActions.UpdateUnit({ userId, unitCode, unit })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getLoadingStatus(\n    orgUnitId: string\n  ): Observable<OrganizationItemStatus<B2BUnit>> {\n    return getItemStatus(this.getOrgUnit(orgUnitId));\n  }\n\n  assignRole(orgCustomerId: string, roleId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new OrgUnitActions.AssignRole({\n            userId,\n            orgCustomerId,\n            roleId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  unassignRole(orgCustomerId: string, roleId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new OrgUnitActions.UnassignRole({\n            userId,\n            orgCustomerId,\n            roleId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  assignApprover(\n    orgUnitId: string,\n    orgCustomerId: string,\n    roleId: string\n  ): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new OrgUnitActions.AssignApprover({\n            orgUnitId,\n            userId,\n            orgCustomerId,\n            roleId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  unassignApprover(\n    orgUnitId: string,\n    orgCustomerId: string,\n    roleId: string\n  ): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new OrgUnitActions.UnassignApprover({\n            orgUnitId,\n            userId,\n            orgCustomerId,\n            roleId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  createAddress(orgUnitId: string, address: Address): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new OrgUnitActions.CreateAddress({\n            userId,\n            orgUnitId,\n            address,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getAddresses(orgUnitId: string): Observable<EntitiesModel<Address>> {\n    return this.getAddressesState(orgUnitId).pipe(\n      observeOn(queueScheduler),\n      tap((state) => {\n        if (!(state.loading || state.success || state.error)) {\n          this.loadAddresses(orgUnitId);\n        }\n      }),\n      filter((state) => state.success || state.error),\n      map((state) => state.value)\n    );\n  }\n\n  getAddress(orgUnitId: string, addressId: string): Observable<Address> {\n    return this.getAddressState(addressId).pipe(\n      observeOn(queueScheduler),\n      tap((state) => {\n        if (!(state.loading || state.success || state.error)) {\n          this.loadAddresses(orgUnitId);\n        }\n      }),\n      filter((state) => state.success || state.error),\n      map((state) => state.value)\n    );\n  }\n\n  updateAddress(orgUnitId: string, addressId: string, address: Address): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new OrgUnitActions.UpdateAddress({\n            userId,\n            orgUnitId,\n            addressId,\n            address,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getAddressLoadingStatus(\n    addressId: string\n  ): Observable<OrganizationItemStatus<Address>> {\n    return getItemStatus(this.getAddressState(addressId));\n  }\n\n  deleteAddress(orgUnitId: string, addressId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new OrgUnitActions.DeleteAddress({\n            userId,\n            orgUnitId,\n            addressId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  private getOrgUnitState(\n    orgUnitId: string\n  ): Observable<StateUtils.LoaderState<B2BUnit>> {\n    return this.store.select(getOrgUnitState(orgUnitId));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {\n  EntitiesModel,\n  OrderApprovalPermissionType,\n  SearchConfig,\n  StateUtils,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport { Observable, queueScheduler, using } from 'rxjs';\nimport { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';\nimport { OrganizationItemStatus } from '../model/organization-item-status';\nimport { Permission } from '../model/permission.model';\nimport { PermissionActions } from '../store/actions/index';\nimport { StateWithOrganization } from '../store/organization-state';\nimport {\n  getPermission,\n  getPermissionList,\n  getPermissionState,\n  getPermissionTypes,\n  getPermissionValue,\n} from '../store/selectors/permission.selector';\nimport { getItemStatus } from '../utils/get-item-status';\n\n@Injectable({ providedIn: 'root' })\nexport class PermissionService {\n  constructor(\n    protected store: Store<StateWithOrganization | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  loadPermission(permissionCode: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new PermissionActions.LoadPermission({\n            userId,\n            permissionCode,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadPermissions(params?: SearchConfig): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new PermissionActions.LoadPermissions({ userId, params })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadPermissionTypes() {\n    this.userIdService.takeUserId(true).subscribe(\n      () => this.store.dispatch(new PermissionActions.LoadPermissionTypes()),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  private getPermission(\n    permissionCode: string\n  ): Observable<StateUtils.LoaderState<Permission>> {\n    return this.store.select(getPermission(permissionCode));\n  }\n\n  private getPermissionValue(permissionCode: string): Observable<Permission> {\n    return this.store\n      .select(getPermissionValue(permissionCode))\n      .pipe(filter(Boolean));\n  }\n\n  private getPermissionList(\n    params\n  ): Observable<StateUtils.LoaderState<EntitiesModel<Permission>>> {\n    return this.store.select(getPermissionList(params));\n  }\n\n  private getPermissionTypeList(): Observable<\n    StateUtils.LoaderState<OrderApprovalPermissionType[]>\n  > {\n    return this.store.select(getPermissionTypes());\n  }\n\n  get(permissionCode: string): Observable<Permission> {\n    const loading$ = this.getPermission(permissionCode).pipe(\n      auditTime(0),\n      tap((state) => {\n        if (!(state.loading || state.success || state.error)) {\n          this.loadPermission(permissionCode);\n        }\n      })\n    );\n\n    return using(\n      () => loading$.subscribe(),\n      () => this.getPermissionValue(permissionCode)\n    );\n  }\n\n  getTypes(): Observable<OrderApprovalPermissionType[]> {\n    return this.getPermissionTypeList().pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<OrderApprovalPermissionType[]>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadPermissionTypes();\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<OrderApprovalPermissionType[]>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  getList(params: SearchConfig): Observable<EntitiesModel<Permission>> {\n    return this.getPermissionList(params).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<Permission>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadPermissions(params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<Permission>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  create(permission: Permission): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new PermissionActions.CreatePermission({ userId, permission })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  update(permissionCode: string, permission: Permission): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new PermissionActions.UpdatePermission({\n            userId,\n            permissionCode,\n            permission,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getLoadingStatus(\n    permissionCode: string\n  ): Observable<OrganizationItemStatus<Permission>> {\n    return getItemStatus(this.getPermission(permissionCode));\n  }\n\n  private getPermissionState(\n    code: string\n  ): Observable<StateUtils.LoaderState<Permission>> {\n    return this.store.select(getPermissionState(code));\n  }\n\n  getErrorState(permissionCode): Observable<boolean> {\n    return this.getPermissionState(permissionCode).pipe(\n      map((state) => state.error)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {\n  B2BUser,\n  EntitiesModel,\n  SearchConfig,\n  StateUtils,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport { Observable, queueScheduler, using } from 'rxjs';\nimport { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';\nimport { Budget } from '../model/budget.model';\nimport { OrganizationItemStatus } from '../model/organization-item-status';\nimport { Permission } from '../model/permission.model';\nimport { UserGroup } from '../model/user-group.model';\nimport { UserGroupActions } from '../store/actions/index';\nimport { StateWithOrganization } from '../store/organization-state';\nimport {\n  getAvailableOrderApprovalPermissions,\n  getAvailableOrgCustomers,\n  getUserGroup,\n  getUserGroupList,\n  getUserGroupState,\n  getUserGroupValue,\n} from '../store/selectors/user-group.selector';\nimport { getItemStatus } from '../utils/get-item-status';\n\n@Injectable({ providedIn: 'root' })\nexport class UserGroupService {\n  constructor(\n    protected store: Store<StateWithOrganization | StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  load(userGroupId: string) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new UserGroupActions.LoadUserGroup({\n            userId,\n            userGroupId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadList(params?: SearchConfig) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new UserGroupActions.LoadUserGroups({ userId, params })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  private getUserGroup(\n    userGroupId: string\n  ): Observable<StateUtils.LoaderState<UserGroup>> {\n    return this.store.select(getUserGroup(userGroupId));\n  }\n\n  private getUserGroupValue(userGroupId: string): Observable<Budget> {\n    return this.store\n      .select(getUserGroupValue(userGroupId))\n      .pipe(filter(Boolean));\n  }\n\n  private getUserGroupList(\n    params\n  ): Observable<StateUtils.LoaderState<EntitiesModel<UserGroup>>> {\n    return this.store.select(getUserGroupList(params));\n  }\n\n  private getAvailableOrgCustomersList(\n    userGroupId: string,\n    params\n  ): Observable<StateUtils.LoaderState<EntitiesModel<B2BUser>>> {\n    return this.store.select(getAvailableOrgCustomers(userGroupId, params));\n  }\n\n  private getAvailableOrderApprovalPermissionsList(\n    userGroupId: string,\n    params\n  ): Observable<StateUtils.LoaderState<EntitiesModel<Permission>>> {\n    return this.store.select(\n      getAvailableOrderApprovalPermissions(userGroupId, params)\n    );\n  }\n\n  get(userGroupUid: string): Observable<UserGroup> {\n    const loading$ = this.getUserGroup(userGroupUid).pipe(\n      auditTime(0),\n      tap((state) => {\n        if (!(state.loading || state.success || state.error)) {\n          this.load(userGroupUid);\n        }\n      })\n    );\n\n    return using(\n      () => loading$.subscribe(),\n      () => this.getUserGroupValue(userGroupUid)\n    );\n  }\n\n  getList(params: SearchConfig): Observable<EntitiesModel<UserGroup>> {\n    return this.getUserGroupList(params).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<UserGroup>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadList(params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<UserGroup>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  create(userGroup: UserGroup) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new UserGroupActions.CreateUserGroup({\n            userId,\n            userGroup,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  update(userGroupId: string, userGroup: UserGroup) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new UserGroupActions.UpdateUserGroup({\n            userId,\n            userGroupId,\n            userGroup,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getLoadingStatus(\n    budgetCode: string\n  ): Observable<OrganizationItemStatus<UserGroup>> {\n    return getItemStatus(this.getUserGroup(budgetCode));\n  }\n\n  delete(userGroupId: string) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new UserGroupActions.DeleteUserGroup({\n            userId,\n            userGroupId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadAvailableOrgCustomers(userGroupId: string, params: SearchConfig) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new UserGroupActions.LoadAvailableOrgCustomers({\n            userId,\n            userGroupId,\n            params,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  loadAvailableOrderApprovalPermissions(\n    userGroupId: string,\n    params: SearchConfig\n  ) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new UserGroupActions.LoadPermissions({\n            userId,\n            userGroupId,\n            params,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  getAvailableOrgCustomers(\n    userGroupId: string,\n    params: SearchConfig\n  ): Observable<EntitiesModel<B2BUser>> {\n    return this.getAvailableOrgCustomersList(userGroupId, params).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<B2BUser>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadAvailableOrgCustomers(userGroupId, params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<B2BUser>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  getAvailableOrderApprovalPermissions(\n    userGroupId: string,\n    params: SearchConfig\n  ): Observable<EntitiesModel<Permission>> {\n    return this.getAvailableOrderApprovalPermissionsList(\n      userGroupId,\n      params\n    ).pipe(\n      observeOn(queueScheduler),\n      tap((process: StateUtils.LoaderState<EntitiesModel<Permission>>) => {\n        if (!(process.loading || process.success || process.error)) {\n          this.loadAvailableOrderApprovalPermissions(userGroupId, params);\n        }\n      }),\n      filter(\n        (process: StateUtils.LoaderState<EntitiesModel<Permission>>) =>\n          process.success || process.error\n      ),\n      map((result) => result.value)\n    );\n  }\n\n  assignMember(userGroupId: string, customerId: string) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new UserGroupActions.AssignMember({\n            userId,\n            userGroupId,\n            customerId,\n          })\n        ),\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  unassignMember(userGroupId: string, customerId: string) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new UserGroupActions.UnassignMember({\n            userId,\n            userGroupId,\n            customerId,\n          })\n        ),\n      () => {}\n    );\n  }\n\n  unassignAllMembers(userGroupId: string) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new UserGroupActions.UnassignAllMembers({\n            userId,\n            userGroupId,\n          })\n        ),\n      () => {}\n    );\n  }\n\n  assignPermission(userGroupId: string, permissionUid: string) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new UserGroupActions.AssignPermission({\n            userId,\n            userGroupId,\n            permissionUid,\n          })\n        ),\n      () => {}\n    );\n  }\n\n  unassignPermission(userGroupId: string, permissionUid: string) {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) =>\n        this.store.dispatch(\n          new UserGroupActions.UnassignPermission({\n            userId,\n            userGroupId,\n            permissionUid,\n          })\n        ),\n      () => {}\n    );\n  }\n\n  private getUserGroupState(\n    code: string\n  ): Observable<StateUtils.LoaderState<UserGroup>> {\n    return this.store.select(getUserGroupState(code));\n  }\n\n  getErrorState(code): Observable<boolean> {\n    return this.getUserGroupState(code).pipe(map((state) => state.error));\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["LoadPermissions","LoadPermissionsFail","LoadPermissionsSuccess","BudgetActions.LOAD_BUDGET","BudgetActions.LoadBudgetSuccess","BudgetActions.LoadBudgetFail","BudgetActions.LOAD_BUDGETS","BudgetActions.LoadBudgetsSuccess","BudgetActions.LoadBudgetsFail","BudgetActions.CREATE_BUDGET","BudgetActions.CreateBudgetSuccess","OrganizationActions.OrganizationClearData","BudgetActions.CreateBudgetFail","BudgetActions.UPDATE_BUDGET","BudgetActions.UpdateBudgetSuccess","BudgetActions.UpdateBudgetFail","OrgUnitActions.LOAD_ORG_UNIT","OrgUnitActions.LoadOrgUnitSuccess","OrgUnitActions.LoadAddressSuccess","OrgUnitActions.LoadAddressesSuccess","OrgUnitActions.LoadOrgUnitFail","OrgUnitActions.LOAD_UNIT_NODES","OrgUnitActions.LoadOrgUnitNodesSuccess","OrgUnitActions.LoadOrgUnitNodesFail","OrgUnitActions.CREATE_ORG_UNIT","OrgUnitActions.CreateUnitSuccess","OrgUnitActions.CreateUnitFail","OrgUnitActions.UPDATE_ORG_UNIT","OrgUnitActions.UpdateUnitSuccess","OrgUnitActions.UpdateUnitFail","OrgUnitActions.LOAD_UNIT_TREE","OrgUnitActions.LoadTreeSuccess","OrgUnitActions.LoadTreeFail","OrgUnitActions.LOAD_APPROVAL_PROCESSES","OrgUnitActions.LoadApprovalProcessesSuccess","OrgUnitActions.LoadApprovalProcessesFail","OrgUnitActions.LOAD_ASSIGNED_USERS","B2BUserActions.LoadB2BUserSuccess","OrgUnitActions.LoadAssignedUsersSuccess","OrgUnitActions.LoadAssignedUsersFail","OrgUnitActions.ASSIGN_ROLE","OrgUnitActions.AssignRoleSuccess","OrgUnitActions.AssignRoleFail","OrgUnitActions.UNASSIGN_ROLE","OrgUnitActions.UnassignRoleSuccess","OrgUnitActions.UnassignRoleFail","OrgUnitActions.ASSIGN_APPROVER","OrgUnitActions.AssignApproverSuccess","OrgUnitActions.AssignApproverFail","OrgUnitActions.UNASSIGN_APPROVER","OrgUnitActions.UnassignApproverSuccess","OrgUnitActions.UnassignApproverFail","OrgUnitActions.CREATE_ADDRESS","OrgUnitActions.CreateAddressSuccess","OrgUnitActions.CreateAddressFail","OrgUnitActions.UPDATE_ADDRESS","OrgUnitActions.UpdateAddressSuccess","OrgUnitActions.UpdateAddressFail","OrgUnitActions.DELETE_ADDRESS","OrgUnitActions.DeleteAddressSuccess","OrgUnitActions.DeleteAddressFail","PermissionActions.LOAD_PERMISSION","PermissionActions.LoadPermissionSuccess","PermissionActions.LoadPermissionFail","PermissionActions.LOAD_PERMISSIONS","PermissionActions.LoadPermissionsSuccess","PermissionActions.LoadPermissionsFail","PermissionActions.CREATE_PERMISSION","PermissionActions.CreatePermissionSuccess","PermissionActions.CreatePermissionFail","PermissionActions.UPDATE_PERMISSION","PermissionActions.UpdatePermissionSuccess","PermissionActions.UpdatePermissionFail","PermissionActions.LOAD_PERMISSION_TYPES","PermissionActions.LoadPermissionTypesSuccess","PermissionActions.LoadPermissionTypesFail","CostCenterActions.LOAD_COST_CENTER","CostCenterActions.LoadCostCenterSuccess","CostCenterActions.LoadCostCenterFail","CostCenterActions.LOAD_COST_CENTERS","CostCenterActions.LoadCostCentersSuccess","CostCenterActions.LoadCostCentersFail","CostCenterActions.CREATE_COST_CENTER","CostCenterActions.CreateCostCenterSuccess","CostCenterActions.CreateCostCenterFail","CostCenterActions.UPDATE_COST_CENTER","CostCenterActions.UpdateCostCenterSuccess","CostCenterActions.UpdateCostCenterFail","CostCenterActions.LOAD_ASSIGNED_BUDGETS","CostCenterActions.LoadAssignedBudgetsSuccess","CostCenterActions.LoadAssignedBudgetsFail","CostCenterActions.ASSIGN_BUDGET","CostCenterActions.AssignBudgetSuccess","CostCenterActions.AssignBudgetFail","CostCenterActions.UNASSIGN_BUDGET","CostCenterActions.UnassignBudgetSuccess","CostCenterActions.UnassignBudgetFail","B2BUserActions.LOAD_B2B_USER","B2BUserActions.LoadB2BUserFail","B2BUserActions.CREATE_B2B_USER","B2BUserActions.CreateB2BUserSuccess","OrgUnitActions.AssignApprover","B2BUserActions.CreateB2BUserFail","B2BUserActions.UPDATE_B2B_USER","B2BUserActions.UpdateB2BUserSuccess","B2BUserActions.UpdateB2BUserFail","B2BUserActions.UPDATE_B2B_USER_SUCCESS","B2BUserActions.LOAD_B2B_USERS","B2BUserActions.LoadB2BUsersSuccess","B2BUserActions.LoadB2BUsersFail","B2BUserActions.LOAD_B2B_USER_APPROVERS","B2BUserActions.LoadB2BUserApproversSuccess","B2BUserActions.LoadB2BUserApproversFail","B2BUserActions.LOAD_B2B_USER_PERMISSIONS","B2BUserActions.LoadB2BUserPermissionsSuccess","B2BUserActions.LoadB2BUserPermissionsFail","B2BUserActions.LOAD_B2B_USER_USER_GROUPS","UserGroupActions.LoadUserGroupSuccess","B2BUserActions.LoadB2BUserUserGroupsSuccess","B2BUserActions.LoadB2BUserUserGroupsFail","B2BUserActions.ASSIGN_B2B_USER_APPROVER","B2BUserActions.AssignB2BUserApproverSuccess","B2BUserActions.AssignB2BUserApproverFail","B2BUserActions.UNASSIGN_B2B_USER_APPROVER","B2BUserActions.UnassignB2BUserApproverSuccess","B2BUserActions.UnassignB2BUserApproverFail","B2BUserActions.ASSIGN_B2B_USER_PERMISSION","B2BUserActions.AssignB2BUserPermissionSuccess","B2BUserActions.AssignB2BUserPermissionFail","B2BUserActions.UNASSIGN_B2B_USER_PERMISSION","B2BUserActions.UnassignB2BUserPermissionSuccess","B2BUserActions.UnassignB2BUserPermissionFail","B2BUserActions.ASSIGN_B2B_USER_USER_GROUP","B2BUserActions.AssignB2BUserUserGroupSuccess","B2BUserActions.AssignB2BUserUserGroupFail","B2BUserActions.UNASSIGN_B2B_USER_USER_GROUP","B2BUserActions.UnassignB2BUserUserGroupSuccess","B2BUserActions.UnassignB2BUserUserGroupFail","UserGroupActions.LOAD_USER_GROUP","UserGroupActions.LoadUserGroupFail","UserGroupActions.LOAD_USER_GROUPS","UserGroupActions.LoadUserGroupsSuccess","UserGroupActions.LoadUserGroupsFail","UserGroupActions.LOAD_USER_GROUP_PERMISSIONS","UserGroupActions.LoadPermissionsSuccess","UserGroupActions.LoadPermissionsFail","UserGroupActions.LOAD_USER_GROUP_AVAILABLE_CUSTOMERS","UserGroupActions.LoadAvailableOrgCustomersSuccess","UserGroupActions.LoadAvailableOrgCustomersFail","UserGroupActions.CREATE_USER_GROUP","UserGroupActions.CreateUserGroupSuccess","UserGroupActions.CreateUserGroupFail","UserGroupActions.UPDATE_USER_GROUP","UserGroupActions.UpdateUserGroupSuccess","UserGroupActions.UpdateUserGroupFail","UserGroupActions.DELETE_USER_GROUP","UserGroupActions.DeleteUserGroupSuccess","UserGroupActions.DeleteUserGroupFail","UserGroupActions.USER_GROUP_ASSIGN_PERMISSION","UserGroupActions.AssignPermissionSuccess","UserGroupActions.AssignPermissionFail","UserGroupActions.USER_GROUP_ASSIGN_MEMBER","UserGroupActions.AssignMemberSuccess","UserGroupActions.AssignMemberFail","UserGroupActions.USER_GROUP_UNASSIGN_MEMBER","UserGroupActions.UnassignMemberSuccess","UserGroupActions.UnassignMemberFail","UserGroupActions.USER_GROUP_UNASSIGN_PERMISSION","UserGroupActions.UnassignPermissionSuccess","UserGroupActions.UnassignPermissionFail","UserGroupActions.USER_GROUP_UNASSIGN_ALL_MEMBERS","UserGroupActions.UnassignAllMembersSuccess","UserGroupActions.UnassignAllMembersFail","B2BUserActions.LOAD_B2B_USER_SUCCESS","B2BUserActions.CREATE_B2B_USER_SUCCESS","OrgUnitActions.ASSIGN_ROLE_SUCCESS","OrgUnitActions.ASSIGN_APPROVER_SUCCESS","OrgUnitActions.UNASSIGN_ROLE_SUCCESS","OrgUnitActions.UNASSIGN_APPROVER_SUCCESS","B2BUserActions.ASSIGN_B2B_USER_APPROVER_SUCCESS","B2BUserActions.UNASSIGN_B2B_USER_APPROVER_SUCCESS","UserGroupActions.USER_GROUP_ASSIGN_MEMBER_SUCCESS","UserGroupActions.USER_GROUP_UNASSIGN_MEMBER_SUCCESS","UserGroupActions.USER_GROUP_UNASSIGN_ALL_MEMBERS_SUCCESS","B2BUserActions.LOAD_B2B_USERS_SUCCESS","B2BUserActions.LOAD_B2B_USER_APPROVERS_SUCCESS","B2BUserActions.LOAD_B2B_USER_PERMISSIONS_SUCCESS","B2BUserActions.LOAD_B2B_USER_USER_GROUPS_SUCCESS","BudgetActions.LOAD_BUDGET_SUCCESS","BudgetActions.CREATE_BUDGET_SUCCESS","BudgetActions.UPDATE_BUDGET_SUCCESS","CostCenterActions.UNASSIGN_BUDGET_SUCCESS","CostCenterActions.ASSIGN_BUDGET_SUCCESS","BudgetActions.LOAD_BUDGETS_SUCCESS","CostCenterActions.LOAD_COST_CENTER_SUCCESS","CostCenterActions.CREATE_COST_CENTER_SUCCESS","CostCenterActions.UPDATE_COST_CENTER_SUCCESS","CostCenterActions.LOAD_COST_CENTERS_SUCCESS","CostCenterActions.LOAD_ASSIGNED_BUDGETS_SUCCESS","OrgUnitActions.LOAD_ORG_UNIT_SUCCESS","OrgUnitActions.CREATE_ORG_UNIT_SUCCESS","OrgUnitActions.UPDATE_ORG_UNIT_SUCCESS","OrgUnitActions.LOAD_ASSIGNED_USERS_SUCCESS","OrgUnitActions.LOAD_ADDRESSES_SUCCESS","PermissionActions.LOAD_PERMISSION_SUCCESS","PermissionActions.CREATE_PERMISSION_SUCCESS","PermissionActions.UPDATE_PERMISSION_SUCCESS","UserGroupActions.USER_GROUP_ASSIGN_PERMISSION_SUCCESS","UserGroupActions.USER_GROUP_UNASSIGN_PERMISSION_SUCCESS","B2BUserActions.ASSIGN_B2B_USER_PERMISSION_SUCCESS","B2BUserActions.UNASSIGN_B2B_USER_PERMISSION_SUCCESS","PermissionActions.LOAD_PERMISSIONS_SUCCESS","UserGroupActions.LOAD_USER_GROUP_SUCCESS","UserGroupActions.CREATE_USER_GROUP_SUCCESS","UserGroupActions.UPDATE_USER_GROUP_SUCCESS","B2BUserActions.ASSIGN_B2B_USER_USER_GROUP_SUCCESS","B2BUserActions.UNASSIGN_B2B_USER_USER_GROUP_SUCCESS","UserGroupActions.LOAD_USER_GROUPS_SUCCESS","UserGroupActions.LOAD_USER_GROUP_PERMISSIONS_SUCCESS","UserGroupActions.LOAD_USER_GROUP_AVAILABLE_CUSTOMERS_SUCCESS","OrganizationActions.CLEAR_ORGANIZATION_DATA","getUserGroupsState","B2BUserActions.LoadB2BUser","B2BUserActions.LoadB2BUsers","B2BUserActions.CreateB2BUser","B2BUserActions.UpdateB2BUser","B2BUserActions.LoadB2BUserApprovers","B2BUserActions.AssignB2BUserApprover","B2BUserActions.UnassignB2BUserApprover","B2BUserActions.LoadB2BUserPermissions","B2BUserActions.AssignB2BUserPermission","B2BUserActions.UnassignB2BUserPermission","B2BUserActions.LoadB2BUserUserGroups","B2BUserActions.AssignB2BUserUserGroup","B2BUserActions.UnassignB2BUserUserGroup","BudgetActions.LoadBudget","BudgetActions.LoadBudgets","BudgetActions.CreateBudget","BudgetActions.UpdateBudget","CostCenterActions.LoadCostCenter","CostCenterActions.LoadCostCenters","CostCenterActions.CreateCostCenter","CostCenterActions.UpdateCostCenter","CostCenterActions.LoadAssignedBudgets","CostCenterActions.AssignBudget","CostCenterActions.UnassignBudget","OrgUnitActions.ClearAssignedUsers","OrgUnitActions.LoadOrgUnit","OrgUnitActions.LoadOrgUnitNodes","OrgUnitActions.LoadTree","OrgUnitActions.LoadApprovalProcesses","OrgUnitActions.LoadAssignedUsers","OrgUnitActions.CreateUnit","OrgUnitActions.UpdateUnit","OrgUnitActions.AssignRole","OrgUnitActions.UnassignRole","OrgUnitActions.UnassignApprover","OrgUnitActions.CreateAddress","OrgUnitActions.UpdateAddress","OrgUnitActions.DeleteAddress","PermissionActions.LoadPermission","PermissionActions.LoadPermissions","PermissionActions.LoadPermissionTypes","PermissionActions.CreatePermission","PermissionActions.UpdatePermission","UserGroupActions.LoadUserGroup","UserGroupActions.LoadUserGroups","UserGroupActions.CreateUserGroup","UserGroupActions.UpdateUserGroup","UserGroupActions.DeleteUserGroup","UserGroupActions.LoadAvailableOrgCustomers","UserGroupActions.LoadPermissions","UserGroupActions.AssignMember","UserGroupActions.UnassignMember","UserGroupActions.UnassignAllMembers","UserGroupActions.AssignPermission","UserGroupActions.UnassignPermission"],"mappings":"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"}