// For Library Version: 1.97.0

declare module "sap/zen/dsh/library" {}

declare module "sap/zen/dsh/AnalyticGrid" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.46
   * @deprecated (since 1.89.0)
   * @EXPERIMENTAL (since 1.46)
   *
   * Control for embedding a Design Studio Analytic Grid in an S/4 HANA Fiori application
   */
  export default class AnalyticGrid extends Control {
    /**
     * Constructor for a new AnalyticGrid.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $AnalyticGridSettings
    );
    /**
     * Constructor for a new AnalyticGrid.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $AnalyticGridSettings
    );

    /**
     * Creates a new subclass of class sap.zen.dsh.AnalyticGrid with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, AnalyticGrid>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.zen.dsh.AnalyticGrid.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.zen.dsh.AnalyticGrid`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.AnalyticGrid` itself.
     *
     * Event is triggered when the selection is changed.
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.AnalyticGrid` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.zen.dsh.AnalyticGrid`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.AnalyticGrid` itself.
     *
     * Event is triggered when the selection is changed.
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.AnalyticGrid` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:stateChange stateChange} event of this `sap.zen.dsh.AnalyticGrid`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.AnalyticGrid` itself.
     *
     * Event is triggered when the state of the AnalyticGrid is changed.
     */
    attachStateChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.AnalyticGrid` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:stateChange stateChange} event of this `sap.zen.dsh.AnalyticGrid`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.AnalyticGrid` itself.
     *
     * Event is triggered when the state of the AnalyticGrid is changed.
     */
    attachStateChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.AnalyticGrid` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.zen.dsh.AnalyticGrid`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:stateChange stateChange} event of this `sap.zen.dsh.AnalyticGrid`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachStateChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * A SelectionVariant specifying the current selection state of the AnalyticGrid.
         */
        selection?: object;
      }
    ): this;
    /**
     * Fires event {@link #event:stateChange stateChange} to attached listeners.
     */
    fireStateChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * Serialized state string.
         */
        state?: string;
      }
    ): this;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Desired width of the AnalyticGrid control
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getQueryName queryName}.
     *
     * Name of the Query to bind the AnalyticGrid to.
     */
    getQueryName(): string;
    /**
     * Gets current value of property {@link #getSelection selection}.
     *
     * A SelectionVariant specifying the initial selection state used by the AnalyticGrid. Depending on the
     * specific query and selection variant state, this will result in setting one or more variables' values
     * and setting one or more filters on the datasource.
     */
    getSelection(): object;
    /**
     * Gets current value of property {@link #getState state}.
     *
     * A string representing the current state of the analytic grid, including data selection and navigation
     * state. Intended to be used for saving and recreating inner application state in navigation scenarios,
     * for example.
     */
    getState(): string;
    /**
     * Gets current value of property {@link #getSystemAlias systemAlias}.
     *
     * Target System alias for data connectivity
     */
    getSystemAlias(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Desired width of the AnalyticGrid control
     */
    getWidth(): CSSSize;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Desired width of the AnalyticGrid control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getQueryName queryName}.
     *
     * Name of the Query to bind the AnalyticGrid to.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setQueryName(
      /**
       * New value for property `queryName`
       */
      sQueryName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSelection selection}.
     *
     * A SelectionVariant specifying the initial selection state used by the AnalyticGrid. Depending on the
     * specific query and selection variant state, this will result in setting one or more variables' values
     * and setting one or more filters on the datasource.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSelection(
      /**
       * New value for property `selection`
       */
      oSelection?: object
    ): this;
    /**
     * Sets a new value for property {@link #getState state}.
     *
     * A string representing the current state of the analytic grid, including data selection and navigation
     * state. Intended to be used for saving and recreating inner application state in navigation scenarios,
     * for example.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setState(
      /**
       * New value for property `state`
       */
      sState?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSystemAlias systemAlias}.
     *
     * Target System alias for data connectivity
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSystemAlias(
      /**
       * New value for property `systemAlias`
       */
      sSystemAlias?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Desired width of the AnalyticGrid control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $AnalyticGridSettings extends $ControlSettings {
    /**
     * Desired width of the AnalyticGrid control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Desired width of the AnalyticGrid control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * A SelectionVariant specifying the initial selection state used by the AnalyticGrid. Depending on the
     * specific query and selection variant state, this will result in setting one or more variables' values
     * and setting one or more filters on the datasource.
     */
    selection?: object | PropertyBindingInfo;

    /**
     * Name of the Query to bind the AnalyticGrid to.
     */
    queryName?: string | PropertyBindingInfo;

    /**
     * Target System alias for data connectivity
     */
    systemAlias?: string | PropertyBindingInfo;

    /**
     * A string representing the current state of the analytic grid, including data selection and navigation
     * state. Intended to be used for saving and recreating inner application state in navigation scenarios,
     * for example.
     */
    state?: string | PropertyBindingInfo;

    /**
     * Event is triggered when the state of the AnalyticGrid is changed.
     */
    stateChange?: (oEvent: Event) => void;

    /**
     * Event is triggered when the selection is changed.
     */
    selectionChange?: (oEvent: Event) => void;
  }
}

declare module "sap/zen/dsh/Axis" {
  /**
   * Axis of a multidimensional Result Set
   */
  enum Axis {
    /**
     * Columns axis (horizontal direction in a Grid)
     */
    Columns = "Columns",
    /**
     * Free axis (contains all dimensions that can be placed on the row/column axis)
     */
    Free = "Free",
    /**
     * Repository axis (contains all dimensions that cannot be placed on the row/column axis, but are used in
     * the variables/parameters of the query assigned to a dataprovider aggregated in the `sap.zen.dsh.OlapModel`)
     */
    Repository = "Repository",
    /**
     * Row axis (vertical direction in a Grid)
     */
    Rows = "Rows",
  }
  export default Axis;
}

declare module "sap/zen/dsh/ComparisonOperator" {
  /**
   * @EXPERIMENTAL (since 1.89)
   *
   * Comparison Operator used e.g. in the dynamic filter or in a varible value
   */
  enum ComparisonOperator {
    "NON-AGGREGATED" = "undefined",
    /**
     * Between Interval definition
     */
    BETWEEN = "undefined",
    /**
     * Between excluding, complement of an interval
     */
    BETWEEN_EXCLUDING = "undefined",
    /**
     * Equal
     */
    EQUAL = "undefined",
    /**
     * Fuzzy similar
     */
    FUZZY = "undefined",
    /**
     * Greater equal
     */
    GREATER_EQUAL = "undefined",
    /**
     * Greater than
     */
    GREATER_THAN = "undefined",
    /**
     * In
     */
    IN = "undefined",
    /**
     * Is null
     */
    IS_NULL = "undefined",
    /**
     * Less or Equal
     */
    LESS_EQUAL = "undefined",
    /**
     * Less than
     */
    LESS_THAN = "undefined",
    /**
     * Like (simple pattern matching)
     */
    LIKE = "undefined",
    /**
     * Match (pattern matching)
     */
    MATCH = "undefined",
    /**
     * Not Between
     */
    NOT_BETWEEN = "undefined",
    /**
     * Not between
     */
    NOT_BETWEEN_EXCLUDING = "undefined",
    /**
     * Not equal
     */
    NOT_EQUAL = "undefined",
    /**
     * Not match
     */
    NOT_MATCH = "undefined",
    /**
     * Search
     */
    SEARCH = "undefined",
  }
  export default ComparisonOperator;
}

declare module "sap/zen/dsh/DataSourceType" {
  /**
   * Type of a DataSource
   */
  enum DataSourceType {
    /**
     * cdsprojectionview
     */
    cdsprojectionview = "cdsprojectionview",
    /**
     * Ina Model
     */
    inamodel = "inamodel",
    /**
     * infoprovider
     */
    infoprovider = "infoprovider",
    /**
     * Query
     */
    query = "query",
    /**
     * View
     */
    view = "view",
  }
  export default DataSourceType;
}

declare module "sap/zen/dsh/DimensionType" {
  /**
   * Type of a Dimension
   */
  enum DimensionType {
    /**
     * Abstract Structure
     */
    AbstractStructure = "AbstractStructure",
    /**
     * Account Dimension
     */
    AccountDimension = "AccountDimension",
    /**
     * Attribute Dimension
     */
    AttributeDimension = "AttributeDimension",
    /**
     * Calculated Dimension
     */
    CalculatedDimension = "CalculatedDimension",
    /**
     * Container Dimension
     */
    ContainerDimension = "ContainerDimension",
    /**
     * Currency Dimension
     */
    CurrencyDimension = "CurrencyDimension",
    /**
     * Date Dimension
     */
    DateDimension = "DateDimension",
    /**
     * Dimension
     */
    Dimension = "Dimension",
    /**
     * Incomplete Dimension
     */
    DimensionIncomplete = "DimensionIncomplete",
    /**
     * Geo Dimension
     */
    GisDimension = "GisDimension",
    /**
     * Hierarchy Name Dimension
     */
    HierarchyNameDimension = "HierarchyNameDimension",
    /**
     * Hierarchy Version Dimension
     */
    HierarchyVersionDimension = "HierarchyVersionDimension",
    /**
     * Measure Dimension
     */
    MeasureStructure = "MeasureStructure",
    /**
     * Presentation Dimension
     */
    PresentationDimension = "PresentationDimension",
    /**
     * Search Dimension
     */
    SearchDimension = "SearchDimension",
    /**
     * Search Result Dimension
     */
    SearchResultDimension = "SearchResultDimension",
    /**
     * Non Measure Structure
     */
    SecondaryStructure = "SecondaryStructure",
    /**
     * Time Dimension
     */
    TimeDimension = "TimeDimension",
    /**
     * Unit Dimension
     */
    UnitDimension = "UnitDimension",
    /**
     * Version Dimension
     */
    VersionDimension = "VersionDimension",
  }
  export default DimensionType;
}

declare module "sap/zen/dsh/DisplayType" {
  /**
   * Display Type of a Dimension Member
   */
  enum DisplayType {
    /**
     * Display the key of the member
     */
    Key = "Key",
    /**
     * Display the key and then the text of the member
     */
    KeyText = "KeyText",
    /**
     * Do not display the member
     */
    None = "None",
    /**
     * Display the (possible language dependant) text of the member
     */
    Text = "Text",
    /**
     * Display the text and then the key of the member
     */
    TextKey = "TextKey",
  }
  export default DisplayType;
}

declare module "sap/zen/dsh/Dsh" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import { CSSSize } from "sap/ui/core/library";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.44
   * @deprecated (since 1.89)
   *
   * Control for embedding a Design Studio application full-screen in an S/4 HANA Fiori application
   */
  export default class Dsh extends Control {
    /**
     * Constructor for a new Dsh.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * initial settings for the new control
       */
      mSettings?: $DshSettings
    );
    /**
     * Constructor for a new Dsh.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * id for the new control, generated automatically if no id is given
       */
      sId?: string,
      /**
       * initial settings for the new control
       */
      mSettings?: $DshSettings
    );

    /**
     * Creates a new subclass of class sap.zen.dsh.Dsh with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Dsh>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.zen.dsh.Dsh.
     */
    static getMetadata(): ElementMetadata;

    addParameter(
      /**
       * the name of the parameter
       */
      sName: string,
      /**
       * the value of the parameter
       */
      sValue: string
    ): string;

    createPage(): void;

    executeScript(
      /**
       * the content of the script
       */
      sScript: string
    ): void;
    /**
     * Gets current value of property {@link #getAppComponent appComponent}.
     *
     * the application component
     */
    getAppComponent(): object;
    /**
     * Gets current value of property {@link #getClient client}.
     *
     * the client
     */
    getClient(): string;

    getComponent(
      /**
       * the Name of the Component
       */
      sName: string
    ): object;

    getDataSource(
      /**
       * the namw of the data source
       */
      sName: string
    ): object;
    /**
     * Gets current value of property {@link #getDeferCreation deferCreation}.
     *
     * whether to defer the creation
     *
     * Default value is `false`.
     */
    getDeferCreation(): boolean;
    /**
     * Gets current value of property {@link #getDeployment deployment}.
     *
     * the type of deployment
     *
     * Default value is `"bw"`.
     */
    getDeployment(): string;
    /**
     * Gets current value of property {@link #getDshAppName dshAppName}.
     *
     * Name of the Design Studio application to be opened.
     *
     * Default value is `"0ANALYSIS"`.
     */
    getDshAppName(): string;
    /**
     * Gets current value of property {@link #getHeight height}.
     *
     * Desired height of the Design Studio Control
     */
    getHeight(): CSSSize;
    /**
     * Gets current value of property {@link #getLanguage language}.
     *
     * the language
     */
    getLanguage(): string;

    getPage(): object;
    /**
     * Gets current value of property {@link #getProtocol protocol}.
     *
     * the protocol
     */
    getProtocol(): string;
    /**
     * Gets current value of property {@link #getRepoPath repoPath}.
     *
     * Path to application specified by dshAppName
     */
    getRepoPath(): string;
    /**
     * Gets current value of property {@link #getSemanticMappings semanticMappings}.
     *
     * the semantic mappings
     */
    getSemanticMappings(): object;
    /**
     * Gets current value of property {@link #getSystemAlias systemAlias}.
     *
     * the system alias
     */
    getSystemAlias(): string;
    /**
     * Gets current value of property {@link #getWidth width}.
     *
     * Desired width of the Design Studio Control
     */
    getWidth(): CSSSize;
    /**
     * Initialize cross-application navigation state with an AppState object
     */
    initializeAppState(
      /**
       * The AppState object from which to retrieve and apply Application State.
       */
      oOStartupAppState: object,
      /**
       * Simple Javascript object containing name-value pairs of additional navigation state to be mixed in
       */
      oONavParams: object
    ): void;
    /**
     * Initialize cross-application navigation state directly with AppStateData. e.g., when calculated by sap.ui.generic.app.navigation.service.NavigationHandler
     */
    initializeAppStateData(
      /**
       * The AppStateData to apply
       */
      oOStateData: object,
      /**
       * Simple Javascript object containing name-value pairs of additional navigation state to be mixed in
       */
      oONavParams: object
    ): void;
    /**
     * Sets a new value for property {@link #getAppComponent appComponent}.
     *
     * the application component
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setAppComponent(
      /**
       * New value for property `appComponent`
       */
      oAppComponent?: object
    ): this;
    /**
     * Sets a new value for property {@link #getClient client}.
     *
     * the client
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setClient(
      /**
       * New value for property `client`
       */
      sClient?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDeferCreation deferCreation}.
     *
     * whether to defer the creation
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setDeferCreation(
      /**
       * New value for property `deferCreation`
       */
      bDeferCreation?: boolean
    ): this;
    /**
     * Sets a new value for property {@link #getDeployment deployment}.
     *
     * the type of deployment
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"bw"`.
     */
    setDeployment(
      /**
       * New value for property `deployment`
       */
      sDeployment?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDshAppName dshAppName}.
     *
     * Name of the Design Studio application to be opened.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"0ANALYSIS"`.
     */
    setDshAppName(
      /**
       * New value for property `dshAppName`
       */
      sDshAppName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getHeight height}.
     *
     * Desired height of the Design Studio Control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHeight(
      /**
       * New value for property `height`
       */
      sHeight?: CSSSize
    ): this;
    /**
     * Sets a new value for property {@link #getLanguage language}.
     *
     * the language
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setLanguage(
      /**
       * New value for property `language`
       */
      sLanguage?: string
    ): this;
    /**
     * Sets a new value for property {@link #getProtocol protocol}.
     *
     * the protocol
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setProtocol(
      /**
       * New value for property `protocol`
       */
      sProtocol?: string
    ): this;
    /**
     * Sets a new value for property {@link #getRepoPath repoPath}.
     *
     * Path to application specified by dshAppName
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setRepoPath(
      /**
       * New value for property `repoPath`
       */
      sRepoPath?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSemanticMappings semanticMappings}.
     *
     * the semantic mappings
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSemanticMappings(
      /**
       * New value for property `semanticMappings`
       */
      oSemanticMappings?: object
    ): this;
    /**
     * Sets a new value for property {@link #getSystemAlias systemAlias}.
     *
     * the system alias
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSystemAlias(
      /**
       * New value for property `systemAlias`
       */
      sSystemAlias?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidth width}.
     *
     * Desired width of the Design Studio Control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setWidth(
      /**
       * New value for property `width`
       */
      sWidth?: CSSSize
    ): this;
  }

  export interface $DshSettings extends $ControlSettings {
    /**
     * Name of the Design Studio application to be opened.
     */
    dshAppName?: string | PropertyBindingInfo;

    /**
     * Path to application specified by dshAppName
     */
    repoPath?: string | PropertyBindingInfo;

    /**
     * Desired width of the Design Studio Control
     */
    width?: CSSSize | PropertyBindingInfo;

    /**
     * Desired height of the Design Studio Control
     */
    height?: CSSSize | PropertyBindingInfo;

    /**
     * the type of deployment
     */
    deployment?: string | PropertyBindingInfo;

    /**
     * the protocol
     */
    protocol?: string | PropertyBindingInfo;

    /**
     * the client
     */
    client?: string | PropertyBindingInfo;

    /**
     * the language
     */
    language?: string | PropertyBindingInfo;

    /**
     * the semantic mappings
     */
    semanticMappings?: object | PropertyBindingInfo;

    /**
     * the application component
     */
    appComponent?: object | PropertyBindingInfo;

    /**
     * whether to defer the creation
     */
    deferCreation?: boolean | PropertyBindingInfo;

    /**
     * the system alias
     */
    systemAlias?: string | PropertyBindingInfo;
  }
}

declare module "sap/zen/dsh/InACard/Component" {
  import {
    default as UIComponent,
    $UIComponentSettings,
  } from "sap/ui/core/UIComponent";

  import ComponentMetadata from "sap/ui/core/ComponentMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @SINCE 1.91
   * @EXPERIMENTAL
   *
   * Card Component.
   */
  export default class Component extends UIComponent {
    /**
     * Creates and initializes a new sap.zen.dsh.InACard component. Such a card component displays the resultset
     * of a dataProvider in an overview page settings.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.zen.dsh.InACard.Component with name `sClassName` and enriches it
     * with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.UIComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Component>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.zen.dsh.InACard.Component.
     */
    static getMetadata(): ComponentMetadata;
    /**
     * Gets current value of property {@link #getContentFragment contentFragment}.
     *
     * fragment for the inner Card Control
     *
     * Default value is `"sap.zen.dsh.InACard.fragment.InACard"`.
     */
    getContentFragment(): string;
    /**
     * Gets current value of property {@link #getControllerName controllerName}.
     *
     * Controller of the Widget inside the Card
     *
     * Default value is `"sap.zen.dsh.InACard.controller.InACard"`.
     */
    getControllerName(): string;
    /**
     * Gets current value of property {@link #getDataProviderName dataProviderName}.
     *
     * Name of the Data Provider within {sap.zen.dsh.olap.OlapModel} with name `om`, which is displayed and
     * available for interactions
     */
    getDataProviderName(): string;
    /**
     * Gets current value of property {@link #getFooterFragment footerFragment}.
     *
     * Fragment that is used for the footer of the Card
     *
     * Default value is `empty string`.
     */
    getFooterFragment(): string;
    /**
     * Gets current value of property {@link #getWidgetType widgetType}.
     *
     * Type of the Widget that is displayed in the Card
     *
     * Default value is `"pivot"`.
     */
    getWidgetType(): string;
    /**
     * Sets a new value for property {@link #getContentFragment contentFragment}.
     *
     * fragment for the inner Card Control
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"sap.zen.dsh.InACard.fragment.InACard"`.
     */
    setContentFragment(
      /**
       * New value for property `contentFragment`
       */
      sContentFragment?: string
    ): this;
    /**
     * Sets a new value for property {@link #getControllerName controllerName}.
     *
     * Controller of the Widget inside the Card
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"sap.zen.dsh.InACard.controller.InACard"`.
     */
    setControllerName(
      /**
       * New value for property `controllerName`
       */
      sControllerName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getDataProviderName dataProviderName}.
     *
     * Name of the Data Provider within {sap.zen.dsh.olap.OlapModel} with name `om`, which is displayed and
     * available for interactions
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDataProviderName(
      /**
       * New value for property `dataProviderName`
       */
      sDataProviderName: string
    ): this;
    /**
     * Sets a new value for property {@link #getFooterFragment footerFragment}.
     *
     * Fragment that is used for the footer of the Card
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setFooterFragment(
      /**
       * New value for property `footerFragment`
       */
      sFooterFragment?: string
    ): this;
    /**
     * Sets a new value for property {@link #getWidgetType widgetType}.
     *
     * Type of the Widget that is displayed in the Card
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"pivot"`.
     */
    setWidgetType(
      /**
       * New value for property `widgetType`
       */
      sWidgetType?: string
    ): this;
  }

  export interface $ComponentSettings extends $UIComponentSettings {
    /**
     * fragment for the inner Card Control
     */
    contentFragment?: string | PropertyBindingInfo;

    /**
     * Controller of the Widget inside the Card
     */
    controllerName?: string | PropertyBindingInfo;

    /**
     * Fragment that is used for the footer of the Card
     */
    footerFragment?: string | PropertyBindingInfo;

    /**
     * Type of the Widget that is displayed in the Card
     */
    widgetType?: string | PropertyBindingInfo;

    /**
     * Name of the Data Provider within {sap.zen.dsh.olap.OlapModel} with name `om`, which is displayed and
     * available for interactions
     */
    dataProviderName?: string | PropertyBindingInfo;
  }
}

declare module "sap/zen/dsh/InATile" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import DataSourceType from "sap/zen/dsh/DataSourceType";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import ProtocolType from "sap/zen/dsh/ProtocolType";

  import SystemType from "sap/zen/dsh/SystemType";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * @EXPERIMENTAL (since 1.91)
   *
   * Launcher tile that displays the total of a Data Provider of an OlapModel
   */
  export default class InATile extends Control {
    /**
     * Constructor for a new `InATile`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $InATileSettings
    );
    /**
     * Constructor for a new `InATile`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $InATileSettings
    );

    /**
     * Creates a new subclass of class sap.zen.dsh.InATile with name `sClassName` and enriches it with the information
     * contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, InATile>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.zen.dsh.InATile.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Gets current value of property {@link #getClient client}.
     *
     * the client of the service of the datasource (only relevant for abap based analytical engines)#ToDo: Make
     * optional
     */
    getClient(): string;
    /**
     * Gets current value of property {@link #getDataSourceName dataSourceName}.
     *
     * the name of the datasource
     */
    getDataSourceName(): string;
    /**
     * Gets current value of property {@link #getDataSourceType dataSourceType}.
     *
     * the type of the datasource
     */
    getDataSourceType(): DataSourceType | keyof typeof DataSourceType;
    /**
     * Gets current value of property {@link #getHost host}.
     *
     * the host of the datasource, falsy means use the origin of the website as domain
     */
    getHost(): string;
    /**
     * Gets current value of property {@link #getPackageName packageName}.
     *
     * the package of the datasource #ToDo: Make optional
     */
    getPackageName(): string;
    /**
     * Gets current value of property {@link #getPath path}.
     *
     * the path to the service of the datasource
     */
    getPath(): string;
    /**
     * Gets current value of property {@link #getPort port}.
     *
     * the port of the service of the datasource
     *
     * Default value is `443`.
     */
    getPort(): int;
    /**
     * Gets current value of property {@link #getProtocolType protocolType}.
     *
     * the protocol type of the service of the datasource#ToDo: Make optional
     */
    getProtocolType(): ProtocolType | keyof typeof ProtocolType;
    /**
     * Gets current value of property {@link #getSchemaName schemaName}.
     *
     * the schema of the datasource
     */
    getSchemaName(): string;
    /**
     * Gets current value of property {@link #getSystemName systemName}.
     *
     * the system name of the service of the datasource
     *
     * Default value is `"localAbapAnalyticEngine"`.
     */
    getSystemName(): string;
    /**
     * Gets current value of property {@link #getSystemType systemType}.
     *
     * the system type of the service of the datasource
     */
    getSystemType(): SystemType | keyof typeof SystemType;
    /**
     * Gets current value of property {@link #getWidgetType widgetType}.
     *
     * Type of the Widget that is displayed in the Tile
     *
     * Default value is `"pivot"`.
     */
    getWidgetType(): string;
    /**
     * Sets a new value for property {@link #getClient client}.
     *
     * the client of the service of the datasource (only relevant for abap based analytical engines)#ToDo: Make
     * optional
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setClient(
      /**
       * New value for property `client`
       */
      sClient: string
    ): this;
    /**
     * Sets a new value for property {@link #getDataSourceName dataSourceName}.
     *
     * the name of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDataSourceName(
      /**
       * New value for property `dataSourceName`
       */
      sDataSourceName: string
    ): this;
    /**
     * Sets a new value for property {@link #getDataSourceType dataSourceType}.
     *
     * the type of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDataSourceType(
      /**
       * New value for property `dataSourceType`
       */
      sDataSourceType: DataSourceType | keyof typeof DataSourceType
    ): this;
    /**
     * Sets a new value for property {@link #getHost host}.
     *
     * the host of the datasource, falsy means use the origin of the website as domain
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHost(
      /**
       * New value for property `host`
       */
      sHost: string
    ): this;
    /**
     * Sets a new value for property {@link #getPackageName packageName}.
     *
     * the package of the datasource #ToDo: Make optional
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPackageName(
      /**
       * New value for property `packageName`
       */
      sPackageName: string
    ): this;
    /**
     * Sets a new value for property {@link #getPath path}.
     *
     * the path to the service of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPath(
      /**
       * New value for property `path`
       */
      sPath: string
    ): this;
    /**
     * Sets a new value for property {@link #getPort port}.
     *
     * the port of the service of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `443`.
     */
    setPort(
      /**
       * New value for property `port`
       */
      iPort?: int
    ): this;
    /**
     * Sets a new value for property {@link #getProtocolType protocolType}.
     *
     * the protocol type of the service of the datasource#ToDo: Make optional
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setProtocolType(
      /**
       * New value for property `protocolType`
       */
      sProtocolType: ProtocolType | keyof typeof ProtocolType
    ): this;
    /**
     * Sets a new value for property {@link #getSchemaName schemaName}.
     *
     * the schema of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSchemaName(
      /**
       * New value for property `schemaName`
       */
      sSchemaName: string
    ): this;
    /**
     * Sets a new value for property {@link #getSystemName systemName}.
     *
     * the system name of the service of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"localAbapAnalyticEngine"`.
     */
    setSystemName(
      /**
       * New value for property `systemName`
       */
      sSystemName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSystemType systemType}.
     *
     * the system type of the service of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSystemType(
      /**
       * New value for property `systemType`
       */
      sSystemType: SystemType | keyof typeof SystemType
    ): this;
    /**
     * Sets a new value for property {@link #getWidgetType widgetType}.
     *
     * Type of the Widget that is displayed in the Tile
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"pivot"`.
     */
    setWidgetType(
      /**
       * New value for property `widgetType`
       */
      sWidgetType?: string
    ): this;
  }

  export interface $InATileSettings extends $ControlSettings {
    /**
     * the host of the datasource, falsy means use the origin of the website as domain
     */
    host?: string | PropertyBindingInfo;

    /**
     * the port of the service of the datasource
     */
    port?: int | PropertyBindingInfo;

    /**
     * the path to the service of the datasource
     */
    path?: string | PropertyBindingInfo;

    /**
     * the system type of the service of the datasource
     */
    systemType?: (SystemType | keyof typeof SystemType) | PropertyBindingInfo;

    /**
     * the system name of the service of the datasource
     */
    systemName?: string | PropertyBindingInfo;

    /**
     * the protocol type of the service of the datasource#ToDo: Make optional
     */
    protocolType?:
      | (ProtocolType | keyof typeof ProtocolType)
      | PropertyBindingInfo;

    /**
     * the client of the service of the datasource (only relevant for abap based analytical engines)#ToDo: Make
     * optional
     */
    client?: string | PropertyBindingInfo;

    /**
     * the name of the datasource
     */
    dataSourceName?: string | PropertyBindingInfo;

    /**
     * the type of the datasource
     */
    dataSourceType?:
      | (DataSourceType | keyof typeof DataSourceType)
      | PropertyBindingInfo;

    /**
     * the package of the datasource #ToDo: Make optional
     */
    packageName?: string | PropertyBindingInfo;

    /**
     * the schema of the datasource
     */
    schemaName?: string | PropertyBindingInfo;

    /**
     * Type of the Widget that is displayed in the Tile
     */
    widgetType?: string | PropertyBindingInfo;
  }
}

declare module "sap/zen/dsh/MemberType" {
  /**
   * Type of a Member
   */
  enum MemberType {
    /**
     * Basic Measure
     */
    BasicMeasure = "BasicMeasure",
    /**
     * Condition Others Result
     */
    ConditionOthersResult = "ConditionOthersResult",
    /**
     * Condition Result
     */
    ConditionResult = "ConditionResult",
    /**
     * Currency Measure
     */
    CurrencyMeasure = "CurrencyMeasure",
    /**
     * Drill Path Element
     */
    DrillPathElement = "DrillPathElement",
    /**
     * Exception Aggregation
     */
    ExceptionAggregation = "ExceptionAggregation",
    /**
     * Field Value
     */
    FieldValue = "FieldValue",
    /**
     * Formula Member
     */
    FormulaMember = "FormulaMember",
    /**
     * Hierarchy Node
     */
    HierarchyNode = "HierarchyNode",
    /**
     * Literal Member
     */
    LiteralMember = "LiteralMember",
    /**
     * Measure
     */
    Measure = "Measure",
    /**
     * Member
     */
    Member = "Member",
    /**
     * Members Exit
     */
    MembersExit = "MembersExit",
    /**
     * Restricted Measure
     */
    RestrictedMeasure = "RestrictedMeasure",
    /**
     * Result Member
     */
    ResultMember = "ResultMember",
    /**
     * Select Value
     */
    SelectValue = "SelectValue",
    /**
     * Server Based Formula
     */
    ServerBasedFormula = "ServerBasedFormula",
    /**
     * Single Member Exit
     */
    SingleMemberExit = "SingleMemberExit",
    /**
     * Tuple Element
     */
    TupleElement = "TupleElement",
    /**
     * Tuple Element as Member
     */
    TupleElementAsMember = "TupleElementAsMember",
    /**
     * Tuple Element as Node
     */
    TupleElementAsNode = "TupleElementAsNode",
    /**
     * Value Help Element
     */
    ValueHelpElement = "ValueHelpElement",
    /**
     * Value Help Leaf
     */
    ValueHelpLeaf = "ValueHelpLeaf",
    /**
     * Value Help Node
     */
    ValueHelpNode = "ValueHelpNode",
    /**
     * Value Help Root Node
     */
    ValueHelpRootNode = "ValueHelpRootNode",
    /**
     * Value Help Splitter Node
     */
    ValueHelpSplitterNode = "ValueHelpSplitterNode",
    /**
     * Value Help Window Splitter Node
     */
    ValueHelpWindowSplitterNode = "ValueHelpWindowSplitterNode",
    /**
     * Variance
     */
    Variance = "Variance",
  }
  export default MemberType;
}

declare module "sap/zen/dsh/NavigationCommandType" {
  /**
   * Types of navigation commands.
   */
  enum NavigationCommandType {
    /**
     * Click on a cell
     */
    CellClick = "CellClick",
    /**
     * request for additional columns
     */
    ColumnRequest = "ColumnRequest",
    /**
     * Context menu entry
     */
    ContextMenuCmd = "ContextMenuCmd",
    /**
     * Hierachy drill operation
     */
    HierarchyNavigation = "HierarchyNavigation",
    /**
     * request for additional rows
     */
    RowRequest = "RowRequest",
  }
  export default NavigationCommandType;
}

declare module "sap/zen/dsh/olap/DataProvider" {
  import OlapModel from "sap/zen/dsh/olap/OlapModel";

  import Format from "sap/zen/commons/Format";

  import SortType from "sap/zen/dsh/SortType";

  import SortDirection from "sap/zen/dsh/SortDirection";

  /**
   * A `DataProvider` is referencing a CDS view that is annotated as an AnalyitcQuery.
   *
   * Instances of this class should only be created by the {sap.zen.dsh.olap.OlapModel}. The `OlapModel` populates
   * it's exposed data via Binding to Controls. The structure of data exposed by a DataProvider
   * is as follows:
   *
   * **Structure of Exposed Data**
   *
   *
   * 	 - `Grid/Cells`: The list of all `Cell` representing the data retrieved via `DataProvider`
   * 	 - `FreeDimensions`: The list of all Dimensions lying in the Free Axis
   * 	`Name`: the external name of the dimension  `Description`: the language dependant description of
   * the dimension  `IsStructure`: boolean flag indicating whether the dimension is a structure
   *
   * 	 - RowsDimensions: The list of all Dimensions lying on the Rows Axis
   * 	 Name: the external name of the dimension  Description: the language dependant description of the
   * dimension  IsStructure: boolean flag indicating whether the dimension is a structure   *
   * 	 - ColumnsDimensions: The list of all Dimensions lying on the Columns Axis
   * 	 Name: the external name of the dimension  Description: the language dependant description of the
   * dimension  IsStructure: boolean flag indicating whether the dimension is a structure
   * 	 - Conditions: list of conditions (result set filters)
   * 	 - Exceptions: list of exceptions (conditional formats)
   * 	 - StructureMembers: list of structure members (collection of Members of all Structure Dimension)
   */
  export default class DataProvider {
    /**
     * Constructor for a new DataProvider.
     *
     * A DataProvider represents a navigatable queryManager and allows to access and change data from servers
     * providing the InA Protocol.
     */
    constructor(
      /**
       * the model to which the DataProvider belongs
       */
      oOlapModel: OlapModel,
      /**
       * name of the DataProvider
       */
      sDataProviderName: string,
      /**
       * Update function for the variable collection of the `OlapModel`
       */
      fVariableUpdater: Function,
      /**
       * update function for update state
       */
      fUndoUpdater: Function,
      /**
       * the firefly application associated to the `OlapModel`
       */
      oApplication: object,
      /**
       * the firefly queryManager that is wrapped by the `DataProvider`
       */
      oQueryManager: object
    );

    /**
     * add a new condition (aka resultset filter).
     */
    addCondition(
      /**
       * Condition Definiton
       */
      oData: object,
      /**
       * Target state of the condition
       */
      bActive: boolean
    ): Promise<this>;
    /**
     * Do a drill operation on a dimension member on an Axis
     */
    drill(
      /**
       * the external name of the Dimension
       */
      sDim: string,
      /**
       * the Tuple Index of the member in the resultset.
       */
      nIndex: int
    ): this;
    /**
     * Exchange the axis and position of two dimensions
     */
    exchange(
      /**
       * the external name of the first Dimension
       */
      sDim1: string,
      /**
       * the external name of the second Dimension
       */
      sDim2: string
    ): Promise<this>;
    /**
     * Filter a dimension by one member and drillown another dimension
     */
    filterAndDrillDown(
      /**
       * the external name of the Dimension to be filtered
       */
      sDim1: string,
      /**
       * the filter
       */
      sMember: string,
      /**
       * the dimension to be drilled
       */
      sDim2: string
    ): this;
    /**
     * Gets the scaling factor of a measure or data cell
     */
    getDecimalPlaces(
      /**
       * the Member of the Measure Structure
       */
      sMeasureMember: string,
      /**
       * the Member of the Non Measure Structure, if this is not given the value for the sMeasureMember is returned
       */
      sNonMeasureMember: string
    ): int;
    /**
     * get the list of filters of a dimension
     */
    getFilterOfDim(
      /**
       * the name of the dimension from which the filter is retrieved
       */
      sDim: string
    ): object[];
    /**
     * get the current resultset from the InA Server
     */
    getResultSet(): Promise<this>;
    /**
     * get the list of the jump targets associated to a datacell defined via the report report interface.
     */
    getRRITargets(
      /**
       * Row of the data cell
       */
      nRow: int,
      /**
       * Column of the data cell
       */
      nColumn: int
    ): Promise<this>;
    /**
     * Gets the scaling factor of a measure
     */
    getScalingFactor(
      /**
       * the Member of the Measure Structure
       */
      sMeasureMember: string,
      /**
       * the Member of the Non Measure Structure
       */
      sNonMeasureMember: string
    ): int;
    /**
     * hasVariable Checks whether a Variable is influencing the DataProvider
     */
    hasVariable(
      /**
       * Name of the Variable
       */
      the: string
    ): boolean;
    /**
     * move a dimension one position down on it's axis
     */
    moveDown(
      /**
       * name of the dimension
       */
      sName: string,
      /**
       * Target state of the condition
       */
      bActive: boolean
    ): this;
    /**
     * move a dimension one position up on it's axis
     */
    moveUp(
      /**
       * name of the dimension
       */
      sName: string,
      /**
       * Target state of the condition
       */
      bActive: boolean
    ): this;
    /**
     * Open a dialog that allows to display and change the property of an `Axis` of the `DataProvider`.
     */
    openAxisDialog(
      /**
       * the external name of the Dimension
       */
      sDim: string
    ): Promise<boolean>;
    /**
     * Open a dialog that allows to display and change the property of a `Query Cell` of the `DataProvider`.
     */
    openCellDialog(
      /**
       * the external name of the first structure
       */
      sDim1?: string,
      /**
       * the external name of the member of the first structure
       */
      sMem1?: string,
      /**
       * the external name of the second structure
       */
      sDim2?: string,
      /**
       * the external name of the member of the second structure
       */
      sMem2?: string
    ): Promise<this>;
    /**
     * Open a dialog that allows to create a new Condition. That is a criterium on measure values for result
     * set filtering.
     */
    openConditionDialog(): Promise<this>;
    /**
     * open the dialog that allows to create a new Formula.
     */
    openCreateFormulaDialog(
      /**
       * the external name of the structure on which the new restriction is created
       */
      sDim: string
    ): Promise<this>;
    /**
     * open the dialog that allows to create a new restriction.
     */
    openCreateRestrictionDialog(
      /**
       * the external name of the structure on which the new restriction is created
       */
      sDim: string,
      /**
       * the external name of the member that will be restricted
       */
      sMember: string
    ): Promise<this>;
    /**
     * Open a dialog that allows to display and change the currency translation settings of the `DataProvider`.
     */
    openCurrencyTranslationDialog(): Promise<boolean>;
    /**
     * Open a dialog to display and change the settings of a dimension of the `DataProvider`
     */
    openDimDialog(
      /**
       * the external name of the Dimension
       */
      sDim: string
    ): Promise<boolean>;
    /**
     * Open a dialog that allows to create a new Exception. That is a criterium for conditional formatting.
     */
    openExceptionDialog(): Promise<boolean>;
    /**
     * Open a dialog to display and change the filter on a dimension of the `DataProvider`
     */
    openSelector(
      /**
       * the external name of the Dimension
       */
      sDimensionName: string
    ): Promise<any>;
    /**
     * Remove the filter of a dimension
     */
    removeFilter(
      /**
       * the external name
       */
      sDim: string
    ): this;
    /**
     * Resets this data provider to the state after the metadata import
     */
    resetToDefault(): void;
    /**
     * Distribute the dimension among the rows and columns
     */
    setAxesLayout(
      /**
       * an Object containing a `rows` member referencing a string array containing the names of the dimensions
       * and a `columns` member referencing a string array containing the dimension on the columns. The order
       * in the array control the positon on the axis.
       */
      mLayout: object
    ): this;
    /**
     * set the state of a condition (aka result set filter).
     */
    setConditionActive(
      /**
       * name of the condition
       */
      sName: string,
      /**
       * Target state of the condition
       */
      bActive: boolean
    ): Promise<this>;
    /**
     * Sets the number of decimal of a measure/query cell
     */
    setDecimalPlaces(
      /**
       * number of the decimal palaces to be shown after the separator
       */
      nNumberOfDecimalPlaces: int,
      /**
       * the Member of the Measure Structure
       */
      sMeasureMember: string,
      /**
       * Member of the Non Measure Structure, if this is not given the setting is applied for the whole sMeasureMember
       */
      the: string
    ): this;
    /**
     * Set Display Hierachy
     */
    setDisplayHierarchy(
      /**
       * the external name of the structure on which the new restriction is created
       */
      sDim: string,
      /**
       * whether the hierarchy should be activated
       */
      bActive: boolean,
      /**
       * the name of the hierarchy (optional)
       */
      sHierachy: string,
      /**
       * the version of the hierarchy (optional)
       */
      sVersion: string
    ): this;
    /**
     * set the state of an exception (aka conditional format).
     */
    setExceptionActive(
      /**
       * name of the exception
       */
      sName: string,
      /**
       * Target state of the exception
       */
      bActive: boolean
    ): Promise<this>;
    /**
     * Set the filter for a dimension
     */
    setFilter(
      /**
       * the external name
       */
      sDim: string,
      /**
       * the filter
       */
      oFilter: object
    ): undefined;
    /**
     * sets the format property of the dataprovider, this can influence the resultset that is aggregated in
     * the `Grid.Cells` collection. Its main purpose is to influence the visualisation of a `sap.zen.dsh.PivotTable`
     */
    setFormat(
      /**
       * the format to be used
       */
      sFormat: Format | keyof typeof Format
    ): void;
    /**
     * set a data value to an input entabled cell
     */
    setPlanValue(
      /**
       * Index of the data cell in the Grid aggregation of the `DataProvider`
       */
      nIndex: int,
      /**
       * the new value of the data cell
       */
      fValue: float
    ): void;
    /**
     * Sets the scaling factor of a measure/query cell
     */
    setScalingFactor(
      /**
       * the exponential of the scaling factor
       */
      nFactor: int,
      /**
       * the Member of the Measure Structure
       */
      sMeasureMember: string,
      /**
       * the Member of the Non Measure Structure
       */
      sNonMeasureMember: string
    ): this;
    /**
     * Sort the members of a dimension
     */
    sort(
      /**
       * the external name of the Dimension
       */
      sDim: string,
      /**
       * of sorting
       */
      type: SortType | keyof typeof SortType,
      /**
       * of sorting
       */
      direction: SortDirection | keyof typeof SortDirection,
      /**
       * in case of a structure the measure according to which is sorted
       */
      sMember?: string
    ): Promise<this>;
    /**
     * submit the value of the input enabled queries to the InA Server
     */
    submitVariables(): Promise<this>;
    /**
     * suppress a unit/currency from being populated to the result cells
     */
    suppressUnit(
      /**
       * the key of the suppressed unit
       */
      sUnit: string
    ): this;
    /**
     * retrieve the data of the current naviation state `DataProvider` from the InA Server.
     */
    synchronize(): Promise<this>;
    /**
     * Move a dimension to the columns axis
     */
    toColumns(
      /**
       * the external name of the Dimension
       */
      sDim: string
    ): this;
    /**
     * Move a dimension to the rows axis
     */
    toRows(
      /**
       * the external name of the Dimension
       */
      sDim: string
    ): this;
    /**
     * transfer the entered data values to the InA Server
     */
    transferValue(): Promise<this>;
  }
}

declare module "sap/zen/dsh/olap/OlapListBinding" {
  import ListBinding from "sap/ui/model/ListBinding";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * List binding implementation for `OlapModel`.
   */
  export default class OlapListBinding extends ListBinding {
    /**
     * Creates a new OlapListBinding.
     *
     * This constructor should only be called by subclasses or model implementations, not by application or
     * control code. Such code should use {@link sap.zen.dsh.olap.OlapModel#bindList OlapModel#bindList} on
     * the corresponding model instance instead.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.zen.dsh.olap.OlapListBinding with name `sClassName` and enriches
     * it with the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, OlapListBinding>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.zen.dsh.olap.OlapListBinding.
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/zen/dsh/olap/OlapListGridBinding" {
  import ListBinding from "sap/ui/model/ListBinding";

  /**
   * List binding implementation for `OlapModel`.
   */
  export default class OlapListGridBinding extends ListBinding {
    /**
     * Creates a new OlapListGridBinding.
     *
     * This constructor should only be called by subclasses or model implementations, not by application or
     * control code. Such code should use {@link sap.zen.dsh.OlapModel#bindList OlapModel#bindList} on the corresponding
     * model instance instead.
     */
    constructor();
  }
}

declare module "sap/zen/dsh/olap/OlapModel" {
  import Model from "sap/ui/model/Model";

  import DataProvider from "sap/zen/dsh/olap/DataProvider";

  import Event from "sap/ui/base/Event";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * Model implementation for InA provider
   *
   * The OlapModel can populate it's exposed data via Binding to Controls. The structure of the exposed data
   * is as follows: **Structure of Exposed Data**
   *
   *
   * 	 - FlatVariables: The list of all input ready variables collected from all aggregated `DataProvider`
   *
   * 	 - DataProvider: The associative array of all `DataProvider` aggregated by the   semanticStyles:
   * 			The associative array of all `SemanticStyle` for the `OlapModel` Messages: The list of all messages
   * 			posted by the Analytical Engine
   */
  export default class OlapModel extends Model {
    /**
     * Constructor for a new OlapMode.
     *
     * The Olap Model allows to access and change data from servers providing the InA Protocol.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * the settings for the new Olap Model.
       * 	systemLandscape: The list of addressable Analytic Engines dataProvider: The associative array of
       * all `DataProvider` aggregated by the
       */
      mSettings?: object
    );

    /**
     * Creates a new subclass of class sap.zen.dsh.olap.OlapModel with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, OlapModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.zen.dsh.olap.OlapModel.
     */
    static getMetadata(): Metadata;

    addFunction(
      /**
       * the name of the data function
       */
      sName: string,
      /**
       * the description of the data function
       */
      sText: string
    ): OlapModel;
    /**
     * adds a new query as a new `DataProvider` . The query is supposed to be defined as an analytical annotated
     * CDS View  the naem of the query is the name of the DDIC view, prefixed by "2C"
     */
    addQuery(
      /**
       * the name of the new `DataProvider`.
       */
      sDataProviderName: string,
      /**
       * the name of the query which the `DataProvider` is supposed to expose.
       */
      sQueryName: string,
      /**
       * the name of the system in the landscape
       */
      sSystem?: string,
      /**
       * the name of the package
       */
      sPackage?: string,
      /**
       * the name of the schema
       */
      sSchema?: string,
      /**
       * the name of the type of the datasource
       */
      sType?: string
    ): Promise<DataProvider>;
    /**
     * adds a new query as a new System to the System Landscape . The parameter should have the following properties:
     *
     * 	 -  systemName <- the name of the system
     * 	 -  systemType <- "BW" | "HANA" | "DWC" | "WASABI"
     * 	 -  host <- the host of the system
     * 	 -  port <- the port  protocol <- "WASABI" | "HTTP" | "HTTPS"  client <- the client of the ABAP
     * 			system
     */
    addSystem(
      /**
       * The Definition of the system
       */
      mSystem: object
    ): Promise<DataProvider>;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:metadataFailed metadataFailed} event of this
     * `sap.zen.dsh.olap.OlapModel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.olap.OlapModel` itself.
     */
    attachMetadataFailed(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.olap.OlapModel` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:metadataFailed metadataFailed} event of this
     * `sap.zen.dsh.olap.OlapModel`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.olap.OlapModel` itself.
     */
    attachMetadataFailed(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.olap.OlapModel` itself
       */
      oListener?: object
    ): this;
    /**
     * deserialize the Model with all aggregated `DataProvider` The `OlapModel` be be deserialized from an equivalent
     * such Object.
     */
    deserialize(): object;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:metadataFailed metadataFailed} event of this
     * `sap.zen.dsh.olap.OlapModel`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachMetadataFailed(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * exports the Olap Model to excel
     */
    exportToExcel(
      /**
       * the Name of the exported Workbook
       */
      WorkbookName: string
    ): Promise<this>;
    /**
     * Fires event {@link #event:metadataFailed metadataFailed} to attached listeners.
     */
    fireMetadataFailed(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * retrieves a `DataProvider` aggregated by the `OlapModel`. sQueryName, sSystem
     */
    getDataProvider(
      /**
       * the name of the `DataProvider`.
       */
      sDataProviderName: string
    ): DataProvider;

    getLimit(): object;
    /**
     * retreive the list of data functions matching a given text
     */
    getPlanningFunctionCatalog(
      /**
       * the pattern that the description of the data function must match
       */
      sText: string
    ): Promise<Object[]>;
    /**
     * Display a dialog to allow the user to select an Analytic Query, returns a Promise containing the name,
     * if the user does not choose an Analytic Query, then the promise is rejected
     */
    openQueryDialog(): Promise<string>;
    /**
     * Display a dialog to allow the user to select a data function, returns a Promise containing the name,
     * if the user does not choose a data function, then the promise is rejected
     */
    openSelectFunction(): Promise<string>;
    /**
     * Let the user choose a value for a variable in a dialog
     */
    openVariableSelector(
      /**
       * the name of the variable
       */
      sVar: string
    ): Promise<string>;
    /**
     * Process a data function, in case the function requires additional values, prompt the use in a dialogue
     */
    processServiceFunction(
      /**
       * the name of the data function
       */
      sServiceName: string
    ): Promise<this>;
    /**
     * Process a data sequence, in case the sequence requires additional values, prompt the use in a dialogue
     */
    processServiceSequence(
      /**
       * the name of the data function
       */
      sServiceName: string
    ): Promise<this>;

    removeFunction(
      /**
       * the name of the data function
       */
      sName: string
    ): OlapModel;
    /**
     * Reset the data buffer
     */
    resetBuffer(): Promise<this>;
    /**
     * Reset the Olap Model to the default query
     */
    resetModel(): void;
    /**
     * Save the data buffer
     */
    saveBuffer(): Promise<this>;
    /**
     * serialize the Model with all aggregated `DataProvider` The `OlapModel` be be deserialized from an equivalent
     * such Object.
     */
    serialize(): object;

    setLimit(
      /**
       * the limit of the rows and columns that are exposed for bindings
       */
      oLimit: object
    ): OlapModel;
    /**
     * Replace all input enabled variables with their entered values for all datat providers
     */
    submitVariables(): Promise<this>;
    /**
     * snychronize all aggregated dataproviders if the user does not choose an Analytic Query, then the promise
     * is rejected
     */
    synchronize(
      /**
       * List of data provider that are to be synchronized (all if not supplied)
       */
      aDataProviderNames: string[]
    ): Promise<OlapModel>;
    /**
     * undoes the last navigation step.
     */
    undo(): Promise<this>;
  }
}

declare module "sap/zen/dsh/olap/OlapPropertyBinding" {
  import ListBinding from "sap/ui/model/ListBinding";

  /**
   * Property binding implementation for `OlapModel`.
   */
  export default class OlapPropertyBinding extends ListBinding {
    /**
     * Creates a new OlapPropertyBinding.
     *
     * This constructor should only be called by subclasses or model implementations, not by application or
     * control code. Such code should use {@link sap.zen.dsh.OlapModel#bindProperty OlapModel#bindProperty}
     * on the corresponding model instance instead.
     */
    constructor();
  }
}

declare module "sap/zen/dsh/PivotTable" {
  import { default as Control, $ControlSettings } from "sap/ui/core/Control";

  import Event from "sap/ui/base/Event";

  import NavigationCommandType from "sap/zen/dsh/NavigationCommandType";

  import Format from "sap/zen/commons/Format";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  /**
   * Enables users to view, navigate and change multidimensional data exposed via InA in a PivotTable.
   *
   * Overview:
   *
   * The user can view the data in the Pivot Table, navigate in the data via a context menu or enter data
   * in input enables cells cells.
   *
   * Usage:
   *
   * The `PivotTable` is mimicked after the OData Smart Controls. Instead of OData they bind against an {sap.zen.dsh.olap.OlapModel}
   * with the name "om". Each Analytical Query in the `Olap Model` is exposed as a DataProvider. The data
   * provider that the PivotTable consumes needs to be provided as a property value.
   */
  export default class PivotTable extends Control {
    /**
     * Constructor for a new `PivotTable`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $PivotTableSettings
    );
    /**
     * Constructor for a new `PivotTable`.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $PivotTableSettings
    );

    /**
     * Creates a new subclass of class sap.zen.dsh.PivotTable with name `sClassName` and enriches it with the
     * information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, PivotTable>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.zen.dsh.PivotTable.
     */
    static getMetadata(): ElementMetadata;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navigationCmd navigationCmd} event of this `sap.zen.dsh.PivotTable`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.PivotTable` itself.
     *
     * Fired when a user launches a navigation command
     */
    attachNavigationCmd(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.PivotTable` itself
       */
      oListener?: object
    ): this;
    /**
     * Attaches event handler `fnFunction` to the {@link #event:navigationCmd navigationCmd} event of this `sap.zen.dsh.PivotTable`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.PivotTable` itself.
     *
     * Fired when a user launches a navigation command
     */
    attachNavigationCmd(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.PivotTable` itself
       */
      oListener?: object
    ): this;
    /**
     * Detaches event handler `fnFunction` from the {@link #event:navigationCmd navigationCmd} event of this
     * `sap.zen.dsh.PivotTable`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachNavigationCmd(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * Fires event {@link #event:navigationCmd navigationCmd} to attached listeners.
     */
    fireNavigationCmd(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The control in the cell on which the command was initiated
         */
        anchor?: Control;
        /**
         * Type of the navigation command: Context Menu, Drill, Row/Col request, Data Entry
         */
        navigationCmdType?:
          | NavigationCommandType
          | keyof typeof NavigationCommandType;
        /**
         * The Row and Column Selection of the cell on which the command was initiated
         */
        selection?: object;
        /**
         * the function that executed the command. The function will return a Promise that resolves/rejects when
         * the command execution finished.
         */
        cmd?: Function;
      }
    ): this;
    /**
     * Gets current value of property {@link #getDataProviderName dataProviderName}.
     *
     * Name of the Data Provider within {sap.zen.dsh.olap.OlapModel} with name `om`, which is displayed and
     * available for interactions
     *
     * Default value is `"0"`.
     */
    getDataProviderName(): string;
    /**
     * Gets current value of property {@link #getFormat format}.
     *
     * Property for different table formats
     *
     * Default value is `ExcelStyle`.
     */
    getFormat(): Format | keyof typeof Format;
    /**
     * Sets a new value for property {@link #getDataProviderName dataProviderName}.
     *
     * Name of the Data Provider within {sap.zen.dsh.olap.OlapModel} with name `om`, which is displayed and
     * available for interactions
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"0"`.
     */
    setDataProviderName(
      /**
       * New value for property `dataProviderName`
       */
      sDataProviderName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getFormat format}.
     *
     * Property for different table formats
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `ExcelStyle`.
     */
    setFormat(
      /**
       * New value for property `format`
       */
      sFormat?: Format | keyof typeof Format
    ): this;
  }

  export interface $PivotTableSettings extends $ControlSettings {
    /**
     * Name of the Data Provider within {sap.zen.dsh.olap.OlapModel} with name `om`, which is displayed and
     * available for interactions
     */
    dataProviderName?: string | PropertyBindingInfo;

    /**
     * Property for different table formats
     */
    format?: (Format | keyof typeof Format) | PropertyBindingInfo;

    /**
     * Fired when a user launches a navigation command
     */
    navigationCmd?: (oEvent: Event) => void;
  }
}

declare module "sap/zen/dsh/ProtocolType" {
  /**
   * Protocol Type
   */
  enum ProtocolType {
    /**
     * HTTP
     */
    HTTP = "HTTP",
    /**
     * HTTPS
     */
    HTTPS = "HTTPS",
    /**
     * WASABI
     */
    WASABI = "WASABI",
  }
  export default ProtocolType;
}

declare module "sap/zen/dsh/rsrt/Component" {
  import {
    default as UIComponent,
    $UIComponentSettings,
  } from "sap/ui/core/UIComponent";

  import DataSourceType from "sap/zen/dsh/DataSourceType";

  import ComponentMetadata from "sap/ui/core/ComponentMetadata";

  import ProtocolType from "sap/zen/dsh/ProtocolType";

  import SystemType from "sap/zen/dsh/SystemType";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  export default class Component extends UIComponent {
    /**
     * RSRT Reporting Server Runtime Test.
     *
     * This `UIComponent` allows for testing navigation in multidimensional data provided by a server implementing
     * the the InA Protocol.
     * It roughly corresponds to the familiar transaction RSRT. Via the `startupParameters` of the `ComponentData the query` can
     * be passed to the component. this query is then assigned to the {sap.zen.dsh.olap.DataProvider} with the
     * name `0` of the {sap.zen.dsh.olap.OlapModel} with the name `om`
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor();

    /**
     * Creates a new subclass of class sap.zen.dsh.rsrt.Component with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.UIComponent.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, Component>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.zen.dsh.rsrt.Component.
     */
    static getMetadata(): ComponentMetadata;
    /**
     * Gets current value of property {@link #getClient client}.
     *
     * the client of the service of the datasource (only relevant for abap based analytical engines)#ToDo: Make
     * optional
     */
    getClient(): string;
    /**
     * Gets current value of property {@link #getDataSourceName dataSourceName}.
     *
     * the name of the datasource
     */
    getDataSourceName(): string;
    /**
     * Gets current value of property {@link #getDataSourceType dataSourceType}.
     *
     * the type of the datasource
     */
    getDataSourceType(): DataSourceType | keyof typeof DataSourceType;
    /**
     * Gets current value of property {@link #getHost host}.
     *
     * the host of the datasource, falsy means use the origin of the website as domain
     */
    getHost(): string;
    /**
     * Gets current value of property {@link #getPackageName packageName}.
     *
     * the package of the datasource #ToDo: Make optional
     */
    getPackageName(): string;
    /**
     * Gets current value of property {@link #getPath path}.
     *
     * the path to the service of the datasource
     */
    getPath(): string;
    /**
     * Gets current value of property {@link #getPort port}.
     *
     * the port of the service of the datasource
     *
     * Default value is `443`.
     */
    getPort(): int;
    /**
     * Gets current value of property {@link #getProtocolType protocolType}.
     *
     * the protocol type of the service of the datasource#ToDo: Make optional
     */
    getProtocolType(): ProtocolType | keyof typeof ProtocolType;
    /**
     * Gets current value of property {@link #getSchemaName schemaName}.
     *
     * the schema of the datasource
     */
    getSchemaName(): string;
    /**
     * Gets current value of property {@link #getSystemName systemName}.
     *
     * the system name of the service of the datasource
     *
     * Default value is `"localAbapAnalyticEngine"`.
     */
    getSystemName(): string;
    /**
     * Gets current value of property {@link #getSystemType systemType}.
     *
     * the system type of the service of the datasource
     */
    getSystemType(): SystemType | keyof typeof SystemType;
    /**
     * Sets a new value for property {@link #getClient client}.
     *
     * the client of the service of the datasource (only relevant for abap based analytical engines)#ToDo: Make
     * optional
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setClient(
      /**
       * New value for property `client`
       */
      sClient: string
    ): this;
    /**
     * Sets a new value for property {@link #getDataSourceName dataSourceName}.
     *
     * the name of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDataSourceName(
      /**
       * New value for property `dataSourceName`
       */
      sDataSourceName: string
    ): this;
    /**
     * Sets a new value for property {@link #getDataSourceType dataSourceType}.
     *
     * the type of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setDataSourceType(
      /**
       * New value for property `dataSourceType`
       */
      sDataSourceType: DataSourceType | keyof typeof DataSourceType
    ): this;
    /**
     * Sets a new value for property {@link #getHost host}.
     *
     * the host of the datasource, falsy means use the origin of the website as domain
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setHost(
      /**
       * New value for property `host`
       */
      sHost: string
    ): this;
    /**
     * Sets a new value for property {@link #getPackageName packageName}.
     *
     * the package of the datasource #ToDo: Make optional
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPackageName(
      /**
       * New value for property `packageName`
       */
      sPackageName: string
    ): this;
    /**
     * Sets a new value for property {@link #getPath path}.
     *
     * the path to the service of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setPath(
      /**
       * New value for property `path`
       */
      sPath: string
    ): this;
    /**
     * Sets a new value for property {@link #getPort port}.
     *
     * the port of the service of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `443`.
     */
    setPort(
      /**
       * New value for property `port`
       */
      iPort?: int
    ): this;
    /**
     * Sets a new value for property {@link #getProtocolType protocolType}.
     *
     * the protocol type of the service of the datasource#ToDo: Make optional
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setProtocolType(
      /**
       * New value for property `protocolType`
       */
      sProtocolType: ProtocolType | keyof typeof ProtocolType
    ): this;
    /**
     * Sets a new value for property {@link #getSchemaName schemaName}.
     *
     * the schema of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSchemaName(
      /**
       * New value for property `schemaName`
       */
      sSchemaName: string
    ): this;
    /**
     * Sets a new value for property {@link #getSystemName systemName}.
     *
     * the system name of the service of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"localAbapAnalyticEngine"`.
     */
    setSystemName(
      /**
       * New value for property `systemName`
       */
      sSystemName?: string
    ): this;
    /**
     * Sets a new value for property {@link #getSystemType systemType}.
     *
     * the system type of the service of the datasource
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setSystemType(
      /**
       * New value for property `systemType`
       */
      sSystemType: SystemType | keyof typeof SystemType
    ): this;
  }

  export interface $ComponentSettings extends $UIComponentSettings {
    /**
     * the host of the datasource, falsy means use the origin of the website as domain
     */
    host?: string | PropertyBindingInfo;

    /**
     * the port of the service of the datasource
     */
    port?: int | PropertyBindingInfo;

    /**
     * the path to the service of the datasource
     */
    path?: string | PropertyBindingInfo;

    /**
     * the system type of the service of the datasource
     */
    systemType?: (SystemType | keyof typeof SystemType) | PropertyBindingInfo;

    /**
     * the system name of the service of the datasource
     */
    systemName?: string | PropertyBindingInfo;

    /**
     * the protocol type of the service of the datasource#ToDo: Make optional
     */
    protocolType?:
      | (ProtocolType | keyof typeof ProtocolType)
      | PropertyBindingInfo;

    /**
     * the client of the service of the datasource (only relevant for abap based analytical engines)#ToDo: Make
     * optional
     */
    client?: string | PropertyBindingInfo;

    /**
     * the name of the datasource
     */
    dataSourceName?: string | PropertyBindingInfo;

    /**
     * the type of the datasource
     */
    dataSourceType?:
      | (DataSourceType | keyof typeof DataSourceType)
      | PropertyBindingInfo;

    /**
     * the package of the datasource #ToDo: Make optional
     */
    packageName?: string | PropertyBindingInfo;

    /**
     * the schema of the datasource
     */
    schemaName?: string | PropertyBindingInfo;
  }
}

declare module "sap/zen/dsh/SemanticRole" {
  /**
   * Semanitc Role of a Dimension Member
   */
  enum SemanticRole {
    /**
     * Actual Data
     */
    Actual = "Actual",
    /**
     * Budget Data
     */
    Budget = "Budget",
    /**
     * Forecast Data
     */
    Forecast = "Forecast",
    /**
     * Previous Data
     */
    Previous = "Previous",
  }
  export default SemanticRole;
}

declare module "sap/zen/dsh/SortDirection" {
  /**
   * Sort Direction
   */
  enum SortDirection {
    /**
     * Ascending
     */
    ASCENDING = "ASCENDING",
    /**
     * Descending
     */
    DESCENDING = "DESCENDING",
    /**
     * No sorting
     */
    NONE = "NONE",
  }
  export default SortDirection;
}

declare module "sap/zen/dsh/SortType" {
  /**
   * Sort Type
   */
  enum SortType {
    /**
     * Sort according to Filter
     */
    Filter = "Filter",
    /**
     * Sort according to Key
     */
    MemberKey = "MemberKey",
    /**
     * Sort according to Text
     */
    MemberText = "MemberText",
    /**
     * No sorting
     */
    unset = "unset",
  }
  export default SortType;
}

declare module "sap/zen/dsh/SystemType" {
  /**
   * System Type of an InA System
   */
  enum SystemType {
    /**
     * The ABAP analytic engine
     */
    ABAP_MDS = "ABAP_MDS",
    /**
     * The BW analytic engine
     */
    BW = "BW",
    /**
     * The Data Warehouce Cloud analytic engine
     */
    DWC = "DWC",
    /**
     * The in place WASABI Engine
     */
    WASABI = "WASABI",
  }
  export default SystemType;
}

declare module "sap/zen/dsh/widgets/ValueHelpDialog" {
  import { default as Dialog, $DialogSettings } from "sap/m/Dialog";

  import Event from "sap/ui/base/Event";

  import Token from "sap/m/Token";

  import ElementMetadata from "sap/ui/core/ElementMetadata";

  import ValueHelpRangeOperation from "sap/zen/dsh/ValueHelpRangeOperation";

  import { PropertyBindingInfo } from "sap/ui/base/ManagedObject";

  import Control from "sap/ui/core/Control";

  /**
   * @deprecated (since 1.89)
   *
   * The ValueHelpDialog control can be used to implement a value help for an input field.
   */
  export default class ValueHelpDialog extends Dialog {
    /**
     * Constructor for a new valuehelpdialog/ValueHelpDialog.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * Initial settings for the new control
       */
      mSettings?: $ValueHelpDialogSettings
    );
    /**
     * Constructor for a new valuehelpdialog/ValueHelpDialog.
     *
     * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
     * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
     * of the syntax of the settings object.
     */
    constructor(
      /**
       * ID for the new control, generated automatically if no ID is given
       */
      sId?: string,
      /**
       * Initial settings for the new control
       */
      mSettings?: $ValueHelpDialogSettings
    );

    /**
     * Creates a new subclass of class sap.zen.dsh.ValueHelpDialog with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Dialog.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, ValueHelpDialog>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.zen.dsh.ValueHelpDialog.
     */
    static getMetadata(): ElementMetadata;
    /**
     * @SINCE 1.24
     *
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.zen.dsh.ValueHelpDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
     *
     * This event is fired when the Cancel button is pressed.
     */
    attachCancel(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.24
     *
     * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.zen.dsh.ValueHelpDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
     *
     * This event is fired when the Cancel button is pressed.
     */
    attachCancel(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.24
     *
     * Attaches event handler `fnFunction` to the {@link #event:ok ok} event of this `sap.zen.dsh.ValueHelpDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
     *
     * This event is fired when the OK button is pressed.
     */
    attachOk(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.24
     *
     * Attaches event handler `fnFunction` to the {@link #event:ok ok} event of this `sap.zen.dsh.ValueHelpDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
     *
     * This event is fired when the OK button is pressed.
     */
    attachOk(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.32
     *
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.zen.dsh.ValueHelpDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
     *
     * This event is fired when the user selects an item in the items table.
     *
     * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
     */
    attachSelectionChange(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.32
     *
     * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
     * `sap.zen.dsh.ValueHelpDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
     *
     * This event is fired when the user selects an item in the items table.
     *
     * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
     */
    attachSelectionChange(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.32
     *
     * Attaches event handler `fnFunction` to the {@link #event:tokenRemove tokenRemove} event of this `sap.zen.dsh.ValueHelpDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
     *
     * This event is fired when the user removes one or multiple existing token(s) from the dialog.
     *
     * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
     */
    attachTokenRemove(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.32
     *
     * Attaches event handler `fnFunction` to the {@link #event:tokenRemove tokenRemove} event of this `sap.zen.dsh.ValueHelpDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
     *
     * This event is fired when the user removes one or multiple existing token(s) from the dialog.
     *
     * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
     */
    attachTokenRemove(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.32
     *
     * Attaches event handler `fnFunction` to the {@link #event:updateSelection updateSelection} event of this
     * `sap.zen.dsh.ValueHelpDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
     *
     * This event is fired when the table gets an update and all existing tokens must be selected in the table.
     *
     * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
     */
    attachUpdateSelection(
      /**
       * An application-specific payload object that will be passed to the event handler along with the event
       * object when firing the event
       */
      oData: object,
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.32
     *
     * Attaches event handler `fnFunction` to the {@link #event:updateSelection updateSelection} event of this
     * `sap.zen.dsh.ValueHelpDialog`.
     *
     * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
     * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
     *
     * This event is fired when the table gets an update and all existing tokens must be selected in the table.
     *
     * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
     */
    attachUpdateSelection(
      /**
       * The function to be called when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
       */
      oListener?: object
    ): this;
    /**
     * Destroys the filterBar in the aggregation {@link #getFilterBar filterBar}.
     */
    destroyFilterBar(): this;
    /**
     * @SINCE 1.24
     *
     * Detaches event handler `fnFunction` from the {@link #event:cancel cancel} event of this `sap.zen.dsh.ValueHelpDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachCancel(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.24
     *
     * Detaches event handler `fnFunction` from the {@link #event:ok ok} event of this `sap.zen.dsh.ValueHelpDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachOk(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.32
     *
     * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
     * this `sap.zen.dsh.ValueHelpDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachSelectionChange(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.32
     *
     * Detaches event handler `fnFunction` from the {@link #event:tokenRemove tokenRemove} event of this `sap.zen.dsh.ValueHelpDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachTokenRemove(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.32
     *
     * Detaches event handler `fnFunction` from the {@link #event:updateSelection updateSelection} event of
     * this `sap.zen.dsh.ValueHelpDialog`.
     *
     * The passed function and listener object must match the ones used for event registration.
     */
    detachUpdateSelection(
      /**
       * The function to be called, when the event occurs
       */
      fnFunction: (p1: Event) => void,
      /**
       * Context object on which the given function had to be called
       */
      oListener?: object
    ): this;
    /**
     * @SINCE 1.24
     *
     * Fires event {@link #event:cancel cancel} to attached listeners.
     */
    fireCancel(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: object
    ): this;
    /**
     * @SINCE 1.24
     *
     * Fires event {@link #event:ok ok} to attached listeners.
     */
    fireOk(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The array of tokens created or modified on the ValueHelpDialog.
         */
        tokens?: Token[];
      }
    ): this;
    /**
     * @SINCE 1.32
     *
     * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
     */
    fireSelectionChange(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The RowSelectionChange event parameter from the hosted table that contains the selected items.
         */
        tableSelectionParams?: object;
        /**
         * Returns an array of objects which represents all selected row tokens. The object contains the token key,
         * the row object data from the model, and the information if the token is selected. ` [{sKey, oRow, bSelect},
         * ...] `
         */
        updateTokens?: object[];
        /**
         * Can be set to `true` to execute the default behaviour of the ValueHelpDialog.
         */
        useDefault?: boolean;
      }
    ): this;
    /**
     * @SINCE 1.32
     *
     * Fires event {@link #event:tokenRemove tokenRemove} to attached listeners.
     */
    fireTokenRemove(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The array of token keys that has been removed.
         */
        tokenKeys?: string[];
        /**
         * Can be set to true to execute the default behaviour of ValueHelpDialog.
         */
        useDefault?: boolean;
      }
    ): this;
    /**
     * @SINCE 1.32
     *
     * Fires event {@link #event:updateSelection updateSelection} to attached listeners.
     */
    fireUpdateSelection(
      /**
       * Parameters to pass along with the event
       */
      mParameters?: {
        /**
         * The array of existing token keys for which the selection in the table has to be updated.
         */
        tokenKeys?: string[];
        /**
         * Can be set to true to execute the default behavior of ValueHelpDialog.
         */
        useDefault?: boolean;
      }
    ): this;
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getBasicSearchText basicSearchText}.
     *
     * Defines the value for the basic search field. The value is set into the basic search field of the filter
     * bar used.
     *
     * Default value is `empty string`.
     */
    getBasicSearchText(): string;
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getDescriptionKey descriptionKey}.
     *
     * Defines the key of the column used for the token text.
     *
     * Default value is `empty string`.
     */
    getDescriptionKey(): string;
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getDisplayFormat displayFormat}.
     *
     * Represents the display format of the range values. With the `displayFormat` value UpperCase, the entered
     * value of the range (condition) is converted to uppercase letters.
     *
     * Default value is `empty string`.
     */
    getDisplayFormat(): string;
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getFilterMode filterMode}.
     *
     * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
     *
     * Default value is `false`.
     */
    getFilterMode(): boolean;
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getKey key}.
     *
     * Defines the key of the column used for the internal key handling. The value of the column is used for
     * the token key and also to identify the row in the table.
     *
     * Default value is `empty string`.
     */
    getKey(): string;
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getKeys keys}.
     *
     * Defines the list of additional keys of the column used for the internal key handling.
     */
    getKeys(): string[];
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getMaxExcludeRanges maxExcludeRanges}.
     *
     * Defines the maximum number of exclude ranges.
     *
     * Default value is `"-1"`.
     */
    getMaxExcludeRanges(): string;
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getMaxIncludeRanges maxIncludeRanges}.
     *
     * Defines the maximum number of include ranges.
     *
     * Default value is `"-1"`.
     */
    getMaxIncludeRanges(): string;
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getSupportMultiselect supportMultiselect}.
     *
     * Enables multi-selection in the table used.
     *
     * Default value is `true`.
     */
    getSupportMultiselect(): boolean;
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getSupportRanges supportRanges}.
     *
     * Enables the ranges (conditions) feature in the dialog.
     *
     * Default value is `false`.
     */
    getSupportRanges(): boolean;
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getSupportRangesOnly supportRangesOnly}.
     *
     * If this property is set to `true`, the value help dialog only supports the ranges (conditions) feature.
     *
     * Default value is `false`.
     */
    getSupportRangesOnly(): boolean;
    /**
     * @SINCE 1.28
     *
     * getTable Gives access to the internal table instance.
     */
    getTable(): object;
    /**
     * @SINCE 1.24
     *
     * Gets current value of property {@link #getTokenDisplayBehaviour tokenDisplayBehaviour}.
     *
     * Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid `sap.ui.comp.smartfilterbar.DisplayBehaviour`
     * values.
     *
     * Default value is `empty string`.
     */
    getTokenDisplayBehaviour(): string;
    /**
     * @SINCE 1.24
     *
     * Sets a new value for property {@link #getDescriptionKey descriptionKey}.
     *
     * Defines the key of the column used for the token text.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setDescriptionKey(
      /**
       * New value for property `descriptionKey`
       */
      sDescriptionKey?: string
    ): this;
    /**
     * @SINCE 1.24
     *
     * Sets a new value for property {@link #getDisplayFormat displayFormat}.
     *
     * Represents the display format of the range values. With the `displayFormat` value UpperCase, the entered
     * value of the range (condition) is converted to uppercase letters.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setDisplayFormat(
      /**
       * New value for property `displayFormat`
       */
      sDisplayFormat?: string
    ): this;
    /**
     * @SINCE 1.24
     *
     * setExcludeRangeOperations Sets the array for the supported exclude range operations.
     */
    setExcludeRangeOperations(
      /**
       * An array of range operations
       */
      aOperation: Array<
        ValueHelpRangeOperation | keyof typeof ValueHelpRangeOperation
      >,
      /**
       * the type for which the operations are defined
       */
      sType: string
    ): void;
    /**
     * @SINCE 1.24
     *
     * Sets a new value for property {@link #getFilterMode filterMode}.
     *
     * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `false`.
     */
    setFilterMode(
      /**
       * New value for property `filterMode`
       */
      bFilterMode?: boolean
    ): this;
    /**
     * @SINCE 1.24
     *
     * setIncludeRangeOperations Sets the array for the supported include range operations.
     */
    setIncludeRangeOperations(
      /**
       * An array of range operations
       */
      aOperation: Array<
        ValueHelpRangeOperation | keyof typeof ValueHelpRangeOperation
      >,
      /**
       * the type for which the operations are defined
       */
      sType: string
    ): void;
    /**
     * @SINCE 1.24
     *
     * Sets a new value for property {@link #getKey key}.
     *
     * Defines the key of the column used for the internal key handling. The value of the column is used for
     * the token key and also to identify the row in the table.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setKey(
      /**
       * New value for property `key`
       */
      sKey?: string
    ): this;
    /**
     * @SINCE 1.24
     *
     * Sets a new value for property {@link #getKeys keys}.
     *
     * Defines the list of additional keys of the column used for the internal key handling.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     */
    setKeys(
      /**
       * New value for property `keys`
       */
      sKeys?: string[]
    ): this;
    /**
     * @SINCE 1.24
     *
     * Sets a new value for property {@link #getMaxExcludeRanges maxExcludeRanges}.
     *
     * Defines the maximum number of exclude ranges.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"-1"`.
     */
    setMaxExcludeRanges(
      /**
       * New value for property `maxExcludeRanges`
       */
      sMaxExcludeRanges?: string
    ): this;
    /**
     * @SINCE 1.24
     *
     * Sets a new value for property {@link #getMaxIncludeRanges maxIncludeRanges}.
     *
     * Defines the maximum number of include ranges.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `"-1"`.
     */
    setMaxIncludeRanges(
      /**
       * New value for property `maxIncludeRanges`
       */
      sMaxIncludeRanges?: string
    ): this;
    /**
     * @SINCE 1.24
     *
     * setRangeKeyFields Sets a RangeKeyFields array. This method allows you to specify the KeyFields for the
     * ranges. You can set an array of objects with Key and Label properties to define the key fields.
     */
    setRangeKeyFields(
      /**
       * An array of range KeyFields `[{key: "CompanyCode", label: "ID"}, {key:"CompanyName", label : "Name"}]`
       */
      aRangeKeyFields: object[]
    ): void;
    /**
     * @SINCE 1.32
     *
     * setTable Sets the table used in the value help dialog. If not used, the dialog creates a sap.ui.table.Table
     * or sap.m.Table instance internally.
     */
    setTable(
      /**
       * The used table control instance
       */
      oTable: object
    ): void;
    /**
     * @SINCE 1.24
     *
     * Sets a new value for property {@link #getTokenDisplayBehaviour tokenDisplayBehaviour}.
     *
     * Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid `sap.ui.comp.smartfilterbar.DisplayBehaviour`
     * values.
     *
     * When called with a value of `null` or `undefined`, the default value of the property will be restored.
     *
     * Default value is `empty string`.
     */
    setTokenDisplayBehaviour(
      /**
       * New value for property `tokenDisplayBehaviour`
       */
      sTokenDisplayBehaviour?: string
    ): this;
    /**
     * @SINCE 1.24
     *
     * Sets the array of tokens. The `sap.m.Tokens` are added to the dialog tokenizer Selected Items or Excluded
     * Items. Normal tokens are added to the Selected Items tokenizer only and are selected in the table. `
     * new sap.m.Token({key: "0001", text:"SAP A.G. (0001)"}); ` Tokens with the extra data with value 'range'
     * are handled as range tokens or exclude range tokens. ` new sap.m.Token({key: "i1", text: "ID: a..z"}).data("range",
     * { "exclude": false, "operation": sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT, "keyField":
     * "CompanyCode", "value1": "a", "value2": "z"}); ` The selected items or range tokens are returned in the
     * event parameters of the Ok event.
     */
    setTokens(
      /**
       * An array of token controls
       */
      aTokens: Token[]
    ): void;
    /**
     * @SINCE 1.24
     *
     * Update the Control
     *
     * Updates the selection of rows in the table. This function must be called after a first binding or binding
     * update of the table. It will set a table row as selected if a token for this row exists.
     */
    update(): void;
  }

  export interface $ValueHelpDialogSettings extends $DialogSettings {
    /**
     * @SINCE 1.24
     *
     * Defines the value for the basic search field. The value is set into the basic search field of the filter
     * bar used.
     */
    basicSearchText?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.24
     *
     * Enables multi-selection in the table used.
     */
    supportMultiselect?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.24
     *
     * Enables the ranges (conditions) feature in the dialog.
     */
    supportRanges?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.24
     *
     * If this property is set to `true`, the value help dialog only supports the ranges (conditions) feature.
     */
    supportRangesOnly?: boolean | PropertyBindingInfo;

    /**
     * @SINCE 1.24
     *
     * Defines the key of the column used for the internal key handling. The value of the column is used for
     * the token key and also to identify the row in the table.
     */
    key?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.24
     *
     * Defines the list of additional keys of the column used for the internal key handling.
     */
    keys?: string[] | PropertyBindingInfo;

    /**
     * @SINCE 1.24
     *
     * Defines the key of the column used for the token text.
     */
    descriptionKey?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.24
     *
     * Defines the maximum number of include ranges.
     */
    maxIncludeRanges?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.24
     *
     * Defines the maximum number of exclude ranges.
     */
    maxExcludeRanges?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.24
     *
     * Represents the display format of the range values. With the `displayFormat` value UpperCase, the entered
     * value of the range (condition) is converted to uppercase letters.
     */
    displayFormat?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.24
     *
     * Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid `sap.ui.comp.smartfilterbar.DisplayBehaviour`
     * values.
     */
    tokenDisplayBehaviour?: string | PropertyBindingInfo;

    /**
     * @SINCE 1.24
     *
     * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
     */
    filterMode?: boolean | PropertyBindingInfo;

    /**
     * Allows you to add a {@link sap.ui.comp.filterbar.FilterBar FilterBar} or {@link sap.ui.comp.smartfilterbar.SmartFilterBar
     * SmartFilterBar} control to the value help dialog.
     */
    filterBar?: Control;

    /**
     * @SINCE 1.24
     *
     * This event is fired when the OK button is pressed.
     */
    ok?: (oEvent: Event) => void;

    /**
     * @SINCE 1.24
     *
     * This event is fired when the Cancel button is pressed.
     */
    cancel?: (oEvent: Event) => void;

    /**
     * @SINCE 1.32
     *
     * This event is fired when the user selects an item in the items table.
     *
     * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
     */
    selectionChange?: (oEvent: Event) => void;

    /**
     * @SINCE 1.32
     *
     * This event is fired when the user removes one or multiple existing token(s) from the dialog.
     *
     * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
     */
    tokenRemove?: (oEvent: Event) => void;

    /**
     * @SINCE 1.32
     *
     * This event is fired when the table gets an update and all existing tokens must be selected in the table.
     *
     * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
     */
    updateSelection?: (oEvent: Event) => void;
  }
}

declare module "sap/zen/dsh/ValueHelpRangeOperation" {
  /**
   * @deprecated (since 1.89)
   * @EXPERIMENTAL
   *
   * Sort Type
   */
  enum ValueHelpRangeOperation {
    /**
     * The Between operation for the ranges.
     */
    BT = "BT",
    /**
     * The Contains operation for the ranges.
     */
    Contains = "Contains",
    /**
     * The EndsWith operation for the ranges.
     */
    EndsWith = "EndsWith",
    /**
     * The Equals operation for the ranges.
     */
    EQ = "EQ",
    /**
     * The Between or equals operation for the ranges.
     */
    GE = "GE",
    /**
     * The Greater operation for the ranges.
     */
    GT = "GT",
    /**
     * The Less or equals operation for the ranges.
     */
    LE = "LE",
    /**
     * The Less operation for the ranges.
     */
    LT = "LT",
    /**
     * The StartsWith operation for the ranges.
     */
    StartsWith = "StartsWith",
  }
  export default ValueHelpRangeOperation;
}

declare module "sap/zen/dsh/ValueType" {
  /**
   * Sort Type
   */
  enum ValueType {
    /**
     * Amount
     */
    Amount = "Amount",
    /**
     * Array
     */
    Array = "Array",
    /**
     * Boolean
     */
    Boolean = "Boolean",
    /**
     * Byte Array
     */
    ByteArray = "ByteArray",
    /**
     * Calendar Date
     */
    CalendarDate = "CalendarDate",
    /**
     * Calendar Day
     */
    CalendarDay = "CalendarDay",
    /**
     * Character
     */
    Char = "Char",
    /**
     * Currency
     */
    Cuky = "Cuky",
    /**
     * Current Member
     */
    CurrentMember = "CurrentMember",
    /**
     * Date
     */
    Date = "Date",
    /**
     * Date Time
     */
    DateTime = "DateTime",
    /**
     * Decimal Float
     */
    DecimalFloat = "DecimalFloat",
    /**
     * Dimension Member
     */
    DimensionMember = "DimensionMember",
    /**
     * Double
     */
    Double = "Double",
    /**
     * Enum Constant
     */
    EnumConstant = "EnumConstant",
    /**
     * Integer
     */
    Integer = "Integer",
    /**
     * Key Value
     */
    KeyValue = "KeyValue",
    /**
     * Language
     */
    Language = "Language",
    /**
     * Line String
     */
    LineString = "LineString",
    /**
     * List
     */
    List = "List",
    /**
     * Long
     */
    Long = "Long",
    /**
     * Lower Case String
     */
    LowerCaseString = "LowerCaseString",
    /**
     * Multi Line String
     */
    MultiLineString = "MultiLineString",
    /**
     * Multi Point
     */
    MultiPoint = "MultiPoint",
    /**
     * Multi Polygon
     */
    MultiPolygon = "MultiPolygon",
    /**
     * Number
     */
    Number = "Number",
    /**
     * Numeric Character
     */
    Numc = "Numc",
    /**
     * Object
     */
    Object = "Object",
    /**
     * Option List
     */
    OptionList = "OptionList",
    /**
     * Option Value
     */
    OptionValue = "OptionValue",
    /**
     * Percent
     */
    Percent = "Percent",
    /**
     * Point
     */
    Point = "Point",
    /**
     * Polygon
     */
    Polygon = "Polygon",
    /**
     * Price
     */
    Price = "Price",
    /**
     * Properties
     */
    Properties = "Properties",
    /**
     * Quantitiy
     */
    Quantity = "Quantity",
    /**
     * String
     */
    String = "String",
    /**
     * Structure
     */
    Structure = "Structure",
    /**
     * Structure List
     */
    StructureList = "StructureList",
    /**
     * Time
     */
    Time = "Time",
    /**
     * Time Span
     */
    TimeSpan = "TimeSpan",
    /**
     * Color
     */
    UiColor = "UiColor",

    UiConstant = "UiConstant",

    UiControl = "UiControl",

    UiPosition = "UiPosition",

    UiSize = "UiSize",

    UiUnitValue = "UiUnitValue",
    /**
     * Unit
     */
    Unit = "Unit",

    Unsupported = "Unsupported",

    UpperCaseString = "UpperCaseString",
    /**
     * URI
     */
    Uri = "Uri",

    Variable = "Variable",
  }
  export default ValueType;
}

declare module "sap/zen/dsh/widgets/SDKModel" {
  import Model from "sap/ui/model/Model";

  import Metadata from "sap/ui/base/Metadata";

  /**
   * @deprecated (since 1.89.0)
   *
   * Model implementation for JSON format
   */
  export default class SDKModel extends Model {
    /**
     * Constructor for a new SDKModel.
     */
    constructor(
      /**
       * either the URL where to load the JSON from or a JS object
       */
      oData: object
    );

    /**
     * Creates a new subclass of class sap.zen.dsh.widgets.SDKModel with name `sClassName` and enriches it with
     * the information contained in `oClassInfo`.
     *
     * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
     */
    static extend<T extends Record<string, unknown>>(
      /**
       * Name of the class being created
       */
      sClassName: string,
      /**
       * Object literal with information about the class
       */
      oClassInfo?: sap.ClassInfo<T, SDKModel>,
      /**
       * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
       * used by this class
       */
      FNMetaImpl?: Function
    ): Function;
    /**
     * Returns a metadata object for class sap.zen.dsh.widgets.SDKModel.
     */
    static getMetadata(): Metadata;
  }
}

declare module "sap/zen/dsh/WidgetType" {
  /**
   * Widget Type of an InACard
   */
  enum WidgetType {
    /**
     * Bar Chart
     */
    bar = "bar",
    /**
     * Column Chart
     */
    colum = "column",
    /**
     * Donut Chart
     */
    donut = "donut",
    /**
     * Line Chart
     */
    line = "line",
    /**
     * Pie Chart
     */
    pie = "pie",
    /**
     * Pivot Table
     */
    pivot = "pivot",
  }
  export default WidgetType;
}

declare module "sap/zen/dsh/dialogs/Component" {
  import { $UIComponentSettings } from "sap/ui/core/UIComponent";

  export interface $dialogsSettings extends $UIComponentSettings {}
}

declare namespace sap {
  namespace zen {
    /**
     * Design Studio Runtime Library. Intended only to be used within S/4 HANA Fiori applications.
     */
    namespace dsh {
      class dialogs /* was: sap.ui.core.UIComponent */ extends Object {
        /**
         * Dialogs for navigating the Data of a `sap.zen.dsh.olap.DataProvider`
         *
         * This `UIComponent` provides all the dialogs for navigating the data provided via a `DataProvider`. Don't
         * use the this component directly, but call the corresponding methods of the `DataProvider` **List of dialogs**
         *
         * 	 - `Condition` create a condition (aka result set filter)
         * 	 - `ContextMenu` create a context menu for a `Cell` in the cells collection of a `DataProvider`
         * 	 - `Exception` create an exception (aka conditional format)
         * 	 - `Formula` create a formula
         * 	 - `MessagePopup` display a list of Messages
         * 	 - `NewLines` Enter new lines in tabluar form
         * 	 - `AxisLayoutDialog` display/change settings of the query view
         * 	 - `Restriciton`create a restricted measure
         * 	 - `SelectPlanningFunction` Select a Data Function
         * 	 - `Selector` Define and Display the Dynamic filter (of a dimension)
         * 	 - `Spot`display information on a geographic spot
         */
        constructor();
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/zen/dsh/AnalyticGrid": undefined;

    "sap/zen/dsh/Axis": undefined;

    "sap/zen/dsh/ComparisonOperator": undefined;

    "sap/zen/dsh/DataSourceType": undefined;

    "sap/zen/dsh/dialogs/Component": undefined;

    "sap/zen/dsh/DimensionType": undefined;

    "sap/zen/dsh/DisplayType": undefined;

    "sap/zen/dsh/Dsh": undefined;

    "sap/zen/dsh/InACard/Component": undefined;

    "sap/zen/dsh/InATile": undefined;

    "sap/zen/dsh/library": undefined;

    "sap/zen/dsh/MemberType": undefined;

    "sap/zen/dsh/NavigationCommandType": undefined;

    "sap/zen/dsh/olap/DataProvider": undefined;

    "sap/zen/dsh/olap/OlapListBinding": undefined;

    "sap/zen/dsh/olap/OlapListGridBinding": undefined;

    "sap/zen/dsh/olap/OlapModel": undefined;

    "sap/zen/dsh/olap/OlapPropertyBinding": undefined;

    "sap/zen/dsh/PivotTable": undefined;

    "sap/zen/dsh/ProtocolType": undefined;

    "sap/zen/dsh/rsrt/Component": undefined;

    "sap/zen/dsh/SemanticRole": undefined;

    "sap/zen/dsh/SortDirection": undefined;

    "sap/zen/dsh/SortType": undefined;

    "sap/zen/dsh/SystemType": undefined;

    "sap/zen/dsh/ValueHelpRangeOperation": undefined;

    "sap/zen/dsh/ValueType": undefined;

    "sap/zen/dsh/widgets/SDKModel": undefined;

    "sap/zen/dsh/widgets/ValueHelpDialog": undefined;

    "sap/zen/dsh/WidgetType": undefined;
  }
}
