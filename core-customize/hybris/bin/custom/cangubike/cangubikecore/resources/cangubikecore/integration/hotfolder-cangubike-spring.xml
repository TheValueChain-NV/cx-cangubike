<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration
		http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

    <!-- 1) add mapping so that the file is passed onto your channel when it is downloaded -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="hotfolderInboundFileChannelMappings"/>
        <property name="targetMethod" value="put"/>
        <property name="arguments">
            <list>
                <bean class="java.util.regex.Pattern" factory-method="compile">
                    <constructor-arg value="^(product|images|bestseller|reference_product)-\\d+.*"/>
                </bean>
                <ref bean="cangubikeProductBatchFilesCangubikeProc"/>
            </list>
        </property>
    </bean>
    <!--<bean id="baseDirectoryCangubike" class="java.lang.String">
        <constructor-arg value="#{baseDirectory}/${tenantId}/${cloud.hotfolder.default.mapping.root.dir}" />
    </bean>-->

    <int:channel id="cangubikeProductBatchFilesCangubikeProc"/>
    <int:service-activator
            input-channel="cangubikeProductBatchFilesCangubikeProc"
            output-channel="batchFilesHeaderInit"
            ref="cloudHotFolderDefaultHeaderSetupTask"
            method="execute"/>

    <bean id="cloudHotFolderDefaultHeaderSetupTask"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.task.HeaderSetupTask">
        <property name="catalog" value="${cloud.hotfolder.default.mapping.header.catalog}"/>
        <property name="net" value="false"/>
        <property name="storeBaseDirectory" value="${azure.hotfolder.storage.container.hotfolder}"/>
    </bean>
    <!-- Transformer converters mappings -->
    <bean id="cangubikeBatchMediaConverterMapping"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
          p:mapping="images"
          p:converter-ref="cangubikeBatchMediaConverter"/>

    <bean id="cangubikeBatchMediaContainerConverterMapping"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
          p:mapping="images"
          p:converter-ref="cangubikeBatchMediaContainerConverter"/>

    <bean id="cangubikeBatchProductConverterMapping"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
          p:mapping="images"
          p:converter-ref="cangubikeBatchMediaProductConverter"/>

    <bean id="defaultImpexProductHeader" class="java.lang.String">
        <constructor-arg>
            <value>
                # ImpEx for importing data into $CATALOG$
                $catalog = cangubikeProductCatalog
                $catalogVersion = catalogversion(catalog(id[default=$catalog]),version[default='Online'])[unique=true]
                $approved = approvalstatus(code)[default='approved']
                $classCatalogVersion = catalogversion(catalog(id[default='OlfClassification']),version[default='1.0'])[unique=true,default='OlfClassification:1.0']
                $superCategories = superCategories(code,$classCatalogVersion)
                $clAttrModifiers = system='Cangubikelassification',version='1.0',translator=de.hybris.platform.catalog.jalo.classification.impex.ClassificationAttributeTranslator,lang=fr
            </value>
        </constructor-arg>
    </bean>
    <bean abstract="true" id="abstractDefaultImpexConverter"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
        <property name="enableEscaping" value="true"/>
    </bean>

    <!-- Converters -->
    <bean id="cangubikeBatchMediaConverter" parent="abstractDefaultImpexConverter">
        <property name="header">
            <value>
                #{defaultImpexProductHeader}

                INSERT_UPDATE Media;mediaFormat(qualifier);code[unique=true];mime[default='image/jpeg'];$catalogVersion;internalURL
            </value>
        </property>
        <property name="impexRow">
            <value>;1200Wx1200H;/1200Wx1200H/{+0}-{1};;;{3}
                ;515Wx515H;/515Wx515H/{+0}-{1};;;{4}
                ;300Wx300H;/300Wx300H/{+0}-{1};;;{5}
                ;96Wx96H;/96Wx96H/{+0}-{1};;;{6}
                ;65Wx65H;/65Wx65H/{+0}-{1};;;{7}
                ;30Wx30H;/30Wx30H/{+0}-{1};;;{8}
            </value>
        </property>
    </bean>
    <bean id="cangubikeBatchMediaContainerConverter" parent="abstractDefaultImpexConverter">
        <property name="header">
            <value>#{defaultImpexProductHeader}
                # Import media container
                INSERT_UPDATE MediaContainer;qualifier[unique=true];medias(code, $catalogVersion);$catalogVersion
            </value>
        </property>
        <property name="impexRow">
            <value>;{0}-{1};/1200Wx1200H/{0}-{1},/515Wx515H/{0}-{1},/300Wx300H/{0}-{1},/96Wx96H/{0}-{1},/65Wx65H/{0}-{1},/30Wx30H/{0}-{1};</value>
        </property>
    </bean>
    <bean id="cangubikeBatchMediaProductConverter" parent="abstractDefaultImpexConverter">
        <property name="header">
            <value>#{defaultImpexProductHeader}
                $thumbnail=thumbnail(code, $catalogVersion)
                $thumbnails=thumbnails(code, $catalogVersion)
                $picture=picture(code, $catalogVersion)
                $detail=detail(code, $catalogVersion)
                $normal=normal(code, $catalogVersion)
                $others=others(code, $catalogVersion)
                $galleryImages=galleryImages(qualifier, $catalogVersion)
                # Import product media
                UPDATE Product;code[unique=true];$picture;$thumbnail;$detail;$others;$normal;$thumbnails;$galleryImages;$catalogVersion
            </value>
        </property>
        <property name="impexRow">
            <value>;{+0};/300Wx300H/{0}-1;/96Wx96H/{0}-1;/1200Wx1200H/{0}-1;/515Wx515H/{0}-1,/96Wx96H/{0}-1,/30Wx30H/{0}-1;/300Wx300H/{0}-1;/96Wx96H/{0}-1;{0}-1;</value>
        </property>
    </bean>

    <int:inbound-channel-adapter
            id="CangubikeProductAzureInboundChannelAdapter"
            auto-startup="false"
            role="${cloud.hotfolder.storage.services.role}"
            phase="50"
            ref="CangubikeProductAzureBlobSynchronizingMessageSource"
            channel="cloudHotfolderInboundFileHeaderEnricherChannel">
        <int:poller fixed-rate="${azure.hotfolder.storage.polling.fixed.rate}"
                    task-executor="cangubikeAzureChannelAdapterTaskExecutor"
                    max-messages-per-poll="${azure.hotfolder.storage.polling.fetch.batch-size}">
            <int:transactional synchronization-factory="CangubikeProductAzureSynchronizationFactory"
                               transaction-manager="azurePseudoTxManager"/>
        </int:poller>
    </int:inbound-channel-adapter>

    <bean id="cangubikeAzureChannelAdapterTaskExecutor"
          class="de.hybris.platform.cloud.commons.scheduling.HybrisAwareThreadPoolTaskExecutor">
        <property name="waitForTasksToCompleteOnShutdown" value="true"/>
        <property name="threadNamePrefix" value="AzureIntegrationTaskExecutorThread-${tenantId}-"/>
        <property name="threadGroupName" value="AzureIntegrationTaskExecutor-${tenantId}"/>
        <property name="corePoolSize" value="${azure.hotfolder.storage.polling.core-pool-size}"/>
        <property name="maxPoolSize" value="${azure.hotfolder.storage.polling.max-pool-size}"/>
        <property name="queueCapacity" value="-1"/>
        <property name="keepAliveSeconds" value="60"/>
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
        <property name="role" value="integration"/>
        <property name="autoStartup" value="false"/>
        <property name="phase" value="10"/>
        <property name="awaitTerminationSeconds" value="60"/>
    </bean>
    <bean id="CangubikeProductAzureBlobInboundSynchronizer"
          class="de.hybris.platform.cloud.azure.hotfolder.remote.inbound.AzureBlobInboundSynchronizer">
        <constructor-arg name="sessionFactory" ref="azureBlobSessionFactory"/>
        <property name="remoteDirectory" value="#{azureHotfolderRemotePath}/product"/>
        <property name="moveToRemoteDirectory" value="#{azureHotfolderRemotePath}/product/processing"/>
        <property name="deleteRemoteFiles" value="${azure.hotfolder.storage.delete.remote.files}"/>
        <property name="preserveTimestamp" value="true"/>
        <property name="filter" ref="azureHotfolderFileFilter"/>
        <property name="comparator" ref="azureHotFolderFileComparator"/>
    </bean>

    <int:transaction-synchronization-factory id="CangubikeProductAzureSynchronizationFactory">
        <int:after-commit channel="CangubikeProductAzureArchiveOutboundChannelAdapter"/>
        <int:after-rollback channel="CangubikeProductAzureErrorOutboundChannelAdapter"/>
    </int:transaction-synchronization-factory>

    <int:outbound-channel-adapter id="CangubikeProductAzureArchiveOutboundChannelAdapter"
                                  ref="CangubikeProductAzureArchiveMessageHandler"/>
    <int:outbound-channel-adapter id="CangubikeProductAzureErrorOutboundChannelAdapter"
                                  ref="CangubikeProductAzureErrorMessageHandler"/>

    <bean id="CangubikeProductAzureArchiveMessageHandler" parent="abstractAzureMoveMessageHandler">
        <property name="remoteDirectory" value="#{azureHotfolderRemotePath}/product/archive"/>
    </bean>
    <bean id="CangubikeProductAzureErrorMessageHandler" parent="abstractAzureMoveMessageHandler">
        <property name="remoteDirectory" value="#{azureHotfolderRemotePath}/product/error"/>
    </bean>
    <bean id="CangubikeProductAzureBlobSynchronizingMessageSource"
          class="de.hybris.platform.cloud.azure.hotfolder.remote.inbound.AzureBlobSynchronizingMessageSource">
        <constructor-arg name="synchronizer" ref="CangubikeProductAzureBlobInboundSynchronizer"/>
        <property name="autoCreateLocalDirectory" value="true"/>
        <property name="localDirectory" value="#{azureHotfolderLocalDirectoryBase}/"/>
        <property name="maxFetchSize" value="${azure.hotfolder.storage.polling.fetch.batch-size}"/>
    </bean>

    <bean id="batchTransformerTask"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.task.ImpexTransformerTask"
          init-method="initConvertersMap">
        <property name="fieldSeparator" value=";"/>
        <property name="encoding" value="UTF-8"/>
        <property name="linesToSkip" value="0"/>
        <property name="cleanupHelper" ref="cleanupHelper"/>
    </bean>

    <bean id="azureHotfolderLocalDirectoryBase" class="java.lang.String">
        <constructor-arg name="value" value="${azure.hotfolder.local.sync.basefolder}"/>
    </bean>
    <bean id="azureHotFolderBlobSession"
          class="de.hybris.platform.cloud.azure.hotfolder.remote.session.AzureBlobSession">
        <constructor-arg name="client" ref="azureHotFolderBlobClient"/>
        <constructor-arg name="containerName" value="${azure.hotfolder.storage.container.name}"/>
        <constructor-arg name="createContainerIfNotExists" value="${azure.hotfolder.storage.container.create}"/>
    </bean>

    <bean id="azurePseudoTxManager"
          class="org.springframework.integration.transaction.PseudoTransactionManager"/>
    <bean id="hotfolderInboundFileChannelMappings" class="java.lang.Object"/>

</beans>

